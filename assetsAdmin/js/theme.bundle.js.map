{"version":3,"file":"theme.bundle.js","sources":["theme.bundle.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nvar _countup = require(\"countup.js\");\n\n//Aos animation + Countup on aos-init\nvar AOS = require('aos');\n\nAOS.init({\n  startEvent: 'load',\n  duration: 750,\n  delay: 50,\n  offset: 60,\n  once: true\n});\n\nfunction countIt(el) {\n  var Num = el.dataset.to ? +el.dataset.to : null,\n      n = el.dataset.countup ? JSON.parse(el.dataset.countup) : {};\n  new _countup.CountUp(el, Num, n).start();\n}\n\n;\ndocument.querySelectorAll(\"[data-countup]\").forEach(function (el) {\n  \"countup:in\" !== el.getAttribute(\"data-aos-id\") && countIt(el);\n}), document.addEventListener(\"aos:in:countup:in\", function (el) {\n  (el.detail instanceof Element ? [el.detail] : document.querySelectorAll('.aos-animate[data-aos-id=\"countup:in\"]')).forEach(function (el) {\n    countIt(el);\n  });\n}); //Pricing countup\n\nvar priceCountUp = document.querySelectorAll('[data-as-toggle=\"price\"]');\npriceCountUp.forEach(function (el) {\n  el.addEventListener(\"change\", function (el) {\n    var t = el.target,\n        n = t.checked,\n        o = t.dataset.asTarget;\n    document.querySelectorAll(o).forEach(function (el) {\n      var t = el.dataset.asAnnual,\n          o = el.dataset.asMonthly,\n          a = el.dataset.options ? JSON.parse(el.dataset.options) : {};\n      a.startVal = n ? t : o, a.duration = a.duration ? a.duration : 1;\n      (n ? new _countup.CountUp(el, o, a) : new _countup.CountUp(el, t, a)).start();\n    });\n  });\n}); //ProgressBar animation\n\ndocument.querySelectorAll(\".progress-bar\").forEach(function (el) {\n  \"progress:in\" !== el.getAttribute(\"data-aos-id\");\n});\ndocument.addEventListener(\"aos:in:progress:in\", function (el) {\n  (el.detail instanceof Element ? [el.detail] : document.querySelectorAll('.aos-animate[data-aos-id=\"progress:in\"]')).forEach(function (el) {\n    el.style.width = el.getAttribute(['aria-valuenow']) + '%';\n    el.style.transitionDelay = \".4s\";\n    el.style.transitionDuration = \".6s\";\n  });\n});\n\n},{\"aos\":10,\"countup.js\":13}],2:[function(require,module,exports){\n\"use strict\";\n\nvar bootstrap = require('bootstrap/dist/js/bootstrap.bundle');\n\nvar toastElList = [].slice.call(document.querySelectorAll('.toast'));\nvar toastList = toastElList.map(function (toastEl) {\n  return new bootstrap.Toast(toastEl);\n});\nvar tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\nvar tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\n  return new bootstrap.Tooltip(tooltipTriggerEl);\n});\nvar popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"popover\"]'));\nvar popoverList = popoverTriggerList.map(function (popoverTriggerEl) {\n  return new bootstrap.Popover(popoverTriggerEl);\n}); //collapse for sidebar\n\ndocument.querySelectorAll(\".collapse-group .collapse\").forEach(function (e) {\n  var t = new bootstrap.Collapse(e, {\n    toggle: !1\n  });\n  e.addEventListener(\"show.bs.collapse\", function (a) {\n    a.stopPropagation();\n    e.parentElement.closest(\".collapse\").querySelectorAll(\".collapse\").forEach(function (e) {\n      var a = bootstrap.Collapse.getInstance(e);\n      a !== t && a.hide();\n    });\n  }), e.addEventListener(\"hide.bs.collapse\", function (t) {\n    t.stopPropagation();\n    e.querySelectorAll(\".collapse\").forEach(function (e) {\n      bootstrap.Collapse.getInstance(e).hide();\n    });\n  });\n});\n\n},{\"bootstrap/dist/js/bootstrap.bundle\":11}],3:[function(require,module,exports){\n\"use strict\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar choices = require('choices.js');\n\nvar el = document.querySelectorAll(\"[data-choices]\");\nel.forEach(function (e) {\n  var t = _objectSpread(_objectSpread({}, e.dataset.choices ? JSON.parse(e.dataset.choices) : {}), {\n    classNames: {\n      containerInner: e.className,\n      input: \"form-control\",\n      inputCloned: \"form-control-xs\",\n      listDropdown: \"dropdown-menu\",\n      itemChoice: \"dropdown-item\",\n      activeState: \"show\",\n      selectedState: \"active\"\n    }\n  });\n\n  new choices(e, t);\n});\n\n},{\"choices.js\":12}],4:[function(require,module,exports){\n\"use strict\";\n\nvar _jquery = _interopRequireDefault(require(\"jquery\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n// jquery-global.js\nwindow.jQuery = _jquery[\"default\"];\nwindow.$ = _jquery[\"default\"];\n\n},{\"jquery\":14}],5:[function(require,module,exports){\n\"use strict\";\n\n//\n//Mode switcher jquery\n//\n(function () {\n  $(\".mode_dark\").on(\"click\", function () {\n    $(\"#switchThemeStyle\").attr(\"href\", \"assets/css/style.dark.min.css\");\n    return false;\n  });\n  $(\".mode_light\").on(\"click\", function () {\n    $(\"#switchThemeStyle\").attr(\"href\", \"assets/css/style.min.css\");\n    return false;\n  });\n  $(\".switch_modes a\").on(\"click\", function (e) {\n    e.preventDefault();\n    $(this).parent().parent().find(\"a\").removeClass(\"active\");\n    $(this).addClass(\"active\");\n  });\n})();\n\n},{}],6:[function(require,module,exports){\n\"use strict\";\n\n//sidebar layout style\n$(\".sidebar-trigger\").on(\"click\", function () {\n  $('body').toggleClass(\"page-sidebar-mini\");\n  $(this).toggleClass(\"active\");\n});\n$(\".sidebar-trigger-lg-down\").on(\"click\", function () {\n  $('body').addClass(\"page-sidebar-in\");\n});\n$(\".sidebar-close a\").on(\"click\", function () {\n  if ($('body').hasClass('page-sidebar-in')) {\n    $('body').removeClass('page-sidebar-in');\n  }\n});\n$(window).on(\"resize\", function () {\n  if ($(window).width() > 992) {\n    $('body').removeClass('page-sidebar-in');\n  }\n});\n\n},{}],7:[function(require,module,exports){\n\"use strict\";\n\n$(window).on(\"load\", function () {\n  $(\".loader\").delay(500).fadeOut(\"slow\");\n});\n\n},{}],8:[function(require,module,exports){\n\"use strict\";\n\n(function () {\n  'use strict'; // Fetch all the forms we want to apply custom Bootstrap validation styles to\n\n  var forms = document.querySelectorAll('.needs-validation'); // Loop over them and prevent submission\n\n  Array.prototype.slice.call(forms).forEach(function (form) {\n    form.addEventListener('submit', function (event) {\n      if (!form.checkValidity()) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      form.classList.add('was-validated');\n    }, false);\n  });\n})();\n\n},{}],9:[function(require,module,exports){\n\"use strict\";\n\nrequire(\"./custom/jquery.global\");\n\nrequire(\"./custom/mode_switcher\");\n\nrequire(\"./custom/preloader\");\n\nrequire(\"./custom/bootstrap.custom\");\n\nrequire(\"./custom/page-sidebar\");\n\nrequire(\"./custom/validation\");\n\nrequire(\"./custom/aos\");\n\nrequire(\"./custom/choices\");\n\nrequire(\"simplebar\");\n\n},{\"./custom/aos\":1,\"./custom/bootstrap.custom\":2,\"./custom/choices\":3,\"./custom/jquery.global\":4,\"./custom/mode_switcher\":5,\"./custom/page-sidebar\":6,\"./custom/preloader\":7,\"./custom/validation\":8,\"simplebar\":15}],10:[function(require,module,exports){\n(function (global){(function (){\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n!function (e, t) {\n  \"object\" == (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) && \"undefined\" != typeof module ? module.exports = t() : \"function\" == typeof define && define.amd ? define(t) : e.AOS = t();\n}(void 0, function () {\n  \"use strict\";\n\n  var e = \"undefined\" != typeof window ? window : \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : {},\n      t = \"Expected a function\",\n      n = NaN,\n      o = \"[object Symbol]\",\n      i = /^\\s+|\\s+$/g,\n      a = /^[-+]0x[0-9a-f]+$/i,\n      r = /^0b[01]+$/i,\n      c = /^0o[0-7]+$/i,\n      s = parseInt,\n      u = \"object\" == _typeof(e) && e && e.Object === Object && e,\n      d = \"object\" == (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self && self.Object === Object && self,\n      l = u || d || Function(\"return this\")(),\n      f = Object.prototype.toString,\n      m = Math.max,\n      p = Math.min,\n      b = function b() {\n    return l.Date.now();\n  };\n\n  function v(e, n, o) {\n    var i,\n        a,\n        r,\n        c,\n        s,\n        u,\n        d = 0,\n        l = !1,\n        f = !1,\n        v = !0;\n    if (\"function\" != typeof e) throw new TypeError(t);\n\n    function y(t) {\n      var n = i,\n          o = a;\n      return i = a = void 0, d = t, c = e.apply(o, n);\n    }\n\n    function h(e) {\n      var t = e - u;\n      return void 0 === u || t >= n || t < 0 || f && e - d >= r;\n    }\n\n    function k() {\n      var e = b();\n      if (h(e)) return x(e);\n      s = setTimeout(k, function (e) {\n        var t = n - (e - u);\n        return f ? p(t, r - (e - d)) : t;\n      }(e));\n    }\n\n    function x(e) {\n      return s = void 0, v && i ? y(e) : (i = a = void 0, c);\n    }\n\n    function O() {\n      var e = b(),\n          t = h(e);\n\n      if (i = arguments, a = this, u = e, t) {\n        if (void 0 === s) return function (e) {\n          return d = e, s = setTimeout(k, n), l ? y(e) : c;\n        }(u);\n        if (f) return s = setTimeout(k, n), y(u);\n      }\n\n      return void 0 === s && (s = setTimeout(k, n)), c;\n    }\n\n    return n = w(n) || 0, g(o) && (l = !!o.leading, r = (f = \"maxWait\" in o) ? m(w(o.maxWait) || 0, n) : r, v = \"trailing\" in o ? !!o.trailing : v), O.cancel = function () {\n      void 0 !== s && clearTimeout(s), d = 0, i = u = a = s = void 0;\n    }, O.flush = function () {\n      return void 0 === s ? c : x(b());\n    }, O;\n  }\n\n  function g(e) {\n    var t = _typeof(e);\n\n    return !!e && (\"object\" == t || \"function\" == t);\n  }\n\n  function w(e) {\n    if (\"number\" == typeof e) return e;\n    if (function (e) {\n      return \"symbol\" == _typeof(e) || function (e) {\n        return !!e && \"object\" == _typeof(e);\n      }(e) && f.call(e) == o;\n    }(e)) return n;\n\n    if (g(e)) {\n      var t = \"function\" == typeof e.valueOf ? e.valueOf() : e;\n      e = g(t) ? t + \"\" : t;\n    }\n\n    if (\"string\" != typeof e) return 0 === e ? e : +e;\n    e = e.replace(i, \"\");\n    var u = r.test(e);\n    return u || c.test(e) ? s(e.slice(2), u ? 2 : 8) : a.test(e) ? n : +e;\n  }\n\n  var y = function y(e, n, o) {\n    var i = !0,\n        a = !0;\n    if (\"function\" != typeof e) throw new TypeError(t);\n    return g(o) && (i = \"leading\" in o ? !!o.leading : i, a = \"trailing\" in o ? !!o.trailing : a), v(e, n, {\n      leading: i,\n      maxWait: n,\n      trailing: a\n    });\n  },\n      h = \"Expected a function\",\n      k = NaN,\n      x = \"[object Symbol]\",\n      O = /^\\s+|\\s+$/g,\n      j = /^[-+]0x[0-9a-f]+$/i,\n      E = /^0b[01]+$/i,\n      N = /^0o[0-7]+$/i,\n      z = parseInt,\n      C = \"object\" == _typeof(e) && e && e.Object === Object && e,\n      A = \"object\" == (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self && self.Object === Object && self,\n      q = C || A || Function(\"return this\")(),\n      L = Object.prototype.toString,\n      T = Math.max,\n      M = Math.min,\n      S = function S() {\n    return q.Date.now();\n  };\n\n  function D(e) {\n    var t = _typeof(e);\n\n    return !!e && (\"object\" == t || \"function\" == t);\n  }\n\n  function H(e) {\n    if (\"number\" == typeof e) return e;\n    if (function (e) {\n      return \"symbol\" == _typeof(e) || function (e) {\n        return !!e && \"object\" == _typeof(e);\n      }(e) && L.call(e) == x;\n    }(e)) return k;\n\n    if (D(e)) {\n      var t = \"function\" == typeof e.valueOf ? e.valueOf() : e;\n      e = D(t) ? t + \"\" : t;\n    }\n\n    if (\"string\" != typeof e) return 0 === e ? e : +e;\n    e = e.replace(O, \"\");\n    var n = E.test(e);\n    return n || N.test(e) ? z(e.slice(2), n ? 2 : 8) : j.test(e) ? k : +e;\n  }\n\n  var $ = function $(e, t, n) {\n    var o,\n        i,\n        a,\n        r,\n        c,\n        s,\n        u = 0,\n        d = !1,\n        l = !1,\n        f = !0;\n    if (\"function\" != typeof e) throw new TypeError(h);\n\n    function m(t) {\n      var n = o,\n          a = i;\n      return o = i = void 0, u = t, r = e.apply(a, n);\n    }\n\n    function p(e) {\n      var n = e - s;\n      return void 0 === s || n >= t || n < 0 || l && e - u >= a;\n    }\n\n    function b() {\n      var e = S();\n      if (p(e)) return v(e);\n      c = setTimeout(b, function (e) {\n        var n = t - (e - s);\n        return l ? M(n, a - (e - u)) : n;\n      }(e));\n    }\n\n    function v(e) {\n      return c = void 0, f && o ? m(e) : (o = i = void 0, r);\n    }\n\n    function g() {\n      var e = S(),\n          n = p(e);\n\n      if (o = arguments, i = this, s = e, n) {\n        if (void 0 === c) return function (e) {\n          return u = e, c = setTimeout(b, t), d ? m(e) : r;\n        }(s);\n        if (l) return c = setTimeout(b, t), m(s);\n      }\n\n      return void 0 === c && (c = setTimeout(b, t)), r;\n    }\n\n    return t = H(t) || 0, D(n) && (d = !!n.leading, a = (l = \"maxWait\" in n) ? T(H(n.maxWait) || 0, t) : a, f = \"trailing\" in n ? !!n.trailing : f), g.cancel = function () {\n      void 0 !== c && clearTimeout(c), u = 0, o = s = i = c = void 0;\n    }, g.flush = function () {\n      return void 0 === c ? r : v(S());\n    }, g;\n  },\n      W = function W() {};\n\n  function P(e) {\n    e && e.forEach(function (e) {\n      var t = Array.prototype.slice.call(e.addedNodes),\n          n = Array.prototype.slice.call(e.removedNodes);\n      if (function e(t) {\n        var n = void 0,\n            o = void 0;\n\n        for (n = 0; n < t.length; n += 1) {\n          if ((o = t[n]).dataset && o.dataset.aos) return !0;\n          if (o.children && e(o.children)) return !0;\n        }\n\n        return !1;\n      }(t.concat(n))) return W();\n    });\n  }\n\n  function Y() {\n    return window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;\n  }\n\n  var _ = {\n    isSupported: function isSupported() {\n      return !!Y();\n    },\n    ready: function ready(e, t) {\n      var n = window.document,\n          o = new (Y())(P);\n      W = t, o.observe(n.documentElement, {\n        childList: !0,\n        subtree: !0,\n        removedNodes: !0\n      });\n    }\n  },\n      B = function B(e, t) {\n    if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n  },\n      F = function () {\n    function e(e, t) {\n      for (var n = 0; n < t.length; n++) {\n        var o = t[n];\n        o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, o.key, o);\n      }\n    }\n\n    return function (t, n, o) {\n      return n && e(t.prototype, n), o && e(t, o), t;\n    };\n  }(),\n      I = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n\n      for (var o in n) {\n        Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o]);\n      }\n    }\n\n    return e;\n  },\n      K = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,\n      G = /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i,\n      J = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i,\n      Q = /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i;\n\n  function R() {\n    return navigator.userAgent || navigator.vendor || window.opera || \"\";\n  }\n\n  var U = new (function () {\n    function e() {\n      B(this, e);\n    }\n\n    return F(e, [{\n      key: \"phone\",\n      value: function value() {\n        var e = R();\n        return !(!K.test(e) && !G.test(e.substr(0, 4)));\n      }\n    }, {\n      key: \"mobile\",\n      value: function value() {\n        var e = R();\n        return !(!J.test(e) && !Q.test(e.substr(0, 4)));\n      }\n    }, {\n      key: \"tablet\",\n      value: function value() {\n        return this.mobile() && !this.phone();\n      }\n    }, {\n      key: \"ie11\",\n      value: function value() {\n        return \"-ms-scroll-limit\" in document.documentElement.style && \"-ms-ime-align\" in document.documentElement.style;\n      }\n    }]), e;\n  }())(),\n      V = function V(e, t) {\n    var n = void 0;\n    return U.ie11() ? (n = document.createEvent(\"CustomEvent\")).initCustomEvent(e, !0, !0, {\n      detail: t\n    }) : n = new CustomEvent(e, {\n      detail: t\n    }), document.dispatchEvent(n);\n  },\n      X = function X(e) {\n    return e.forEach(function (e, t) {\n      return function (e, t) {\n        var n = e.options,\n            o = e.position,\n            i = e.node,\n            a = (e.data, function () {\n          e.animated && (function (e, t) {\n            t && t.forEach(function (t) {\n              return e.classList.remove(t);\n            });\n          }(i, n.animatedClassNames), V(\"aos:out\", i), e.options.id && V(\"aos:in:\" + e.options.id, i), e.animated = !1);\n        });\n        n.mirror && t >= o.out && !n.once ? a() : t >= o[\"in\"] ? e.animated || (function (e, t) {\n          t && t.forEach(function (t) {\n            return e.classList.add(t);\n          });\n        }(i, n.animatedClassNames), V(\"aos:in\", i), e.options.id && V(\"aos:in:\" + e.options.id, i), e.animated = !0) : e.animated && !n.once && a();\n      }(e, window.pageYOffset);\n    });\n  },\n      Z = function Z(e) {\n    for (var t = 0, n = 0; e && !isNaN(e.offsetLeft) && !isNaN(e.offsetTop);) {\n      t += e.offsetLeft - (\"BODY\" != e.tagName ? e.scrollLeft : 0), n += e.offsetTop - (\"BODY\" != e.tagName ? e.scrollTop : 0), e = e.offsetParent;\n    }\n\n    return {\n      top: n,\n      left: t\n    };\n  },\n      ee = function ee(e, t, n) {\n    var o = e.getAttribute(\"data-aos-\" + t);\n\n    if (void 0 !== o) {\n      if (\"true\" === o) return !0;\n      if (\"false\" === o) return !1;\n    }\n\n    return o || n;\n  },\n      te = function te(e, t) {\n    return e.forEach(function (e, n) {\n      var o = ee(e.node, \"mirror\", t.mirror),\n          i = ee(e.node, \"once\", t.once),\n          a = ee(e.node, \"id\"),\n          r = t.useClassNames && e.node.getAttribute(\"data-aos\"),\n          c = [t.animatedClassName].concat(r ? r.split(\" \") : []).filter(function (e) {\n        return \"string\" == typeof e;\n      });\n      t.initClassName && e.node.classList.add(t.initClassName), e.position = {\n        \"in\": function (e, t, n) {\n          var o = window.innerHeight,\n              i = ee(e, \"anchor\"),\n              a = ee(e, \"anchor-placement\"),\n              r = Number(ee(e, \"offset\", a ? 0 : t)),\n              c = a || n,\n              s = e;\n          i && document.querySelectorAll(i) && (s = document.querySelectorAll(i)[0]);\n          var u = Z(s).top - o;\n\n          switch (c) {\n            case \"top-bottom\":\n              break;\n\n            case \"center-bottom\":\n              u += s.offsetHeight / 2;\n              break;\n\n            case \"bottom-bottom\":\n              u += s.offsetHeight;\n              break;\n\n            case \"top-center\":\n              u += o / 2;\n              break;\n\n            case \"center-center\":\n              u += o / 2 + s.offsetHeight / 2;\n              break;\n\n            case \"bottom-center\":\n              u += o / 2 + s.offsetHeight;\n              break;\n\n            case \"top-top\":\n              u += o;\n              break;\n\n            case \"bottom-top\":\n              u += o + s.offsetHeight;\n              break;\n\n            case \"center-top\":\n              u += o + s.offsetHeight / 2;\n          }\n\n          return u + r;\n        }(e.node, t.offset, t.anchorPlacement),\n        out: o && function (e, t) {\n          window.innerHeight;\n          var n = ee(e, \"anchor\"),\n              o = ee(e, \"offset\", t),\n              i = e;\n          return n && document.querySelectorAll(n) && (i = document.querySelectorAll(n)[0]), Z(i).top + i.offsetHeight - o;\n        }(e.node, t.offset)\n      }, e.options = {\n        once: i,\n        mirror: o,\n        animatedClassNames: c,\n        id: a\n      };\n    }), e;\n  },\n      ne = function ne() {\n    var e = document.querySelectorAll(\"[data-aos]\");\n    return Array.prototype.map.call(e, function (e) {\n      return {\n        node: e\n      };\n    });\n  },\n      oe = [],\n      ie = !1,\n      ae = {\n    offset: 120,\n    delay: 0,\n    easing: \"ease\",\n    duration: 400,\n    disable: !1,\n    once: !1,\n    mirror: !1,\n    anchorPlacement: \"top-bottom\",\n    startEvent: \"DOMContentLoaded\",\n    animatedClassName: \"aos-animate\",\n    initClassName: \"aos-init\",\n    useClassNames: !1,\n    disableMutationObserver: !1,\n    throttleDelay: 99,\n    debounceDelay: 50\n  },\n      re = function re() {\n    return document.all && !window.atob;\n  },\n      ce = function ce() {\n    arguments.length > 0 && void 0 !== arguments[0] && arguments[0] && (ie = !0), ie && (oe = te(oe, ae), X(oe), window.addEventListener(\"scroll\", y(function () {\n      X(oe, ae.once);\n    }, ae.throttleDelay)));\n  },\n      se = function se() {\n    if (oe = ne(), de(ae.disable) || re()) return ue();\n    ce();\n  },\n      ue = function ue() {\n    oe.forEach(function (e, t) {\n      e.node.removeAttribute(\"data-aos\"), e.node.removeAttribute(\"data-aos-easing\"), e.node.removeAttribute(\"data-aos-duration\"), e.node.removeAttribute(\"data-aos-delay\"), ae.initClassName && e.node.classList.remove(ae.initClassName), ae.animatedClassName && e.node.classList.remove(ae.animatedClassName);\n    });\n  },\n      de = function de(e) {\n    return !0 === e || \"mobile\" === e && U.mobile() || \"phone\" === e && U.phone() || \"tablet\" === e && U.tablet() || \"function\" == typeof e && !0 === e();\n  };\n\n  return {\n    init: function init(e) {\n      return ae = I(ae, e), oe = ne(), ae.disableMutationObserver || _.isSupported() || (console.info('\\n      aos: MutationObserver is not supported on this browser,\\n      code mutations observing has been disabled.\\n      You may have to call \"refreshHard()\" by yourself.\\n    '), ae.disableMutationObserver = !0), ae.disableMutationObserver || _.ready(\"[data-aos]\", se), de(ae.disable) || re() ? ue() : (document.querySelector(\"body\").setAttribute(\"data-aos-easing\", ae.easing), document.querySelector(\"body\").setAttribute(\"data-aos-duration\", ae.duration), document.querySelector(\"body\").setAttribute(\"data-aos-delay\", ae.delay), -1 === [\"DOMContentLoaded\", \"load\"].indexOf(ae.startEvent) ? document.addEventListener(ae.startEvent, function () {\n        ce(!0);\n      }) : window.addEventListener(\"load\", function () {\n        ce(!0);\n      }), \"DOMContentLoaded\" === ae.startEvent && [\"complete\", \"interactive\"].indexOf(document.readyState) > -1 && ce(!0), window.addEventListener(\"resize\", $(ce, ae.debounceDelay, !0)), window.addEventListener(\"orientationchange\", $(ce, ae.debounceDelay, !0)), oe);\n    },\n    refresh: ce,\n    refreshHard: se\n  };\n});\n\n}).call(this)}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],11:[function(require,module,exports){\n\"use strict\";\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n  * Bootstrap v5.1.3 (https://getbootstrap.com/)\n  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.bootstrap = factory());\n})(void 0, function () {\n  'use strict';\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): util/index.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  var _KEY_TO_DIRECTION;\n\n  var MAX_UID = 1000000;\n  var MILLISECONDS_MULTIPLIER = 1000;\n  var TRANSITION_END = 'transitionend'; // Shoutout AngusCroll (https://goo.gl/pxwQGp)\n\n  var toType = function toType(obj) {\n    if (obj === null || obj === undefined) {\n      return \"\".concat(obj);\n    }\n\n    return {}.toString.call(obj).match(/\\s([a-z]+)/i)[1].toLowerCase();\n  };\n  /**\n   * --------------------------------------------------------------------------\n   * Public Util Api\n   * --------------------------------------------------------------------------\n   */\n\n\n  var getUID = function getUID(prefix) {\n    do {\n      prefix += Math.floor(Math.random() * MAX_UID);\n    } while (document.getElementById(prefix));\n\n    return prefix;\n  };\n\n  var getSelector = function getSelector(element) {\n    var selector = element.getAttribute('data-bs-target');\n\n    if (!selector || selector === '#') {\n      var hrefAttr = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,\n      // so everything starting with `#` or `.`. If a \"real\" URL is used as the selector,\n      // `document.querySelector` will rightfully complain it is invalid.\n      // See https://github.com/twbs/bootstrap/issues/32273\n\n      if (!hrefAttr || !hrefAttr.includes('#') && !hrefAttr.startsWith('.')) {\n        return null;\n      } // Just in case some CMS puts out a full URL with the anchor appended\n\n\n      if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) {\n        hrefAttr = \"#\".concat(hrefAttr.split('#')[1]);\n      }\n\n      selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null;\n    }\n\n    return selector;\n  };\n\n  var getSelectorFromElement = function getSelectorFromElement(element) {\n    var selector = getSelector(element);\n\n    if (selector) {\n      return document.querySelector(selector) ? selector : null;\n    }\n\n    return null;\n  };\n\n  var getElementFromSelector = function getElementFromSelector(element) {\n    var selector = getSelector(element);\n    return selector ? document.querySelector(selector) : null;\n  };\n\n  var getTransitionDurationFromElement = function getTransitionDurationFromElement(element) {\n    if (!element) {\n      return 0;\n    } // Get transition-duration of the element\n\n\n    var _window$getComputedSt = window.getComputedStyle(element),\n        transitionDuration = _window$getComputedSt.transitionDuration,\n        transitionDelay = _window$getComputedSt.transitionDelay;\n\n    var floatTransitionDuration = Number.parseFloat(transitionDuration);\n    var floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found\n\n    if (!floatTransitionDuration && !floatTransitionDelay) {\n      return 0;\n    } // If multiple durations are defined, take the first\n\n\n    transitionDuration = transitionDuration.split(',')[0];\n    transitionDelay = transitionDelay.split(',')[0];\n    return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;\n  };\n\n  var triggerTransitionEnd = function triggerTransitionEnd(element) {\n    element.dispatchEvent(new Event(TRANSITION_END));\n  };\n\n  var isElement$1 = function isElement$1(obj) {\n    if (!obj || _typeof(obj) !== 'object') {\n      return false;\n    }\n\n    if (typeof obj.jquery !== 'undefined') {\n      obj = obj[0];\n    }\n\n    return typeof obj.nodeType !== 'undefined';\n  };\n\n  var getElement = function getElement(obj) {\n    if (isElement$1(obj)) {\n      // it's a jQuery object or a node element\n      return obj.jquery ? obj[0] : obj;\n    }\n\n    if (typeof obj === 'string' && obj.length > 0) {\n      return document.querySelector(obj);\n    }\n\n    return null;\n  };\n\n  var typeCheckConfig = function typeCheckConfig(componentName, config, configTypes) {\n    Object.keys(configTypes).forEach(function (property) {\n      var expectedTypes = configTypes[property];\n      var value = config[property];\n      var valueType = value && isElement$1(value) ? 'element' : toType(value);\n\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        throw new TypeError(\"\".concat(componentName.toUpperCase(), \": Option \\\"\").concat(property, \"\\\" provided type \\\"\").concat(valueType, \"\\\" but expected type \\\"\").concat(expectedTypes, \"\\\".\"));\n      }\n    });\n  };\n\n  var isVisible = function isVisible(element) {\n    if (!isElement$1(element) || element.getClientRects().length === 0) {\n      return false;\n    }\n\n    return getComputedStyle(element).getPropertyValue('visibility') === 'visible';\n  };\n\n  var isDisabled = function isDisabled(element) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      return true;\n    }\n\n    if (element.classList.contains('disabled')) {\n      return true;\n    }\n\n    if (typeof element.disabled !== 'undefined') {\n      return element.disabled;\n    }\n\n    return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';\n  };\n\n  var findShadowRoot = function findShadowRoot(element) {\n    if (!document.documentElement.attachShadow) {\n      return null;\n    } // Can find the shadow root otherwise it'll return the document\n\n\n    if (typeof element.getRootNode === 'function') {\n      var root = element.getRootNode();\n      return root instanceof ShadowRoot ? root : null;\n    }\n\n    if (element instanceof ShadowRoot) {\n      return element;\n    } // when we don't find a shadow root\n\n\n    if (!element.parentNode) {\n      return null;\n    }\n\n    return findShadowRoot(element.parentNode);\n  };\n\n  var noop = function noop() {};\n  /**\n   * Trick to restart an element's animation\n   *\n   * @param {HTMLElement} element\n   * @return void\n   *\n   * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation\n   */\n\n\n  var reflow = function reflow(element) {\n    // eslint-disable-next-line no-unused-expressions\n    element.offsetHeight;\n  };\n\n  var getjQuery = function getjQuery() {\n    var _window = window,\n        jQuery = _window.jQuery;\n\n    if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {\n      return jQuery;\n    }\n\n    return null;\n  };\n\n  var DOMContentLoadedCallbacks = [];\n\n  var onDOMContentLoaded = function onDOMContentLoaded(callback) {\n    if (document.readyState === 'loading') {\n      // add listener on the first call when the document is in loading state\n      if (!DOMContentLoadedCallbacks.length) {\n        document.addEventListener('DOMContentLoaded', function () {\n          DOMContentLoadedCallbacks.forEach(function (callback) {\n            return callback();\n          });\n        });\n      }\n\n      DOMContentLoadedCallbacks.push(callback);\n    } else {\n      callback();\n    }\n  };\n\n  var isRTL = function isRTL() {\n    return document.documentElement.dir === 'rtl';\n  };\n\n  var defineJQueryPlugin = function defineJQueryPlugin(plugin) {\n    onDOMContentLoaded(function () {\n      var $ = getjQuery();\n      /* istanbul ignore if */\n\n      if ($) {\n        var name = plugin.NAME;\n        var JQUERY_NO_CONFLICT = $.fn[name];\n        $.fn[name] = plugin.jQueryInterface;\n        $.fn[name].Constructor = plugin;\n\n        $.fn[name].noConflict = function () {\n          $.fn[name] = JQUERY_NO_CONFLICT;\n          return plugin.jQueryInterface;\n        };\n      }\n    });\n  };\n\n  var execute = function execute(callback) {\n    if (typeof callback === 'function') {\n      callback();\n    }\n  };\n\n  var executeAfterTransition = function executeAfterTransition(callback, transitionElement) {\n    var waitForTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (!waitForTransition) {\n      execute(callback);\n      return;\n    }\n\n    var durationPadding = 5;\n    var emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;\n    var called = false;\n\n    var handler = function handler(_ref5) {\n      var target = _ref5.target;\n\n      if (target !== transitionElement) {\n        return;\n      }\n\n      called = true;\n      transitionElement.removeEventListener(TRANSITION_END, handler);\n      execute(callback);\n    };\n\n    transitionElement.addEventListener(TRANSITION_END, handler);\n    setTimeout(function () {\n      if (!called) {\n        triggerTransitionEnd(transitionElement);\n      }\n    }, emulatedDuration);\n  };\n  /**\n   * Return the previous/next element of a list.\n   *\n   * @param {array} list    The list of elements\n   * @param activeElement   The active element\n   * @param shouldGetNext   Choose to get next or previous element\n   * @param isCycleAllowed\n   * @return {Element|elem} The proper element\n   */\n\n\n  var getNextActiveElement = function getNextActiveElement(list, activeElement, shouldGetNext, isCycleAllowed) {\n    var index = list.indexOf(activeElement); // if the element does not exist in the list return an element depending on the direction and if cycle is allowed\n\n    if (index === -1) {\n      return list[!shouldGetNext && isCycleAllowed ? list.length - 1 : 0];\n    }\n\n    var listLength = list.length;\n    index += shouldGetNext ? 1 : -1;\n\n    if (isCycleAllowed) {\n      index = (index + listLength) % listLength;\n    }\n\n    return list[Math.max(0, Math.min(index, listLength - 1))];\n  };\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): dom/event-handler.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n\n  var namespaceRegex = /[^.]*(?=\\..*)\\.|.*/;\n  var stripNameRegex = /\\..*/;\n  var stripUidRegex = /::\\d+$/;\n  var eventRegistry = {}; // Events storage\n\n  var uidEvent = 1;\n  var customEvents = {\n    mouseenter: 'mouseover',\n    mouseleave: 'mouseout'\n  };\n  var customEventsRegex = /^(mouseenter|mouseleave)/i;\n  var nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);\n  /**\n   * ------------------------------------------------------------------------\n   * Private methods\n   * ------------------------------------------------------------------------\n   */\n\n  function getUidEvent(element, uid) {\n    return uid && \"\".concat(uid, \"::\").concat(uidEvent++) || element.uidEvent || uidEvent++;\n  }\n\n  function getEvent(element) {\n    var uid = getUidEvent(element);\n    element.uidEvent = uid;\n    eventRegistry[uid] = eventRegistry[uid] || {};\n    return eventRegistry[uid];\n  }\n\n  function bootstrapHandler(element, fn) {\n    return function handler(event) {\n      event.delegateTarget = element;\n\n      if (handler.oneOff) {\n        EventHandler.off(element, event.type, fn);\n      }\n\n      return fn.apply(element, [event]);\n    };\n  }\n\n  function bootstrapDelegationHandler(element, selector, fn) {\n    return function handler(event) {\n      var domElements = element.querySelectorAll(selector);\n\n      for (var target = event.target; target && target !== this; target = target.parentNode) {\n        for (var i = domElements.length; i--;) {\n          if (domElements[i] === target) {\n            event.delegateTarget = target;\n\n            if (handler.oneOff) {\n              EventHandler.off(element, event.type, selector, fn);\n            }\n\n            return fn.apply(target, [event]);\n          }\n        }\n      } // To please ESLint\n\n\n      return null;\n    };\n  }\n\n  function findHandler(events, handler) {\n    var delegationSelector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var uidEventList = Object.keys(events);\n\n    for (var i = 0, len = uidEventList.length; i < len; i++) {\n      var event = events[uidEventList[i]];\n\n      if (event.originalHandler === handler && event.delegationSelector === delegationSelector) {\n        return event;\n      }\n    }\n\n    return null;\n  }\n\n  function normalizeParams(originalTypeEvent, handler, delegationFn) {\n    var delegation = typeof handler === 'string';\n    var originalHandler = delegation ? delegationFn : handler;\n    var typeEvent = getTypeEvent(originalTypeEvent);\n    var isNative = nativeEvents.has(typeEvent);\n\n    if (!isNative) {\n      typeEvent = originalTypeEvent;\n    }\n\n    return [delegation, originalHandler, typeEvent];\n  }\n\n  function addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {\n    if (typeof originalTypeEvent !== 'string' || !element) {\n      return;\n    }\n\n    if (!handler) {\n      handler = delegationFn;\n      delegationFn = null;\n    } // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position\n    // this prevents the handler from being dispatched the same way as mouseover or mouseout does\n\n\n    if (customEventsRegex.test(originalTypeEvent)) {\n      var wrapFn = function wrapFn(fn) {\n        return function (event) {\n          if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {\n            return fn.call(this, event);\n          }\n        };\n      };\n\n      if (delegationFn) {\n        delegationFn = wrapFn(delegationFn);\n      } else {\n        handler = wrapFn(handler);\n      }\n    }\n\n    var _normalizeParams = normalizeParams(originalTypeEvent, handler, delegationFn),\n        _normalizeParams2 = _slicedToArray(_normalizeParams, 3),\n        delegation = _normalizeParams2[0],\n        originalHandler = _normalizeParams2[1],\n        typeEvent = _normalizeParams2[2];\n\n    var events = getEvent(element);\n    var handlers = events[typeEvent] || (events[typeEvent] = {});\n    var previousFn = findHandler(handlers, originalHandler, delegation ? handler : null);\n\n    if (previousFn) {\n      previousFn.oneOff = previousFn.oneOff && oneOff;\n      return;\n    }\n\n    var uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''));\n    var fn = delegation ? bootstrapDelegationHandler(element, handler, delegationFn) : bootstrapHandler(element, handler);\n    fn.delegationSelector = delegation ? handler : null;\n    fn.originalHandler = originalHandler;\n    fn.oneOff = oneOff;\n    fn.uidEvent = uid;\n    handlers[uid] = fn;\n    element.addEventListener(typeEvent, fn, delegation);\n  }\n\n  function removeHandler(element, events, typeEvent, handler, delegationSelector) {\n    var fn = findHandler(events[typeEvent], handler, delegationSelector);\n\n    if (!fn) {\n      return;\n    }\n\n    element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));\n    delete events[typeEvent][fn.uidEvent];\n  }\n\n  function removeNamespacedHandlers(element, events, typeEvent, namespace) {\n    var storeElementEvent = events[typeEvent] || {};\n    Object.keys(storeElementEvent).forEach(function (handlerKey) {\n      if (handlerKey.includes(namespace)) {\n        var event = storeElementEvent[handlerKey];\n        removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);\n      }\n    });\n  }\n\n  function getTypeEvent(event) {\n    // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n    event = event.replace(stripNameRegex, '');\n    return customEvents[event] || event;\n  }\n\n  var EventHandler = {\n    on: function on(element, event, handler, delegationFn) {\n      addHandler(element, event, handler, delegationFn, false);\n    },\n    one: function one(element, event, handler, delegationFn) {\n      addHandler(element, event, handler, delegationFn, true);\n    },\n    off: function off(element, originalTypeEvent, handler, delegationFn) {\n      if (typeof originalTypeEvent !== 'string' || !element) {\n        return;\n      }\n\n      var _normalizeParams3 = normalizeParams(originalTypeEvent, handler, delegationFn),\n          _normalizeParams4 = _slicedToArray(_normalizeParams3, 3),\n          delegation = _normalizeParams4[0],\n          originalHandler = _normalizeParams4[1],\n          typeEvent = _normalizeParams4[2];\n\n      var inNamespace = typeEvent !== originalTypeEvent;\n      var events = getEvent(element);\n      var isNamespace = originalTypeEvent.startsWith('.');\n\n      if (typeof originalHandler !== 'undefined') {\n        // Simplest case: handler is passed, remove that listener ONLY.\n        if (!events || !events[typeEvent]) {\n          return;\n        }\n\n        removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null);\n        return;\n      }\n\n      if (isNamespace) {\n        Object.keys(events).forEach(function (elementEvent) {\n          removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));\n        });\n      }\n\n      var storeElementEvent = events[typeEvent] || {};\n      Object.keys(storeElementEvent).forEach(function (keyHandlers) {\n        var handlerKey = keyHandlers.replace(stripUidRegex, '');\n\n        if (!inNamespace || originalTypeEvent.includes(handlerKey)) {\n          var event = storeElementEvent[keyHandlers];\n          removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);\n        }\n      });\n    },\n    trigger: function trigger(element, event, args) {\n      if (typeof event !== 'string' || !element) {\n        return null;\n      }\n\n      var $ = getjQuery();\n      var typeEvent = getTypeEvent(event);\n      var inNamespace = event !== typeEvent;\n      var isNative = nativeEvents.has(typeEvent);\n      var jQueryEvent;\n      var bubbles = true;\n      var nativeDispatch = true;\n      var defaultPrevented = false;\n      var evt = null;\n\n      if (inNamespace && $) {\n        jQueryEvent = $.Event(event, args);\n        $(element).trigger(jQueryEvent);\n        bubbles = !jQueryEvent.isPropagationStopped();\n        nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();\n        defaultPrevented = jQueryEvent.isDefaultPrevented();\n      }\n\n      if (isNative) {\n        evt = document.createEvent('HTMLEvents');\n        evt.initEvent(typeEvent, bubbles, true);\n      } else {\n        evt = new CustomEvent(event, {\n          bubbles: bubbles,\n          cancelable: true\n        });\n      } // merge custom information in our event\n\n\n      if (typeof args !== 'undefined') {\n        Object.keys(args).forEach(function (key) {\n          Object.defineProperty(evt, key, {\n            get: function get() {\n              return args[key];\n            }\n          });\n        });\n      }\n\n      if (defaultPrevented) {\n        evt.preventDefault();\n      }\n\n      if (nativeDispatch) {\n        element.dispatchEvent(evt);\n      }\n\n      if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') {\n        jQueryEvent.preventDefault();\n      }\n\n      return evt;\n    }\n  };\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): dom/data.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var elementMap = new Map();\n  var Data = {\n    set: function set(element, key, instance) {\n      if (!elementMap.has(element)) {\n        elementMap.set(element, new Map());\n      }\n\n      var instanceMap = elementMap.get(element); // make it clear we only want one instance per element\n      // can be removed later when multiple key/instances are fine to be used\n\n      if (!instanceMap.has(key) && instanceMap.size !== 0) {\n        // eslint-disable-next-line no-console\n        console.error(\"Bootstrap doesn't allow more than one instance per element. Bound instance: \".concat(Array.from(instanceMap.keys())[0], \".\"));\n        return;\n      }\n\n      instanceMap.set(key, instance);\n    },\n    get: function get(element, key) {\n      if (elementMap.has(element)) {\n        return elementMap.get(element).get(key) || null;\n      }\n\n      return null;\n    },\n    remove: function remove(element, key) {\n      if (!elementMap.has(element)) {\n        return;\n      }\n\n      var instanceMap = elementMap.get(element);\n      instanceMap[\"delete\"](key); // free up element references if there are no instances left for an element\n\n      if (instanceMap.size === 0) {\n        elementMap[\"delete\"](element);\n      }\n    }\n  };\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): base-component.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var VERSION = '5.1.3';\n\n  var BaseComponent = /*#__PURE__*/function () {\n    function BaseComponent(element) {\n      _classCallCheck(this, BaseComponent);\n\n      element = getElement(element);\n\n      if (!element) {\n        return;\n      }\n\n      this._element = element;\n      Data.set(this._element, this.constructor.DATA_KEY, this);\n    }\n\n    _createClass(BaseComponent, [{\n      key: \"dispose\",\n      value: function dispose() {\n        var _this = this;\n\n        Data.remove(this._element, this.constructor.DATA_KEY);\n        EventHandler.off(this._element, this.constructor.EVENT_KEY);\n        Object.getOwnPropertyNames(this).forEach(function (propertyName) {\n          _this[propertyName] = null;\n        });\n      }\n    }, {\n      key: \"_queueCallback\",\n      value: function _queueCallback(callback, element) {\n        var isAnimated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        executeAfterTransition(callback, element, isAnimated);\n      }\n      /** Static */\n\n    }], [{\n      key: \"getInstance\",\n      value: function getInstance(element) {\n        return Data.get(getElement(element), this.DATA_KEY);\n      }\n    }, {\n      key: \"getOrCreateInstance\",\n      value: function getOrCreateInstance(element) {\n        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.getInstance(element) || new this(element, _typeof(config) === 'object' ? config : null);\n      }\n    }, {\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        throw new Error('You have to implement the static method \"NAME\", for each component!');\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return \"bs.\".concat(this.NAME);\n      }\n    }, {\n      key: \"EVENT_KEY\",\n      get: function get() {\n        return \".\".concat(this.DATA_KEY);\n      }\n    }]);\n\n    return BaseComponent;\n  }();\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): util/component-functions.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n\n  var enableDismissTrigger = function enableDismissTrigger(component) {\n    var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'hide';\n    var clickEvent = \"click.dismiss\".concat(component.EVENT_KEY);\n    var name = component.NAME;\n    EventHandler.on(document, clickEvent, \"[data-bs-dismiss=\\\"\".concat(name, \"\\\"]\"), function (event) {\n      if (['A', 'AREA'].includes(this.tagName)) {\n        event.preventDefault();\n      }\n\n      if (isDisabled(this)) {\n        return;\n      }\n\n      var target = getElementFromSelector(this) || this.closest(\".\".concat(name));\n      var instance = component.getOrCreateInstance(target); // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method\n\n      instance[method]();\n    });\n  };\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): alert.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n\n  var NAME$d = 'alert';\n  var DATA_KEY$c = 'bs.alert';\n  var EVENT_KEY$c = \".\".concat(DATA_KEY$c);\n  var EVENT_CLOSE = \"close\".concat(EVENT_KEY$c);\n  var EVENT_CLOSED = \"closed\".concat(EVENT_KEY$c);\n  var CLASS_NAME_FADE$5 = 'fade';\n  var CLASS_NAME_SHOW$8 = 'show';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Alert = /*#__PURE__*/function (_BaseComponent) {\n    _inherits(Alert, _BaseComponent);\n\n    var _super = _createSuper(Alert);\n\n    function Alert() {\n      _classCallCheck(this, Alert);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(Alert, [{\n      key: \"close\",\n      value: // Public\n      function close() {\n        var _this2 = this;\n\n        var closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);\n\n        if (closeEvent.defaultPrevented) {\n          return;\n        }\n\n        this._element.classList.remove(CLASS_NAME_SHOW$8);\n\n        var isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);\n\n        this._queueCallback(function () {\n          return _this2._destroyElement();\n        }, this._element, isAnimated);\n      } // Private\n\n    }, {\n      key: \"_destroyElement\",\n      value: function _destroyElement() {\n        this._element.remove();\n\n        EventHandler.trigger(this._element, EVENT_CLOSED);\n        this.dispose();\n      } // Static\n\n    }], [{\n      key: \"NAME\",\n      get: // Getters\n      function get() {\n        return NAME$d;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        return this.each(function () {\n          var data = Alert.getOrCreateInstance(this);\n\n          if (typeof config !== 'string') {\n            return;\n          }\n\n          if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n            throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n          }\n\n          data[config](this);\n        });\n      }\n    }]);\n\n    return Alert;\n  }(BaseComponent);\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  enableDismissTrigger(Alert, 'close');\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Alert to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Alert);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): button.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME$c = 'button';\n  var DATA_KEY$b = 'bs.button';\n  var EVENT_KEY$b = \".\".concat(DATA_KEY$b);\n  var DATA_API_KEY$7 = '.data-api';\n  var CLASS_NAME_ACTIVE$3 = 'active';\n  var SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle=\"button\"]';\n  var EVENT_CLICK_DATA_API$6 = \"click\".concat(EVENT_KEY$b).concat(DATA_API_KEY$7);\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Button = /*#__PURE__*/function (_BaseComponent2) {\n    _inherits(Button, _BaseComponent2);\n\n    var _super2 = _createSuper(Button);\n\n    function Button() {\n      _classCallCheck(this, Button);\n\n      return _super2.apply(this, arguments);\n    }\n\n    _createClass(Button, [{\n      key: \"toggle\",\n      value: // Public\n      function toggle() {\n        // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method\n        this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE$3));\n      } // Static\n\n    }], [{\n      key: \"NAME\",\n      get: // Getters\n      function get() {\n        return NAME$c;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        return this.each(function () {\n          var data = Button.getOrCreateInstance(this);\n\n          if (config === 'toggle') {\n            data[config]();\n          }\n        });\n      }\n    }]);\n\n    return Button;\n  }(BaseComponent);\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, function (event) {\n    event.preventDefault();\n    var button = event.target.closest(SELECTOR_DATA_TOGGLE$5);\n    var data = Button.getOrCreateInstance(button);\n    data.toggle();\n  });\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Button to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Button);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): dom/manipulator.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  function normalizeData(val) {\n    if (val === 'true') {\n      return true;\n    }\n\n    if (val === 'false') {\n      return false;\n    }\n\n    if (val === Number(val).toString()) {\n      return Number(val);\n    }\n\n    if (val === '' || val === 'null') {\n      return null;\n    }\n\n    return val;\n  }\n\n  function normalizeDataKey(key) {\n    return key.replace(/[A-Z]/g, function (chr) {\n      return \"-\".concat(chr.toLowerCase());\n    });\n  }\n\n  var Manipulator = {\n    setDataAttribute: function setDataAttribute(element, key, value) {\n      element.setAttribute(\"data-bs-\".concat(normalizeDataKey(key)), value);\n    },\n    removeDataAttribute: function removeDataAttribute(element, key) {\n      element.removeAttribute(\"data-bs-\".concat(normalizeDataKey(key)));\n    },\n    getDataAttributes: function getDataAttributes(element) {\n      if (!element) {\n        return {};\n      }\n\n      var attributes = {};\n      Object.keys(element.dataset).filter(function (key) {\n        return key.startsWith('bs');\n      }).forEach(function (key) {\n        var pureKey = key.replace(/^bs/, '');\n        pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);\n        attributes[pureKey] = normalizeData(element.dataset[key]);\n      });\n      return attributes;\n    },\n    getDataAttribute: function getDataAttribute(element, key) {\n      return normalizeData(element.getAttribute(\"data-bs-\".concat(normalizeDataKey(key))));\n    },\n    offset: function offset(element) {\n      var rect = element.getBoundingClientRect();\n      return {\n        top: rect.top + window.pageYOffset,\n        left: rect.left + window.pageXOffset\n      };\n    },\n    position: function position(element) {\n      return {\n        top: element.offsetTop,\n        left: element.offsetLeft\n      };\n    }\n  };\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): dom/selector-engine.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  var NODE_TEXT = 3;\n  var SelectorEngine = {\n    find: function find(selector) {\n      var _ref6;\n\n      var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;\n      return (_ref6 = []).concat.apply(_ref6, _toConsumableArray(Element.prototype.querySelectorAll.call(element, selector)));\n    },\n    findOne: function findOne(selector) {\n      var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;\n      return Element.prototype.querySelector.call(element, selector);\n    },\n    children: function children(element, selector) {\n      var _ref7;\n\n      return (_ref7 = []).concat.apply(_ref7, _toConsumableArray(element.children)).filter(function (child) {\n        return child.matches(selector);\n      });\n    },\n    parents: function parents(element, selector) {\n      var parents = [];\n      var ancestor = element.parentNode;\n\n      while (ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== NODE_TEXT) {\n        if (ancestor.matches(selector)) {\n          parents.push(ancestor);\n        }\n\n        ancestor = ancestor.parentNode;\n      }\n\n      return parents;\n    },\n    prev: function prev(element, selector) {\n      var previous = element.previousElementSibling;\n\n      while (previous) {\n        if (previous.matches(selector)) {\n          return [previous];\n        }\n\n        previous = previous.previousElementSibling;\n      }\n\n      return [];\n    },\n    next: function next(element, selector) {\n      var next = element.nextElementSibling;\n\n      while (next) {\n        if (next.matches(selector)) {\n          return [next];\n        }\n\n        next = next.nextElementSibling;\n      }\n\n      return [];\n    },\n    focusableChildren: function focusableChildren(element) {\n      var focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable=\"true\"]'].map(function (selector) {\n        return \"\".concat(selector, \":not([tabindex^=\\\"-\\\"])\");\n      }).join(', ');\n      return this.find(focusables, element).filter(function (el) {\n        return !isDisabled(el) && isVisible(el);\n      });\n    }\n  };\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): carousel.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME$b = 'carousel';\n  var DATA_KEY$a = 'bs.carousel';\n  var EVENT_KEY$a = \".\".concat(DATA_KEY$a);\n  var DATA_API_KEY$6 = '.data-api';\n  var ARROW_LEFT_KEY = 'ArrowLeft';\n  var ARROW_RIGHT_KEY = 'ArrowRight';\n  var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch\n\n  var SWIPE_THRESHOLD = 40;\n  var Default$a = {\n    interval: 5000,\n    keyboard: true,\n    slide: false,\n    pause: 'hover',\n    wrap: true,\n    touch: true\n  };\n  var DefaultType$a = {\n    interval: '(number|boolean)',\n    keyboard: 'boolean',\n    slide: '(boolean|string)',\n    pause: '(string|boolean)',\n    wrap: 'boolean',\n    touch: 'boolean'\n  };\n  var ORDER_NEXT = 'next';\n  var ORDER_PREV = 'prev';\n  var DIRECTION_LEFT = 'left';\n  var DIRECTION_RIGHT = 'right';\n  var KEY_TO_DIRECTION = (_KEY_TO_DIRECTION = {}, _defineProperty(_KEY_TO_DIRECTION, ARROW_LEFT_KEY, DIRECTION_RIGHT), _defineProperty(_KEY_TO_DIRECTION, ARROW_RIGHT_KEY, DIRECTION_LEFT), _KEY_TO_DIRECTION);\n  var EVENT_SLIDE = \"slide\".concat(EVENT_KEY$a);\n  var EVENT_SLID = \"slid\".concat(EVENT_KEY$a);\n  var EVENT_KEYDOWN = \"keydown\".concat(EVENT_KEY$a);\n  var EVENT_MOUSEENTER = \"mouseenter\".concat(EVENT_KEY$a);\n  var EVENT_MOUSELEAVE = \"mouseleave\".concat(EVENT_KEY$a);\n  var EVENT_TOUCHSTART = \"touchstart\".concat(EVENT_KEY$a);\n  var EVENT_TOUCHMOVE = \"touchmove\".concat(EVENT_KEY$a);\n  var EVENT_TOUCHEND = \"touchend\".concat(EVENT_KEY$a);\n  var EVENT_POINTERDOWN = \"pointerdown\".concat(EVENT_KEY$a);\n  var EVENT_POINTERUP = \"pointerup\".concat(EVENT_KEY$a);\n  var EVENT_DRAG_START = \"dragstart\".concat(EVENT_KEY$a);\n  var EVENT_LOAD_DATA_API$2 = \"load\".concat(EVENT_KEY$a).concat(DATA_API_KEY$6);\n  var EVENT_CLICK_DATA_API$5 = \"click\".concat(EVENT_KEY$a).concat(DATA_API_KEY$6);\n  var CLASS_NAME_CAROUSEL = 'carousel';\n  var CLASS_NAME_ACTIVE$2 = 'active';\n  var CLASS_NAME_SLIDE = 'slide';\n  var CLASS_NAME_END = 'carousel-item-end';\n  var CLASS_NAME_START = 'carousel-item-start';\n  var CLASS_NAME_NEXT = 'carousel-item-next';\n  var CLASS_NAME_PREV = 'carousel-item-prev';\n  var CLASS_NAME_POINTER_EVENT = 'pointer-event';\n  var SELECTOR_ACTIVE$1 = '.active';\n  var SELECTOR_ACTIVE_ITEM = '.active.carousel-item';\n  var SELECTOR_ITEM = '.carousel-item';\n  var SELECTOR_ITEM_IMG = '.carousel-item img';\n  var SELECTOR_NEXT_PREV = '.carousel-item-next, .carousel-item-prev';\n  var SELECTOR_INDICATORS = '.carousel-indicators';\n  var SELECTOR_INDICATOR = '[data-bs-target]';\n  var SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]';\n  var SELECTOR_DATA_RIDE = '[data-bs-ride=\"carousel\"]';\n  var POINTER_TYPE_TOUCH = 'touch';\n  var POINTER_TYPE_PEN = 'pen';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Carousel = /*#__PURE__*/function (_BaseComponent3) {\n    _inherits(Carousel, _BaseComponent3);\n\n    var _super3 = _createSuper(Carousel);\n\n    function Carousel(element, config) {\n      var _this3;\n\n      _classCallCheck(this, Carousel);\n\n      _this3 = _super3.call(this, element);\n      _this3._items = null;\n      _this3._interval = null;\n      _this3._activeElement = null;\n      _this3._isPaused = false;\n      _this3._isSliding = false;\n      _this3.touchTimeout = null;\n      _this3.touchStartX = 0;\n      _this3.touchDeltaX = 0;\n      _this3._config = _this3._getConfig(config);\n      _this3._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, _this3._element);\n      _this3._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;\n      _this3._pointerEvent = Boolean(window.PointerEvent);\n\n      _this3._addEventListeners();\n\n      return _this3;\n    } // Getters\n\n\n    _createClass(Carousel, [{\n      key: \"next\",\n      value: // Public\n      function next() {\n        this._slide(ORDER_NEXT);\n      }\n    }, {\n      key: \"nextWhenVisible\",\n      value: function nextWhenVisible() {\n        // Don't call next when the page isn't visible\n        // or the carousel or its parent isn't visible\n        if (!document.hidden && isVisible(this._element)) {\n          this.next();\n        }\n      }\n    }, {\n      key: \"prev\",\n      value: function prev() {\n        this._slide(ORDER_PREV);\n      }\n    }, {\n      key: \"pause\",\n      value: function pause(event) {\n        if (!event) {\n          this._isPaused = true;\n        }\n\n        if (SelectorEngine.findOne(SELECTOR_NEXT_PREV, this._element)) {\n          triggerTransitionEnd(this._element);\n          this.cycle(true);\n        }\n\n        clearInterval(this._interval);\n        this._interval = null;\n      }\n    }, {\n      key: \"cycle\",\n      value: function cycle(event) {\n        if (!event) {\n          this._isPaused = false;\n        }\n\n        if (this._interval) {\n          clearInterval(this._interval);\n          this._interval = null;\n        }\n\n        if (this._config && this._config.interval && !this._isPaused) {\n          this._updateInterval();\n\n          this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);\n        }\n      }\n    }, {\n      key: \"to\",\n      value: function to(index) {\n        var _this4 = this;\n\n        this._activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);\n\n        var activeIndex = this._getItemIndex(this._activeElement);\n\n        if (index > this._items.length - 1 || index < 0) {\n          return;\n        }\n\n        if (this._isSliding) {\n          EventHandler.one(this._element, EVENT_SLID, function () {\n            return _this4.to(index);\n          });\n          return;\n        }\n\n        if (activeIndex === index) {\n          this.pause();\n          this.cycle();\n          return;\n        }\n\n        var order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;\n\n        this._slide(order, this._items[index]);\n      } // Private\n\n    }, {\n      key: \"_getConfig\",\n      value: function _getConfig(config) {\n        config = _objectSpread(_objectSpread(_objectSpread({}, Default$a), Manipulator.getDataAttributes(this._element)), _typeof(config) === 'object' ? config : {});\n        typeCheckConfig(NAME$b, config, DefaultType$a);\n        return config;\n      }\n    }, {\n      key: \"_handleSwipe\",\n      value: function _handleSwipe() {\n        var absDeltax = Math.abs(this.touchDeltaX);\n\n        if (absDeltax <= SWIPE_THRESHOLD) {\n          return;\n        }\n\n        var direction = absDeltax / this.touchDeltaX;\n        this.touchDeltaX = 0;\n\n        if (!direction) {\n          return;\n        }\n\n        this._slide(direction > 0 ? DIRECTION_RIGHT : DIRECTION_LEFT);\n      }\n    }, {\n      key: \"_addEventListeners\",\n      value: function _addEventListeners() {\n        var _this5 = this;\n\n        if (this._config.keyboard) {\n          EventHandler.on(this._element, EVENT_KEYDOWN, function (event) {\n            return _this5._keydown(event);\n          });\n        }\n\n        if (this._config.pause === 'hover') {\n          EventHandler.on(this._element, EVENT_MOUSEENTER, function (event) {\n            return _this5.pause(event);\n          });\n          EventHandler.on(this._element, EVENT_MOUSELEAVE, function (event) {\n            return _this5.cycle(event);\n          });\n        }\n\n        if (this._config.touch && this._touchSupported) {\n          this._addTouchEventListeners();\n        }\n      }\n    }, {\n      key: \"_addTouchEventListeners\",\n      value: function _addTouchEventListeners() {\n        var _this6 = this;\n\n        var hasPointerPenTouch = function hasPointerPenTouch(event) {\n          return _this6._pointerEvent && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);\n        };\n\n        var start = function start(event) {\n          if (hasPointerPenTouch(event)) {\n            _this6.touchStartX = event.clientX;\n          } else if (!_this6._pointerEvent) {\n            _this6.touchStartX = event.touches[0].clientX;\n          }\n        };\n\n        var move = function move(event) {\n          // ensure swiping with one touch and not pinching\n          _this6.touchDeltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - _this6.touchStartX;\n        };\n\n        var end = function end(event) {\n          if (hasPointerPenTouch(event)) {\n            _this6.touchDeltaX = event.clientX - _this6.touchStartX;\n          }\n\n          _this6._handleSwipe();\n\n          if (_this6._config.pause === 'hover') {\n            // If it's a touch-enabled device, mouseenter/leave are fired as\n            // part of the mouse compatibility events on first tap - the carousel\n            // would stop cycling until user tapped out of it;\n            // here, we listen for touchend, explicitly pause the carousel\n            // (as if it's the second time we tap on it, mouseenter compat event\n            // is NOT fired) and after a timeout (to allow for mouse compatibility\n            // events to fire) we explicitly restart cycling\n            _this6.pause();\n\n            if (_this6.touchTimeout) {\n              clearTimeout(_this6.touchTimeout);\n            }\n\n            _this6.touchTimeout = setTimeout(function (event) {\n              return _this6.cycle(event);\n            }, TOUCHEVENT_COMPAT_WAIT + _this6._config.interval);\n          }\n        };\n\n        SelectorEngine.find(SELECTOR_ITEM_IMG, this._element).forEach(function (itemImg) {\n          EventHandler.on(itemImg, EVENT_DRAG_START, function (event) {\n            return event.preventDefault();\n          });\n        });\n\n        if (this._pointerEvent) {\n          EventHandler.on(this._element, EVENT_POINTERDOWN, function (event) {\n            return start(event);\n          });\n          EventHandler.on(this._element, EVENT_POINTERUP, function (event) {\n            return end(event);\n          });\n\n          this._element.classList.add(CLASS_NAME_POINTER_EVENT);\n        } else {\n          EventHandler.on(this._element, EVENT_TOUCHSTART, function (event) {\n            return start(event);\n          });\n          EventHandler.on(this._element, EVENT_TOUCHMOVE, function (event) {\n            return move(event);\n          });\n          EventHandler.on(this._element, EVENT_TOUCHEND, function (event) {\n            return end(event);\n          });\n        }\n      }\n    }, {\n      key: \"_keydown\",\n      value: function _keydown(event) {\n        if (/input|textarea/i.test(event.target.tagName)) {\n          return;\n        }\n\n        var direction = KEY_TO_DIRECTION[event.key];\n\n        if (direction) {\n          event.preventDefault();\n\n          this._slide(direction);\n        }\n      }\n    }, {\n      key: \"_getItemIndex\",\n      value: function _getItemIndex(element) {\n        this._items = element && element.parentNode ? SelectorEngine.find(SELECTOR_ITEM, element.parentNode) : [];\n        return this._items.indexOf(element);\n      }\n    }, {\n      key: \"_getItemByOrder\",\n      value: function _getItemByOrder(order, activeElement) {\n        var isNext = order === ORDER_NEXT;\n        return getNextActiveElement(this._items, activeElement, isNext, this._config.wrap);\n      }\n    }, {\n      key: \"_triggerSlideEvent\",\n      value: function _triggerSlideEvent(relatedTarget, eventDirectionName) {\n        var targetIndex = this._getItemIndex(relatedTarget);\n\n        var fromIndex = this._getItemIndex(SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element));\n\n        return EventHandler.trigger(this._element, EVENT_SLIDE, {\n          relatedTarget: relatedTarget,\n          direction: eventDirectionName,\n          from: fromIndex,\n          to: targetIndex\n        });\n      }\n    }, {\n      key: \"_setActiveIndicatorElement\",\n      value: function _setActiveIndicatorElement(element) {\n        if (this._indicatorsElement) {\n          var activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE$1, this._indicatorsElement);\n          activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);\n          activeIndicator.removeAttribute('aria-current');\n          var indicators = SelectorEngine.find(SELECTOR_INDICATOR, this._indicatorsElement);\n\n          for (var i = 0; i < indicators.length; i++) {\n            if (Number.parseInt(indicators[i].getAttribute('data-bs-slide-to'), 10) === this._getItemIndex(element)) {\n              indicators[i].classList.add(CLASS_NAME_ACTIVE$2);\n              indicators[i].setAttribute('aria-current', 'true');\n              break;\n            }\n          }\n        }\n      }\n    }, {\n      key: \"_updateInterval\",\n      value: function _updateInterval() {\n        var element = this._activeElement || SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);\n\n        if (!element) {\n          return;\n        }\n\n        var elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10);\n\n        if (elementInterval) {\n          this._config.defaultInterval = this._config.defaultInterval || this._config.interval;\n          this._config.interval = elementInterval;\n        } else {\n          this._config.interval = this._config.defaultInterval || this._config.interval;\n        }\n      }\n    }, {\n      key: \"_slide\",\n      value: function _slide(directionOrOrder, element) {\n        var _this7 = this;\n\n        var order = this._directionToOrder(directionOrOrder);\n\n        var activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);\n\n        var activeElementIndex = this._getItemIndex(activeElement);\n\n        var nextElement = element || this._getItemByOrder(order, activeElement);\n\n        var nextElementIndex = this._getItemIndex(nextElement);\n\n        var isCycling = Boolean(this._interval);\n        var isNext = order === ORDER_NEXT;\n        var directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;\n        var orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;\n\n        var eventDirectionName = this._orderToDirection(order);\n\n        if (nextElement && nextElement.classList.contains(CLASS_NAME_ACTIVE$2)) {\n          this._isSliding = false;\n          return;\n        }\n\n        if (this._isSliding) {\n          return;\n        }\n\n        var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);\n\n        if (slideEvent.defaultPrevented) {\n          return;\n        }\n\n        if (!activeElement || !nextElement) {\n          // Some weirdness is happening, so we bail\n          return;\n        }\n\n        this._isSliding = true;\n\n        if (isCycling) {\n          this.pause();\n        }\n\n        this._setActiveIndicatorElement(nextElement);\n\n        this._activeElement = nextElement;\n\n        var triggerSlidEvent = function triggerSlidEvent() {\n          EventHandler.trigger(_this7._element, EVENT_SLID, {\n            relatedTarget: nextElement,\n            direction: eventDirectionName,\n            from: activeElementIndex,\n            to: nextElementIndex\n          });\n        };\n\n        if (this._element.classList.contains(CLASS_NAME_SLIDE)) {\n          nextElement.classList.add(orderClassName);\n          reflow(nextElement);\n          activeElement.classList.add(directionalClassName);\n          nextElement.classList.add(directionalClassName);\n\n          var completeCallBack = function completeCallBack() {\n            nextElement.classList.remove(directionalClassName, orderClassName);\n            nextElement.classList.add(CLASS_NAME_ACTIVE$2);\n            activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);\n            _this7._isSliding = false;\n            setTimeout(triggerSlidEvent, 0);\n          };\n\n          this._queueCallback(completeCallBack, activeElement, true);\n        } else {\n          activeElement.classList.remove(CLASS_NAME_ACTIVE$2);\n          nextElement.classList.add(CLASS_NAME_ACTIVE$2);\n          this._isSliding = false;\n          triggerSlidEvent();\n        }\n\n        if (isCycling) {\n          this.cycle();\n        }\n      }\n    }, {\n      key: \"_directionToOrder\",\n      value: function _directionToOrder(direction) {\n        if (![DIRECTION_RIGHT, DIRECTION_LEFT].includes(direction)) {\n          return direction;\n        }\n\n        if (isRTL()) {\n          return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;\n        }\n\n        return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;\n      }\n    }, {\n      key: \"_orderToDirection\",\n      value: function _orderToDirection(order) {\n        if (![ORDER_NEXT, ORDER_PREV].includes(order)) {\n          return order;\n        }\n\n        if (isRTL()) {\n          return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;\n        }\n\n        return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;\n      } // Static\n\n    }], [{\n      key: \"Default\",\n      get: function get() {\n        return Default$a;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$b;\n      }\n    }, {\n      key: \"carouselInterface\",\n      value: function carouselInterface(element, config) {\n        var data = Carousel.getOrCreateInstance(element, config);\n        var _config = data._config;\n\n        if (_typeof(config) === 'object') {\n          _config = _objectSpread(_objectSpread({}, _config), config);\n        }\n\n        var action = typeof config === 'string' ? config : _config.slide;\n\n        if (typeof config === 'number') {\n          data.to(config);\n        } else if (typeof action === 'string') {\n          if (typeof data[action] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\".concat(action, \"\\\"\"));\n          }\n\n          data[action]();\n        } else if (_config.interval && _config.ride) {\n          data.pause();\n          data.cycle();\n        }\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        return this.each(function () {\n          Carousel.carouselInterface(this, config);\n        });\n      }\n    }, {\n      key: \"dataApiClickHandler\",\n      value: function dataApiClickHandler(event) {\n        var target = getElementFromSelector(this);\n\n        if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {\n          return;\n        }\n\n        var config = _objectSpread(_objectSpread({}, Manipulator.getDataAttributes(target)), Manipulator.getDataAttributes(this));\n\n        var slideIndex = this.getAttribute('data-bs-slide-to');\n\n        if (slideIndex) {\n          config.interval = false;\n        }\n\n        Carousel.carouselInterface(target, config);\n\n        if (slideIndex) {\n          Carousel.getInstance(target).to(slideIndex);\n        }\n\n        event.preventDefault();\n      }\n    }]);\n\n    return Carousel;\n  }(BaseComponent);\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, Carousel.dataApiClickHandler);\n  EventHandler.on(window, EVENT_LOAD_DATA_API$2, function () {\n    var carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);\n\n    for (var i = 0, len = carousels.length; i < len; i++) {\n      Carousel.carouselInterface(carousels[i], Carousel.getInstance(carousels[i]));\n    }\n  });\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Carousel to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Carousel);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): collapse.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME$a = 'collapse';\n  var DATA_KEY$9 = 'bs.collapse';\n  var EVENT_KEY$9 = \".\".concat(DATA_KEY$9);\n  var DATA_API_KEY$5 = '.data-api';\n  var Default$9 = {\n    toggle: true,\n    parent: null\n  };\n  var DefaultType$9 = {\n    toggle: 'boolean',\n    parent: '(null|element)'\n  };\n  var EVENT_SHOW$5 = \"show\".concat(EVENT_KEY$9);\n  var EVENT_SHOWN$5 = \"shown\".concat(EVENT_KEY$9);\n  var EVENT_HIDE$5 = \"hide\".concat(EVENT_KEY$9);\n  var EVENT_HIDDEN$5 = \"hidden\".concat(EVENT_KEY$9);\n  var EVENT_CLICK_DATA_API$4 = \"click\".concat(EVENT_KEY$9).concat(DATA_API_KEY$5);\n  var CLASS_NAME_SHOW$7 = 'show';\n  var CLASS_NAME_COLLAPSE = 'collapse';\n  var CLASS_NAME_COLLAPSING = 'collapsing';\n  var CLASS_NAME_COLLAPSED = 'collapsed';\n  var CLASS_NAME_DEEPER_CHILDREN = \":scope .\".concat(CLASS_NAME_COLLAPSE, \" .\").concat(CLASS_NAME_COLLAPSE);\n  var CLASS_NAME_HORIZONTAL = 'collapse-horizontal';\n  var WIDTH = 'width';\n  var HEIGHT = 'height';\n  var SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';\n  var SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle=\"collapse\"]';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Collapse = /*#__PURE__*/function (_BaseComponent4) {\n    _inherits(Collapse, _BaseComponent4);\n\n    var _super4 = _createSuper(Collapse);\n\n    function Collapse(element, config) {\n      var _this8;\n\n      _classCallCheck(this, Collapse);\n\n      _this8 = _super4.call(this, element);\n      _this8._isTransitioning = false;\n      _this8._config = _this8._getConfig(config);\n      _this8._triggerArray = [];\n      var toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);\n\n      for (var i = 0, len = toggleList.length; i < len; i++) {\n        var elem = toggleList[i];\n        var selector = getSelectorFromElement(elem);\n        var filterElement = SelectorEngine.find(selector).filter(function (foundElem) {\n          return foundElem === _this8._element;\n        });\n\n        if (selector !== null && filterElement.length) {\n          _this8._selector = selector;\n\n          _this8._triggerArray.push(elem);\n        }\n      }\n\n      _this8._initializeChildren();\n\n      if (!_this8._config.parent) {\n        _this8._addAriaAndCollapsedClass(_this8._triggerArray, _this8._isShown());\n      }\n\n      if (_this8._config.toggle) {\n        _this8.toggle();\n      }\n\n      return _this8;\n    } // Getters\n\n\n    _createClass(Collapse, [{\n      key: \"toggle\",\n      value: // Public\n      function toggle() {\n        if (this._isShown()) {\n          this.hide();\n        } else {\n          this.show();\n        }\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        var _this9 = this;\n\n        if (this._isTransitioning || this._isShown()) {\n          return;\n        }\n\n        var actives = [];\n        var activesData;\n\n        if (this._config.parent) {\n          var children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);\n          actives = SelectorEngine.find(SELECTOR_ACTIVES, this._config.parent).filter(function (elem) {\n            return !children.includes(elem);\n          }); // remove children if greater depth\n        }\n\n        var container = SelectorEngine.findOne(this._selector);\n\n        if (actives.length) {\n          var tempActiveData = actives.find(function (elem) {\n            return container !== elem;\n          });\n          activesData = tempActiveData ? Collapse.getInstance(tempActiveData) : null;\n\n          if (activesData && activesData._isTransitioning) {\n            return;\n          }\n        }\n\n        var startEvent = EventHandler.trigger(this._element, EVENT_SHOW$5);\n\n        if (startEvent.defaultPrevented) {\n          return;\n        }\n\n        actives.forEach(function (elemActive) {\n          if (container !== elemActive) {\n            Collapse.getOrCreateInstance(elemActive, {\n              toggle: false\n            }).hide();\n          }\n\n          if (!activesData) {\n            Data.set(elemActive, DATA_KEY$9, null);\n          }\n        });\n\n        var dimension = this._getDimension();\n\n        this._element.classList.remove(CLASS_NAME_COLLAPSE);\n\n        this._element.classList.add(CLASS_NAME_COLLAPSING);\n\n        this._element.style[dimension] = 0;\n\n        this._addAriaAndCollapsedClass(this._triggerArray, true);\n\n        this._isTransitioning = true;\n\n        var complete = function complete() {\n          _this9._isTransitioning = false;\n\n          _this9._element.classList.remove(CLASS_NAME_COLLAPSING);\n\n          _this9._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);\n\n          _this9._element.style[dimension] = '';\n          EventHandler.trigger(_this9._element, EVENT_SHOWN$5);\n        };\n\n        var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);\n        var scrollSize = \"scroll\".concat(capitalizedDimension);\n\n        this._queueCallback(complete, this._element, true);\n\n        this._element.style[dimension] = \"\".concat(this._element[scrollSize], \"px\");\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        var _this10 = this;\n\n        if (this._isTransitioning || !this._isShown()) {\n          return;\n        }\n\n        var startEvent = EventHandler.trigger(this._element, EVENT_HIDE$5);\n\n        if (startEvent.defaultPrevented) {\n          return;\n        }\n\n        var dimension = this._getDimension();\n\n        this._element.style[dimension] = \"\".concat(this._element.getBoundingClientRect()[dimension], \"px\");\n        reflow(this._element);\n\n        this._element.classList.add(CLASS_NAME_COLLAPSING);\n\n        this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);\n\n        var triggerArrayLength = this._triggerArray.length;\n\n        for (var i = 0; i < triggerArrayLength; i++) {\n          var trigger = this._triggerArray[i];\n          var elem = getElementFromSelector(trigger);\n\n          if (elem && !this._isShown(elem)) {\n            this._addAriaAndCollapsedClass([trigger], false);\n          }\n        }\n\n        this._isTransitioning = true;\n\n        var complete = function complete() {\n          _this10._isTransitioning = false;\n\n          _this10._element.classList.remove(CLASS_NAME_COLLAPSING);\n\n          _this10._element.classList.add(CLASS_NAME_COLLAPSE);\n\n          EventHandler.trigger(_this10._element, EVENT_HIDDEN$5);\n        };\n\n        this._element.style[dimension] = '';\n\n        this._queueCallback(complete, this._element, true);\n      }\n    }, {\n      key: \"_isShown\",\n      value: function _isShown() {\n        var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._element;\n        return element.classList.contains(CLASS_NAME_SHOW$7);\n      } // Private\n\n    }, {\n      key: \"_getConfig\",\n      value: function _getConfig(config) {\n        config = _objectSpread(_objectSpread(_objectSpread({}, Default$9), Manipulator.getDataAttributes(this._element)), config);\n        config.toggle = Boolean(config.toggle); // Coerce string values\n\n        config.parent = getElement(config.parent);\n        typeCheckConfig(NAME$a, config, DefaultType$9);\n        return config;\n      }\n    }, {\n      key: \"_getDimension\",\n      value: function _getDimension() {\n        return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;\n      }\n    }, {\n      key: \"_initializeChildren\",\n      value: function _initializeChildren() {\n        var _this11 = this;\n\n        if (!this._config.parent) {\n          return;\n        }\n\n        var children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);\n        SelectorEngine.find(SELECTOR_DATA_TOGGLE$4, this._config.parent).filter(function (elem) {\n          return !children.includes(elem);\n        }).forEach(function (element) {\n          var selected = getElementFromSelector(element);\n\n          if (selected) {\n            _this11._addAriaAndCollapsedClass([element], _this11._isShown(selected));\n          }\n        });\n      }\n    }, {\n      key: \"_addAriaAndCollapsedClass\",\n      value: function _addAriaAndCollapsedClass(triggerArray, isOpen) {\n        if (!triggerArray.length) {\n          return;\n        }\n\n        triggerArray.forEach(function (elem) {\n          if (isOpen) {\n            elem.classList.remove(CLASS_NAME_COLLAPSED);\n          } else {\n            elem.classList.add(CLASS_NAME_COLLAPSED);\n          }\n\n          elem.setAttribute('aria-expanded', isOpen);\n        });\n      } // Static\n\n    }], [{\n      key: \"Default\",\n      get: function get() {\n        return Default$9;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$a;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        return this.each(function () {\n          var _config = {};\n\n          if (typeof config === 'string' && /show|hide/.test(config)) {\n            _config.toggle = false;\n          }\n\n          var data = Collapse.getOrCreateInstance(this, _config);\n\n          if (typeof config === 'string') {\n            if (typeof data[config] === 'undefined') {\n              throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n            }\n\n            data[config]();\n          }\n        });\n      }\n    }]);\n\n    return Collapse;\n  }(BaseComponent);\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function (event) {\n    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n    if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') {\n      event.preventDefault();\n    }\n\n    var selector = getSelectorFromElement(this);\n    var selectorElements = SelectorEngine.find(selector);\n    selectorElements.forEach(function (element) {\n      Collapse.getOrCreateInstance(element, {\n        toggle: false\n      }).toggle();\n    });\n  });\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Collapse to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Collapse);\n  var top = 'top';\n  var bottom = 'bottom';\n  var right = 'right';\n  var left = 'left';\n  var auto = 'auto';\n  var basePlacements = [top, bottom, right, left];\n  var start = 'start';\n  var end = 'end';\n  var clippingParents = 'clippingParents';\n  var viewport = 'viewport';\n  var popper = 'popper';\n  var reference = 'reference';\n  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {\n    return acc.concat([placement + \"-\" + start, placement + \"-\" + end]);\n  }, []);\n  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {\n    return acc.concat([placement, placement + \"-\" + start, placement + \"-\" + end]);\n  }, []); // modifiers that need to read the DOM\n\n  var beforeRead = 'beforeRead';\n  var read = 'read';\n  var afterRead = 'afterRead'; // pure-logic modifiers\n\n  var beforeMain = 'beforeMain';\n  var main = 'main';\n  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)\n\n  var beforeWrite = 'beforeWrite';\n  var write = 'write';\n  var afterWrite = 'afterWrite';\n  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];\n\n  function getNodeName(element) {\n    return element ? (element.nodeName || '').toLowerCase() : null;\n  }\n\n  function getWindow(node) {\n    if (node == null) {\n      return window;\n    }\n\n    if (node.toString() !== '[object Window]') {\n      var ownerDocument = node.ownerDocument;\n      return ownerDocument ? ownerDocument.defaultView || window : window;\n    }\n\n    return node;\n  }\n\n  function isElement(node) {\n    var OwnElement = getWindow(node).Element;\n    return node instanceof OwnElement || node instanceof Element;\n  }\n\n  function isHTMLElement(node) {\n    var OwnElement = getWindow(node).HTMLElement;\n    return node instanceof OwnElement || node instanceof HTMLElement;\n  }\n\n  function isShadowRoot(node) {\n    // IE 11 has no ShadowRoot\n    if (typeof ShadowRoot === 'undefined') {\n      return false;\n    }\n\n    var OwnElement = getWindow(node).ShadowRoot;\n    return node instanceof OwnElement || node instanceof ShadowRoot;\n  } // and applies them to the HTMLElements such as popper and arrow\n\n\n  function applyStyles(_ref) {\n    var state = _ref.state;\n    Object.keys(state.elements).forEach(function (name) {\n      var style = state.styles[name] || {};\n      var attributes = state.attributes[name] || {};\n      var element = state.elements[name]; // arrow is optional + virtual elements\n\n      if (!isHTMLElement(element) || !getNodeName(element)) {\n        return;\n      } // Flow doesn't support to extend this property, but it's the most\n      // effective way to apply styles to an HTMLElement\n      // $FlowFixMe[cannot-write]\n\n\n      Object.assign(element.style, style);\n      Object.keys(attributes).forEach(function (name) {\n        var value = attributes[name];\n\n        if (value === false) {\n          element.removeAttribute(name);\n        } else {\n          element.setAttribute(name, value === true ? '' : value);\n        }\n      });\n    });\n  }\n\n  function effect$2(_ref2) {\n    var state = _ref2.state;\n    var initialStyles = {\n      popper: {\n        position: state.options.strategy,\n        left: '0',\n        top: '0',\n        margin: '0'\n      },\n      arrow: {\n        position: 'absolute'\n      },\n      reference: {}\n    };\n    Object.assign(state.elements.popper.style, initialStyles.popper);\n    state.styles = initialStyles;\n\n    if (state.elements.arrow) {\n      Object.assign(state.elements.arrow.style, initialStyles.arrow);\n    }\n\n    return function () {\n      Object.keys(state.elements).forEach(function (name) {\n        var element = state.elements[name];\n        var attributes = state.attributes[name] || {};\n        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them\n\n        var style = styleProperties.reduce(function (style, property) {\n          style[property] = '';\n          return style;\n        }, {}); // arrow is optional + virtual elements\n\n        if (!isHTMLElement(element) || !getNodeName(element)) {\n          return;\n        }\n\n        Object.assign(element.style, style);\n        Object.keys(attributes).forEach(function (attribute) {\n          element.removeAttribute(attribute);\n        });\n      });\n    };\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  var applyStyles$1 = {\n    name: 'applyStyles',\n    enabled: true,\n    phase: 'write',\n    fn: applyStyles,\n    effect: effect$2,\n    requires: ['computeStyles']\n  };\n\n  function getBasePlacement(placement) {\n    return placement.split('-')[0];\n  } // import { isHTMLElement } from './instanceOf';\n\n\n  function getBoundingClientRect(element, // eslint-disable-next-line unused-imports/no-unused-vars\n  includeScale) {\n    var rect = element.getBoundingClientRect();\n    var scaleX = 1;\n    var scaleY = 1; // FIXME:\n    // `offsetWidth` returns an integer while `getBoundingClientRect`\n    // returns a float. This results in `scaleX` or `scaleY` being\n    // non-1 when it should be for elements that aren't a full pixel in\n    // width or height.\n    // if (isHTMLElement(element) && includeScale) {\n    //   const offsetHeight = element.offsetHeight;\n    //   const offsetWidth = element.offsetWidth;\n    //   // Do not attempt to divide by 0, otherwise we get `Infinity` as scale\n    //   // Fallback to 1 in case both values are `0`\n    //   if (offsetWidth > 0) {\n    //     scaleX = rect.width / offsetWidth || 1;\n    //   }\n    //   if (offsetHeight > 0) {\n    //     scaleY = rect.height / offsetHeight || 1;\n    //   }\n    // }\n\n    return {\n      width: rect.width / scaleX,\n      height: rect.height / scaleY,\n      top: rect.top / scaleY,\n      right: rect.right / scaleX,\n      bottom: rect.bottom / scaleY,\n      left: rect.left / scaleX,\n      x: rect.left / scaleX,\n      y: rect.top / scaleY\n    };\n  } // means it doesn't take into account transforms.\n\n\n  function getLayoutRect(element) {\n    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.\n    // Fixes https://github.com/popperjs/popper-core/issues/1223\n\n    var width = element.offsetWidth;\n    var height = element.offsetHeight;\n\n    if (Math.abs(clientRect.width - width) <= 1) {\n      width = clientRect.width;\n    }\n\n    if (Math.abs(clientRect.height - height) <= 1) {\n      height = clientRect.height;\n    }\n\n    return {\n      x: element.offsetLeft,\n      y: element.offsetTop,\n      width: width,\n      height: height\n    };\n  }\n\n  function contains(parent, child) {\n    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method\n\n    if (parent.contains(child)) {\n      return true;\n    } // then fallback to custom implementation with Shadow DOM support\n    else if (rootNode && isShadowRoot(rootNode)) {\n        var next = child;\n\n        do {\n          if (next && parent.isSameNode(next)) {\n            return true;\n          } // $FlowFixMe[prop-missing]: need a better way to handle this...\n\n\n          next = next.parentNode || next.host;\n        } while (next);\n      } // Give up, the result is false\n\n\n    return false;\n  }\n\n  function getComputedStyle$1(element) {\n    return getWindow(element).getComputedStyle(element);\n  }\n\n  function isTableElement(element) {\n    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;\n  }\n\n  function getDocumentElement(element) {\n    // $FlowFixMe[incompatible-return]: assume body is always available\n    return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]\n    element.document) || window.document).documentElement;\n  }\n\n  function getParentNode(element) {\n    if (getNodeName(element) === 'html') {\n      return element;\n    }\n\n    return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle\n      // $FlowFixMe[incompatible-return]\n      // $FlowFixMe[prop-missing]\n      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n      element.parentNode || ( // DOM Element detected\n      isShadowRoot(element) ? element.host : null) || // ShadowRoot detected\n      // $FlowFixMe[incompatible-call]: HTMLElement is a Node\n      getDocumentElement(element) // fallback\n\n    );\n  }\n\n  function getTrueOffsetParent(element) {\n    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837\n    getComputedStyle$1(element).position === 'fixed') {\n      return null;\n    }\n\n    return element.offsetParent;\n  } // `.offsetParent` reports `null` for fixed elements, while absolute elements\n  // return the containing block\n\n\n  function getContainingBlock(element) {\n    var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;\n    var isIE = navigator.userAgent.indexOf('Trident') !== -1;\n\n    if (isIE && isHTMLElement(element)) {\n      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport\n      var elementCss = getComputedStyle$1(element);\n\n      if (elementCss.position === 'fixed') {\n        return null;\n      }\n    }\n\n    var currentNode = getParentNode(element);\n\n    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {\n      var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that\n      // create a containing block.\n      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n\n      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {\n        return currentNode;\n      } else {\n        currentNode = currentNode.parentNode;\n      }\n    }\n\n    return null;\n  } // Gets the closest ancestor positioned element. Handles some edge cases,\n  // such as table ancestors and cross browser bugs.\n\n\n  function getOffsetParent(element) {\n    var window = getWindow(element);\n    var offsetParent = getTrueOffsetParent(element);\n\n    while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {\n      offsetParent = getTrueOffsetParent(offsetParent);\n    }\n\n    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {\n      return window;\n    }\n\n    return offsetParent || getContainingBlock(element) || window;\n  }\n\n  function getMainAxisFromPlacement(placement) {\n    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';\n  }\n\n  var max = Math.max;\n  var min = Math.min;\n  var round = Math.round;\n\n  function within(min$1, value, max$1) {\n    return max(min$1, min(value, max$1));\n  }\n\n  function getFreshSideObject() {\n    return {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    };\n  }\n\n  function mergePaddingObject(paddingObject) {\n    return Object.assign({}, getFreshSideObject(), paddingObject);\n  }\n\n  function expandToHashMap(value, keys) {\n    return keys.reduce(function (hashMap, key) {\n      hashMap[key] = value;\n      return hashMap;\n    }, {});\n  }\n\n  var toPaddingObject = function toPaddingObject(padding, state) {\n    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {\n      placement: state.placement\n    })) : padding;\n    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n  };\n\n  function arrow(_ref) {\n    var _state$modifiersData$;\n\n    var state = _ref.state,\n        name = _ref.name,\n        options = _ref.options;\n    var arrowElement = state.elements.arrow;\n    var popperOffsets = state.modifiersData.popperOffsets;\n    var basePlacement = getBasePlacement(state.placement);\n    var axis = getMainAxisFromPlacement(basePlacement);\n    var isVertical = [left, right].indexOf(basePlacement) >= 0;\n    var len = isVertical ? 'height' : 'width';\n\n    if (!arrowElement || !popperOffsets) {\n      return;\n    }\n\n    var paddingObject = toPaddingObject(options.padding, state);\n    var arrowRect = getLayoutRect(arrowElement);\n    var minProp = axis === 'y' ? top : left;\n    var maxProp = axis === 'y' ? bottom : right;\n    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];\n    var startDiff = popperOffsets[axis] - state.rects.reference[axis];\n    var arrowOffsetParent = getOffsetParent(arrowElement);\n    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is\n    // outside of the popper bounds\n\n    var min = paddingObject[minProp];\n    var max = clientSize - arrowRect[len] - paddingObject[maxProp];\n    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;\n    var offset = within(min, center, max); // Prevents breaking syntax highlighting...\n\n    var axisProp = axis;\n    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);\n  }\n\n  function effect$1(_ref2) {\n    var state = _ref2.state,\n        options = _ref2.options;\n    var _options$element = options.element,\n        arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;\n\n    if (arrowElement == null) {\n      return;\n    } // CSS selector\n\n\n    if (typeof arrowElement === 'string') {\n      arrowElement = state.elements.popper.querySelector(arrowElement);\n\n      if (!arrowElement) {\n        return;\n      }\n    }\n\n    if (!contains(state.elements.popper, arrowElement)) {\n      return;\n    }\n\n    state.elements.arrow = arrowElement;\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  var arrow$1 = {\n    name: 'arrow',\n    enabled: true,\n    phase: 'main',\n    fn: arrow,\n    effect: effect$1,\n    requires: ['popperOffsets'],\n    requiresIfExists: ['preventOverflow']\n  };\n\n  function getVariation(placement) {\n    return placement.split('-')[1];\n  }\n\n  var unsetSides = {\n    top: 'auto',\n    right: 'auto',\n    bottom: 'auto',\n    left: 'auto'\n  }; // Round the offsets to the nearest suitable subpixel based on the DPR.\n  // Zooming can change the DPR, but it seems to report a value that will\n  // cleanly divide the values into the appropriate subpixels.\n\n  function roundOffsetsByDPR(_ref) {\n    var x = _ref.x,\n        y = _ref.y;\n    var win = window;\n    var dpr = win.devicePixelRatio || 1;\n    return {\n      x: round(round(x * dpr) / dpr) || 0,\n      y: round(round(y * dpr) / dpr) || 0\n    };\n  }\n\n  function mapToStyles(_ref2) {\n    var _Object$assign2;\n\n    var popper = _ref2.popper,\n        popperRect = _ref2.popperRect,\n        placement = _ref2.placement,\n        variation = _ref2.variation,\n        offsets = _ref2.offsets,\n        position = _ref2.position,\n        gpuAcceleration = _ref2.gpuAcceleration,\n        adaptive = _ref2.adaptive,\n        roundOffsets = _ref2.roundOffsets;\n\n    var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets,\n        _ref3$x = _ref3.x,\n        x = _ref3$x === void 0 ? 0 : _ref3$x,\n        _ref3$y = _ref3.y,\n        y = _ref3$y === void 0 ? 0 : _ref3$y;\n\n    var hasX = offsets.hasOwnProperty('x');\n    var hasY = offsets.hasOwnProperty('y');\n    var sideX = left;\n    var sideY = top;\n    var win = window;\n\n    if (adaptive) {\n      var offsetParent = getOffsetParent(popper);\n      var heightProp = 'clientHeight';\n      var widthProp = 'clientWidth';\n\n      if (offsetParent === getWindow(popper)) {\n        offsetParent = getDocumentElement(popper);\n\n        if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {\n          heightProp = 'scrollHeight';\n          widthProp = 'scrollWidth';\n        }\n      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it\n\n\n      offsetParent = offsetParent;\n\n      if (placement === top || (placement === left || placement === right) && variation === end) {\n        sideY = bottom; // $FlowFixMe[prop-missing]\n\n        y -= offsetParent[heightProp] - popperRect.height;\n        y *= gpuAcceleration ? 1 : -1;\n      }\n\n      if (placement === left || (placement === top || placement === bottom) && variation === end) {\n        sideX = right; // $FlowFixMe[prop-missing]\n\n        x -= offsetParent[widthProp] - popperRect.width;\n        x *= gpuAcceleration ? 1 : -1;\n      }\n    }\n\n    var commonStyles = Object.assign({\n      position: position\n    }, adaptive && unsetSides);\n\n    if (gpuAcceleration) {\n      var _Object$assign;\n\n      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? \"translate(\" + x + \"px, \" + y + \"px)\" : \"translate3d(\" + x + \"px, \" + y + \"px, 0)\", _Object$assign));\n    }\n\n    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + \"px\" : '', _Object$assign2[sideX] = hasX ? x + \"px\" : '', _Object$assign2.transform = '', _Object$assign2));\n  }\n\n  function computeStyles(_ref4) {\n    var state = _ref4.state,\n        options = _ref4.options;\n    var _options$gpuAccelerat = options.gpuAcceleration,\n        gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,\n        _options$adaptive = options.adaptive,\n        adaptive = _options$adaptive === void 0 ? true : _options$adaptive,\n        _options$roundOffsets = options.roundOffsets,\n        roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;\n    var commonStyles = {\n      placement: getBasePlacement(state.placement),\n      variation: getVariation(state.placement),\n      popper: state.elements.popper,\n      popperRect: state.rects.popper,\n      gpuAcceleration: gpuAcceleration\n    };\n\n    if (state.modifiersData.popperOffsets != null) {\n      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {\n        offsets: state.modifiersData.popperOffsets,\n        position: state.options.strategy,\n        adaptive: adaptive,\n        roundOffsets: roundOffsets\n      })));\n    }\n\n    if (state.modifiersData.arrow != null) {\n      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {\n        offsets: state.modifiersData.arrow,\n        position: 'absolute',\n        adaptive: false,\n        roundOffsets: roundOffsets\n      })));\n    }\n\n    state.attributes.popper = Object.assign({}, state.attributes.popper, {\n      'data-popper-placement': state.placement\n    });\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  var computeStyles$1 = {\n    name: 'computeStyles',\n    enabled: true,\n    phase: 'beforeWrite',\n    fn: computeStyles,\n    data: {}\n  };\n  var passive = {\n    passive: true\n  };\n\n  function effect(_ref) {\n    var state = _ref.state,\n        instance = _ref.instance,\n        options = _ref.options;\n    var _options$scroll = options.scroll,\n        scroll = _options$scroll === void 0 ? true : _options$scroll,\n        _options$resize = options.resize,\n        resize = _options$resize === void 0 ? true : _options$resize;\n    var window = getWindow(state.elements.popper);\n    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);\n\n    if (scroll) {\n      scrollParents.forEach(function (scrollParent) {\n        scrollParent.addEventListener('scroll', instance.update, passive);\n      });\n    }\n\n    if (resize) {\n      window.addEventListener('resize', instance.update, passive);\n    }\n\n    return function () {\n      if (scroll) {\n        scrollParents.forEach(function (scrollParent) {\n          scrollParent.removeEventListener('scroll', instance.update, passive);\n        });\n      }\n\n      if (resize) {\n        window.removeEventListener('resize', instance.update, passive);\n      }\n    };\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  var eventListeners = {\n    name: 'eventListeners',\n    enabled: true,\n    phase: 'write',\n    fn: function fn() {},\n    effect: effect,\n    data: {}\n  };\n  var hash$1 = {\n    left: 'right',\n    right: 'left',\n    bottom: 'top',\n    top: 'bottom'\n  };\n\n  function getOppositePlacement(placement) {\n    return placement.replace(/left|right|bottom|top/g, function (matched) {\n      return hash$1[matched];\n    });\n  }\n\n  var hash = {\n    start: 'end',\n    end: 'start'\n  };\n\n  function getOppositeVariationPlacement(placement) {\n    return placement.replace(/start|end/g, function (matched) {\n      return hash[matched];\n    });\n  }\n\n  function getWindowScroll(node) {\n    var win = getWindow(node);\n    var scrollLeft = win.pageXOffset;\n    var scrollTop = win.pageYOffset;\n    return {\n      scrollLeft: scrollLeft,\n      scrollTop: scrollTop\n    };\n  }\n\n  function getWindowScrollBarX(element) {\n    // If <html> has a CSS width greater than the viewport, then this will be\n    // incorrect for RTL.\n    // Popper 1 is broken in this case and never had a bug report so let's assume\n    // it's not an issue. I don't think anyone ever specifies width on <html>\n    // anyway.\n    // Browsers where the left scrollbar doesn't cause an issue report `0` for\n    // this (e.g. Edge 2019, IE11, Safari)\n    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;\n  }\n\n  function getViewportRect(element) {\n    var win = getWindow(element);\n    var html = getDocumentElement(element);\n    var visualViewport = win.visualViewport;\n    var width = html.clientWidth;\n    var height = html.clientHeight;\n    var x = 0;\n    var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper\n    // can be obscured underneath it.\n    // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even\n    // if it isn't open, so if this isn't available, the popper will be detected\n    // to overflow the bottom of the screen too early.\n\n    if (visualViewport) {\n      width = visualViewport.width;\n      height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)\n      // In Chrome, it returns a value very close to 0 (+/-) but contains rounding\n      // errors due to floating point numbers, so we need to check precision.\n      // Safari returns a number <= 0, usually < -1 when pinch-zoomed\n      // Feature detection fails in mobile emulation mode in Chrome.\n      // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <\n      // 0.001\n      // Fallback here: \"Not Safari\" userAgent\n\n      if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n        x = visualViewport.offsetLeft;\n        y = visualViewport.offsetTop;\n      }\n    }\n\n    return {\n      width: width,\n      height: height,\n      x: x + getWindowScrollBarX(element),\n      y: y\n    };\n  } // of the `<html>` and `<body>` rect bounds if horizontally scrollable\n\n\n  function getDocumentRect(element) {\n    var _element$ownerDocumen;\n\n    var html = getDocumentElement(element);\n    var winScroll = getWindowScroll(element);\n    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;\n    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);\n    var y = -winScroll.scrollTop;\n\n    if (getComputedStyle$1(body || html).direction === 'rtl') {\n      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;\n    }\n\n    return {\n      width: width,\n      height: height,\n      x: x,\n      y: y\n    };\n  }\n\n  function isScrollParent(element) {\n    // Firefox wants us to check `-x` and `-y` variations as well\n    var _getComputedStyle = getComputedStyle$1(element),\n        overflow = _getComputedStyle.overflow,\n        overflowX = _getComputedStyle.overflowX,\n        overflowY = _getComputedStyle.overflowY;\n\n    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);\n  }\n\n  function getScrollParent(node) {\n    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {\n      // $FlowFixMe[incompatible-return]: assume body is always available\n      return node.ownerDocument.body;\n    }\n\n    if (isHTMLElement(node) && isScrollParent(node)) {\n      return node;\n    }\n\n    return getScrollParent(getParentNode(node));\n  }\n  /*\n  given a DOM element, return the list of all scroll parents, up the list of ancesors\n  until we get to the top window object. This list is what we attach scroll listeners\n  to, because if any of these parent elements scroll, we'll need to re-calculate the\n  reference element's position.\n  */\n\n\n  function listScrollParents(element, list) {\n    var _element$ownerDocumen;\n\n    if (list === void 0) {\n      list = [];\n    }\n\n    var scrollParent = getScrollParent(element);\n    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);\n    var win = getWindow(scrollParent);\n    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;\n    var updatedList = list.concat(target);\n    return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here\n    updatedList.concat(listScrollParents(getParentNode(target)));\n  }\n\n  function rectToClientRect(rect) {\n    return Object.assign({}, rect, {\n      left: rect.x,\n      top: rect.y,\n      right: rect.x + rect.width,\n      bottom: rect.y + rect.height\n    });\n  }\n\n  function getInnerBoundingClientRect(element) {\n    var rect = getBoundingClientRect(element);\n    rect.top = rect.top + element.clientTop;\n    rect.left = rect.left + element.clientLeft;\n    rect.bottom = rect.top + element.clientHeight;\n    rect.right = rect.left + element.clientWidth;\n    rect.width = element.clientWidth;\n    rect.height = element.clientHeight;\n    rect.x = rect.left;\n    rect.y = rect.top;\n    return rect;\n  }\n\n  function getClientRectFromMixedType(element, clippingParent) {\n    return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));\n  } // A \"clipping parent\" is an overflowable container with the characteristic of\n  // clipping (or hiding) overflowing elements with a position different from\n  // `initial`\n\n\n  function getClippingParents(element) {\n    var clippingParents = listScrollParents(getParentNode(element));\n    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;\n    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;\n\n    if (!isElement(clipperElement)) {\n      return [];\n    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414\n\n\n    return clippingParents.filter(function (clippingParent) {\n      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';\n    });\n  } // Gets the maximum area that the element is visible in due to any number of\n  // clipping parents\n\n\n  function getClippingRect(element, boundary, rootBoundary) {\n    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);\n    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);\n    var firstClippingParent = clippingParents[0];\n    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {\n      var rect = getClientRectFromMixedType(element, clippingParent);\n      accRect.top = max(rect.top, accRect.top);\n      accRect.right = min(rect.right, accRect.right);\n      accRect.bottom = min(rect.bottom, accRect.bottom);\n      accRect.left = max(rect.left, accRect.left);\n      return accRect;\n    }, getClientRectFromMixedType(element, firstClippingParent));\n    clippingRect.width = clippingRect.right - clippingRect.left;\n    clippingRect.height = clippingRect.bottom - clippingRect.top;\n    clippingRect.x = clippingRect.left;\n    clippingRect.y = clippingRect.top;\n    return clippingRect;\n  }\n\n  function computeOffsets(_ref) {\n    var reference = _ref.reference,\n        element = _ref.element,\n        placement = _ref.placement;\n    var basePlacement = placement ? getBasePlacement(placement) : null;\n    var variation = placement ? getVariation(placement) : null;\n    var commonX = reference.x + reference.width / 2 - element.width / 2;\n    var commonY = reference.y + reference.height / 2 - element.height / 2;\n    var offsets;\n\n    switch (basePlacement) {\n      case top:\n        offsets = {\n          x: commonX,\n          y: reference.y - element.height\n        };\n        break;\n\n      case bottom:\n        offsets = {\n          x: commonX,\n          y: reference.y + reference.height\n        };\n        break;\n\n      case right:\n        offsets = {\n          x: reference.x + reference.width,\n          y: commonY\n        };\n        break;\n\n      case left:\n        offsets = {\n          x: reference.x - element.width,\n          y: commonY\n        };\n        break;\n\n      default:\n        offsets = {\n          x: reference.x,\n          y: reference.y\n        };\n    }\n\n    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n\n    if (mainAxis != null) {\n      var len = mainAxis === 'y' ? 'height' : 'width';\n\n      switch (variation) {\n        case start:\n          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);\n          break;\n\n        case end:\n          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);\n          break;\n      }\n    }\n\n    return offsets;\n  }\n\n  function detectOverflow(state, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _options = options,\n        _options$placement = _options.placement,\n        placement = _options$placement === void 0 ? state.placement : _options$placement,\n        _options$boundary = _options.boundary,\n        boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,\n        _options$rootBoundary = _options.rootBoundary,\n        rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,\n        _options$elementConte = _options.elementContext,\n        elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,\n        _options$altBoundary = _options.altBoundary,\n        altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,\n        _options$padding = _options.padding,\n        padding = _options$padding === void 0 ? 0 : _options$padding;\n    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n    var altContext = elementContext === popper ? reference : popper;\n    var popperRect = state.rects.popper;\n    var element = state.elements[altBoundary ? altContext : elementContext];\n    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);\n    var referenceClientRect = getBoundingClientRect(state.elements.reference);\n    var popperOffsets = computeOffsets({\n      reference: referenceClientRect,\n      element: popperRect,\n      strategy: 'absolute',\n      placement: placement\n    });\n    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));\n    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect\n    // 0 or negative = within the clipping rect\n\n    var overflowOffsets = {\n      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n      right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n    };\n    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element\n\n    if (elementContext === popper && offsetData) {\n      var offset = offsetData[placement];\n      Object.keys(overflowOffsets).forEach(function (key) {\n        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;\n        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';\n        overflowOffsets[key] += offset[axis] * multiply;\n      });\n    }\n\n    return overflowOffsets;\n  }\n\n  function computeAutoPlacement(state, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _options = options,\n        placement = _options.placement,\n        boundary = _options.boundary,\n        rootBoundary = _options.rootBoundary,\n        padding = _options.padding,\n        flipVariations = _options.flipVariations,\n        _options$allowedAutoP = _options.allowedAutoPlacements,\n        allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;\n    var variation = getVariation(placement);\n    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {\n      return getVariation(placement) === variation;\n    }) : basePlacements;\n    var allowedPlacements = placements$1.filter(function (placement) {\n      return allowedAutoPlacements.indexOf(placement) >= 0;\n    });\n\n    if (allowedPlacements.length === 0) {\n      allowedPlacements = placements$1;\n    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...\n\n\n    var overflows = allowedPlacements.reduce(function (acc, placement) {\n      acc[placement] = detectOverflow(state, {\n        placement: placement,\n        boundary: boundary,\n        rootBoundary: rootBoundary,\n        padding: padding\n      })[getBasePlacement(placement)];\n      return acc;\n    }, {});\n    return Object.keys(overflows).sort(function (a, b) {\n      return overflows[a] - overflows[b];\n    });\n  }\n\n  function getExpandedFallbackPlacements(placement) {\n    if (getBasePlacement(placement) === auto) {\n      return [];\n    }\n\n    var oppositePlacement = getOppositePlacement(placement);\n    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];\n  }\n\n  function flip(_ref) {\n    var state = _ref.state,\n        options = _ref.options,\n        name = _ref.name;\n\n    if (state.modifiersData[name]._skip) {\n      return;\n    }\n\n    var _options$mainAxis = options.mainAxis,\n        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n        _options$altAxis = options.altAxis,\n        checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,\n        specifiedFallbackPlacements = options.fallbackPlacements,\n        padding = options.padding,\n        boundary = options.boundary,\n        rootBoundary = options.rootBoundary,\n        altBoundary = options.altBoundary,\n        _options$flipVariatio = options.flipVariations,\n        flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,\n        allowedAutoPlacements = options.allowedAutoPlacements;\n    var preferredPlacement = state.options.placement;\n    var basePlacement = getBasePlacement(preferredPlacement);\n    var isBasePlacement = basePlacement === preferredPlacement;\n    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));\n    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {\n      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {\n        placement: placement,\n        boundary: boundary,\n        rootBoundary: rootBoundary,\n        padding: padding,\n        flipVariations: flipVariations,\n        allowedAutoPlacements: allowedAutoPlacements\n      }) : placement);\n    }, []);\n    var referenceRect = state.rects.reference;\n    var popperRect = state.rects.popper;\n    var checksMap = new Map();\n    var makeFallbackChecks = true;\n    var firstFittingPlacement = placements[0];\n\n    for (var i = 0; i < placements.length; i++) {\n      var placement = placements[i];\n\n      var _basePlacement = getBasePlacement(placement);\n\n      var isStartVariation = getVariation(placement) === start;\n      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;\n      var len = isVertical ? 'width' : 'height';\n      var overflow = detectOverflow(state, {\n        placement: placement,\n        boundary: boundary,\n        rootBoundary: rootBoundary,\n        altBoundary: altBoundary,\n        padding: padding\n      });\n      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;\n\n      if (referenceRect[len] > popperRect[len]) {\n        mainVariationSide = getOppositePlacement(mainVariationSide);\n      }\n\n      var altVariationSide = getOppositePlacement(mainVariationSide);\n      var checks = [];\n\n      if (checkMainAxis) {\n        checks.push(overflow[_basePlacement] <= 0);\n      }\n\n      if (checkAltAxis) {\n        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n      }\n\n      if (checks.every(function (check) {\n        return check;\n      })) {\n        firstFittingPlacement = placement;\n        makeFallbackChecks = false;\n        break;\n      }\n\n      checksMap.set(placement, checks);\n    }\n\n    if (makeFallbackChecks) {\n      // `2` may be desired in some cases – research later\n      var numberOfChecks = flipVariations ? 3 : 1;\n\n      var _loop = function _loop(_i) {\n        var fittingPlacement = placements.find(function (placement) {\n          var checks = checksMap.get(placement);\n\n          if (checks) {\n            return checks.slice(0, _i).every(function (check) {\n              return check;\n            });\n          }\n        });\n\n        if (fittingPlacement) {\n          firstFittingPlacement = fittingPlacement;\n          return \"break\";\n        }\n      };\n\n      for (var _i = numberOfChecks; _i > 0; _i--) {\n        var _ret = _loop(_i);\n\n        if (_ret === \"break\") break;\n      }\n    }\n\n    if (state.placement !== firstFittingPlacement) {\n      state.modifiersData[name]._skip = true;\n      state.placement = firstFittingPlacement;\n      state.reset = true;\n    }\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  var flip$1 = {\n    name: 'flip',\n    enabled: true,\n    phase: 'main',\n    fn: flip,\n    requiresIfExists: ['offset'],\n    data: {\n      _skip: false\n    }\n  };\n\n  function getSideOffsets(overflow, rect, preventedOffsets) {\n    if (preventedOffsets === void 0) {\n      preventedOffsets = {\n        x: 0,\n        y: 0\n      };\n    }\n\n    return {\n      top: overflow.top - rect.height - preventedOffsets.y,\n      right: overflow.right - rect.width + preventedOffsets.x,\n      bottom: overflow.bottom - rect.height + preventedOffsets.y,\n      left: overflow.left - rect.width - preventedOffsets.x\n    };\n  }\n\n  function isAnySideFullyClipped(overflow) {\n    return [top, right, bottom, left].some(function (side) {\n      return overflow[side] >= 0;\n    });\n  }\n\n  function hide(_ref) {\n    var state = _ref.state,\n        name = _ref.name;\n    var referenceRect = state.rects.reference;\n    var popperRect = state.rects.popper;\n    var preventedOffsets = state.modifiersData.preventOverflow;\n    var referenceOverflow = detectOverflow(state, {\n      elementContext: 'reference'\n    });\n    var popperAltOverflow = detectOverflow(state, {\n      altBoundary: true\n    });\n    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n    state.modifiersData[name] = {\n      referenceClippingOffsets: referenceClippingOffsets,\n      popperEscapeOffsets: popperEscapeOffsets,\n      isReferenceHidden: isReferenceHidden,\n      hasPopperEscaped: hasPopperEscaped\n    };\n    state.attributes.popper = Object.assign({}, state.attributes.popper, {\n      'data-popper-reference-hidden': isReferenceHidden,\n      'data-popper-escaped': hasPopperEscaped\n    });\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  var hide$1 = {\n    name: 'hide',\n    enabled: true,\n    phase: 'main',\n    requiresIfExists: ['preventOverflow'],\n    fn: hide\n  };\n\n  function distanceAndSkiddingToXY(placement, rects, offset) {\n    var basePlacement = getBasePlacement(placement);\n    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;\n\n    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {\n      placement: placement\n    })) : offset,\n        skidding = _ref[0],\n        distance = _ref[1];\n\n    skidding = skidding || 0;\n    distance = (distance || 0) * invertDistance;\n    return [left, right].indexOf(basePlacement) >= 0 ? {\n      x: distance,\n      y: skidding\n    } : {\n      x: skidding,\n      y: distance\n    };\n  }\n\n  function offset(_ref2) {\n    var state = _ref2.state,\n        options = _ref2.options,\n        name = _ref2.name;\n    var _options$offset = options.offset,\n        offset = _options$offset === void 0 ? [0, 0] : _options$offset;\n    var data = placements.reduce(function (acc, placement) {\n      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n      return acc;\n    }, {});\n    var _data$state$placement = data[state.placement],\n        x = _data$state$placement.x,\n        y = _data$state$placement.y;\n\n    if (state.modifiersData.popperOffsets != null) {\n      state.modifiersData.popperOffsets.x += x;\n      state.modifiersData.popperOffsets.y += y;\n    }\n\n    state.modifiersData[name] = data;\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  var offset$1 = {\n    name: 'offset',\n    enabled: true,\n    phase: 'main',\n    requires: ['popperOffsets'],\n    fn: offset\n  };\n\n  function popperOffsets(_ref) {\n    var state = _ref.state,\n        name = _ref.name; // Offsets are the actual position the popper needs to have to be\n    // properly positioned near its reference element\n    // This is the most basic placement, and will be adjusted by\n    // the modifiers in the next step\n\n    state.modifiersData[name] = computeOffsets({\n      reference: state.rects.reference,\n      element: state.rects.popper,\n      strategy: 'absolute',\n      placement: state.placement\n    });\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  var popperOffsets$1 = {\n    name: 'popperOffsets',\n    enabled: true,\n    phase: 'read',\n    fn: popperOffsets,\n    data: {}\n  };\n\n  function getAltAxis(axis) {\n    return axis === 'x' ? 'y' : 'x';\n  }\n\n  function preventOverflow(_ref) {\n    var state = _ref.state,\n        options = _ref.options,\n        name = _ref.name;\n    var _options$mainAxis = options.mainAxis,\n        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n        _options$altAxis = options.altAxis,\n        checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,\n        boundary = options.boundary,\n        rootBoundary = options.rootBoundary,\n        altBoundary = options.altBoundary,\n        padding = options.padding,\n        _options$tether = options.tether,\n        tether = _options$tether === void 0 ? true : _options$tether,\n        _options$tetherOffset = options.tetherOffset,\n        tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;\n    var overflow = detectOverflow(state, {\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding,\n      altBoundary: altBoundary\n    });\n    var basePlacement = getBasePlacement(state.placement);\n    var variation = getVariation(state.placement);\n    var isBasePlacement = !variation;\n    var mainAxis = getMainAxisFromPlacement(basePlacement);\n    var altAxis = getAltAxis(mainAxis);\n    var popperOffsets = state.modifiersData.popperOffsets;\n    var referenceRect = state.rects.reference;\n    var popperRect = state.rects.popper;\n    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {\n      placement: state.placement\n    })) : tetherOffset;\n    var data = {\n      x: 0,\n      y: 0\n    };\n\n    if (!popperOffsets) {\n      return;\n    }\n\n    if (checkMainAxis || checkAltAxis) {\n      var mainSide = mainAxis === 'y' ? top : left;\n      var altSide = mainAxis === 'y' ? bottom : right;\n      var len = mainAxis === 'y' ? 'height' : 'width';\n      var offset = popperOffsets[mainAxis];\n      var min$1 = popperOffsets[mainAxis] + overflow[mainSide];\n      var max$1 = popperOffsets[mainAxis] - overflow[altSide];\n      var additive = tether ? -popperRect[len] / 2 : 0;\n      var minLen = variation === start ? referenceRect[len] : popperRect[len];\n      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go\n      // outside the reference bounds\n\n      var arrowElement = state.elements.arrow;\n      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {\n        width: 0,\n        height: 0\n      };\n      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();\n      var arrowPaddingMin = arrowPaddingObject[mainSide];\n      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want\n      // to include its full size in the calculation. If the reference is small\n      // and near the edge of a boundary, the popper can overflow even if the\n      // reference is not overflowing as well (e.g. virtual elements with no\n      // width or height)\n\n      var arrowLen = within(0, referenceRect[len], arrowRect[len]);\n      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;\n      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;\n      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);\n      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;\n      var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;\n      var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;\n      var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;\n\n      if (checkMainAxis) {\n        var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);\n        popperOffsets[mainAxis] = preventedOffset;\n        data[mainAxis] = preventedOffset - offset;\n      }\n\n      if (checkAltAxis) {\n        var _mainSide = mainAxis === 'x' ? top : left;\n\n        var _altSide = mainAxis === 'x' ? bottom : right;\n\n        var _offset = popperOffsets[altAxis];\n\n        var _min = _offset + overflow[_mainSide];\n\n        var _max = _offset - overflow[_altSide];\n\n        var _preventedOffset = within(tether ? min(_min, tetherMin) : _min, _offset, tether ? max(_max, tetherMax) : _max);\n\n        popperOffsets[altAxis] = _preventedOffset;\n        data[altAxis] = _preventedOffset - _offset;\n      }\n    }\n\n    state.modifiersData[name] = data;\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  var preventOverflow$1 = {\n    name: 'preventOverflow',\n    enabled: true,\n    phase: 'main',\n    fn: preventOverflow,\n    requiresIfExists: ['offset']\n  };\n\n  function getHTMLElementScroll(element) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n\n  function getNodeScroll(node) {\n    if (node === getWindow(node) || !isHTMLElement(node)) {\n      return getWindowScroll(node);\n    } else {\n      return getHTMLElementScroll(node);\n    }\n  }\n\n  function isElementScaled(element) {\n    var rect = element.getBoundingClientRect();\n    var scaleX = rect.width / element.offsetWidth || 1;\n    var scaleY = rect.height / element.offsetHeight || 1;\n    return scaleX !== 1 || scaleY !== 1;\n  } // Returns the composite rect of an element relative to its offsetParent.\n  // Composite means it takes into account transforms as well as layout.\n\n\n  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {\n    if (isFixed === void 0) {\n      isFixed = false;\n    }\n\n    var isOffsetParentAnElement = isHTMLElement(offsetParent);\n    isHTMLElement(offsetParent) && isElementScaled(offsetParent);\n    var documentElement = getDocumentElement(offsetParent);\n    var rect = getBoundingClientRect(elementOrVirtualElement);\n    var scroll = {\n      scrollLeft: 0,\n      scrollTop: 0\n    };\n    var offsets = {\n      x: 0,\n      y: 0\n    };\n\n    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n      if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078\n      isScrollParent(documentElement)) {\n        scroll = getNodeScroll(offsetParent);\n      }\n\n      if (isHTMLElement(offsetParent)) {\n        offsets = getBoundingClientRect(offsetParent);\n        offsets.x += offsetParent.clientLeft;\n        offsets.y += offsetParent.clientTop;\n      } else if (documentElement) {\n        offsets.x = getWindowScrollBarX(documentElement);\n      }\n    }\n\n    return {\n      x: rect.left + scroll.scrollLeft - offsets.x,\n      y: rect.top + scroll.scrollTop - offsets.y,\n      width: rect.width,\n      height: rect.height\n    };\n  }\n\n  function order(modifiers) {\n    var map = new Map();\n    var visited = new Set();\n    var result = [];\n    modifiers.forEach(function (modifier) {\n      map.set(modifier.name, modifier);\n    }); // On visiting object, check for its dependencies and visit them recursively\n\n    function sort(modifier) {\n      visited.add(modifier.name);\n      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);\n      requires.forEach(function (dep) {\n        if (!visited.has(dep)) {\n          var depModifier = map.get(dep);\n\n          if (depModifier) {\n            sort(depModifier);\n          }\n        }\n      });\n      result.push(modifier);\n    }\n\n    modifiers.forEach(function (modifier) {\n      if (!visited.has(modifier.name)) {\n        // check for visited object\n        sort(modifier);\n      }\n    });\n    return result;\n  }\n\n  function orderModifiers(modifiers) {\n    // order based on dependencies\n    var orderedModifiers = order(modifiers); // order based on phase\n\n    return modifierPhases.reduce(function (acc, phase) {\n      return acc.concat(orderedModifiers.filter(function (modifier) {\n        return modifier.phase === phase;\n      }));\n    }, []);\n  }\n\n  function debounce(fn) {\n    var pending;\n    return function () {\n      if (!pending) {\n        pending = new Promise(function (resolve) {\n          Promise.resolve().then(function () {\n            pending = undefined;\n            resolve(fn());\n          });\n        });\n      }\n\n      return pending;\n    };\n  }\n\n  function mergeByName(modifiers) {\n    var merged = modifiers.reduce(function (merged, current) {\n      var existing = merged[current.name];\n      merged[current.name] = existing ? Object.assign({}, existing, current, {\n        options: Object.assign({}, existing.options, current.options),\n        data: Object.assign({}, existing.data, current.data)\n      }) : current;\n      return merged;\n    }, {}); // IE11 does not support Object.values\n\n    return Object.keys(merged).map(function (key) {\n      return merged[key];\n    });\n  }\n\n  var DEFAULT_OPTIONS = {\n    placement: 'bottom',\n    modifiers: [],\n    strategy: 'absolute'\n  };\n\n  function areValidElements() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return !args.some(function (element) {\n      return !(element && typeof element.getBoundingClientRect === 'function');\n    });\n  }\n\n  function popperGenerator(generatorOptions) {\n    if (generatorOptions === void 0) {\n      generatorOptions = {};\n    }\n\n    var _generatorOptions = generatorOptions,\n        _generatorOptions$def = _generatorOptions.defaultModifiers,\n        defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,\n        _generatorOptions$def2 = _generatorOptions.defaultOptions,\n        defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;\n    return function createPopper(reference, popper, options) {\n      if (options === void 0) {\n        options = defaultOptions;\n      }\n\n      var state = {\n        placement: 'bottom',\n        orderedModifiers: [],\n        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),\n        modifiersData: {},\n        elements: {\n          reference: reference,\n          popper: popper\n        },\n        attributes: {},\n        styles: {}\n      };\n      var effectCleanupFns = [];\n      var isDestroyed = false;\n      var instance = {\n        state: state,\n        setOptions: function setOptions(setOptionsAction) {\n          var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;\n          cleanupModifierEffects();\n          state.options = Object.assign({}, defaultOptions, state.options, options);\n          state.scrollParents = {\n            reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],\n            popper: listScrollParents(popper)\n          }; // Orders the modifiers based on their dependencies and `phase`\n          // properties\n\n          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers\n\n          state.orderedModifiers = orderedModifiers.filter(function (m) {\n            return m.enabled;\n          }); // Validate the provided modifiers so that the consumer will get warned\n\n          runModifierEffects();\n          return instance.update();\n        },\n        // Sync update – it will always be executed, even if not necessary. This\n        // is useful for low frequency updates where sync behavior simplifies the\n        // logic.\n        // For high frequency updates (e.g. `resize` and `scroll` events), always\n        // prefer the async Popper#update method\n        forceUpdate: function forceUpdate() {\n          if (isDestroyed) {\n            return;\n          }\n\n          var _state$elements = state.elements,\n              reference = _state$elements.reference,\n              popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements\n          // anymore\n\n          if (!areValidElements(reference, popper)) {\n            return;\n          } // Store the reference and popper rects to be read by modifiers\n\n\n          state.rects = {\n            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),\n            popper: getLayoutRect(popper)\n          }; // Modifiers have the ability to reset the current update cycle. The\n          // most common use case for this is the `flip` modifier changing the\n          // placement, which then needs to re-run all the modifiers, because the\n          // logic was previously ran for the previous placement and is therefore\n          // stale/incorrect\n\n          state.reset = false;\n          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier\n          // is filled with the initial data specified by the modifier. This means\n          // it doesn't persist and is fresh on each update.\n          // To ensure persistent data, use `${name}#persistent`\n\n          state.orderedModifiers.forEach(function (modifier) {\n            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);\n          });\n\n          for (var index = 0; index < state.orderedModifiers.length; index++) {\n            if (state.reset === true) {\n              state.reset = false;\n              index = -1;\n              continue;\n            }\n\n            var _state$orderedModifie = state.orderedModifiers[index],\n                fn = _state$orderedModifie.fn,\n                _state$orderedModifie2 = _state$orderedModifie.options,\n                _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,\n                name = _state$orderedModifie.name;\n\n            if (typeof fn === 'function') {\n              state = fn({\n                state: state,\n                options: _options,\n                name: name,\n                instance: instance\n              }) || state;\n            }\n          }\n        },\n        // Async and optimistically optimized update – it will not be executed if\n        // not necessary (debounced to run at most once-per-tick)\n        update: debounce(function () {\n          return new Promise(function (resolve) {\n            instance.forceUpdate();\n            resolve(state);\n          });\n        }),\n        destroy: function destroy() {\n          cleanupModifierEffects();\n          isDestroyed = true;\n        }\n      };\n\n      if (!areValidElements(reference, popper)) {\n        return instance;\n      }\n\n      instance.setOptions(options).then(function (state) {\n        if (!isDestroyed && options.onFirstUpdate) {\n          options.onFirstUpdate(state);\n        }\n      }); // Modifiers have the ability to execute arbitrary code before the first\n      // update cycle runs. They will be executed in the same order as the update\n      // cycle. This is useful when a modifier adds some persistent data that\n      // other modifiers need to use, but the modifier is run after the dependent\n      // one.\n\n      function runModifierEffects() {\n        state.orderedModifiers.forEach(function (_ref3) {\n          var name = _ref3.name,\n              _ref3$options = _ref3.options,\n              options = _ref3$options === void 0 ? {} : _ref3$options,\n              effect = _ref3.effect;\n\n          if (typeof effect === 'function') {\n            var cleanupFn = effect({\n              state: state,\n              name: name,\n              instance: instance,\n              options: options\n            });\n\n            var noopFn = function noopFn() {};\n\n            effectCleanupFns.push(cleanupFn || noopFn);\n          }\n        });\n      }\n\n      function cleanupModifierEffects() {\n        effectCleanupFns.forEach(function (fn) {\n          return fn();\n        });\n        effectCleanupFns = [];\n      }\n\n      return instance;\n    };\n  }\n\n  var createPopper$2 = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules\n\n  var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];\n  var createPopper$1 = /*#__PURE__*/popperGenerator({\n    defaultModifiers: defaultModifiers$1\n  }); // eslint-disable-next-line import/no-unused-modules\n\n  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];\n  var createPopper = /*#__PURE__*/popperGenerator({\n    defaultModifiers: defaultModifiers\n  }); // eslint-disable-next-line import/no-unused-modules\n\n  var Popper = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    popperGenerator: popperGenerator,\n    detectOverflow: detectOverflow,\n    createPopperBase: createPopper$2,\n    createPopper: createPopper,\n    createPopperLite: createPopper$1,\n    top: top,\n    bottom: bottom,\n    right: right,\n    left: left,\n    auto: auto,\n    basePlacements: basePlacements,\n    start: start,\n    end: end,\n    clippingParents: clippingParents,\n    viewport: viewport,\n    popper: popper,\n    reference: reference,\n    variationPlacements: variationPlacements,\n    placements: placements,\n    beforeRead: beforeRead,\n    read: read,\n    afterRead: afterRead,\n    beforeMain: beforeMain,\n    main: main,\n    afterMain: afterMain,\n    beforeWrite: beforeWrite,\n    write: write,\n    afterWrite: afterWrite,\n    modifierPhases: modifierPhases,\n    applyStyles: applyStyles$1,\n    arrow: arrow$1,\n    computeStyles: computeStyles$1,\n    eventListeners: eventListeners,\n    flip: flip$1,\n    hide: hide$1,\n    offset: offset$1,\n    popperOffsets: popperOffsets$1,\n    preventOverflow: preventOverflow$1\n  });\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): dropdown.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME$9 = 'dropdown';\n  var DATA_KEY$8 = 'bs.dropdown';\n  var EVENT_KEY$8 = \".\".concat(DATA_KEY$8);\n  var DATA_API_KEY$4 = '.data-api';\n  var ESCAPE_KEY$2 = 'Escape';\n  var SPACE_KEY = 'Space';\n  var TAB_KEY$1 = 'Tab';\n  var ARROW_UP_KEY = 'ArrowUp';\n  var ARROW_DOWN_KEY = 'ArrowDown';\n  var RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button\n\n  var REGEXP_KEYDOWN = new RegExp(\"\".concat(ARROW_UP_KEY, \"|\").concat(ARROW_DOWN_KEY, \"|\").concat(ESCAPE_KEY$2));\n  var EVENT_HIDE$4 = \"hide\".concat(EVENT_KEY$8);\n  var EVENT_HIDDEN$4 = \"hidden\".concat(EVENT_KEY$8);\n  var EVENT_SHOW$4 = \"show\".concat(EVENT_KEY$8);\n  var EVENT_SHOWN$4 = \"shown\".concat(EVENT_KEY$8);\n  var EVENT_CLICK_DATA_API$3 = \"click\".concat(EVENT_KEY$8).concat(DATA_API_KEY$4);\n  var EVENT_KEYDOWN_DATA_API = \"keydown\".concat(EVENT_KEY$8).concat(DATA_API_KEY$4);\n  var EVENT_KEYUP_DATA_API = \"keyup\".concat(EVENT_KEY$8).concat(DATA_API_KEY$4);\n  var CLASS_NAME_SHOW$6 = 'show';\n  var CLASS_NAME_DROPUP = 'dropup';\n  var CLASS_NAME_DROPEND = 'dropend';\n  var CLASS_NAME_DROPSTART = 'dropstart';\n  var CLASS_NAME_NAVBAR = 'navbar';\n  var SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle=\"dropdown\"]';\n  var SELECTOR_MENU = '.dropdown-menu';\n  var SELECTOR_NAVBAR_NAV = '.navbar-nav';\n  var SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';\n  var PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start';\n  var PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end';\n  var PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start';\n  var PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end';\n  var PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start';\n  var PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start';\n  var Default$8 = {\n    offset: [0, 2],\n    boundary: 'clippingParents',\n    reference: 'toggle',\n    display: 'dynamic',\n    popperConfig: null,\n    autoClose: true\n  };\n  var DefaultType$8 = {\n    offset: '(array|string|function)',\n    boundary: '(string|element)',\n    reference: '(string|element|object)',\n    display: 'string',\n    popperConfig: '(null|object|function)',\n    autoClose: '(boolean|string)'\n  };\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Dropdown = /*#__PURE__*/function (_BaseComponent5) {\n    _inherits(Dropdown, _BaseComponent5);\n\n    var _super5 = _createSuper(Dropdown);\n\n    function Dropdown(element, config) {\n      var _this12;\n\n      _classCallCheck(this, Dropdown);\n\n      _this12 = _super5.call(this, element);\n      _this12._popper = null;\n      _this12._config = _this12._getConfig(config);\n      _this12._menu = _this12._getMenuElement();\n      _this12._inNavbar = _this12._detectNavbar();\n      return _this12;\n    } // Getters\n\n\n    _createClass(Dropdown, [{\n      key: \"toggle\",\n      value: // Public\n      function toggle() {\n        return this._isShown() ? this.hide() : this.show();\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        if (isDisabled(this._element) || this._isShown(this._menu)) {\n          return;\n        }\n\n        var relatedTarget = {\n          relatedTarget: this._element\n        };\n        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, relatedTarget);\n\n        if (showEvent.defaultPrevented) {\n          return;\n        }\n\n        var parent = Dropdown.getParentFromElement(this._element); // Totally disable Popper for Dropdowns in Navbar\n\n        if (this._inNavbar) {\n          Manipulator.setDataAttribute(this._menu, 'popper', 'none');\n        } else {\n          this._createPopper(parent);\n        } // If this is a touch-enabled device we add extra\n        // empty mouseover listeners to the body's immediate children;\n        // only needed because of broken event delegation on iOS\n        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n\n        if ('ontouchstart' in document.documentElement && !parent.closest(SELECTOR_NAVBAR_NAV)) {\n          var _ref8;\n\n          (_ref8 = []).concat.apply(_ref8, _toConsumableArray(document.body.children)).forEach(function (elem) {\n            return EventHandler.on(elem, 'mouseover', noop);\n          });\n        }\n\n        this._element.focus();\n\n        this._element.setAttribute('aria-expanded', true);\n\n        this._menu.classList.add(CLASS_NAME_SHOW$6);\n\n        this._element.classList.add(CLASS_NAME_SHOW$6);\n\n        EventHandler.trigger(this._element, EVENT_SHOWN$4, relatedTarget);\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        if (isDisabled(this._element) || !this._isShown(this._menu)) {\n          return;\n        }\n\n        var relatedTarget = {\n          relatedTarget: this._element\n        };\n\n        this._completeHide(relatedTarget);\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        if (this._popper) {\n          this._popper.destroy();\n        }\n\n        _get(_getPrototypeOf(Dropdown.prototype), \"dispose\", this).call(this);\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        this._inNavbar = this._detectNavbar();\n\n        if (this._popper) {\n          this._popper.update();\n        }\n      } // Private\n\n    }, {\n      key: \"_completeHide\",\n      value: function _completeHide(relatedTarget) {\n        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4, relatedTarget);\n\n        if (hideEvent.defaultPrevented) {\n          return;\n        } // If this is a touch-enabled device we remove the extra\n        // empty mouseover listeners we added for iOS support\n\n\n        if ('ontouchstart' in document.documentElement) {\n          var _ref9;\n\n          (_ref9 = []).concat.apply(_ref9, _toConsumableArray(document.body.children)).forEach(function (elem) {\n            return EventHandler.off(elem, 'mouseover', noop);\n          });\n        }\n\n        if (this._popper) {\n          this._popper.destroy();\n        }\n\n        this._menu.classList.remove(CLASS_NAME_SHOW$6);\n\n        this._element.classList.remove(CLASS_NAME_SHOW$6);\n\n        this._element.setAttribute('aria-expanded', 'false');\n\n        Manipulator.removeDataAttribute(this._menu, 'popper');\n        EventHandler.trigger(this._element, EVENT_HIDDEN$4, relatedTarget);\n      }\n    }, {\n      key: \"_getConfig\",\n      value: function _getConfig(config) {\n        config = _objectSpread(_objectSpread(_objectSpread({}, this.constructor.Default), Manipulator.getDataAttributes(this._element)), config);\n        typeCheckConfig(NAME$9, config, this.constructor.DefaultType);\n\n        if (_typeof(config.reference) === 'object' && !isElement$1(config.reference) && typeof config.reference.getBoundingClientRect !== 'function') {\n          // Popper virtual elements require a getBoundingClientRect method\n          throw new TypeError(\"\".concat(NAME$9.toUpperCase(), \": Option \\\"reference\\\" provided type \\\"object\\\" without a required \\\"getBoundingClientRect\\\" method.\"));\n        }\n\n        return config;\n      }\n    }, {\n      key: \"_createPopper\",\n      value: function _createPopper(parent) {\n        if (typeof Popper === 'undefined') {\n          throw new TypeError('Bootstrap\\'s dropdowns require Popper (https://popper.js.org)');\n        }\n\n        var referenceElement = this._element;\n\n        if (this._config.reference === 'parent') {\n          referenceElement = parent;\n        } else if (isElement$1(this._config.reference)) {\n          referenceElement = getElement(this._config.reference);\n        } else if (_typeof(this._config.reference) === 'object') {\n          referenceElement = this._config.reference;\n        }\n\n        var popperConfig = this._getPopperConfig();\n\n        var isDisplayStatic = popperConfig.modifiers.find(function (modifier) {\n          return modifier.name === 'applyStyles' && modifier.enabled === false;\n        });\n        this._popper = createPopper(referenceElement, this._menu, popperConfig);\n\n        if (isDisplayStatic) {\n          Manipulator.setDataAttribute(this._menu, 'popper', 'static');\n        }\n      }\n    }, {\n      key: \"_isShown\",\n      value: function _isShown() {\n        var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._element;\n        return element.classList.contains(CLASS_NAME_SHOW$6);\n      }\n    }, {\n      key: \"_getMenuElement\",\n      value: function _getMenuElement() {\n        return SelectorEngine.next(this._element, SELECTOR_MENU)[0];\n      }\n    }, {\n      key: \"_getPlacement\",\n      value: function _getPlacement() {\n        var parentDropdown = this._element.parentNode;\n\n        if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {\n          return PLACEMENT_RIGHT;\n        }\n\n        if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {\n          return PLACEMENT_LEFT;\n        } // We need to trim the value because custom properties can also include spaces\n\n\n        var isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';\n\n        if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {\n          return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;\n        }\n\n        return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;\n      }\n    }, {\n      key: \"_detectNavbar\",\n      value: function _detectNavbar() {\n        return this._element.closest(\".\".concat(CLASS_NAME_NAVBAR)) !== null;\n      }\n    }, {\n      key: \"_getOffset\",\n      value: function _getOffset() {\n        var _this13 = this;\n\n        var offset = this._config.offset;\n\n        if (typeof offset === 'string') {\n          return offset.split(',').map(function (val) {\n            return Number.parseInt(val, 10);\n          });\n        }\n\n        if (typeof offset === 'function') {\n          return function (popperData) {\n            return offset(popperData, _this13._element);\n          };\n        }\n\n        return offset;\n      }\n    }, {\n      key: \"_getPopperConfig\",\n      value: function _getPopperConfig() {\n        var defaultBsPopperConfig = {\n          placement: this._getPlacement(),\n          modifiers: [{\n            name: 'preventOverflow',\n            options: {\n              boundary: this._config.boundary\n            }\n          }, {\n            name: 'offset',\n            options: {\n              offset: this._getOffset()\n            }\n          }]\n        }; // Disable Popper if we have a static display\n\n        if (this._config.display === 'static') {\n          defaultBsPopperConfig.modifiers = [{\n            name: 'applyStyles',\n            enabled: false\n          }];\n        }\n\n        return _objectSpread(_objectSpread({}, defaultBsPopperConfig), typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig);\n      }\n    }, {\n      key: \"_selectMenuItem\",\n      value: function _selectMenuItem(_ref10) {\n        var key = _ref10.key,\n            target = _ref10.target;\n        var items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(isVisible);\n\n        if (!items.length) {\n          return;\n        } // if target isn't included in items (e.g. when expanding the dropdown)\n        // allow cycling to get the last item in case key equals ARROW_UP_KEY\n\n\n        getNextActiveElement(items, target, key === ARROW_DOWN_KEY, !items.includes(target)).focus();\n      } // Static\n\n    }], [{\n      key: \"Default\",\n      get: function get() {\n        return Default$8;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$8;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$9;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        return this.each(function () {\n          var data = Dropdown.getOrCreateInstance(this, config);\n\n          if (typeof config !== 'string') {\n            return;\n          }\n\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n          }\n\n          data[config]();\n        });\n      }\n    }, {\n      key: \"clearMenus\",\n      value: function clearMenus(event) {\n        if (event && (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY$1)) {\n          return;\n        }\n\n        var toggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE$3);\n\n        for (var i = 0, len = toggles.length; i < len; i++) {\n          var context = Dropdown.getInstance(toggles[i]);\n\n          if (!context || context._config.autoClose === false) {\n            continue;\n          }\n\n          if (!context._isShown()) {\n            continue;\n          }\n\n          var relatedTarget = {\n            relatedTarget: context._element\n          };\n\n          if (event) {\n            var composedPath = event.composedPath();\n            var isMenuTarget = composedPath.includes(context._menu);\n\n            if (composedPath.includes(context._element) || context._config.autoClose === 'inside' && !isMenuTarget || context._config.autoClose === 'outside' && isMenuTarget) {\n              continue;\n            } // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu\n\n\n            if (context._menu.contains(event.target) && (event.type === 'keyup' && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {\n              continue;\n            }\n\n            if (event.type === 'click') {\n              relatedTarget.clickEvent = event;\n            }\n          }\n\n          context._completeHide(relatedTarget);\n        }\n      }\n    }, {\n      key: \"getParentFromElement\",\n      value: function getParentFromElement(element) {\n        return getElementFromSelector(element) || element.parentNode;\n      }\n    }, {\n      key: \"dataApiKeydownHandler\",\n      value: function dataApiKeydownHandler(event) {\n        // If not input/textarea:\n        //  - And not a key in REGEXP_KEYDOWN => not a dropdown command\n        // If input/textarea:\n        //  - If space key => not a dropdown command\n        //  - If key is other than escape\n        //    - If key is not up or down => not a dropdown command\n        //    - If trigger inside the menu => not a dropdown command\n        if (/input|textarea/i.test(event.target.tagName) ? event.key === SPACE_KEY || event.key !== ESCAPE_KEY$2 && (event.key !== ARROW_DOWN_KEY && event.key !== ARROW_UP_KEY || event.target.closest(SELECTOR_MENU)) : !REGEXP_KEYDOWN.test(event.key)) {\n          return;\n        }\n\n        var isActive = this.classList.contains(CLASS_NAME_SHOW$6);\n\n        if (!isActive && event.key === ESCAPE_KEY$2) {\n          return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (isDisabled(this)) {\n          return;\n        }\n\n        var getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0];\n        var instance = Dropdown.getOrCreateInstance(getToggleButton);\n\n        if (event.key === ESCAPE_KEY$2) {\n          instance.hide();\n          return;\n        }\n\n        if (event.key === ARROW_UP_KEY || event.key === ARROW_DOWN_KEY) {\n          if (!isActive) {\n            instance.show();\n          }\n\n          instance._selectMenuItem(event);\n\n          return;\n        }\n\n        if (!isActive || event.key === SPACE_KEY) {\n          Dropdown.clearMenus();\n        }\n      }\n    }]);\n\n    return Dropdown;\n  }(BaseComponent);\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);\n  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);\n  EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);\n  EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);\n  EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function (event) {\n    event.preventDefault();\n    Dropdown.getOrCreateInstance(this).toggle();\n  });\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Dropdown to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Dropdown);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): util/scrollBar.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  var SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';\n  var SELECTOR_STICKY_CONTENT = '.sticky-top';\n\n  var ScrollBarHelper = /*#__PURE__*/function () {\n    function ScrollBarHelper() {\n      _classCallCheck(this, ScrollBarHelper);\n\n      this._element = document.body;\n    }\n\n    _createClass(ScrollBarHelper, [{\n      key: \"getWidth\",\n      value: function getWidth() {\n        // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes\n        var documentWidth = document.documentElement.clientWidth;\n        return Math.abs(window.innerWidth - documentWidth);\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        var width = this.getWidth();\n\n        this._disableOverFlow(); // give padding to element to balance the hidden scrollbar width\n\n\n        this._setElementAttributes(this._element, 'paddingRight', function (calculatedValue) {\n          return calculatedValue + width;\n        }); // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth\n\n\n        this._setElementAttributes(SELECTOR_FIXED_CONTENT, 'paddingRight', function (calculatedValue) {\n          return calculatedValue + width;\n        });\n\n        this._setElementAttributes(SELECTOR_STICKY_CONTENT, 'marginRight', function (calculatedValue) {\n          return calculatedValue - width;\n        });\n      }\n    }, {\n      key: \"_disableOverFlow\",\n      value: function _disableOverFlow() {\n        this._saveInitialAttribute(this._element, 'overflow');\n\n        this._element.style.overflow = 'hidden';\n      }\n    }, {\n      key: \"_setElementAttributes\",\n      value: function _setElementAttributes(selector, styleProp, callback) {\n        var _this14 = this;\n\n        var scrollbarWidth = this.getWidth();\n\n        var manipulationCallBack = function manipulationCallBack(element) {\n          if (element !== _this14._element && window.innerWidth > element.clientWidth + scrollbarWidth) {\n            return;\n          }\n\n          _this14._saveInitialAttribute(element, styleProp);\n\n          var calculatedValue = window.getComputedStyle(element)[styleProp];\n          element.style[styleProp] = \"\".concat(callback(Number.parseFloat(calculatedValue)), \"px\");\n        };\n\n        this._applyManipulationCallback(selector, manipulationCallBack);\n      }\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        this._resetElementAttributes(this._element, 'overflow');\n\n        this._resetElementAttributes(this._element, 'paddingRight');\n\n        this._resetElementAttributes(SELECTOR_FIXED_CONTENT, 'paddingRight');\n\n        this._resetElementAttributes(SELECTOR_STICKY_CONTENT, 'marginRight');\n      }\n    }, {\n      key: \"_saveInitialAttribute\",\n      value: function _saveInitialAttribute(element, styleProp) {\n        var actualValue = element.style[styleProp];\n\n        if (actualValue) {\n          Manipulator.setDataAttribute(element, styleProp, actualValue);\n        }\n      }\n    }, {\n      key: \"_resetElementAttributes\",\n      value: function _resetElementAttributes(selector, styleProp) {\n        var manipulationCallBack = function manipulationCallBack(element) {\n          var value = Manipulator.getDataAttribute(element, styleProp);\n\n          if (typeof value === 'undefined') {\n            element.style.removeProperty(styleProp);\n          } else {\n            Manipulator.removeDataAttribute(element, styleProp);\n            element.style[styleProp] = value;\n          }\n        };\n\n        this._applyManipulationCallback(selector, manipulationCallBack);\n      }\n    }, {\n      key: \"_applyManipulationCallback\",\n      value: function _applyManipulationCallback(selector, callBack) {\n        if (isElement$1(selector)) {\n          callBack(selector);\n        } else {\n          SelectorEngine.find(selector, this._element).forEach(callBack);\n        }\n      }\n    }, {\n      key: \"isOverflowing\",\n      value: function isOverflowing() {\n        return this.getWidth() > 0;\n      }\n    }]);\n\n    return ScrollBarHelper;\n  }();\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): util/backdrop.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n\n  var Default$7 = {\n    className: 'modal-backdrop',\n    isVisible: true,\n    // if false, we use the backdrop helper without adding any element to the dom\n    isAnimated: false,\n    rootElement: 'body',\n    // give the choice to place backdrop under different elements\n    clickCallback: null\n  };\n  var DefaultType$7 = {\n    className: 'string',\n    isVisible: 'boolean',\n    isAnimated: 'boolean',\n    rootElement: '(element|string)',\n    clickCallback: '(function|null)'\n  };\n  var NAME$8 = 'backdrop';\n  var CLASS_NAME_FADE$4 = 'fade';\n  var CLASS_NAME_SHOW$5 = 'show';\n  var EVENT_MOUSEDOWN = \"mousedown.bs.\".concat(NAME$8);\n\n  var Backdrop = /*#__PURE__*/function () {\n    function Backdrop(config) {\n      _classCallCheck(this, Backdrop);\n\n      this._config = this._getConfig(config);\n      this._isAppended = false;\n      this._element = null;\n    }\n\n    _createClass(Backdrop, [{\n      key: \"show\",\n      value: function show(callback) {\n        if (!this._config.isVisible) {\n          execute(callback);\n          return;\n        }\n\n        this._append();\n\n        if (this._config.isAnimated) {\n          reflow(this._getElement());\n        }\n\n        this._getElement().classList.add(CLASS_NAME_SHOW$5);\n\n        this._emulateAnimation(function () {\n          execute(callback);\n        });\n      }\n    }, {\n      key: \"hide\",\n      value: function hide(callback) {\n        var _this15 = this;\n\n        if (!this._config.isVisible) {\n          execute(callback);\n          return;\n        }\n\n        this._getElement().classList.remove(CLASS_NAME_SHOW$5);\n\n        this._emulateAnimation(function () {\n          _this15.dispose();\n\n          execute(callback);\n        });\n      } // Private\n\n    }, {\n      key: \"_getElement\",\n      value: function _getElement() {\n        if (!this._element) {\n          var backdrop = document.createElement('div');\n          backdrop.className = this._config.className;\n\n          if (this._config.isAnimated) {\n            backdrop.classList.add(CLASS_NAME_FADE$4);\n          }\n\n          this._element = backdrop;\n        }\n\n        return this._element;\n      }\n    }, {\n      key: \"_getConfig\",\n      value: function _getConfig(config) {\n        config = _objectSpread(_objectSpread({}, Default$7), _typeof(config) === 'object' ? config : {}); // use getElement() with the default \"body\" to get a fresh Element on each instantiation\n\n        config.rootElement = getElement(config.rootElement);\n        typeCheckConfig(NAME$8, config, DefaultType$7);\n        return config;\n      }\n    }, {\n      key: \"_append\",\n      value: function _append() {\n        var _this16 = this;\n\n        if (this._isAppended) {\n          return;\n        }\n\n        this._config.rootElement.append(this._getElement());\n\n        EventHandler.on(this._getElement(), EVENT_MOUSEDOWN, function () {\n          execute(_this16._config.clickCallback);\n        });\n        this._isAppended = true;\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        if (!this._isAppended) {\n          return;\n        }\n\n        EventHandler.off(this._element, EVENT_MOUSEDOWN);\n\n        this._element.remove();\n\n        this._isAppended = false;\n      }\n    }, {\n      key: \"_emulateAnimation\",\n      value: function _emulateAnimation(callback) {\n        executeAfterTransition(callback, this._getElement(), this._config.isAnimated);\n      }\n    }]);\n\n    return Backdrop;\n  }();\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): util/focustrap.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n\n  var Default$6 = {\n    trapElement: null,\n    // The element to trap focus inside of\n    autofocus: true\n  };\n  var DefaultType$6 = {\n    trapElement: 'element',\n    autofocus: 'boolean'\n  };\n  var NAME$7 = 'focustrap';\n  var DATA_KEY$7 = 'bs.focustrap';\n  var EVENT_KEY$7 = \".\".concat(DATA_KEY$7);\n  var EVENT_FOCUSIN$1 = \"focusin\".concat(EVENT_KEY$7);\n  var EVENT_KEYDOWN_TAB = \"keydown.tab\".concat(EVENT_KEY$7);\n  var TAB_KEY = 'Tab';\n  var TAB_NAV_FORWARD = 'forward';\n  var TAB_NAV_BACKWARD = 'backward';\n\n  var FocusTrap = /*#__PURE__*/function () {\n    function FocusTrap(config) {\n      _classCallCheck(this, FocusTrap);\n\n      this._config = this._getConfig(config);\n      this._isActive = false;\n      this._lastTabNavDirection = null;\n    }\n\n    _createClass(FocusTrap, [{\n      key: \"activate\",\n      value: function activate() {\n        var _this17 = this;\n\n        var _this$_config = this._config,\n            trapElement = _this$_config.trapElement,\n            autofocus = _this$_config.autofocus;\n\n        if (this._isActive) {\n          return;\n        }\n\n        if (autofocus) {\n          trapElement.focus();\n        }\n\n        EventHandler.off(document, EVENT_KEY$7); // guard against infinite focus loop\n\n        EventHandler.on(document, EVENT_FOCUSIN$1, function (event) {\n          return _this17._handleFocusin(event);\n        });\n        EventHandler.on(document, EVENT_KEYDOWN_TAB, function (event) {\n          return _this17._handleKeydown(event);\n        });\n        this._isActive = true;\n      }\n    }, {\n      key: \"deactivate\",\n      value: function deactivate() {\n        if (!this._isActive) {\n          return;\n        }\n\n        this._isActive = false;\n        EventHandler.off(document, EVENT_KEY$7);\n      } // Private\n\n    }, {\n      key: \"_handleFocusin\",\n      value: function _handleFocusin(event) {\n        var target = event.target;\n        var trapElement = this._config.trapElement;\n\n        if (target === document || target === trapElement || trapElement.contains(target)) {\n          return;\n        }\n\n        var elements = SelectorEngine.focusableChildren(trapElement);\n\n        if (elements.length === 0) {\n          trapElement.focus();\n        } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {\n          elements[elements.length - 1].focus();\n        } else {\n          elements[0].focus();\n        }\n      }\n    }, {\n      key: \"_handleKeydown\",\n      value: function _handleKeydown(event) {\n        if (event.key !== TAB_KEY) {\n          return;\n        }\n\n        this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;\n      }\n    }, {\n      key: \"_getConfig\",\n      value: function _getConfig(config) {\n        config = _objectSpread(_objectSpread({}, Default$6), _typeof(config) === 'object' ? config : {});\n        typeCheckConfig(NAME$7, config, DefaultType$6);\n        return config;\n      }\n    }]);\n\n    return FocusTrap;\n  }();\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): modal.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n\n  var NAME$6 = 'modal';\n  var DATA_KEY$6 = 'bs.modal';\n  var EVENT_KEY$6 = \".\".concat(DATA_KEY$6);\n  var DATA_API_KEY$3 = '.data-api';\n  var ESCAPE_KEY$1 = 'Escape';\n  var Default$5 = {\n    backdrop: true,\n    keyboard: true,\n    focus: true\n  };\n  var DefaultType$5 = {\n    backdrop: '(boolean|string)',\n    keyboard: 'boolean',\n    focus: 'boolean'\n  };\n  var EVENT_HIDE$3 = \"hide\".concat(EVENT_KEY$6);\n  var EVENT_HIDE_PREVENTED = \"hidePrevented\".concat(EVENT_KEY$6);\n  var EVENT_HIDDEN$3 = \"hidden\".concat(EVENT_KEY$6);\n  var EVENT_SHOW$3 = \"show\".concat(EVENT_KEY$6);\n  var EVENT_SHOWN$3 = \"shown\".concat(EVENT_KEY$6);\n  var EVENT_RESIZE = \"resize\".concat(EVENT_KEY$6);\n  var EVENT_CLICK_DISMISS = \"click.dismiss\".concat(EVENT_KEY$6);\n  var EVENT_KEYDOWN_DISMISS$1 = \"keydown.dismiss\".concat(EVENT_KEY$6);\n  var EVENT_MOUSEUP_DISMISS = \"mouseup.dismiss\".concat(EVENT_KEY$6);\n  var EVENT_MOUSEDOWN_DISMISS = \"mousedown.dismiss\".concat(EVENT_KEY$6);\n  var EVENT_CLICK_DATA_API$2 = \"click\".concat(EVENT_KEY$6).concat(DATA_API_KEY$3);\n  var CLASS_NAME_OPEN = 'modal-open';\n  var CLASS_NAME_FADE$3 = 'fade';\n  var CLASS_NAME_SHOW$4 = 'show';\n  var CLASS_NAME_STATIC = 'modal-static';\n  var OPEN_SELECTOR$1 = '.modal.show';\n  var SELECTOR_DIALOG = '.modal-dialog';\n  var SELECTOR_MODAL_BODY = '.modal-body';\n  var SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle=\"modal\"]';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Modal = /*#__PURE__*/function (_BaseComponent6) {\n    _inherits(Modal, _BaseComponent6);\n\n    var _super6 = _createSuper(Modal);\n\n    function Modal(element, config) {\n      var _this18;\n\n      _classCallCheck(this, Modal);\n\n      _this18 = _super6.call(this, element);\n      _this18._config = _this18._getConfig(config);\n      _this18._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, _this18._element);\n      _this18._backdrop = _this18._initializeBackDrop();\n      _this18._focustrap = _this18._initializeFocusTrap();\n      _this18._isShown = false;\n      _this18._ignoreBackdropClick = false;\n      _this18._isTransitioning = false;\n      _this18._scrollBar = new ScrollBarHelper();\n      return _this18;\n    } // Getters\n\n\n    _createClass(Modal, [{\n      key: \"toggle\",\n      value: // Public\n      function toggle(relatedTarget) {\n        return this._isShown ? this.hide() : this.show(relatedTarget);\n      }\n    }, {\n      key: \"show\",\n      value: function show(relatedTarget) {\n        var _this19 = this;\n\n        if (this._isShown || this._isTransitioning) {\n          return;\n        }\n\n        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {\n          relatedTarget: relatedTarget\n        });\n\n        if (showEvent.defaultPrevented) {\n          return;\n        }\n\n        this._isShown = true;\n\n        if (this._isAnimated()) {\n          this._isTransitioning = true;\n        }\n\n        this._scrollBar.hide();\n\n        document.body.classList.add(CLASS_NAME_OPEN);\n\n        this._adjustDialog();\n\n        this._setEscapeEvent();\n\n        this._setResizeEvent();\n\n        EventHandler.on(this._dialog, EVENT_MOUSEDOWN_DISMISS, function () {\n          EventHandler.one(_this19._element, EVENT_MOUSEUP_DISMISS, function (event) {\n            if (event.target === _this19._element) {\n              _this19._ignoreBackdropClick = true;\n            }\n          });\n        });\n\n        this._showBackdrop(function () {\n          return _this19._showElement(relatedTarget);\n        });\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        var _this20 = this;\n\n        if (!this._isShown || this._isTransitioning) {\n          return;\n        }\n\n        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);\n\n        if (hideEvent.defaultPrevented) {\n          return;\n        }\n\n        this._isShown = false;\n\n        var isAnimated = this._isAnimated();\n\n        if (isAnimated) {\n          this._isTransitioning = true;\n        }\n\n        this._setEscapeEvent();\n\n        this._setResizeEvent();\n\n        this._focustrap.deactivate();\n\n        this._element.classList.remove(CLASS_NAME_SHOW$4);\n\n        EventHandler.off(this._element, EVENT_CLICK_DISMISS);\n        EventHandler.off(this._dialog, EVENT_MOUSEDOWN_DISMISS);\n\n        this._queueCallback(function () {\n          return _this20._hideModal();\n        }, this._element, isAnimated);\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        [window, this._dialog].forEach(function (htmlElement) {\n          return EventHandler.off(htmlElement, EVENT_KEY$6);\n        });\n\n        this._backdrop.dispose();\n\n        this._focustrap.deactivate();\n\n        _get(_getPrototypeOf(Modal.prototype), \"dispose\", this).call(this);\n      }\n    }, {\n      key: \"handleUpdate\",\n      value: function handleUpdate() {\n        this._adjustDialog();\n      } // Private\n\n    }, {\n      key: \"_initializeBackDrop\",\n      value: function _initializeBackDrop() {\n        return new Backdrop({\n          isVisible: Boolean(this._config.backdrop),\n          // 'static' option will be translated to true, and booleans will keep their value\n          isAnimated: this._isAnimated()\n        });\n      }\n    }, {\n      key: \"_initializeFocusTrap\",\n      value: function _initializeFocusTrap() {\n        return new FocusTrap({\n          trapElement: this._element\n        });\n      }\n    }, {\n      key: \"_getConfig\",\n      value: function _getConfig(config) {\n        config = _objectSpread(_objectSpread(_objectSpread({}, Default$5), Manipulator.getDataAttributes(this._element)), _typeof(config) === 'object' ? config : {});\n        typeCheckConfig(NAME$6, config, DefaultType$5);\n        return config;\n      }\n    }, {\n      key: \"_showElement\",\n      value: function _showElement(relatedTarget) {\n        var _this21 = this;\n\n        var isAnimated = this._isAnimated();\n\n        var modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);\n\n        if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {\n          // Don't move modal's DOM position\n          document.body.append(this._element);\n        }\n\n        this._element.style.display = 'block';\n\n        this._element.removeAttribute('aria-hidden');\n\n        this._element.setAttribute('aria-modal', true);\n\n        this._element.setAttribute('role', 'dialog');\n\n        this._element.scrollTop = 0;\n\n        if (modalBody) {\n          modalBody.scrollTop = 0;\n        }\n\n        if (isAnimated) {\n          reflow(this._element);\n        }\n\n        this._element.classList.add(CLASS_NAME_SHOW$4);\n\n        var transitionComplete = function transitionComplete() {\n          if (_this21._config.focus) {\n            _this21._focustrap.activate();\n          }\n\n          _this21._isTransitioning = false;\n          EventHandler.trigger(_this21._element, EVENT_SHOWN$3, {\n            relatedTarget: relatedTarget\n          });\n        };\n\n        this._queueCallback(transitionComplete, this._dialog, isAnimated);\n      }\n    }, {\n      key: \"_setEscapeEvent\",\n      value: function _setEscapeEvent() {\n        var _this22 = this;\n\n        if (this._isShown) {\n          EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, function (event) {\n            if (_this22._config.keyboard && event.key === ESCAPE_KEY$1) {\n              event.preventDefault();\n\n              _this22.hide();\n            } else if (!_this22._config.keyboard && event.key === ESCAPE_KEY$1) {\n              _this22._triggerBackdropTransition();\n            }\n          });\n        } else {\n          EventHandler.off(this._element, EVENT_KEYDOWN_DISMISS$1);\n        }\n      }\n    }, {\n      key: \"_setResizeEvent\",\n      value: function _setResizeEvent() {\n        var _this23 = this;\n\n        if (this._isShown) {\n          EventHandler.on(window, EVENT_RESIZE, function () {\n            return _this23._adjustDialog();\n          });\n        } else {\n          EventHandler.off(window, EVENT_RESIZE);\n        }\n      }\n    }, {\n      key: \"_hideModal\",\n      value: function _hideModal() {\n        var _this24 = this;\n\n        this._element.style.display = 'none';\n\n        this._element.setAttribute('aria-hidden', true);\n\n        this._element.removeAttribute('aria-modal');\n\n        this._element.removeAttribute('role');\n\n        this._isTransitioning = false;\n\n        this._backdrop.hide(function () {\n          document.body.classList.remove(CLASS_NAME_OPEN);\n\n          _this24._resetAdjustments();\n\n          _this24._scrollBar.reset();\n\n          EventHandler.trigger(_this24._element, EVENT_HIDDEN$3);\n        });\n      }\n    }, {\n      key: \"_showBackdrop\",\n      value: function _showBackdrop(callback) {\n        var _this25 = this;\n\n        EventHandler.on(this._element, EVENT_CLICK_DISMISS, function (event) {\n          if (_this25._ignoreBackdropClick) {\n            _this25._ignoreBackdropClick = false;\n            return;\n          }\n\n          if (event.target !== event.currentTarget) {\n            return;\n          }\n\n          if (_this25._config.backdrop === true) {\n            _this25.hide();\n          } else if (_this25._config.backdrop === 'static') {\n            _this25._triggerBackdropTransition();\n          }\n        });\n\n        this._backdrop.show(callback);\n      }\n    }, {\n      key: \"_isAnimated\",\n      value: function _isAnimated() {\n        return this._element.classList.contains(CLASS_NAME_FADE$3);\n      }\n    }, {\n      key: \"_triggerBackdropTransition\",\n      value: function _triggerBackdropTransition() {\n        var _this26 = this;\n\n        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);\n\n        if (hideEvent.defaultPrevented) {\n          return;\n        }\n\n        var _this$_element = this._element,\n            classList = _this$_element.classList,\n            scrollHeight = _this$_element.scrollHeight,\n            style = _this$_element.style;\n        var isModalOverflowing = scrollHeight > document.documentElement.clientHeight; // return if the following background transition hasn't yet completed\n\n        if (!isModalOverflowing && style.overflowY === 'hidden' || classList.contains(CLASS_NAME_STATIC)) {\n          return;\n        }\n\n        if (!isModalOverflowing) {\n          style.overflowY = 'hidden';\n        }\n\n        classList.add(CLASS_NAME_STATIC);\n\n        this._queueCallback(function () {\n          classList.remove(CLASS_NAME_STATIC);\n\n          if (!isModalOverflowing) {\n            _this26._queueCallback(function () {\n              style.overflowY = '';\n            }, _this26._dialog);\n          }\n        }, this._dialog);\n\n        this._element.focus();\n      } // ----------------------------------------------------------------------\n      // the following methods are used to handle overflowing modals\n      // ----------------------------------------------------------------------\n\n    }, {\n      key: \"_adjustDialog\",\n      value: function _adjustDialog() {\n        var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n\n        var scrollbarWidth = this._scrollBar.getWidth();\n\n        var isBodyOverflowing = scrollbarWidth > 0;\n\n        if (!isBodyOverflowing && isModalOverflowing && !isRTL() || isBodyOverflowing && !isModalOverflowing && isRTL()) {\n          this._element.style.paddingLeft = \"\".concat(scrollbarWidth, \"px\");\n        }\n\n        if (isBodyOverflowing && !isModalOverflowing && !isRTL() || !isBodyOverflowing && isModalOverflowing && isRTL()) {\n          this._element.style.paddingRight = \"\".concat(scrollbarWidth, \"px\");\n        }\n      }\n    }, {\n      key: \"_resetAdjustments\",\n      value: function _resetAdjustments() {\n        this._element.style.paddingLeft = '';\n        this._element.style.paddingRight = '';\n      } // Static\n\n    }], [{\n      key: \"Default\",\n      get: function get() {\n        return Default$5;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$6;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config, relatedTarget) {\n        return this.each(function () {\n          var data = Modal.getOrCreateInstance(this, config);\n\n          if (typeof config !== 'string') {\n            return;\n          }\n\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n          }\n\n          data[config](relatedTarget);\n        });\n      }\n    }]);\n\n    return Modal;\n  }(BaseComponent);\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function (event) {\n    var _this27 = this;\n\n    var target = getElementFromSelector(this);\n\n    if (['A', 'AREA'].includes(this.tagName)) {\n      event.preventDefault();\n    }\n\n    EventHandler.one(target, EVENT_SHOW$3, function (showEvent) {\n      if (showEvent.defaultPrevented) {\n        // only register focus restorer if modal will actually get shown\n        return;\n      }\n\n      EventHandler.one(target, EVENT_HIDDEN$3, function () {\n        if (isVisible(_this27)) {\n          _this27.focus();\n        }\n      });\n    }); // avoid conflict when clicking moddal toggler while another one is open\n\n    var allReadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);\n\n    if (allReadyOpen) {\n      Modal.getInstance(allReadyOpen).hide();\n    }\n\n    var data = Modal.getOrCreateInstance(target);\n    data.toggle(this);\n  });\n  enableDismissTrigger(Modal);\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Modal to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Modal);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): offcanvas.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME$5 = 'offcanvas';\n  var DATA_KEY$5 = 'bs.offcanvas';\n  var EVENT_KEY$5 = \".\".concat(DATA_KEY$5);\n  var DATA_API_KEY$2 = '.data-api';\n  var EVENT_LOAD_DATA_API$1 = \"load\".concat(EVENT_KEY$5).concat(DATA_API_KEY$2);\n  var ESCAPE_KEY = 'Escape';\n  var Default$4 = {\n    backdrop: true,\n    keyboard: true,\n    scroll: false\n  };\n  var DefaultType$4 = {\n    backdrop: 'boolean',\n    keyboard: 'boolean',\n    scroll: 'boolean'\n  };\n  var CLASS_NAME_SHOW$3 = 'show';\n  var CLASS_NAME_BACKDROP = 'offcanvas-backdrop';\n  var OPEN_SELECTOR = '.offcanvas.show';\n  var EVENT_SHOW$2 = \"show\".concat(EVENT_KEY$5);\n  var EVENT_SHOWN$2 = \"shown\".concat(EVENT_KEY$5);\n  var EVENT_HIDE$2 = \"hide\".concat(EVENT_KEY$5);\n  var EVENT_HIDDEN$2 = \"hidden\".concat(EVENT_KEY$5);\n  var EVENT_CLICK_DATA_API$1 = \"click\".concat(EVENT_KEY$5).concat(DATA_API_KEY$2);\n  var EVENT_KEYDOWN_DISMISS = \"keydown.dismiss\".concat(EVENT_KEY$5);\n  var SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle=\"offcanvas\"]';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Offcanvas = /*#__PURE__*/function (_BaseComponent7) {\n    _inherits(Offcanvas, _BaseComponent7);\n\n    var _super7 = _createSuper(Offcanvas);\n\n    function Offcanvas(element, config) {\n      var _this28;\n\n      _classCallCheck(this, Offcanvas);\n\n      _this28 = _super7.call(this, element);\n      _this28._config = _this28._getConfig(config);\n      _this28._isShown = false;\n      _this28._backdrop = _this28._initializeBackDrop();\n      _this28._focustrap = _this28._initializeFocusTrap();\n\n      _this28._addEventListeners();\n\n      return _this28;\n    } // Getters\n\n\n    _createClass(Offcanvas, [{\n      key: \"toggle\",\n      value: // Public\n      function toggle(relatedTarget) {\n        return this._isShown ? this.hide() : this.show(relatedTarget);\n      }\n    }, {\n      key: \"show\",\n      value: function show(relatedTarget) {\n        var _this29 = this;\n\n        if (this._isShown) {\n          return;\n        }\n\n        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$2, {\n          relatedTarget: relatedTarget\n        });\n\n        if (showEvent.defaultPrevented) {\n          return;\n        }\n\n        this._isShown = true;\n        this._element.style.visibility = 'visible';\n\n        this._backdrop.show();\n\n        if (!this._config.scroll) {\n          new ScrollBarHelper().hide();\n        }\n\n        this._element.removeAttribute('aria-hidden');\n\n        this._element.setAttribute('aria-modal', true);\n\n        this._element.setAttribute('role', 'dialog');\n\n        this._element.classList.add(CLASS_NAME_SHOW$3);\n\n        var completeCallBack = function completeCallBack() {\n          if (!_this29._config.scroll) {\n            _this29._focustrap.activate();\n          }\n\n          EventHandler.trigger(_this29._element, EVENT_SHOWN$2, {\n            relatedTarget: relatedTarget\n          });\n        };\n\n        this._queueCallback(completeCallBack, this._element, true);\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        var _this30 = this;\n\n        if (!this._isShown) {\n          return;\n        }\n\n        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$2);\n\n        if (hideEvent.defaultPrevented) {\n          return;\n        }\n\n        this._focustrap.deactivate();\n\n        this._element.blur();\n\n        this._isShown = false;\n\n        this._element.classList.remove(CLASS_NAME_SHOW$3);\n\n        this._backdrop.hide();\n\n        var completeCallback = function completeCallback() {\n          _this30._element.setAttribute('aria-hidden', true);\n\n          _this30._element.removeAttribute('aria-modal');\n\n          _this30._element.removeAttribute('role');\n\n          _this30._element.style.visibility = 'hidden';\n\n          if (!_this30._config.scroll) {\n            new ScrollBarHelper().reset();\n          }\n\n          EventHandler.trigger(_this30._element, EVENT_HIDDEN$2);\n        };\n\n        this._queueCallback(completeCallback, this._element, true);\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this._backdrop.dispose();\n\n        this._focustrap.deactivate();\n\n        _get(_getPrototypeOf(Offcanvas.prototype), \"dispose\", this).call(this);\n      } // Private\n\n    }, {\n      key: \"_getConfig\",\n      value: function _getConfig(config) {\n        config = _objectSpread(_objectSpread(_objectSpread({}, Default$4), Manipulator.getDataAttributes(this._element)), _typeof(config) === 'object' ? config : {});\n        typeCheckConfig(NAME$5, config, DefaultType$4);\n        return config;\n      }\n    }, {\n      key: \"_initializeBackDrop\",\n      value: function _initializeBackDrop() {\n        var _this31 = this;\n\n        return new Backdrop({\n          className: CLASS_NAME_BACKDROP,\n          isVisible: this._config.backdrop,\n          isAnimated: true,\n          rootElement: this._element.parentNode,\n          clickCallback: function clickCallback() {\n            return _this31.hide();\n          }\n        });\n      }\n    }, {\n      key: \"_initializeFocusTrap\",\n      value: function _initializeFocusTrap() {\n        return new FocusTrap({\n          trapElement: this._element\n        });\n      }\n    }, {\n      key: \"_addEventListeners\",\n      value: function _addEventListeners() {\n        var _this32 = this;\n\n        EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, function (event) {\n          if (_this32._config.keyboard && event.key === ESCAPE_KEY) {\n            _this32.hide();\n          }\n        });\n      } // Static\n\n    }], [{\n      key: \"NAME\",\n      get: function get() {\n        return NAME$5;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$4;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        return this.each(function () {\n          var data = Offcanvas.getOrCreateInstance(this, config);\n\n          if (typeof config !== 'string') {\n            return;\n          }\n\n          if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n            throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n          }\n\n          data[config](this);\n        });\n      }\n    }]);\n\n    return Offcanvas;\n  }(BaseComponent);\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function (event) {\n    var _this33 = this;\n\n    var target = getElementFromSelector(this);\n\n    if (['A', 'AREA'].includes(this.tagName)) {\n      event.preventDefault();\n    }\n\n    if (isDisabled(this)) {\n      return;\n    }\n\n    EventHandler.one(target, EVENT_HIDDEN$2, function () {\n      // focus on trigger when it is closed\n      if (isVisible(_this33)) {\n        _this33.focus();\n      }\n    }); // avoid conflict when clicking a toggler of an offcanvas, while another is open\n\n    var allReadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);\n\n    if (allReadyOpen && allReadyOpen !== target) {\n      Offcanvas.getInstance(allReadyOpen).hide();\n    }\n\n    var data = Offcanvas.getOrCreateInstance(target);\n    data.toggle(this);\n  });\n  EventHandler.on(window, EVENT_LOAD_DATA_API$1, function () {\n    return SelectorEngine.find(OPEN_SELECTOR).forEach(function (el) {\n      return Offcanvas.getOrCreateInstance(el).show();\n    });\n  });\n  enableDismissTrigger(Offcanvas);\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n  defineJQueryPlugin(Offcanvas);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): util/sanitizer.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  var uriAttributes = new Set(['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href']);\n  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i;\n  /**\n   * A pattern that recognizes a commonly useful subset of URLs that are safe.\n   *\n   * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n   */\n\n  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;\n  /**\n   * A pattern that matches safe data URLs. Only matches image, video and audio types.\n   *\n   * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n   */\n\n  var DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i;\n\n  var allowedAttribute = function allowedAttribute(attribute, allowedAttributeList) {\n    var attributeName = attribute.nodeName.toLowerCase();\n\n    if (allowedAttributeList.includes(attributeName)) {\n      if (uriAttributes.has(attributeName)) {\n        return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue) || DATA_URL_PATTERN.test(attribute.nodeValue));\n      }\n\n      return true;\n    }\n\n    var regExp = allowedAttributeList.filter(function (attributeRegex) {\n      return attributeRegex instanceof RegExp;\n    }); // Check if a regular expression validates the attribute.\n\n    for (var i = 0, len = regExp.length; i < len; i++) {\n      if (regExp[i].test(attributeName)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  var DefaultAllowlist = {\n    // Global attributes allowed on any supplied element below.\n    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],\n    a: ['target', 'href', 'title', 'rel'],\n    area: [],\n    b: [],\n    br: [],\n    col: [],\n    code: [],\n    div: [],\n    em: [],\n    hr: [],\n    h1: [],\n    h2: [],\n    h3: [],\n    h4: [],\n    h5: [],\n    h6: [],\n    i: [],\n    img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],\n    li: [],\n    ol: [],\n    p: [],\n    pre: [],\n    s: [],\n    small: [],\n    span: [],\n    sub: [],\n    sup: [],\n    strong: [],\n    u: [],\n    ul: []\n  };\n\n  function sanitizeHtml(unsafeHtml, allowList, sanitizeFn) {\n    var _ref11;\n\n    if (!unsafeHtml.length) {\n      return unsafeHtml;\n    }\n\n    if (sanitizeFn && typeof sanitizeFn === 'function') {\n      return sanitizeFn(unsafeHtml);\n    }\n\n    var domParser = new window.DOMParser();\n    var createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');\n\n    var elements = (_ref11 = []).concat.apply(_ref11, _toConsumableArray(createdDocument.body.querySelectorAll('*')));\n\n    var _loop2 = function _loop2(i, len) {\n      var _ref12;\n\n      var element = elements[i];\n      var elementName = element.nodeName.toLowerCase();\n\n      if (!Object.keys(allowList).includes(elementName)) {\n        element.remove();\n        return \"continue\";\n      }\n\n      var attributeList = (_ref12 = []).concat.apply(_ref12, _toConsumableArray(element.attributes));\n\n      var allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || []);\n      attributeList.forEach(function (attribute) {\n        if (!allowedAttribute(attribute, allowedAttributes)) {\n          element.removeAttribute(attribute.nodeName);\n        }\n      });\n    };\n\n    for (var i = 0, len = elements.length; i < len; i++) {\n      var _ret2 = _loop2(i, len);\n\n      if (_ret2 === \"continue\") continue;\n    }\n\n    return createdDocument.body.innerHTML;\n  }\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): tooltip.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n\n  var NAME$4 = 'tooltip';\n  var DATA_KEY$4 = 'bs.tooltip';\n  var EVENT_KEY$4 = \".\".concat(DATA_KEY$4);\n  var CLASS_PREFIX$1 = 'bs-tooltip';\n  var DISALLOWED_ATTRIBUTES = new Set(['sanitize', 'allowList', 'sanitizeFn']);\n  var DefaultType$3 = {\n    animation: 'boolean',\n    template: 'string',\n    title: '(string|element|function)',\n    trigger: 'string',\n    delay: '(number|object)',\n    html: 'boolean',\n    selector: '(string|boolean)',\n    placement: '(string|function)',\n    offset: '(array|string|function)',\n    container: '(string|element|boolean)',\n    fallbackPlacements: 'array',\n    boundary: '(string|element)',\n    customClass: '(string|function)',\n    sanitize: 'boolean',\n    sanitizeFn: '(null|function)',\n    allowList: 'object',\n    popperConfig: '(null|object|function)'\n  };\n  var AttachmentMap = {\n    AUTO: 'auto',\n    TOP: 'top',\n    RIGHT: isRTL() ? 'left' : 'right',\n    BOTTOM: 'bottom',\n    LEFT: isRTL() ? 'right' : 'left'\n  };\n  var Default$3 = {\n    animation: true,\n    template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"tooltip-arrow\"></div>' + '<div class=\"tooltip-inner\"></div>' + '</div>',\n    trigger: 'hover focus',\n    title: '',\n    delay: 0,\n    html: false,\n    selector: false,\n    placement: 'top',\n    offset: [0, 0],\n    container: false,\n    fallbackPlacements: ['top', 'right', 'bottom', 'left'],\n    boundary: 'clippingParents',\n    customClass: '',\n    sanitize: true,\n    sanitizeFn: null,\n    allowList: DefaultAllowlist,\n    popperConfig: null\n  };\n  var Event$2 = {\n    HIDE: \"hide\".concat(EVENT_KEY$4),\n    HIDDEN: \"hidden\".concat(EVENT_KEY$4),\n    SHOW: \"show\".concat(EVENT_KEY$4),\n    SHOWN: \"shown\".concat(EVENT_KEY$4),\n    INSERTED: \"inserted\".concat(EVENT_KEY$4),\n    CLICK: \"click\".concat(EVENT_KEY$4),\n    FOCUSIN: \"focusin\".concat(EVENT_KEY$4),\n    FOCUSOUT: \"focusout\".concat(EVENT_KEY$4),\n    MOUSEENTER: \"mouseenter\".concat(EVENT_KEY$4),\n    MOUSELEAVE: \"mouseleave\".concat(EVENT_KEY$4)\n  };\n  var CLASS_NAME_FADE$2 = 'fade';\n  var CLASS_NAME_MODAL = 'modal';\n  var CLASS_NAME_SHOW$2 = 'show';\n  var HOVER_STATE_SHOW = 'show';\n  var HOVER_STATE_OUT = 'out';\n  var SELECTOR_TOOLTIP_INNER = '.tooltip-inner';\n  var SELECTOR_MODAL = \".\".concat(CLASS_NAME_MODAL);\n  var EVENT_MODAL_HIDE = 'hide.bs.modal';\n  var TRIGGER_HOVER = 'hover';\n  var TRIGGER_FOCUS = 'focus';\n  var TRIGGER_CLICK = 'click';\n  var TRIGGER_MANUAL = 'manual';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Tooltip = /*#__PURE__*/function (_BaseComponent8) {\n    _inherits(Tooltip, _BaseComponent8);\n\n    var _super8 = _createSuper(Tooltip);\n\n    function Tooltip(element, config) {\n      var _this34;\n\n      _classCallCheck(this, Tooltip);\n\n      if (typeof Popper === 'undefined') {\n        throw new TypeError('Bootstrap\\'s tooltips require Popper (https://popper.js.org)');\n      }\n\n      _this34 = _super8.call(this, element); // private\n\n      _this34._isEnabled = true;\n      _this34._timeout = 0;\n      _this34._hoverState = '';\n      _this34._activeTrigger = {};\n      _this34._popper = null; // Protected\n\n      _this34._config = _this34._getConfig(config);\n      _this34.tip = null;\n\n      _this34._setListeners();\n\n      return _this34;\n    } // Getters\n\n\n    _createClass(Tooltip, [{\n      key: \"enable\",\n      value: // Public\n      function enable() {\n        this._isEnabled = true;\n      }\n    }, {\n      key: \"disable\",\n      value: function disable() {\n        this._isEnabled = false;\n      }\n    }, {\n      key: \"toggleEnabled\",\n      value: function toggleEnabled() {\n        this._isEnabled = !this._isEnabled;\n      }\n    }, {\n      key: \"toggle\",\n      value: function toggle(event) {\n        if (!this._isEnabled) {\n          return;\n        }\n\n        if (event) {\n          var context = this._initializeOnDelegatedTarget(event);\n\n          context._activeTrigger.click = !context._activeTrigger.click;\n\n          if (context._isWithActiveTrigger()) {\n            context._enter(null, context);\n          } else {\n            context._leave(null, context);\n          }\n        } else {\n          if (this.getTipElement().classList.contains(CLASS_NAME_SHOW$2)) {\n            this._leave(null, this);\n\n            return;\n          }\n\n          this._enter(null, this);\n        }\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        clearTimeout(this._timeout);\n        EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);\n\n        if (this.tip) {\n          this.tip.remove();\n        }\n\n        this._disposePopper();\n\n        _get(_getPrototypeOf(Tooltip.prototype), \"dispose\", this).call(this);\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        var _this35 = this;\n\n        if (this._element.style.display === 'none') {\n          throw new Error('Please use show on visible elements');\n        }\n\n        if (!(this.isWithContent() && this._isEnabled)) {\n          return;\n        }\n\n        var showEvent = EventHandler.trigger(this._element, this.constructor.Event.SHOW);\n        var shadowRoot = findShadowRoot(this._element);\n        var isInTheDom = shadowRoot === null ? this._element.ownerDocument.documentElement.contains(this._element) : shadowRoot.contains(this._element);\n\n        if (showEvent.defaultPrevented || !isInTheDom) {\n          return;\n        } // A trick to recreate a tooltip in case a new title is given by using the NOT documented `data-bs-original-title`\n        // This will be removed later in favor of a `setContent` method\n\n\n        if (this.constructor.NAME === 'tooltip' && this.tip && this.getTitle() !== this.tip.querySelector(SELECTOR_TOOLTIP_INNER).innerHTML) {\n          this._disposePopper();\n\n          this.tip.remove();\n          this.tip = null;\n        }\n\n        var tip = this.getTipElement();\n        var tipId = getUID(this.constructor.NAME);\n        tip.setAttribute('id', tipId);\n\n        this._element.setAttribute('aria-describedby', tipId);\n\n        if (this._config.animation) {\n          tip.classList.add(CLASS_NAME_FADE$2);\n        }\n\n        var placement = typeof this._config.placement === 'function' ? this._config.placement.call(this, tip, this._element) : this._config.placement;\n\n        var attachment = this._getAttachment(placement);\n\n        this._addAttachmentClass(attachment);\n\n        var container = this._config.container;\n        Data.set(tip, this.constructor.DATA_KEY, this);\n\n        if (!this._element.ownerDocument.documentElement.contains(this.tip)) {\n          container.append(tip);\n          EventHandler.trigger(this._element, this.constructor.Event.INSERTED);\n        }\n\n        if (this._popper) {\n          this._popper.update();\n        } else {\n          this._popper = createPopper(this._element, tip, this._getPopperConfig(attachment));\n        }\n\n        tip.classList.add(CLASS_NAME_SHOW$2);\n\n        var customClass = this._resolvePossibleFunction(this._config.customClass);\n\n        if (customClass) {\n          var _tip$classList;\n\n          (_tip$classList = tip.classList).add.apply(_tip$classList, _toConsumableArray(customClass.split(' ')));\n        } // If this is a touch-enabled device we add extra\n        // empty mouseover listeners to the body's immediate children;\n        // only needed because of broken event delegation on iOS\n        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n\n        if ('ontouchstart' in document.documentElement) {\n          var _ref13;\n\n          (_ref13 = []).concat.apply(_ref13, _toConsumableArray(document.body.children)).forEach(function (element) {\n            EventHandler.on(element, 'mouseover', noop);\n          });\n        }\n\n        var complete = function complete() {\n          var prevHoverState = _this35._hoverState;\n          _this35._hoverState = null;\n          EventHandler.trigger(_this35._element, _this35.constructor.Event.SHOWN);\n\n          if (prevHoverState === HOVER_STATE_OUT) {\n            _this35._leave(null, _this35);\n          }\n        };\n\n        var isAnimated = this.tip.classList.contains(CLASS_NAME_FADE$2);\n\n        this._queueCallback(complete, this.tip, isAnimated);\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        var _this36 = this;\n\n        if (!this._popper) {\n          return;\n        }\n\n        var tip = this.getTipElement();\n\n        var complete = function complete() {\n          if (_this36._isWithActiveTrigger()) {\n            return;\n          }\n\n          if (_this36._hoverState !== HOVER_STATE_SHOW) {\n            tip.remove();\n          }\n\n          _this36._cleanTipClass();\n\n          _this36._element.removeAttribute('aria-describedby');\n\n          EventHandler.trigger(_this36._element, _this36.constructor.Event.HIDDEN);\n\n          _this36._disposePopper();\n        };\n\n        var hideEvent = EventHandler.trigger(this._element, this.constructor.Event.HIDE);\n\n        if (hideEvent.defaultPrevented) {\n          return;\n        }\n\n        tip.classList.remove(CLASS_NAME_SHOW$2); // If this is a touch-enabled device we remove the extra\n        // empty mouseover listeners we added for iOS support\n\n        if ('ontouchstart' in document.documentElement) {\n          var _ref14;\n\n          (_ref14 = []).concat.apply(_ref14, _toConsumableArray(document.body.children)).forEach(function (element) {\n            return EventHandler.off(element, 'mouseover', noop);\n          });\n        }\n\n        this._activeTrigger[TRIGGER_CLICK] = false;\n        this._activeTrigger[TRIGGER_FOCUS] = false;\n        this._activeTrigger[TRIGGER_HOVER] = false;\n        var isAnimated = this.tip.classList.contains(CLASS_NAME_FADE$2);\n\n        this._queueCallback(complete, this.tip, isAnimated);\n\n        this._hoverState = '';\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        if (this._popper !== null) {\n          this._popper.update();\n        }\n      } // Protected\n\n    }, {\n      key: \"isWithContent\",\n      value: function isWithContent() {\n        return Boolean(this.getTitle());\n      }\n    }, {\n      key: \"getTipElement\",\n      value: function getTipElement() {\n        if (this.tip) {\n          return this.tip;\n        }\n\n        var element = document.createElement('div');\n        element.innerHTML = this._config.template;\n        var tip = element.children[0];\n        this.setContent(tip);\n        tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2);\n        this.tip = tip;\n        return this.tip;\n      }\n    }, {\n      key: \"setContent\",\n      value: function setContent(tip) {\n        this._sanitizeAndSetContent(tip, this.getTitle(), SELECTOR_TOOLTIP_INNER);\n      }\n    }, {\n      key: \"_sanitizeAndSetContent\",\n      value: function _sanitizeAndSetContent(template, content, selector) {\n        var templateElement = SelectorEngine.findOne(selector, template);\n\n        if (!content && templateElement) {\n          templateElement.remove();\n          return;\n        } // we use append for html objects to maintain js events\n\n\n        this.setElementContent(templateElement, content);\n      }\n    }, {\n      key: \"setElementContent\",\n      value: function setElementContent(element, content) {\n        if (element === null) {\n          return;\n        }\n\n        if (isElement$1(content)) {\n          content = getElement(content); // content is a DOM node or a jQuery\n\n          if (this._config.html) {\n            if (content.parentNode !== element) {\n              element.innerHTML = '';\n              element.append(content);\n            }\n          } else {\n            element.textContent = content.textContent;\n          }\n\n          return;\n        }\n\n        if (this._config.html) {\n          if (this._config.sanitize) {\n            content = sanitizeHtml(content, this._config.allowList, this._config.sanitizeFn);\n          }\n\n          element.innerHTML = content;\n        } else {\n          element.textContent = content;\n        }\n      }\n    }, {\n      key: \"getTitle\",\n      value: function getTitle() {\n        var title = this._element.getAttribute('data-bs-original-title') || this._config.title;\n\n        return this._resolvePossibleFunction(title);\n      }\n    }, {\n      key: \"updateAttachment\",\n      value: function updateAttachment(attachment) {\n        if (attachment === 'right') {\n          return 'end';\n        }\n\n        if (attachment === 'left') {\n          return 'start';\n        }\n\n        return attachment;\n      } // Private\n\n    }, {\n      key: \"_initializeOnDelegatedTarget\",\n      value: function _initializeOnDelegatedTarget(event, context) {\n        return context || this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());\n      }\n    }, {\n      key: \"_getOffset\",\n      value: function _getOffset() {\n        var _this37 = this;\n\n        var offset = this._config.offset;\n\n        if (typeof offset === 'string') {\n          return offset.split(',').map(function (val) {\n            return Number.parseInt(val, 10);\n          });\n        }\n\n        if (typeof offset === 'function') {\n          return function (popperData) {\n            return offset(popperData, _this37._element);\n          };\n        }\n\n        return offset;\n      }\n    }, {\n      key: \"_resolvePossibleFunction\",\n      value: function _resolvePossibleFunction(content) {\n        return typeof content === 'function' ? content.call(this._element) : content;\n      }\n    }, {\n      key: \"_getPopperConfig\",\n      value: function _getPopperConfig(attachment) {\n        var _this38 = this;\n\n        var defaultBsPopperConfig = {\n          placement: attachment,\n          modifiers: [{\n            name: 'flip',\n            options: {\n              fallbackPlacements: this._config.fallbackPlacements\n            }\n          }, {\n            name: 'offset',\n            options: {\n              offset: this._getOffset()\n            }\n          }, {\n            name: 'preventOverflow',\n            options: {\n              boundary: this._config.boundary\n            }\n          }, {\n            name: 'arrow',\n            options: {\n              element: \".\".concat(this.constructor.NAME, \"-arrow\")\n            }\n          }, {\n            name: 'onChange',\n            enabled: true,\n            phase: 'afterWrite',\n            fn: function fn(data) {\n              return _this38._handlePopperPlacementChange(data);\n            }\n          }],\n          onFirstUpdate: function onFirstUpdate(data) {\n            if (data.options.placement !== data.placement) {\n              _this38._handlePopperPlacementChange(data);\n            }\n          }\n        };\n        return _objectSpread(_objectSpread({}, defaultBsPopperConfig), typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig);\n      }\n    }, {\n      key: \"_addAttachmentClass\",\n      value: function _addAttachmentClass(attachment) {\n        this.getTipElement().classList.add(\"\".concat(this._getBasicClassPrefix(), \"-\").concat(this.updateAttachment(attachment)));\n      }\n    }, {\n      key: \"_getAttachment\",\n      value: function _getAttachment(placement) {\n        return AttachmentMap[placement.toUpperCase()];\n      }\n    }, {\n      key: \"_setListeners\",\n      value: function _setListeners() {\n        var _this39 = this;\n\n        var triggers = this._config.trigger.split(' ');\n\n        triggers.forEach(function (trigger) {\n          if (trigger === 'click') {\n            EventHandler.on(_this39._element, _this39.constructor.Event.CLICK, _this39._config.selector, function (event) {\n              return _this39.toggle(event);\n            });\n          } else if (trigger !== TRIGGER_MANUAL) {\n            var eventIn = trigger === TRIGGER_HOVER ? _this39.constructor.Event.MOUSEENTER : _this39.constructor.Event.FOCUSIN;\n            var eventOut = trigger === TRIGGER_HOVER ? _this39.constructor.Event.MOUSELEAVE : _this39.constructor.Event.FOCUSOUT;\n            EventHandler.on(_this39._element, eventIn, _this39._config.selector, function (event) {\n              return _this39._enter(event);\n            });\n            EventHandler.on(_this39._element, eventOut, _this39._config.selector, function (event) {\n              return _this39._leave(event);\n            });\n          }\n        });\n\n        this._hideModalHandler = function () {\n          if (_this39._element) {\n            _this39.hide();\n          }\n        };\n\n        EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);\n\n        if (this._config.selector) {\n          this._config = _objectSpread(_objectSpread({}, this._config), {}, {\n            trigger: 'manual',\n            selector: ''\n          });\n        } else {\n          this._fixTitle();\n        }\n      }\n    }, {\n      key: \"_fixTitle\",\n      value: function _fixTitle() {\n        var title = this._element.getAttribute('title');\n\n        var originalTitleType = _typeof(this._element.getAttribute('data-bs-original-title'));\n\n        if (title || originalTitleType !== 'string') {\n          this._element.setAttribute('data-bs-original-title', title || '');\n\n          if (title && !this._element.getAttribute('aria-label') && !this._element.textContent) {\n            this._element.setAttribute('aria-label', title);\n          }\n\n          this._element.setAttribute('title', '');\n        }\n      }\n    }, {\n      key: \"_enter\",\n      value: function _enter(event, context) {\n        context = this._initializeOnDelegatedTarget(event, context);\n\n        if (event) {\n          context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;\n        }\n\n        if (context.getTipElement().classList.contains(CLASS_NAME_SHOW$2) || context._hoverState === HOVER_STATE_SHOW) {\n          context._hoverState = HOVER_STATE_SHOW;\n          return;\n        }\n\n        clearTimeout(context._timeout);\n        context._hoverState = HOVER_STATE_SHOW;\n\n        if (!context._config.delay || !context._config.delay.show) {\n          context.show();\n          return;\n        }\n\n        context._timeout = setTimeout(function () {\n          if (context._hoverState === HOVER_STATE_SHOW) {\n            context.show();\n          }\n        }, context._config.delay.show);\n      }\n    }, {\n      key: \"_leave\",\n      value: function _leave(event, context) {\n        context = this._initializeOnDelegatedTarget(event, context);\n\n        if (event) {\n          context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);\n        }\n\n        if (context._isWithActiveTrigger()) {\n          return;\n        }\n\n        clearTimeout(context._timeout);\n        context._hoverState = HOVER_STATE_OUT;\n\n        if (!context._config.delay || !context._config.delay.hide) {\n          context.hide();\n          return;\n        }\n\n        context._timeout = setTimeout(function () {\n          if (context._hoverState === HOVER_STATE_OUT) {\n            context.hide();\n          }\n        }, context._config.delay.hide);\n      }\n    }, {\n      key: \"_isWithActiveTrigger\",\n      value: function _isWithActiveTrigger() {\n        for (var trigger in this._activeTrigger) {\n          if (this._activeTrigger[trigger]) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: \"_getConfig\",\n      value: function _getConfig(config) {\n        var dataAttributes = Manipulator.getDataAttributes(this._element);\n        Object.keys(dataAttributes).forEach(function (dataAttr) {\n          if (DISALLOWED_ATTRIBUTES.has(dataAttr)) {\n            delete dataAttributes[dataAttr];\n          }\n        });\n        config = _objectSpread(_objectSpread(_objectSpread({}, this.constructor.Default), dataAttributes), _typeof(config) === 'object' && config ? config : {});\n        config.container = config.container === false ? document.body : getElement(config.container);\n\n        if (typeof config.delay === 'number') {\n          config.delay = {\n            show: config.delay,\n            hide: config.delay\n          };\n        }\n\n        if (typeof config.title === 'number') {\n          config.title = config.title.toString();\n        }\n\n        if (typeof config.content === 'number') {\n          config.content = config.content.toString();\n        }\n\n        typeCheckConfig(NAME$4, config, this.constructor.DefaultType);\n\n        if (config.sanitize) {\n          config.template = sanitizeHtml(config.template, config.allowList, config.sanitizeFn);\n        }\n\n        return config;\n      }\n    }, {\n      key: \"_getDelegateConfig\",\n      value: function _getDelegateConfig() {\n        var config = {};\n\n        for (var key in this._config) {\n          if (this.constructor.Default[key] !== this._config[key]) {\n            config[key] = this._config[key];\n          }\n        } // In the future can be replaced with:\n        // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])\n        // `Object.fromEntries(keysWithDifferentValues)`\n\n\n        return config;\n      }\n    }, {\n      key: \"_cleanTipClass\",\n      value: function _cleanTipClass() {\n        var tip = this.getTipElement();\n        var basicClassPrefixRegex = new RegExp(\"(^|\\\\s)\".concat(this._getBasicClassPrefix(), \"\\\\S+\"), 'g');\n        var tabClass = tip.getAttribute('class').match(basicClassPrefixRegex);\n\n        if (tabClass !== null && tabClass.length > 0) {\n          tabClass.map(function (token) {\n            return token.trim();\n          }).forEach(function (tClass) {\n            return tip.classList.remove(tClass);\n          });\n        }\n      }\n    }, {\n      key: \"_getBasicClassPrefix\",\n      value: function _getBasicClassPrefix() {\n        return CLASS_PREFIX$1;\n      }\n    }, {\n      key: \"_handlePopperPlacementChange\",\n      value: function _handlePopperPlacementChange(popperData) {\n        var state = popperData.state;\n\n        if (!state) {\n          return;\n        }\n\n        this.tip = state.elements.popper;\n\n        this._cleanTipClass();\n\n        this._addAttachmentClass(this._getAttachment(state.placement));\n      }\n    }, {\n      key: \"_disposePopper\",\n      value: function _disposePopper() {\n        if (this._popper) {\n          this._popper.destroy();\n\n          this._popper = null;\n        }\n      } // Static\n\n    }], [{\n      key: \"Default\",\n      get: function get() {\n        return Default$3;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$4;\n      }\n    }, {\n      key: \"Event\",\n      get: function get() {\n        return Event$2;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$3;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        return this.each(function () {\n          var data = Tooltip.getOrCreateInstance(this, config);\n\n          if (typeof config === 'string') {\n            if (typeof data[config] === 'undefined') {\n              throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n            }\n\n            data[config]();\n          }\n        });\n      }\n    }]);\n\n    return Tooltip;\n  }(BaseComponent);\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Tooltip to jQuery only if jQuery is present\n   */\n\n\n  defineJQueryPlugin(Tooltip);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): popover.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME$3 = 'popover';\n  var DATA_KEY$3 = 'bs.popover';\n  var EVENT_KEY$3 = \".\".concat(DATA_KEY$3);\n  var CLASS_PREFIX = 'bs-popover';\n\n  var Default$2 = _objectSpread(_objectSpread({}, Tooltip.Default), {}, {\n    placement: 'right',\n    offset: [0, 8],\n    trigger: 'click',\n    content: '',\n    template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"popover-arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div>' + '</div>'\n  });\n\n  var DefaultType$2 = _objectSpread(_objectSpread({}, Tooltip.DefaultType), {}, {\n    content: '(string|element|function)'\n  });\n\n  var Event$1 = {\n    HIDE: \"hide\".concat(EVENT_KEY$3),\n    HIDDEN: \"hidden\".concat(EVENT_KEY$3),\n    SHOW: \"show\".concat(EVENT_KEY$3),\n    SHOWN: \"shown\".concat(EVENT_KEY$3),\n    INSERTED: \"inserted\".concat(EVENT_KEY$3),\n    CLICK: \"click\".concat(EVENT_KEY$3),\n    FOCUSIN: \"focusin\".concat(EVENT_KEY$3),\n    FOCUSOUT: \"focusout\".concat(EVENT_KEY$3),\n    MOUSEENTER: \"mouseenter\".concat(EVENT_KEY$3),\n    MOUSELEAVE: \"mouseleave\".concat(EVENT_KEY$3)\n  };\n  var SELECTOR_TITLE = '.popover-header';\n  var SELECTOR_CONTENT = '.popover-body';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Popover = /*#__PURE__*/function (_Tooltip) {\n    _inherits(Popover, _Tooltip);\n\n    var _super9 = _createSuper(Popover);\n\n    function Popover() {\n      _classCallCheck(this, Popover);\n\n      return _super9.apply(this, arguments);\n    }\n\n    _createClass(Popover, [{\n      key: \"isWithContent\",\n      value: // Overrides\n      function isWithContent() {\n        return this.getTitle() || this._getContent();\n      }\n    }, {\n      key: \"setContent\",\n      value: function setContent(tip) {\n        this._sanitizeAndSetContent(tip, this.getTitle(), SELECTOR_TITLE);\n\n        this._sanitizeAndSetContent(tip, this._getContent(), SELECTOR_CONTENT);\n      } // Private\n\n    }, {\n      key: \"_getContent\",\n      value: function _getContent() {\n        return this._resolvePossibleFunction(this._config.content);\n      }\n    }, {\n      key: \"_getBasicClassPrefix\",\n      value: function _getBasicClassPrefix() {\n        return CLASS_PREFIX;\n      } // Static\n\n    }], [{\n      key: \"Default\",\n      get: // Getters\n      function get() {\n        return Default$2;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$3;\n      }\n    }, {\n      key: \"Event\",\n      get: function get() {\n        return Event$1;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$2;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        return this.each(function () {\n          var data = Popover.getOrCreateInstance(this, config);\n\n          if (typeof config === 'string') {\n            if (typeof data[config] === 'undefined') {\n              throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n            }\n\n            data[config]();\n          }\n        });\n      }\n    }]);\n\n    return Popover;\n  }(Tooltip);\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Popover to jQuery only if jQuery is present\n   */\n\n\n  defineJQueryPlugin(Popover);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): scrollspy.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME$2 = 'scrollspy';\n  var DATA_KEY$2 = 'bs.scrollspy';\n  var EVENT_KEY$2 = \".\".concat(DATA_KEY$2);\n  var DATA_API_KEY$1 = '.data-api';\n  var Default$1 = {\n    offset: 10,\n    method: 'auto',\n    target: ''\n  };\n  var DefaultType$1 = {\n    offset: 'number',\n    method: 'string',\n    target: '(string|element)'\n  };\n  var EVENT_ACTIVATE = \"activate\".concat(EVENT_KEY$2);\n  var EVENT_SCROLL = \"scroll\".concat(EVENT_KEY$2);\n  var EVENT_LOAD_DATA_API = \"load\".concat(EVENT_KEY$2).concat(DATA_API_KEY$1);\n  var CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';\n  var CLASS_NAME_ACTIVE$1 = 'active';\n  var SELECTOR_DATA_SPY = '[data-bs-spy=\"scroll\"]';\n  var SELECTOR_NAV_LIST_GROUP$1 = '.nav, .list-group';\n  var SELECTOR_NAV_LINKS = '.nav-link';\n  var SELECTOR_NAV_ITEMS = '.nav-item';\n  var SELECTOR_LIST_ITEMS = '.list-group-item';\n  var SELECTOR_LINK_ITEMS = \"\".concat(SELECTOR_NAV_LINKS, \", \").concat(SELECTOR_LIST_ITEMS, \", .\").concat(CLASS_NAME_DROPDOWN_ITEM);\n  var SELECTOR_DROPDOWN$1 = '.dropdown';\n  var SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';\n  var METHOD_OFFSET = 'offset';\n  var METHOD_POSITION = 'position';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var ScrollSpy = /*#__PURE__*/function (_BaseComponent9) {\n    _inherits(ScrollSpy, _BaseComponent9);\n\n    var _super10 = _createSuper(ScrollSpy);\n\n    function ScrollSpy(element, config) {\n      var _this40;\n\n      _classCallCheck(this, ScrollSpy);\n\n      _this40 = _super10.call(this, element);\n      _this40._scrollElement = _this40._element.tagName === 'BODY' ? window : _this40._element;\n      _this40._config = _this40._getConfig(config);\n      _this40._offsets = [];\n      _this40._targets = [];\n      _this40._activeTarget = null;\n      _this40._scrollHeight = 0;\n      EventHandler.on(_this40._scrollElement, EVENT_SCROLL, function () {\n        return _this40._process();\n      });\n\n      _this40.refresh();\n\n      _this40._process();\n\n      return _this40;\n    } // Getters\n\n\n    _createClass(ScrollSpy, [{\n      key: \"refresh\",\n      value: // Public\n      function refresh() {\n        var _this41 = this;\n\n        var autoMethod = this._scrollElement === this._scrollElement.window ? METHOD_OFFSET : METHOD_POSITION;\n        var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;\n        var offsetBase = offsetMethod === METHOD_POSITION ? this._getScrollTop() : 0;\n        this._offsets = [];\n        this._targets = [];\n        this._scrollHeight = this._getScrollHeight();\n        var targets = SelectorEngine.find(SELECTOR_LINK_ITEMS, this._config.target);\n        targets.map(function (element) {\n          var targetSelector = getSelectorFromElement(element);\n          var target = targetSelector ? SelectorEngine.findOne(targetSelector) : null;\n\n          if (target) {\n            var targetBCR = target.getBoundingClientRect();\n\n            if (targetBCR.width || targetBCR.height) {\n              return [Manipulator[offsetMethod](target).top + offsetBase, targetSelector];\n            }\n          }\n\n          return null;\n        }).filter(function (item) {\n          return item;\n        }).sort(function (a, b) {\n          return a[0] - b[0];\n        }).forEach(function (item) {\n          _this41._offsets.push(item[0]);\n\n          _this41._targets.push(item[1]);\n        });\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        EventHandler.off(this._scrollElement, EVENT_KEY$2);\n\n        _get(_getPrototypeOf(ScrollSpy.prototype), \"dispose\", this).call(this);\n      } // Private\n\n    }, {\n      key: \"_getConfig\",\n      value: function _getConfig(config) {\n        config = _objectSpread(_objectSpread(_objectSpread({}, Default$1), Manipulator.getDataAttributes(this._element)), _typeof(config) === 'object' && config ? config : {});\n        config.target = getElement(config.target) || document.documentElement;\n        typeCheckConfig(NAME$2, config, DefaultType$1);\n        return config;\n      }\n    }, {\n      key: \"_getScrollTop\",\n      value: function _getScrollTop() {\n        return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n      }\n    }, {\n      key: \"_getScrollHeight\",\n      value: function _getScrollHeight() {\n        return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n      }\n    }, {\n      key: \"_getOffsetHeight\",\n      value: function _getOffsetHeight() {\n        return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n      }\n    }, {\n      key: \"_process\",\n      value: function _process() {\n        var scrollTop = this._getScrollTop() + this._config.offset;\n\n        var scrollHeight = this._getScrollHeight();\n\n        var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();\n\n        if (this._scrollHeight !== scrollHeight) {\n          this.refresh();\n        }\n\n        if (scrollTop >= maxScroll) {\n          var target = this._targets[this._targets.length - 1];\n\n          if (this._activeTarget !== target) {\n            this._activate(target);\n          }\n\n          return;\n        }\n\n        if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {\n          this._activeTarget = null;\n\n          this._clear();\n\n          return;\n        }\n\n        for (var i = this._offsets.length; i--;) {\n          var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);\n\n          if (isActiveTarget) {\n            this._activate(this._targets[i]);\n          }\n        }\n      }\n    }, {\n      key: \"_activate\",\n      value: function _activate(target) {\n        this._activeTarget = target;\n\n        this._clear();\n\n        var queries = SELECTOR_LINK_ITEMS.split(',').map(function (selector) {\n          return \"\".concat(selector, \"[data-bs-target=\\\"\").concat(target, \"\\\"],\").concat(selector, \"[href=\\\"\").concat(target, \"\\\"]\");\n        });\n        var link = SelectorEngine.findOne(queries.join(','), this._config.target);\n        link.classList.add(CLASS_NAME_ACTIVE$1);\n\n        if (link.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {\n          SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, link.closest(SELECTOR_DROPDOWN$1)).classList.add(CLASS_NAME_ACTIVE$1);\n        } else {\n          SelectorEngine.parents(link, SELECTOR_NAV_LIST_GROUP$1).forEach(function (listGroup) {\n            // Set triggered links parents as active\n            // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n            SelectorEngine.prev(listGroup, \"\".concat(SELECTOR_NAV_LINKS, \", \").concat(SELECTOR_LIST_ITEMS)).forEach(function (item) {\n              return item.classList.add(CLASS_NAME_ACTIVE$1);\n            }); // Handle special case when .nav-link is inside .nav-item\n\n            SelectorEngine.prev(listGroup, SELECTOR_NAV_ITEMS).forEach(function (navItem) {\n              SelectorEngine.children(navItem, SELECTOR_NAV_LINKS).forEach(function (item) {\n                return item.classList.add(CLASS_NAME_ACTIVE$1);\n              });\n            });\n          });\n        }\n\n        EventHandler.trigger(this._scrollElement, EVENT_ACTIVATE, {\n          relatedTarget: target\n        });\n      }\n    }, {\n      key: \"_clear\",\n      value: function _clear() {\n        SelectorEngine.find(SELECTOR_LINK_ITEMS, this._config.target).filter(function (node) {\n          return node.classList.contains(CLASS_NAME_ACTIVE$1);\n        }).forEach(function (node) {\n          return node.classList.remove(CLASS_NAME_ACTIVE$1);\n        });\n      } // Static\n\n    }], [{\n      key: \"Default\",\n      get: function get() {\n        return Default$1;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$2;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        return this.each(function () {\n          var data = ScrollSpy.getOrCreateInstance(this, config);\n\n          if (typeof config !== 'string') {\n            return;\n          }\n\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n          }\n\n          data[config]();\n        });\n      }\n    }]);\n\n    return ScrollSpy;\n  }(BaseComponent);\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(window, EVENT_LOAD_DATA_API, function () {\n    SelectorEngine.find(SELECTOR_DATA_SPY).forEach(function (spy) {\n      return new ScrollSpy(spy);\n    });\n  });\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .ScrollSpy to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(ScrollSpy);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): tab.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME$1 = 'tab';\n  var DATA_KEY$1 = 'bs.tab';\n  var EVENT_KEY$1 = \".\".concat(DATA_KEY$1);\n  var DATA_API_KEY = '.data-api';\n  var EVENT_HIDE$1 = \"hide\".concat(EVENT_KEY$1);\n  var EVENT_HIDDEN$1 = \"hidden\".concat(EVENT_KEY$1);\n  var EVENT_SHOW$1 = \"show\".concat(EVENT_KEY$1);\n  var EVENT_SHOWN$1 = \"shown\".concat(EVENT_KEY$1);\n  var EVENT_CLICK_DATA_API = \"click\".concat(EVENT_KEY$1).concat(DATA_API_KEY);\n  var CLASS_NAME_DROPDOWN_MENU = 'dropdown-menu';\n  var CLASS_NAME_ACTIVE = 'active';\n  var CLASS_NAME_FADE$1 = 'fade';\n  var CLASS_NAME_SHOW$1 = 'show';\n  var SELECTOR_DROPDOWN = '.dropdown';\n  var SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';\n  var SELECTOR_ACTIVE = '.active';\n  var SELECTOR_ACTIVE_UL = ':scope > li > .active';\n  var SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"tab\"], [data-bs-toggle=\"pill\"], [data-bs-toggle=\"list\"]';\n  var SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';\n  var SELECTOR_DROPDOWN_ACTIVE_CHILD = ':scope > .dropdown-menu .active';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Tab = /*#__PURE__*/function (_BaseComponent10) {\n    _inherits(Tab, _BaseComponent10);\n\n    var _super11 = _createSuper(Tab);\n\n    function Tab() {\n      _classCallCheck(this, Tab);\n\n      return _super11.apply(this, arguments);\n    }\n\n    _createClass(Tab, [{\n      key: \"show\",\n      value: // Public\n      function show() {\n        var _this42 = this;\n\n        if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.classList.contains(CLASS_NAME_ACTIVE)) {\n          return;\n        }\n\n        var previous;\n        var target = getElementFromSelector(this._element);\n\n        var listElement = this._element.closest(SELECTOR_NAV_LIST_GROUP);\n\n        if (listElement) {\n          var itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? SELECTOR_ACTIVE_UL : SELECTOR_ACTIVE;\n          previous = SelectorEngine.find(itemSelector, listElement);\n          previous = previous[previous.length - 1];\n        }\n\n        var hideEvent = previous ? EventHandler.trigger(previous, EVENT_HIDE$1, {\n          relatedTarget: this._element\n        }) : null;\n        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$1, {\n          relatedTarget: previous\n        });\n\n        if (showEvent.defaultPrevented || hideEvent !== null && hideEvent.defaultPrevented) {\n          return;\n        }\n\n        this._activate(this._element, listElement);\n\n        var complete = function complete() {\n          EventHandler.trigger(previous, EVENT_HIDDEN$1, {\n            relatedTarget: _this42._element\n          });\n          EventHandler.trigger(_this42._element, EVENT_SHOWN$1, {\n            relatedTarget: previous\n          });\n        };\n\n        if (target) {\n          this._activate(target, target.parentNode, complete);\n        } else {\n          complete();\n        }\n      } // Private\n\n    }, {\n      key: \"_activate\",\n      value: function _activate(element, container, callback) {\n        var _this43 = this;\n\n        var activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? SelectorEngine.find(SELECTOR_ACTIVE_UL, container) : SelectorEngine.children(container, SELECTOR_ACTIVE);\n        var active = activeElements[0];\n        var isTransitioning = callback && active && active.classList.contains(CLASS_NAME_FADE$1);\n\n        var complete = function complete() {\n          return _this43._transitionComplete(element, active, callback);\n        };\n\n        if (active && isTransitioning) {\n          active.classList.remove(CLASS_NAME_SHOW$1);\n\n          this._queueCallback(complete, element, true);\n        } else {\n          complete();\n        }\n      }\n    }, {\n      key: \"_transitionComplete\",\n      value: function _transitionComplete(element, active, callback) {\n        if (active) {\n          active.classList.remove(CLASS_NAME_ACTIVE);\n          var dropdownChild = SelectorEngine.findOne(SELECTOR_DROPDOWN_ACTIVE_CHILD, active.parentNode);\n\n          if (dropdownChild) {\n            dropdownChild.classList.remove(CLASS_NAME_ACTIVE);\n          }\n\n          if (active.getAttribute('role') === 'tab') {\n            active.setAttribute('aria-selected', false);\n          }\n        }\n\n        element.classList.add(CLASS_NAME_ACTIVE);\n\n        if (element.getAttribute('role') === 'tab') {\n          element.setAttribute('aria-selected', true);\n        }\n\n        reflow(element);\n\n        if (element.classList.contains(CLASS_NAME_FADE$1)) {\n          element.classList.add(CLASS_NAME_SHOW$1);\n        }\n\n        var parent = element.parentNode;\n\n        if (parent && parent.nodeName === 'LI') {\n          parent = parent.parentNode;\n        }\n\n        if (parent && parent.classList.contains(CLASS_NAME_DROPDOWN_MENU)) {\n          var dropdownElement = element.closest(SELECTOR_DROPDOWN);\n\n          if (dropdownElement) {\n            SelectorEngine.find(SELECTOR_DROPDOWN_TOGGLE, dropdownElement).forEach(function (dropdown) {\n              return dropdown.classList.add(CLASS_NAME_ACTIVE);\n            });\n          }\n\n          element.setAttribute('aria-expanded', true);\n        }\n\n        if (callback) {\n          callback();\n        }\n      } // Static\n\n    }], [{\n      key: \"NAME\",\n      get: // Getters\n      function get() {\n        return NAME$1;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        return this.each(function () {\n          var data = Tab.getOrCreateInstance(this);\n\n          if (typeof config === 'string') {\n            if (typeof data[config] === 'undefined') {\n              throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n            }\n\n            data[config]();\n          }\n        });\n      }\n    }]);\n\n    return Tab;\n  }(BaseComponent);\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n    if (['A', 'AREA'].includes(this.tagName)) {\n      event.preventDefault();\n    }\n\n    if (isDisabled(this)) {\n      return;\n    }\n\n    var data = Tab.getOrCreateInstance(this);\n    data.show();\n  });\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Tab to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Tab);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): toast.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  var NAME = 'toast';\n  var DATA_KEY = 'bs.toast';\n  var EVENT_KEY = \".\".concat(DATA_KEY);\n  var EVENT_MOUSEOVER = \"mouseover\".concat(EVENT_KEY);\n  var EVENT_MOUSEOUT = \"mouseout\".concat(EVENT_KEY);\n  var EVENT_FOCUSIN = \"focusin\".concat(EVENT_KEY);\n  var EVENT_FOCUSOUT = \"focusout\".concat(EVENT_KEY);\n  var EVENT_HIDE = \"hide\".concat(EVENT_KEY);\n  var EVENT_HIDDEN = \"hidden\".concat(EVENT_KEY);\n  var EVENT_SHOW = \"show\".concat(EVENT_KEY);\n  var EVENT_SHOWN = \"shown\".concat(EVENT_KEY);\n  var CLASS_NAME_FADE = 'fade';\n  var CLASS_NAME_HIDE = 'hide'; // @deprecated - kept here only for backwards compatibility\n\n  var CLASS_NAME_SHOW = 'show';\n  var CLASS_NAME_SHOWING = 'showing';\n  var DefaultType = {\n    animation: 'boolean',\n    autohide: 'boolean',\n    delay: 'number'\n  };\n  var Default = {\n    animation: true,\n    autohide: true,\n    delay: 5000\n  };\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  var Toast = /*#__PURE__*/function (_BaseComponent11) {\n    _inherits(Toast, _BaseComponent11);\n\n    var _super12 = _createSuper(Toast);\n\n    function Toast(element, config) {\n      var _this44;\n\n      _classCallCheck(this, Toast);\n\n      _this44 = _super12.call(this, element);\n      _this44._config = _this44._getConfig(config);\n      _this44._timeout = null;\n      _this44._hasMouseInteraction = false;\n      _this44._hasKeyboardInteraction = false;\n\n      _this44._setListeners();\n\n      return _this44;\n    } // Getters\n\n\n    _createClass(Toast, [{\n      key: \"show\",\n      value: // Public\n      function show() {\n        var _this45 = this;\n\n        var showEvent = EventHandler.trigger(this._element, EVENT_SHOW);\n\n        if (showEvent.defaultPrevented) {\n          return;\n        }\n\n        this._clearTimeout();\n\n        if (this._config.animation) {\n          this._element.classList.add(CLASS_NAME_FADE);\n        }\n\n        var complete = function complete() {\n          _this45._element.classList.remove(CLASS_NAME_SHOWING);\n\n          EventHandler.trigger(_this45._element, EVENT_SHOWN);\n\n          _this45._maybeScheduleHide();\n        };\n\n        this._element.classList.remove(CLASS_NAME_HIDE); // @deprecated\n\n\n        reflow(this._element);\n\n        this._element.classList.add(CLASS_NAME_SHOW);\n\n        this._element.classList.add(CLASS_NAME_SHOWING);\n\n        this._queueCallback(complete, this._element, this._config.animation);\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        var _this46 = this;\n\n        if (!this._element.classList.contains(CLASS_NAME_SHOW)) {\n          return;\n        }\n\n        var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);\n\n        if (hideEvent.defaultPrevented) {\n          return;\n        }\n\n        var complete = function complete() {\n          _this46._element.classList.add(CLASS_NAME_HIDE); // @deprecated\n\n\n          _this46._element.classList.remove(CLASS_NAME_SHOWING);\n\n          _this46._element.classList.remove(CLASS_NAME_SHOW);\n\n          EventHandler.trigger(_this46._element, EVENT_HIDDEN);\n        };\n\n        this._element.classList.add(CLASS_NAME_SHOWING);\n\n        this._queueCallback(complete, this._element, this._config.animation);\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this._clearTimeout();\n\n        if (this._element.classList.contains(CLASS_NAME_SHOW)) {\n          this._element.classList.remove(CLASS_NAME_SHOW);\n        }\n\n        _get(_getPrototypeOf(Toast.prototype), \"dispose\", this).call(this);\n      } // Private\n\n    }, {\n      key: \"_getConfig\",\n      value: function _getConfig(config) {\n        config = _objectSpread(_objectSpread(_objectSpread({}, Default), Manipulator.getDataAttributes(this._element)), _typeof(config) === 'object' && config ? config : {});\n        typeCheckConfig(NAME, config, this.constructor.DefaultType);\n        return config;\n      }\n    }, {\n      key: \"_maybeScheduleHide\",\n      value: function _maybeScheduleHide() {\n        var _this47 = this;\n\n        if (!this._config.autohide) {\n          return;\n        }\n\n        if (this._hasMouseInteraction || this._hasKeyboardInteraction) {\n          return;\n        }\n\n        this._timeout = setTimeout(function () {\n          _this47.hide();\n        }, this._config.delay);\n      }\n    }, {\n      key: \"_onInteraction\",\n      value: function _onInteraction(event, isInteracting) {\n        switch (event.type) {\n          case 'mouseover':\n          case 'mouseout':\n            this._hasMouseInteraction = isInteracting;\n            break;\n\n          case 'focusin':\n          case 'focusout':\n            this._hasKeyboardInteraction = isInteracting;\n            break;\n        }\n\n        if (isInteracting) {\n          this._clearTimeout();\n\n          return;\n        }\n\n        var nextElement = event.relatedTarget;\n\n        if (this._element === nextElement || this._element.contains(nextElement)) {\n          return;\n        }\n\n        this._maybeScheduleHide();\n      }\n    }, {\n      key: \"_setListeners\",\n      value: function _setListeners() {\n        var _this48 = this;\n\n        EventHandler.on(this._element, EVENT_MOUSEOVER, function (event) {\n          return _this48._onInteraction(event, true);\n        });\n        EventHandler.on(this._element, EVENT_MOUSEOUT, function (event) {\n          return _this48._onInteraction(event, false);\n        });\n        EventHandler.on(this._element, EVENT_FOCUSIN, function (event) {\n          return _this48._onInteraction(event, true);\n        });\n        EventHandler.on(this._element, EVENT_FOCUSOUT, function (event) {\n          return _this48._onInteraction(event, false);\n        });\n      }\n    }, {\n      key: \"_clearTimeout\",\n      value: function _clearTimeout() {\n        clearTimeout(this._timeout);\n        this._timeout = null;\n      } // Static\n\n    }], [{\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME;\n      }\n    }, {\n      key: \"jQueryInterface\",\n      value: function jQueryInterface(config) {\n        return this.each(function () {\n          var data = Toast.getOrCreateInstance(this, config);\n\n          if (typeof config === 'string') {\n            if (typeof data[config] === 'undefined') {\n              throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n            }\n\n            data[config](this);\n          }\n        });\n      }\n    }]);\n\n    return Toast;\n  }(BaseComponent);\n\n  enableDismissTrigger(Toast);\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Toast to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Toast);\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): index.umd.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  var index_umd = {\n    Alert: Alert,\n    Button: Button,\n    Carousel: Carousel,\n    Collapse: Collapse,\n    Dropdown: Dropdown,\n    Modal: Modal,\n    Offcanvas: Offcanvas,\n    Popover: Popover,\n    ScrollSpy: ScrollSpy,\n    Tab: Tab,\n    Toast: Toast,\n    Tooltip: Tooltip\n  };\n  return index_umd;\n});\n\n},{}],12:[function(require,module,exports){\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*! choices.js v9.0.1 | © 2019 Josh Johnson | https://github.com/jshjohnson/Choices#readme */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object' && (typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object') exports[\"Choices\"] = factory();else root[\"Choices\"] = factory();\n})(window, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            enumerable: true,\n            get: getter\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // define __esModule on exports\n\n      /******/\n\n\n      __webpack_require__.r = function (exports) {\n        /******/\n        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n          /******/\n          Object.defineProperty(exports, Symbol.toStringTag, {\n            value: 'Module'\n          });\n          /******/\n        }\n        /******/\n\n\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n        /******/\n      };\n      /******/\n\n      /******/\n      // create a fake namespace object\n\n      /******/\n      // mode & 1: value is a module id, require it\n\n      /******/\n      // mode & 2: merge all properties of value into the ns\n\n      /******/\n      // mode & 4: return value when already ns object\n\n      /******/\n      // mode & 8|1: behave like require\n\n      /******/\n\n\n      __webpack_require__.t = function (value, mode) {\n        /******/\n        if (mode & 1) value = __webpack_require__(value);\n        /******/\n\n        if (mode & 8) return value;\n        /******/\n\n        if (mode & 4 && _typeof(value) === 'object' && value && value.__esModule) return value;\n        /******/\n\n        var ns = Object.create(null);\n        /******/\n\n        __webpack_require__.r(ns);\n        /******/\n\n\n        Object.defineProperty(ns, 'default', {\n          enumerable: true,\n          value: value\n        });\n        /******/\n\n        if (mode & 2 && typeof value != 'string') for (var key in value) {\n          __webpack_require__.d(ns, key, function (key) {\n            return value[key];\n          }.bind(null, key));\n        }\n        /******/\n\n        return ns;\n        /******/\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"/public/assets/scripts/\";\n      /******/\n\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 4);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var isMergeableObject = function isMergeableObject(value) {\n        return isNonNullObject(value) && !isSpecial(value);\n      };\n\n      function isNonNullObject(value) {\n        return !!value && _typeof(value) === 'object';\n      }\n\n      function isSpecial(value) {\n        var stringValue = Object.prototype.toString.call(value);\n        return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);\n      } // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\n\n\n      var canUseSymbol = typeof Symbol === 'function' && Symbol[\"for\"];\n      var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol[\"for\"]('react.element') : 0xeac7;\n\n      function isReactElement(value) {\n        return value.$$typeof === REACT_ELEMENT_TYPE;\n      }\n\n      function emptyTarget(val) {\n        return Array.isArray(val) ? [] : {};\n      }\n\n      function cloneUnlessOtherwiseSpecified(value, options) {\n        return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;\n      }\n\n      function defaultArrayMerge(target, source, options) {\n        return target.concat(source).map(function (element) {\n          return cloneUnlessOtherwiseSpecified(element, options);\n        });\n      }\n\n      function getMergeFunction(key, options) {\n        if (!options.customMerge) {\n          return deepmerge;\n        }\n\n        var customMerge = options.customMerge(key);\n        return typeof customMerge === 'function' ? customMerge : deepmerge;\n      }\n\n      function getEnumerableOwnPropertySymbols(target) {\n        return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function (symbol) {\n          return target.propertyIsEnumerable(symbol);\n        }) : [];\n      }\n\n      function getKeys(target) {\n        return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));\n      } // Protects from prototype poisoning and unexpected merging up the prototype chain.\n\n\n      function propertyIsUnsafe(target, key) {\n        try {\n          return key in target && // Properties are safe to merge if they don't exist in the target yet,\n          !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n          && Object.propertyIsEnumerable.call(target, key)); // and also unsafe if they're nonenumerable.\n        } catch (unused) {\n          // Counterintuitively, it's safe to merge any property on a target that causes the `in` operator to throw.\n          // This happens when trying to copy an object in the source over a plain string in the target.\n          return false;\n        }\n      }\n\n      function mergeObject(target, source, options) {\n        var destination = {};\n\n        if (options.isMergeableObject(target)) {\n          getKeys(target).forEach(function (key) {\n            destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n          });\n        }\n\n        getKeys(source).forEach(function (key) {\n          if (propertyIsUnsafe(target, key)) {\n            return;\n          }\n\n          if (!options.isMergeableObject(source[key]) || !target[key]) {\n            destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n          } else {\n            destination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n          }\n        });\n        return destination;\n      }\n\n      function deepmerge(target, source, options) {\n        options = options || {};\n        options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n        options.isMergeableObject = options.isMergeableObject || isMergeableObject; // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n        // implementations can use it. The caller may not replace it.\n\n        options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n        var sourceIsArray = Array.isArray(source);\n        var targetIsArray = Array.isArray(target);\n        var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n        if (!sourceAndTargetTypesMatch) {\n          return cloneUnlessOtherwiseSpecified(source, options);\n        } else if (sourceIsArray) {\n          return options.arrayMerge(target, source, options);\n        } else {\n          return mergeObject(target, source, options);\n        }\n      }\n\n      deepmerge.all = function deepmergeAll(array, options) {\n        if (!Array.isArray(array)) {\n          throw new Error('first argument should be an array');\n        }\n\n        return array.reduce(function (prev, next) {\n          return deepmerge(prev, next, options);\n        }, {});\n      };\n\n      var deepmerge_1 = deepmerge;\n      module.exports = deepmerge_1;\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n      /* WEBPACK VAR INJECTION */\n\n      (function (global, module) {\n        /* harmony import */\n        var _ponyfill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n        /* global window */\n\n\n        var root;\n\n        if (typeof self !== 'undefined') {\n          root = self;\n        } else if (typeof window !== 'undefined') {\n          root = window;\n        } else if (typeof global !== 'undefined') {\n          root = global;\n        } else if (true) {\n          root = module;\n        } else {}\n\n        var result = Object(_ponyfill_js__WEBPACK_IMPORTED_MODULE_0__[\n        /* default */\n        \"a\"])(root);\n        /* harmony default export */\n\n        __webpack_exports__[\"a\"] = result;\n        /* WEBPACK VAR INJECTION */\n      }).call(this, __webpack_require__(5), __webpack_require__(6)(module));\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /*!\n       * Fuse.js v3.4.5 - Lightweight fuzzy-search (http://fusejs.io)\n       * \n       * Copyright (c) 2012-2017 Kirollos Risk (http://kiro.me)\n       * All Rights Reserved. Apache Software License 2.0\n       * \n       * http://www.apache.org/licenses/LICENSE-2.0\n       */\n      !function (e, t) {\n        true ? module.exports = t() : undefined;\n      }(this, function () {\n        return function (e) {\n          var t = {};\n\n          function n(r) {\n            if (t[r]) return t[r].exports;\n            var o = t[r] = {\n              i: r,\n              l: !1,\n              exports: {}\n            };\n            return e[r].call(o.exports, o, o.exports, n), o.l = !0, o.exports;\n          }\n\n          return n.m = e, n.c = t, n.d = function (e, t, r) {\n            n.o(e, t) || Object.defineProperty(e, t, {\n              enumerable: !0,\n              get: r\n            });\n          }, n.r = function (e) {\n            \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n              value: \"Module\"\n            }), Object.defineProperty(e, \"__esModule\", {\n              value: !0\n            });\n          }, n.t = function (e, t) {\n            if (1 & t && (e = n(e)), 8 & t) return e;\n            if (4 & t && \"object\" == _typeof(e) && e && e.__esModule) return e;\n            var r = Object.create(null);\n            if (n.r(r), Object.defineProperty(r, \"default\", {\n              enumerable: !0,\n              value: e\n            }), 2 & t && \"string\" != typeof e) for (var o in e) {\n              n.d(r, o, function (t) {\n                return e[t];\n              }.bind(null, o));\n            }\n            return r;\n          }, n.n = function (e) {\n            var t = e && e.__esModule ? function () {\n              return e[\"default\"];\n            } : function () {\n              return e;\n            };\n            return n.d(t, \"a\", t), t;\n          }, n.o = function (e, t) {\n            return Object.prototype.hasOwnProperty.call(e, t);\n          }, n.p = \"\", n(n.s = 1);\n        }([function (e, t) {\n          e.exports = function (e) {\n            return Array.isArray ? Array.isArray(e) : \"[object Array]\" === Object.prototype.toString.call(e);\n          };\n        }, function (e, t, n) {\n          function r(e) {\n            return (r = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (e) {\n              return _typeof(e);\n            } : function (e) {\n              return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : _typeof(e);\n            })(e);\n          }\n\n          function o(e, t) {\n            for (var n = 0; n < t.length; n++) {\n              var r = t[n];\n              r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n            }\n          }\n\n          var i = n(2),\n              a = n(8),\n              s = n(0),\n              c = function () {\n            function e(t, n) {\n              var r = n.location,\n                  o = void 0 === r ? 0 : r,\n                  i = n.distance,\n                  s = void 0 === i ? 100 : i,\n                  c = n.threshold,\n                  h = void 0 === c ? .6 : c,\n                  l = n.maxPatternLength,\n                  u = void 0 === l ? 32 : l,\n                  f = n.caseSensitive,\n                  d = void 0 !== f && f,\n                  v = n.tokenSeparator,\n                  p = void 0 === v ? / +/g : v,\n                  g = n.findAllMatches,\n                  y = void 0 !== g && g,\n                  m = n.minMatchCharLength,\n                  k = void 0 === m ? 1 : m,\n                  S = n.id,\n                  x = void 0 === S ? null : S,\n                  b = n.keys,\n                  M = void 0 === b ? [] : b,\n                  _ = n.shouldSort,\n                  L = void 0 === _ || _,\n                  w = n.getFn,\n                  A = void 0 === w ? a : w,\n                  C = n.sortFn,\n                  I = void 0 === C ? function (e, t) {\n                return e.score - t.score;\n              } : C,\n                  O = n.tokenize,\n                  j = void 0 !== O && O,\n                  P = n.matchAllTokens,\n                  F = void 0 !== P && P,\n                  T = n.includeMatches,\n                  z = void 0 !== T && T,\n                  E = n.includeScore,\n                  K = void 0 !== E && E,\n                  $ = n.verbose,\n                  J = void 0 !== $ && $;\n              !function (e, t) {\n                if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n              }(this, e), this.options = {\n                location: o,\n                distance: s,\n                threshold: h,\n                maxPatternLength: u,\n                isCaseSensitive: d,\n                tokenSeparator: p,\n                findAllMatches: y,\n                minMatchCharLength: k,\n                id: x,\n                keys: M,\n                includeMatches: z,\n                includeScore: K,\n                shouldSort: L,\n                getFn: A,\n                sortFn: I,\n                verbose: J,\n                tokenize: j,\n                matchAllTokens: F\n              }, this.setCollection(t);\n            }\n\n            var t, n, c;\n            return t = e, (n = [{\n              key: \"setCollection\",\n              value: function value(e) {\n                return this.list = e, e;\n              }\n            }, {\n              key: \"search\",\n              value: function value(e) {\n                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {\n                  limit: !1\n                };\n\n                this._log('---------\\nSearch pattern: \"'.concat(e, '\"'));\n\n                var n = this._prepareSearchers(e),\n                    r = n.tokenSearchers,\n                    o = n.fullSearcher,\n                    i = this._search(r, o),\n                    a = i.weights,\n                    s = i.results;\n\n                return this._computeScore(a, s), this.options.shouldSort && this._sort(s), t.limit && \"number\" == typeof t.limit && (s = s.slice(0, t.limit)), this._format(s);\n              }\n            }, {\n              key: \"_prepareSearchers\",\n              value: function value() {\n                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"\",\n                    t = [];\n                if (this.options.tokenize) for (var n = e.split(this.options.tokenSeparator), r = 0, o = n.length; r < o; r += 1) {\n                  t.push(new i(n[r], this.options));\n                }\n                return {\n                  tokenSearchers: t,\n                  fullSearcher: new i(e, this.options)\n                };\n              }\n            }, {\n              key: \"_search\",\n              value: function value() {\n                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],\n                    t = arguments.length > 1 ? arguments[1] : void 0,\n                    n = this.list,\n                    r = {},\n                    o = [];\n\n                if (\"string\" == typeof n[0]) {\n                  for (var i = 0, a = n.length; i < a; i += 1) {\n                    this._analyze({\n                      key: \"\",\n                      value: n[i],\n                      record: i,\n                      index: i\n                    }, {\n                      resultMap: r,\n                      results: o,\n                      tokenSearchers: e,\n                      fullSearcher: t\n                    });\n                  }\n\n                  return {\n                    weights: null,\n                    results: o\n                  };\n                }\n\n                for (var s = {}, c = 0, h = n.length; c < h; c += 1) {\n                  for (var l = n[c], u = 0, f = this.options.keys.length; u < f; u += 1) {\n                    var d = this.options.keys[u];\n\n                    if (\"string\" != typeof d) {\n                      if (s[d.name] = {\n                        weight: 1 - d.weight || 1\n                      }, d.weight <= 0 || d.weight > 1) throw new Error(\"Key weight has to be > 0 and <= 1\");\n                      d = d.name;\n                    } else s[d] = {\n                      weight: 1\n                    };\n\n                    this._analyze({\n                      key: d,\n                      value: this.options.getFn(l, d),\n                      record: l,\n                      index: c\n                    }, {\n                      resultMap: r,\n                      results: o,\n                      tokenSearchers: e,\n                      fullSearcher: t\n                    });\n                  }\n                }\n\n                return {\n                  weights: s,\n                  results: o\n                };\n              }\n            }, {\n              key: \"_analyze\",\n              value: function value(e, t) {\n                var n = e.key,\n                    r = e.arrayIndex,\n                    o = void 0 === r ? -1 : r,\n                    i = e.value,\n                    a = e.record,\n                    c = e.index,\n                    h = t.tokenSearchers,\n                    l = void 0 === h ? [] : h,\n                    u = t.fullSearcher,\n                    f = void 0 === u ? [] : u,\n                    d = t.resultMap,\n                    v = void 0 === d ? {} : d,\n                    p = t.results,\n                    g = void 0 === p ? [] : p;\n\n                if (null != i) {\n                  var y = !1,\n                      m = -1,\n                      k = 0;\n\n                  if (\"string\" == typeof i) {\n                    this._log(\"\\nKey: \".concat(\"\" === n ? \"-\" : n));\n\n                    var S = f.search(i);\n\n                    if (this._log('Full text: \"'.concat(i, '\", score: ').concat(S.score)), this.options.tokenize) {\n                      for (var x = i.split(this.options.tokenSeparator), b = [], M = 0; M < l.length; M += 1) {\n                        var _ = l[M];\n\n                        this._log('\\nPattern: \"'.concat(_.pattern, '\"'));\n\n                        for (var L = !1, w = 0; w < x.length; w += 1) {\n                          var A = x[w],\n                              C = _.search(A),\n                              I = {};\n\n                          C.isMatch ? (I[A] = C.score, y = !0, L = !0, b.push(C.score)) : (I[A] = 1, this.options.matchAllTokens || b.push(1)), this._log('Token: \"'.concat(A, '\", score: ').concat(I[A]));\n                        }\n\n                        L && (k += 1);\n                      }\n\n                      m = b[0];\n\n                      for (var O = b.length, j = 1; j < O; j += 1) {\n                        m += b[j];\n                      }\n\n                      m /= O, this._log(\"Token score average:\", m);\n                    }\n\n                    var P = S.score;\n                    m > -1 && (P = (P + m) / 2), this._log(\"Score average:\", P);\n                    var F = !this.options.tokenize || !this.options.matchAllTokens || k >= l.length;\n\n                    if (this._log(\"\\nCheck Matches: \".concat(F)), (y || S.isMatch) && F) {\n                      var T = v[c];\n                      T ? T.output.push({\n                        key: n,\n                        arrayIndex: o,\n                        value: i,\n                        score: P,\n                        matchedIndices: S.matchedIndices\n                      }) : (v[c] = {\n                        item: a,\n                        output: [{\n                          key: n,\n                          arrayIndex: o,\n                          value: i,\n                          score: P,\n                          matchedIndices: S.matchedIndices\n                        }]\n                      }, g.push(v[c]));\n                    }\n                  } else if (s(i)) for (var z = 0, E = i.length; z < E; z += 1) {\n                    this._analyze({\n                      key: n,\n                      arrayIndex: z,\n                      value: i[z],\n                      record: a,\n                      index: c\n                    }, {\n                      resultMap: v,\n                      results: g,\n                      tokenSearchers: l,\n                      fullSearcher: f\n                    });\n                  }\n                }\n              }\n            }, {\n              key: \"_computeScore\",\n              value: function value(e, t) {\n                this._log(\"\\n\\nComputing score:\\n\");\n\n                for (var n = 0, r = t.length; n < r; n += 1) {\n                  for (var o = t[n].output, i = o.length, a = 1, s = 1, c = 0; c < i; c += 1) {\n                    var h = e ? e[o[c].key].weight : 1,\n                        l = (1 === h ? o[c].score : o[c].score || .001) * h;\n                    1 !== h ? s = Math.min(s, l) : (o[c].nScore = l, a *= l);\n                  }\n\n                  t[n].score = 1 === s ? a : s, this._log(t[n]);\n                }\n              }\n            }, {\n              key: \"_sort\",\n              value: function value(e) {\n                this._log(\"\\n\\nSorting....\"), e.sort(this.options.sortFn);\n              }\n            }, {\n              key: \"_format\",\n              value: function value(e) {\n                var t = [];\n\n                if (this.options.verbose) {\n                  var n = [];\n                  this._log(\"\\n\\nOutput:\\n\\n\", JSON.stringify(e, function (e, t) {\n                    if (\"object\" === r(t) && null !== t) {\n                      if (-1 !== n.indexOf(t)) return;\n                      n.push(t);\n                    }\n\n                    return t;\n                  })), n = null;\n                }\n\n                var o = [];\n                this.options.includeMatches && o.push(function (e, t) {\n                  var n = e.output;\n                  t.matches = [];\n\n                  for (var r = 0, o = n.length; r < o; r += 1) {\n                    var i = n[r];\n\n                    if (0 !== i.matchedIndices.length) {\n                      var a = {\n                        indices: i.matchedIndices,\n                        value: i.value\n                      };\n                      i.key && (a.key = i.key), i.hasOwnProperty(\"arrayIndex\") && i.arrayIndex > -1 && (a.arrayIndex = i.arrayIndex), t.matches.push(a);\n                    }\n                  }\n                }), this.options.includeScore && o.push(function (e, t) {\n                  t.score = e.score;\n                });\n\n                for (var i = 0, a = e.length; i < a; i += 1) {\n                  var s = e[i];\n\n                  if (this.options.id && (s.item = this.options.getFn(s.item, this.options.id)[0]), o.length) {\n                    for (var c = {\n                      item: s.item\n                    }, h = 0, l = o.length; h < l; h += 1) {\n                      o[h](s, c);\n                    }\n\n                    t.push(c);\n                  } else t.push(s.item);\n                }\n\n                return t;\n              }\n            }, {\n              key: \"_log\",\n              value: function value() {\n                var e;\n                this.options.verbose && (e = console).log.apply(e, arguments);\n              }\n            }]) && o(t.prototype, n), c && o(t, c), e;\n          }();\n\n          e.exports = c;\n        }, function (e, t, n) {\n          function r(e, t) {\n            for (var n = 0; n < t.length; n++) {\n              var r = t[n];\n              r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n            }\n          }\n\n          var o = n(3),\n              i = n(4),\n              a = n(7),\n              s = function () {\n            function e(t, n) {\n              var r = n.location,\n                  o = void 0 === r ? 0 : r,\n                  i = n.distance,\n                  s = void 0 === i ? 100 : i,\n                  c = n.threshold,\n                  h = void 0 === c ? .6 : c,\n                  l = n.maxPatternLength,\n                  u = void 0 === l ? 32 : l,\n                  f = n.isCaseSensitive,\n                  d = void 0 !== f && f,\n                  v = n.tokenSeparator,\n                  p = void 0 === v ? / +/g : v,\n                  g = n.findAllMatches,\n                  y = void 0 !== g && g,\n                  m = n.minMatchCharLength,\n                  k = void 0 === m ? 1 : m;\n              !function (e, t) {\n                if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n              }(this, e), this.options = {\n                location: o,\n                distance: s,\n                threshold: h,\n                maxPatternLength: u,\n                isCaseSensitive: d,\n                tokenSeparator: p,\n                findAllMatches: y,\n                minMatchCharLength: k\n              }, this.pattern = this.options.isCaseSensitive ? t : t.toLowerCase(), this.pattern.length <= u && (this.patternAlphabet = a(this.pattern));\n            }\n\n            var t, n, s;\n            return t = e, (n = [{\n              key: \"search\",\n              value: function value(e) {\n                if (this.options.isCaseSensitive || (e = e.toLowerCase()), this.pattern === e) return {\n                  isMatch: !0,\n                  score: 0,\n                  matchedIndices: [[0, e.length - 1]]\n                };\n                var t = this.options,\n                    n = t.maxPatternLength,\n                    r = t.tokenSeparator;\n                if (this.pattern.length > n) return o(e, this.pattern, r);\n                var a = this.options,\n                    s = a.location,\n                    c = a.distance,\n                    h = a.threshold,\n                    l = a.findAllMatches,\n                    u = a.minMatchCharLength;\n                return i(e, this.pattern, this.patternAlphabet, {\n                  location: s,\n                  distance: c,\n                  threshold: h,\n                  findAllMatches: l,\n                  minMatchCharLength: u\n                });\n              }\n            }]) && r(t.prototype, n), s && r(t, s), e;\n          }();\n\n          e.exports = s;\n        }, function (e, t) {\n          var n = /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g;\n\n          e.exports = function (e, t) {\n            var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : / +/g,\n                o = new RegExp(t.replace(n, \"\\\\$&\").replace(r, \"|\")),\n                i = e.match(o),\n                a = !!i,\n                s = [];\n            if (a) for (var c = 0, h = i.length; c < h; c += 1) {\n              var l = i[c];\n              s.push([e.indexOf(l), l.length - 1]);\n            }\n            return {\n              score: a ? .5 : 1,\n              isMatch: a,\n              matchedIndices: s\n            };\n          };\n        }, function (e, t, n) {\n          var r = n(5),\n              o = n(6);\n\n          e.exports = function (e, t, n, i) {\n            for (var a = i.location, s = void 0 === a ? 0 : a, c = i.distance, h = void 0 === c ? 100 : c, l = i.threshold, u = void 0 === l ? .6 : l, f = i.findAllMatches, d = void 0 !== f && f, v = i.minMatchCharLength, p = void 0 === v ? 1 : v, g = s, y = e.length, m = u, k = e.indexOf(t, g), S = t.length, x = [], b = 0; b < y; b += 1) {\n              x[b] = 0;\n            }\n\n            if (-1 !== k) {\n              var M = r(t, {\n                errors: 0,\n                currentLocation: k,\n                expectedLocation: g,\n                distance: h\n              });\n\n              if (m = Math.min(M, m), -1 !== (k = e.lastIndexOf(t, g + S))) {\n                var _ = r(t, {\n                  errors: 0,\n                  currentLocation: k,\n                  expectedLocation: g,\n                  distance: h\n                });\n\n                m = Math.min(_, m);\n              }\n            }\n\n            k = -1;\n\n            for (var L = [], w = 1, A = S + y, C = 1 << S - 1, I = 0; I < S; I += 1) {\n              for (var O = 0, j = A; O < j;) {\n                r(t, {\n                  errors: I,\n                  currentLocation: g + j,\n                  expectedLocation: g,\n                  distance: h\n                }) <= m ? O = j : A = j, j = Math.floor((A - O) / 2 + O);\n              }\n\n              A = j;\n              var P = Math.max(1, g - j + 1),\n                  F = d ? y : Math.min(g + j, y) + S,\n                  T = Array(F + 2);\n              T[F + 1] = (1 << I) - 1;\n\n              for (var z = F; z >= P; z -= 1) {\n                var E = z - 1,\n                    K = n[e.charAt(E)];\n\n                if (K && (x[E] = 1), T[z] = (T[z + 1] << 1 | 1) & K, 0 !== I && (T[z] |= (L[z + 1] | L[z]) << 1 | 1 | L[z + 1]), T[z] & C && (w = r(t, {\n                  errors: I,\n                  currentLocation: E,\n                  expectedLocation: g,\n                  distance: h\n                })) <= m) {\n                  if (m = w, (k = E) <= g) break;\n                  P = Math.max(1, 2 * g - k);\n                }\n              }\n\n              if (r(t, {\n                errors: I + 1,\n                currentLocation: g,\n                expectedLocation: g,\n                distance: h\n              }) > m) break;\n              L = T;\n            }\n\n            return {\n              isMatch: k >= 0,\n              score: 0 === w ? .001 : w,\n              matchedIndices: o(x, p)\n            };\n          };\n        }, function (e, t) {\n          e.exports = function (e, t) {\n            var n = t.errors,\n                r = void 0 === n ? 0 : n,\n                o = t.currentLocation,\n                i = void 0 === o ? 0 : o,\n                a = t.expectedLocation,\n                s = void 0 === a ? 0 : a,\n                c = t.distance,\n                h = void 0 === c ? 100 : c,\n                l = r / e.length,\n                u = Math.abs(s - i);\n            return h ? l + u / h : u ? 1 : l;\n          };\n        }, function (e, t) {\n          e.exports = function () {\n            for (var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1, n = [], r = -1, o = -1, i = 0, a = e.length; i < a; i += 1) {\n              var s = e[i];\n              s && -1 === r ? r = i : s || -1 === r || ((o = i - 1) - r + 1 >= t && n.push([r, o]), r = -1);\n            }\n\n            return e[i - 1] && i - r >= t && n.push([r, i - 1]), n;\n          };\n        }, function (e, t) {\n          e.exports = function (e) {\n            for (var t = {}, n = e.length, r = 0; r < n; r += 1) {\n              t[e.charAt(r)] = 0;\n            }\n\n            for (var o = 0; o < n; o += 1) {\n              t[e.charAt(o)] |= 1 << n - o - 1;\n            }\n\n            return t;\n          };\n        }, function (e, t, n) {\n          var r = n(0);\n\n          e.exports = function (e, t) {\n            return function e(t, n, o) {\n              if (n) {\n                var i = n.indexOf(\".\"),\n                    a = n,\n                    s = null;\n                -1 !== i && (a = n.slice(0, i), s = n.slice(i + 1));\n                var c = t[a];\n                if (null != c) if (s || \"string\" != typeof c && \"number\" != typeof c) {\n                  if (r(c)) for (var h = 0, l = c.length; h < l; h += 1) {\n                    e(c[h], s, o);\n                  } else s && e(c, s, o);\n                } else o.push(c.toString());\n              } else o.push(t);\n\n              return o;\n            }(e, t, []);\n          };\n        }]);\n      });\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n      /* harmony export (binding) */\n\n      __webpack_require__.d(__webpack_exports__, \"a\", function () {\n        return symbolObservablePonyfill;\n      });\n\n      function symbolObservablePonyfill(root) {\n        var result;\n        var _Symbol = root.Symbol;\n\n        if (typeof _Symbol === 'function') {\n          if (_Symbol.observable) {\n            result = _Symbol.observable;\n          } else {\n            result = _Symbol('observable');\n            _Symbol.observable = result;\n          }\n        } else {\n          result = '@@observable';\n        }\n\n        return result;\n      }\n\n      ;\n      /***/\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      module.exports = __webpack_require__(7);\n      /***/\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports) {\n      var g; // This works in non-strict mode\n\n      g = function () {\n        return this;\n      }();\n\n      try {\n        // This works if eval is allowed (see CSP)\n        g = g || new Function(\"return this\")();\n      } catch (e) {\n        // This works if the window reference is available\n        if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === \"object\") g = window;\n      } // g can still be undefined, but nothing to do about it...\n      // We return undefined, instead of nothing here, so it's\n      // easier to handle this case. if(!global) { ...}\n\n\n      module.exports = g;\n      /***/\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports) {\n      module.exports = function (originalModule) {\n        if (!originalModule.webpackPolyfill) {\n          var module = Object.create(originalModule); // module.parent = undefined by default\n\n          if (!module.children) module.children = [];\n          Object.defineProperty(module, \"loaded\", {\n            enumerable: true,\n            get: function get() {\n              return module.l;\n            }\n          });\n          Object.defineProperty(module, \"id\", {\n            enumerable: true,\n            get: function get() {\n              return module.i;\n            }\n          });\n          Object.defineProperty(module, \"exports\", {\n            enumerable: true\n          });\n          module.webpackPolyfill = 1;\n        }\n\n        return module;\n      };\n      /***/\n\n    },\n    /* 7 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      __webpack_require__.r(__webpack_exports__); // EXTERNAL MODULE: ./node_modules/fuse.js/dist/fuse.js\n\n\n      var dist_fuse = __webpack_require__(2);\n\n      var fuse_default = /*#__PURE__*/__webpack_require__.n(dist_fuse); // EXTERNAL MODULE: ./node_modules/deepmerge/dist/cjs.js\n\n\n      var cjs = __webpack_require__(0);\n\n      var cjs_default = /*#__PURE__*/__webpack_require__.n(cjs); // EXTERNAL MODULE: ./node_modules/symbol-observable/es/index.js\n\n\n      var es = __webpack_require__(1); // CONCATENATED MODULE: ./node_modules/redux/es/redux.js\n\n      /**\n       * These are private action types reserved by Redux.\n       * For any unknown actions, you must return the current state.\n       * If the current state is undefined, you must return the initial state.\n       * Do not reference these action types directly in your code.\n       */\n\n\n      var randomString = function randomString() {\n        return Math.random().toString(36).substring(7).split('').join('.');\n      };\n\n      var ActionTypes = {\n        INIT: \"@@redux/INIT\" + randomString(),\n        REPLACE: \"@@redux/REPLACE\" + randomString(),\n        PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {\n          return \"@@redux/PROBE_UNKNOWN_ACTION\" + randomString();\n        }\n      };\n      /**\n       * @param {any} obj The object to inspect.\n       * @returns {boolean} True if the argument appears to be a plain object.\n       */\n\n      function isPlainObject(obj) {\n        if (_typeof(obj) !== 'object' || obj === null) return false;\n        var proto = obj;\n\n        while (Object.getPrototypeOf(proto) !== null) {\n          proto = Object.getPrototypeOf(proto);\n        }\n\n        return Object.getPrototypeOf(obj) === proto;\n      }\n      /**\n       * Creates a Redux store that holds the state tree.\n       * The only way to change the data in the store is to call `dispatch()` on it.\n       *\n       * There should only be a single store in your app. To specify how different\n       * parts of the state tree respond to actions, you may combine several reducers\n       * into a single reducer function by using `combineReducers`.\n       *\n       * @param {Function} reducer A function that returns the next state tree, given\n       * the current state tree and the action to handle.\n       *\n       * @param {any} [preloadedState] The initial state. You may optionally specify it\n       * to hydrate the state from the server in universal apps, or to restore a\n       * previously serialized user session.\n       * If you use `combineReducers` to produce the root reducer function, this must be\n       * an object with the same shape as `combineReducers` keys.\n       *\n       * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n       * to enhance the store with third-party capabilities such as middleware,\n       * time travel, persistence, etc. The only store enhancer that ships with Redux\n       * is `applyMiddleware()`.\n       *\n       * @returns {Store} A Redux store that lets you read the state, dispatch actions\n       * and subscribe to changes.\n       */\n\n\n      function createStore(reducer, preloadedState, enhancer) {\n        var _ref2;\n\n        if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\n          throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function.');\n        }\n\n        if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n          enhancer = preloadedState;\n          preloadedState = undefined;\n        }\n\n        if (typeof enhancer !== 'undefined') {\n          if (typeof enhancer !== 'function') {\n            throw new Error('Expected the enhancer to be a function.');\n          }\n\n          return enhancer(createStore)(reducer, preloadedState);\n        }\n\n        if (typeof reducer !== 'function') {\n          throw new Error('Expected the reducer to be a function.');\n        }\n\n        var currentReducer = reducer;\n        var currentState = preloadedState;\n        var currentListeners = [];\n        var nextListeners = currentListeners;\n        var isDispatching = false;\n        /**\n         * This makes a shallow copy of currentListeners so we can use\n         * nextListeners as a temporary list while dispatching.\n         *\n         * This prevents any bugs around consumers calling\n         * subscribe/unsubscribe in the middle of a dispatch.\n         */\n\n        function ensureCanMutateNextListeners() {\n          if (nextListeners === currentListeners) {\n            nextListeners = currentListeners.slice();\n          }\n        }\n        /**\n         * Reads the state tree managed by the store.\n         *\n         * @returns {any} The current state tree of your application.\n         */\n\n\n        function getState() {\n          if (isDispatching) {\n            throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n          }\n\n          return currentState;\n        }\n        /**\n         * Adds a change listener. It will be called any time an action is dispatched,\n         * and some part of the state tree may potentially have changed. You may then\n         * call `getState()` to read the current state tree inside the callback.\n         *\n         * You may call `dispatch()` from a change listener, with the following\n         * caveats:\n         *\n         * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n         * If you subscribe or unsubscribe while the listeners are being invoked, this\n         * will not have any effect on the `dispatch()` that is currently in progress.\n         * However, the next `dispatch()` call, whether nested or not, will use a more\n         * recent snapshot of the subscription list.\n         *\n         * 2. The listener should not expect to see all state changes, as the state\n         * might have been updated multiple times during a nested `dispatch()` before\n         * the listener is called. It is, however, guaranteed that all subscribers\n         * registered before the `dispatch()` started will be called with the latest\n         * state by the time it exits.\n         *\n         * @param {Function} listener A callback to be invoked on every dispatch.\n         * @returns {Function} A function to remove this change listener.\n         */\n\n\n        function subscribe(listener) {\n          if (typeof listener !== 'function') {\n            throw new Error('Expected the listener to be a function.');\n          }\n\n          if (isDispatching) {\n            throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');\n          }\n\n          var isSubscribed = true;\n          ensureCanMutateNextListeners();\n          nextListeners.push(listener);\n          return function unsubscribe() {\n            if (!isSubscribed) {\n              return;\n            }\n\n            if (isDispatching) {\n              throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');\n            }\n\n            isSubscribed = false;\n            ensureCanMutateNextListeners();\n            var index = nextListeners.indexOf(listener);\n            nextListeners.splice(index, 1);\n          };\n        }\n        /**\n         * Dispatches an action. It is the only way to trigger a state change.\n         *\n         * The `reducer` function, used to create the store, will be called with the\n         * current state tree and the given `action`. Its return value will\n         * be considered the **next** state of the tree, and the change listeners\n         * will be notified.\n         *\n         * The base implementation only supports plain object actions. If you want to\n         * dispatch a Promise, an Observable, a thunk, or something else, you need to\n         * wrap your store creating function into the corresponding middleware. For\n         * example, see the documentation for the `redux-thunk` package. Even the\n         * middleware will eventually dispatch plain object actions using this method.\n         *\n         * @param {Object} action A plain object representing “what changed”. It is\n         * a good idea to keep actions serializable so you can record and replay user\n         * sessions, or use the time travelling `redux-devtools`. An action must have\n         * a `type` property which may not be `undefined`. It is a good idea to use\n         * string constants for action types.\n         *\n         * @returns {Object} For convenience, the same action object you dispatched.\n         *\n         * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n         * return something else (for example, a Promise you can await).\n         */\n\n\n        function dispatch(action) {\n          if (!isPlainObject(action)) {\n            throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n          }\n\n          if (typeof action.type === 'undefined') {\n            throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n          }\n\n          if (isDispatching) {\n            throw new Error('Reducers may not dispatch actions.');\n          }\n\n          try {\n            isDispatching = true;\n            currentState = currentReducer(currentState, action);\n          } finally {\n            isDispatching = false;\n          }\n\n          var listeners = currentListeners = nextListeners;\n\n          for (var i = 0; i < listeners.length; i++) {\n            var listener = listeners[i];\n            listener();\n          }\n\n          return action;\n        }\n        /**\n         * Replaces the reducer currently used by the store to calculate the state.\n         *\n         * You might need this if your app implements code splitting and you want to\n         * load some of the reducers dynamically. You might also need this if you\n         * implement a hot reloading mechanism for Redux.\n         *\n         * @param {Function} nextReducer The reducer for the store to use instead.\n         * @returns {void}\n         */\n\n\n        function replaceReducer(nextReducer) {\n          if (typeof nextReducer !== 'function') {\n            throw new Error('Expected the nextReducer to be a function.');\n          }\n\n          currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.\n          // Any reducers that existed in both the new and old rootReducer\n          // will receive the previous state. This effectively populates\n          // the new state tree with any relevant data from the old one.\n\n          dispatch({\n            type: ActionTypes.REPLACE\n          });\n        }\n        /**\n         * Interoperability point for observable/reactive libraries.\n         * @returns {observable} A minimal observable of state changes.\n         * For more information, see the observable proposal:\n         * https://github.com/tc39/proposal-observable\n         */\n\n\n        function observable() {\n          var _ref;\n\n          var outerSubscribe = subscribe;\n          return _ref = {\n            /**\n             * The minimal observable subscription method.\n             * @param {Object} observer Any object that can be used as an observer.\n             * The observer object should have a `next` method.\n             * @returns {subscription} An object with an `unsubscribe` method that can\n             * be used to unsubscribe the observable from the store, and prevent further\n             * emission of values from the observable.\n             */\n            subscribe: function subscribe(observer) {\n              if (_typeof(observer) !== 'object' || observer === null) {\n                throw new TypeError('Expected the observer to be an object.');\n              }\n\n              function observeState() {\n                if (observer.next) {\n                  observer.next(getState());\n                }\n              }\n\n              observeState();\n              var unsubscribe = outerSubscribe(observeState);\n              return {\n                unsubscribe: unsubscribe\n              };\n            }\n          }, _ref[es[\"a\"\n          /* default */\n          ]] = function () {\n            return this;\n          }, _ref;\n        } // When a store is created, an \"INIT\" action is dispatched so that every\n        // reducer returns their initial state. This effectively populates\n        // the initial state tree.\n\n\n        dispatch({\n          type: ActionTypes.INIT\n        });\n        return _ref2 = {\n          dispatch: dispatch,\n          subscribe: subscribe,\n          getState: getState,\n          replaceReducer: replaceReducer\n        }, _ref2[es[\"a\"\n        /* default */\n        ]] = observable, _ref2;\n      }\n      /**\n       * Prints a warning in the console if it exists.\n       *\n       * @param {String} message The warning message.\n       * @returns {void}\n       */\n\n\n      function warning(message) {\n        /* eslint-disable no-console */\n        if (typeof console !== 'undefined' && typeof console.error === 'function') {\n          console.error(message);\n        }\n        /* eslint-enable no-console */\n\n\n        try {\n          // This error was thrown as a convenience so that if you enable\n          // \"break on all exceptions\" in your console,\n          // it would pause the execution at this line.\n          throw new Error(message);\n        } catch (e) {} // eslint-disable-line no-empty\n\n      }\n\n      function getUndefinedStateErrorMessage(key, action) {\n        var actionType = action && action.type;\n        var actionDescription = actionType && \"action \\\"\" + String(actionType) + \"\\\"\" || 'an action';\n        return \"Given \" + actionDescription + \", reducer \\\"\" + key + \"\\\" returned undefined. \" + \"To ignore an action, you must explicitly return the previous state. \" + \"If you want this reducer to hold no value, you can return null instead of undefined.\";\n      }\n\n      function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n        var reducerKeys = Object.keys(reducers);\n        var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n        if (reducerKeys.length === 0) {\n          return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n        }\n\n        if (!isPlainObject(inputState)) {\n          return \"The \" + argumentName + \" has unexpected type of \\\"\" + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + \"\\\". Expected argument to be an object with the following \" + (\"keys: \\\"\" + reducerKeys.join('\", \"') + \"\\\"\");\n        }\n\n        var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n          return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n        });\n        unexpectedKeys.forEach(function (key) {\n          unexpectedKeyCache[key] = true;\n        });\n        if (action && action.type === ActionTypes.REPLACE) return;\n\n        if (unexpectedKeys.length > 0) {\n          return \"Unexpected \" + (unexpectedKeys.length > 1 ? 'keys' : 'key') + \" \" + (\"\\\"\" + unexpectedKeys.join('\", \"') + \"\\\" found in \" + argumentName + \". \") + \"Expected to find one of the known reducer keys instead: \" + (\"\\\"\" + reducerKeys.join('\", \"') + \"\\\". Unexpected keys will be ignored.\");\n        }\n      }\n\n      function assertReducerShape(reducers) {\n        Object.keys(reducers).forEach(function (key) {\n          var reducer = reducers[key];\n          var initialState = reducer(undefined, {\n            type: ActionTypes.INIT\n          });\n\n          if (typeof initialState === 'undefined') {\n            throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined during initialization. \" + \"If the state passed to the reducer is undefined, you must \" + \"explicitly return the initial state. The initial state may \" + \"not be undefined. If you don't want to set a value for this reducer, \" + \"you can use null instead of undefined.\");\n          }\n\n          if (typeof reducer(undefined, {\n            type: ActionTypes.PROBE_UNKNOWN_ACTION()\n          }) === 'undefined') {\n            throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined when probed with a random type. \" + (\"Don't try to handle \" + ActionTypes.INIT + \" or other actions in \\\"redux/*\\\" \") + \"namespace. They are considered private. Instead, you must return the \" + \"current state for any unknown actions, unless it is undefined, \" + \"in which case you must return the initial state, regardless of the \" + \"action type. The initial state may not be undefined, but can be null.\");\n          }\n        });\n      }\n      /**\n       * Turns an object whose values are different reducer functions, into a single\n       * reducer function. It will call every child reducer, and gather their results\n       * into a single state object, whose keys correspond to the keys of the passed\n       * reducer functions.\n       *\n       * @param {Object} reducers An object whose values correspond to different\n       * reducer functions that need to be combined into one. One handy way to obtain\n       * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n       * undefined for any action. Instead, they should return their initial state\n       * if the state passed to them was undefined, and the current state for any\n       * unrecognized action.\n       *\n       * @returns {Function} A reducer function that invokes every reducer inside the\n       * passed object, and builds a state object with the same shape.\n       */\n\n\n      function combineReducers(reducers) {\n        var reducerKeys = Object.keys(reducers);\n        var finalReducers = {};\n\n        for (var i = 0; i < reducerKeys.length; i++) {\n          var key = reducerKeys[i];\n\n          if (false) {}\n\n          if (typeof reducers[key] === 'function') {\n            finalReducers[key] = reducers[key];\n          }\n        }\n\n        var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same\n        // keys multiple times.\n\n        var unexpectedKeyCache;\n\n        if (false) {}\n\n        var shapeAssertionError;\n\n        try {\n          assertReducerShape(finalReducers);\n        } catch (e) {\n          shapeAssertionError = e;\n        }\n\n        return function combination(state, action) {\n          if (state === void 0) {\n            state = {};\n          }\n\n          if (shapeAssertionError) {\n            throw shapeAssertionError;\n          }\n\n          if (false) {\n            var warningMessage;\n          }\n\n          var hasChanged = false;\n          var nextState = {};\n\n          for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n            var _key = finalReducerKeys[_i];\n            var reducer = finalReducers[_key];\n            var previousStateForKey = state[_key];\n            var nextStateForKey = reducer(previousStateForKey, action);\n\n            if (typeof nextStateForKey === 'undefined') {\n              var errorMessage = getUndefinedStateErrorMessage(_key, action);\n              throw new Error(errorMessage);\n            }\n\n            nextState[_key] = nextStateForKey;\n            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n          }\n\n          return hasChanged ? nextState : state;\n        };\n      }\n\n      function bindActionCreator(actionCreator, dispatch) {\n        return function () {\n          return dispatch(actionCreator.apply(this, arguments));\n        };\n      }\n      /**\n       * Turns an object whose values are action creators, into an object with the\n       * same keys, but with every function wrapped into a `dispatch` call so they\n       * may be invoked directly. This is just a convenience method, as you can call\n       * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n       *\n       * For convenience, you can also pass an action creator as the first argument,\n       * and get a dispatch wrapped function in return.\n       *\n       * @param {Function|Object} actionCreators An object whose values are action\n       * creator functions. One handy way to obtain it is to use ES6 `import * as`\n       * syntax. You may also pass a single function.\n       *\n       * @param {Function} dispatch The `dispatch` function available on your Redux\n       * store.\n       *\n       * @returns {Function|Object} The object mimicking the original object, but with\n       * every action creator wrapped into the `dispatch` call. If you passed a\n       * function as `actionCreators`, the return value will also be a single\n       * function.\n       */\n\n\n      function bindActionCreators(actionCreators, dispatch) {\n        if (typeof actionCreators === 'function') {\n          return bindActionCreator(actionCreators, dispatch);\n        }\n\n        if (_typeof(actionCreators) !== 'object' || actionCreators === null) {\n          throw new Error(\"bindActionCreators expected an object or a function, instead received \" + (actionCreators === null ? 'null' : _typeof(actionCreators)) + \". \" + \"Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\");\n        }\n\n        var boundActionCreators = {};\n\n        for (var key in actionCreators) {\n          var actionCreator = actionCreators[key];\n\n          if (typeof actionCreator === 'function') {\n            boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n          }\n        }\n\n        return boundActionCreators;\n      }\n\n      function _defineProperty(obj, key, value) {\n        if (key in obj) {\n          Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n          });\n        } else {\n          obj[key] = value;\n        }\n\n        return obj;\n      }\n\n      function ownKeys(object, enumerableOnly) {\n        var keys = Object.keys(object);\n\n        if (Object.getOwnPropertySymbols) {\n          keys.push.apply(keys, Object.getOwnPropertySymbols(object));\n        }\n\n        if (enumerableOnly) keys = keys.filter(function (sym) {\n          return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        return keys;\n      }\n\n      function _objectSpread2(target) {\n        for (var i = 1; i < arguments.length; i++) {\n          var source = arguments[i] != null ? arguments[i] : {};\n\n          if (i % 2) {\n            ownKeys(source, true).forEach(function (key) {\n              _defineProperty(target, key, source[key]);\n            });\n          } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n          } else {\n            ownKeys(source).forEach(function (key) {\n              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n          }\n        }\n\n        return target;\n      }\n      /**\n       * Composes single-argument functions from right to left. The rightmost\n       * function can take multiple arguments as it provides the signature for\n       * the resulting composite function.\n       *\n       * @param {...Function} funcs The functions to compose.\n       * @returns {Function} A function obtained by composing the argument functions\n       * from right to left. For example, compose(f, g, h) is identical to doing\n       * (...args) => f(g(h(...args))).\n       */\n\n\n      function compose() {\n        for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n          funcs[_key] = arguments[_key];\n        }\n\n        if (funcs.length === 0) {\n          return function (arg) {\n            return arg;\n          };\n        }\n\n        if (funcs.length === 1) {\n          return funcs[0];\n        }\n\n        return funcs.reduce(function (a, b) {\n          return function () {\n            return a(b.apply(void 0, arguments));\n          };\n        });\n      }\n      /**\n       * Creates a store enhancer that applies middleware to the dispatch method\n       * of the Redux store. This is handy for a variety of tasks, such as expressing\n       * asynchronous actions in a concise manner, or logging every action payload.\n       *\n       * See `redux-thunk` package as an example of the Redux middleware.\n       *\n       * Because middleware is potentially asynchronous, this should be the first\n       * store enhancer in the composition chain.\n       *\n       * Note that each middleware will be given the `dispatch` and `getState` functions\n       * as named arguments.\n       *\n       * @param {...Function} middlewares The middleware chain to be applied.\n       * @returns {Function} A store enhancer applying the middleware.\n       */\n\n\n      function applyMiddleware() {\n        for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n          middlewares[_key] = arguments[_key];\n        }\n\n        return function (createStore) {\n          return function () {\n            var store = createStore.apply(void 0, arguments);\n\n            var _dispatch = function dispatch() {\n              throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\n            };\n\n            var middlewareAPI = {\n              getState: store.getState,\n              dispatch: function dispatch() {\n                return _dispatch.apply(void 0, arguments);\n              }\n            };\n            var chain = middlewares.map(function (middleware) {\n              return middleware(middlewareAPI);\n            });\n            _dispatch = compose.apply(void 0, chain)(store.dispatch);\n            return _objectSpread2({}, store, {\n              dispatch: _dispatch\n            });\n          };\n        };\n      }\n      /*\n       * This is a dummy function to check if the function name has been altered by minification.\n       * If the function has been minified and NODE_ENV !== 'production', warn the user.\n       */\n\n\n      function isCrushed() {}\n\n      if (false) {} // CONCATENATED MODULE: ./src/scripts/reducers/items.js\n\n\n      var defaultState = [];\n\n      function items_items(state, action) {\n        if (state === void 0) {\n          state = defaultState;\n        }\n\n        switch (action.type) {\n          case 'ADD_ITEM':\n            {\n              // Add object to items array\n              var newState = [].concat(state, [{\n                id: action.id,\n                choiceId: action.choiceId,\n                groupId: action.groupId,\n                value: action.value,\n                label: action.label,\n                active: true,\n                highlighted: false,\n                customProperties: action.customProperties,\n                placeholder: action.placeholder || false,\n                keyCode: null\n              }]);\n              return newState.map(function (obj) {\n                var item = obj;\n                item.highlighted = false;\n                return item;\n              });\n            }\n\n          case 'REMOVE_ITEM':\n            {\n              // Set item to inactive\n              return state.map(function (obj) {\n                var item = obj;\n\n                if (item.id === action.id) {\n                  item.active = false;\n                }\n\n                return item;\n              });\n            }\n\n          case 'HIGHLIGHT_ITEM':\n            {\n              return state.map(function (obj) {\n                var item = obj;\n\n                if (item.id === action.id) {\n                  item.highlighted = action.highlighted;\n                }\n\n                return item;\n              });\n            }\n\n          default:\n            {\n              return state;\n            }\n        }\n      } // CONCATENATED MODULE: ./src/scripts/reducers/groups.js\n\n\n      var groups_defaultState = [];\n\n      function groups(state, action) {\n        if (state === void 0) {\n          state = groups_defaultState;\n        }\n\n        switch (action.type) {\n          case 'ADD_GROUP':\n            {\n              return [].concat(state, [{\n                id: action.id,\n                value: action.value,\n                active: action.active,\n                disabled: action.disabled\n              }]);\n            }\n\n          case 'CLEAR_CHOICES':\n            {\n              return [];\n            }\n\n          default:\n            {\n              return state;\n            }\n        }\n      } // CONCATENATED MODULE: ./src/scripts/reducers/choices.js\n\n\n      var choices_defaultState = [];\n\n      function choices_choices(state, action) {\n        if (state === void 0) {\n          state = choices_defaultState;\n        }\n\n        switch (action.type) {\n          case 'ADD_CHOICE':\n            {\n              /*\n                  A disabled choice appears in the choice dropdown but cannot be selected\n                  A selected choice has been added to the passed input's value (added as an item)\n                  An active choice appears within the choice dropdown\n               */\n              return [].concat(state, [{\n                id: action.id,\n                elementId: action.elementId,\n                groupId: action.groupId,\n                value: action.value,\n                label: action.label || action.value,\n                disabled: action.disabled || false,\n                selected: false,\n                active: true,\n                score: 9999,\n                customProperties: action.customProperties,\n                placeholder: action.placeholder || false,\n                keyCode: null\n              }]);\n            }\n\n          case 'ADD_ITEM':\n            {\n              // If all choices need to be activated\n              if (action.activateOptions) {\n                return state.map(function (obj) {\n                  var choice = obj;\n                  choice.active = action.active;\n                  return choice;\n                });\n              } // When an item is added and it has an associated choice,\n              // we want to disable it so it can't be chosen again\n\n\n              if (action.choiceId > -1) {\n                return state.map(function (obj) {\n                  var choice = obj;\n\n                  if (choice.id === parseInt(action.choiceId, 10)) {\n                    choice.selected = true;\n                  }\n\n                  return choice;\n                });\n              }\n\n              return state;\n            }\n\n          case 'REMOVE_ITEM':\n            {\n              // When an item is removed and it has an associated choice,\n              // we want to re-enable it so it can be chosen again\n              if (action.choiceId > -1) {\n                return state.map(function (obj) {\n                  var choice = obj;\n\n                  if (choice.id === parseInt(action.choiceId, 10)) {\n                    choice.selected = false;\n                  }\n\n                  return choice;\n                });\n              }\n\n              return state;\n            }\n\n          case 'FILTER_CHOICES':\n            {\n              return state.map(function (obj) {\n                var choice = obj; // Set active state based on whether choice is\n                // within filtered results\n\n                choice.active = action.results.some(function (_ref) {\n                  var item = _ref.item,\n                      score = _ref.score;\n\n                  if (item.id === choice.id) {\n                    choice.score = score;\n                    return true;\n                  }\n\n                  return false;\n                });\n                return choice;\n              });\n            }\n\n          case 'ACTIVATE_CHOICES':\n            {\n              return state.map(function (obj) {\n                var choice = obj;\n                choice.active = action.active;\n                return choice;\n              });\n            }\n\n          case 'CLEAR_CHOICES':\n            {\n              return choices_defaultState;\n            }\n\n          default:\n            {\n              return state;\n            }\n        }\n      } // CONCATENATED MODULE: ./src/scripts/reducers/general.js\n\n\n      var general_defaultState = {\n        loading: false\n      };\n\n      var general = function general(state, action) {\n        if (state === void 0) {\n          state = general_defaultState;\n        }\n\n        switch (action.type) {\n          case 'SET_IS_LOADING':\n            {\n              return {\n                loading: action.isLoading\n              };\n            }\n\n          default:\n            {\n              return state;\n            }\n        }\n      };\n      /* harmony default export */\n\n\n      var reducers_general = general; // CONCATENATED MODULE: ./src/scripts/lib/utils.js\n\n      /**\n       * @param {number} min\n       * @param {number} max\n       * @returns {number}\n       */\n\n      var getRandomNumber = function getRandomNumber(min, max) {\n        return Math.floor(Math.random() * (max - min) + min);\n      };\n      /**\n       * @param {number} length\n       * @returns {string}\n       */\n\n\n      var generateChars = function generateChars(length) {\n        return Array.from({\n          length: length\n        }, function () {\n          return getRandomNumber(0, 36).toString(36);\n        }).join('');\n      };\n      /**\n       * @param {HTMLInputElement | HTMLSelectElement} element\n       * @param {string} prefix\n       * @returns {string}\n       */\n\n\n      var generateId = function generateId(element, prefix) {\n        var id = element.id || element.name && element.name + \"-\" + generateChars(2) || generateChars(4);\n        id = id.replace(/(:|\\.|\\[|\\]|,)/g, '');\n        id = prefix + \"-\" + id;\n        return id;\n      };\n      /**\n       * @param {any} obj\n       * @returns {string}\n       */\n\n\n      var getType = function getType(obj) {\n        return Object.prototype.toString.call(obj).slice(8, -1);\n      };\n      /**\n       * @param {string} type\n       * @param {any} obj\n       * @returns {boolean}\n       */\n\n\n      var isType = function isType(type, obj) {\n        return obj !== undefined && obj !== null && getType(obj) === type;\n      };\n      /**\n       * @param {HTMLElement} element\n       * @param {HTMLElement} [wrapper={HTMLDivElement}]\n       * @returns {HTMLElement}\n       */\n\n\n      var utils_wrap = function wrap(element, wrapper) {\n        if (wrapper === void 0) {\n          wrapper = document.createElement('div');\n        }\n\n        if (element.nextSibling) {\n          element.parentNode.insertBefore(wrapper, element.nextSibling);\n        } else {\n          element.parentNode.appendChild(wrapper);\n        }\n\n        return wrapper.appendChild(element);\n      };\n      /**\n       * @param {Element} startEl\n       * @param {string} selector\n       * @param {1 | -1} direction\n       * @returns {Element | undefined}\n       */\n\n\n      var getAdjacentEl = function getAdjacentEl(startEl, selector, direction) {\n        if (direction === void 0) {\n          direction = 1;\n        }\n\n        if (!(startEl instanceof Element) || typeof selector !== 'string') {\n          return undefined;\n        }\n\n        var prop = (direction > 0 ? 'next' : 'previous') + \"ElementSibling\";\n        var sibling = startEl[prop];\n\n        while (sibling) {\n          if (sibling.matches(selector)) {\n            return sibling;\n          }\n\n          sibling = sibling[prop];\n        }\n\n        return sibling;\n      };\n      /**\n       * @param {Element} element\n       * @param {Element} parent\n       * @param {-1 | 1} direction\n       * @returns {boolean}\n       */\n\n\n      var isScrolledIntoView = function isScrolledIntoView(element, parent, direction) {\n        if (direction === void 0) {\n          direction = 1;\n        }\n\n        if (!element) {\n          return false;\n        }\n\n        var isVisible;\n\n        if (direction > 0) {\n          // In view from bottom\n          isVisible = parent.scrollTop + parent.offsetHeight >= element.offsetTop + element.offsetHeight;\n        } else {\n          // In view from top\n          isVisible = element.offsetTop >= parent.scrollTop;\n        }\n\n        return isVisible;\n      };\n      /**\n       * @param {any} value\n       * @returns {any}\n       */\n\n\n      var sanitise = function sanitise(value) {\n        if (typeof value !== 'string') {\n          return value;\n        }\n\n        return value.replace(/&/g, '&amp;').replace(/>/g, '&rt;').replace(/</g, '&lt;').replace(/\"/g, '&quot;');\n      };\n      /**\n       * @returns {() => (str: string) => Element}\n       */\n\n\n      var strToEl = function () {\n        var tmpEl = document.createElement('div');\n        return function (str) {\n          var cleanedInput = str.trim();\n          tmpEl.innerHTML = cleanedInput;\n          var firldChild = tmpEl.children[0];\n\n          while (tmpEl.firstChild) {\n            tmpEl.removeChild(tmpEl.firstChild);\n          }\n\n          return firldChild;\n        };\n      }();\n      /**\n       * @param {{ label?: string, value: string }} a\n       * @param {{ label?: string, value: string }} b\n       * @returns {number}\n       */\n\n\n      var sortByAlpha = function sortByAlpha(_ref, _ref2) {\n        var value = _ref.value,\n            _ref$label = _ref.label,\n            label = _ref$label === void 0 ? value : _ref$label;\n        var value2 = _ref2.value,\n            _ref2$label = _ref2.label,\n            label2 = _ref2$label === void 0 ? value2 : _ref2$label;\n        return label.localeCompare(label2, [], {\n          sensitivity: 'base',\n          ignorePunctuation: true,\n          numeric: true\n        });\n      };\n      /**\n       * @param {{ score: number }} a\n       * @param {{ score: number }} b\n       */\n\n\n      var sortByScore = function sortByScore(a, b) {\n        return a.score - b.score;\n      };\n      /**\n       * @param {HTMLElement} element\n       * @param {string} type\n       * @param {object} customArgs\n       */\n\n\n      var dispatchEvent = function dispatchEvent(element, type, customArgs) {\n        if (customArgs === void 0) {\n          customArgs = null;\n        }\n\n        var event = new CustomEvent(type, {\n          detail: customArgs,\n          bubbles: true,\n          cancelable: true\n        });\n        return element.dispatchEvent(event);\n      };\n      /**\n       * @param {array} array\n       * @param {any} value\n       * @param {string} [key=\"value\"]\n       * @returns {boolean}\n       */\n\n\n      var existsInArray = function existsInArray(array, value, key) {\n        if (key === void 0) {\n          key = 'value';\n        }\n\n        return array.some(function (item) {\n          if (typeof value === 'string') {\n            return item[key] === value.trim();\n          }\n\n          return item[key] === value;\n        });\n      };\n      /**\n       * @param {any} obj\n       * @returns {any}\n       */\n\n\n      var cloneObject = function cloneObject(obj) {\n        return JSON.parse(JSON.stringify(obj));\n      };\n      /**\n       * Returns an array of keys present on the first but missing on the second object\n       * @param {object} a\n       * @param {object} b\n       * @returns {string[]}\n       */\n\n\n      var diff = function diff(a, b) {\n        var aKeys = Object.keys(a).sort();\n        var bKeys = Object.keys(b).sort();\n        return aKeys.filter(function (i) {\n          return bKeys.indexOf(i) < 0;\n        });\n      }; // CONCATENATED MODULE: ./src/scripts/reducers/index.js\n\n\n      var appReducer = combineReducers({\n        items: items_items,\n        groups: groups,\n        choices: choices_choices,\n        general: reducers_general\n      });\n\n      var reducers_rootReducer = function rootReducer(passedState, action) {\n        var state = passedState; // If we are clearing all items, groups and options we reassign\n        // state and then pass that state to our proper reducer. This isn't\n        // mutating our actual state\n        // See: http://stackoverflow.com/a/35641992\n\n        if (action.type === 'CLEAR_ALL') {\n          state = undefined;\n        } else if (action.type === 'RESET_TO') {\n          return cloneObject(action.state);\n        }\n\n        return appReducer(state, action);\n      };\n      /* harmony default export */\n\n\n      var reducers = reducers_rootReducer; // CONCATENATED MODULE: ./src/scripts/store/store.js\n\n      function _defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      function _createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) _defineProperties(Constructor, staticProps);\n        return Constructor;\n      }\n      /**\n       * @typedef {import('../../../types/index').Choices.Choice} Choice\n       * @typedef {import('../../../types/index').Choices.Group} Group\n       * @typedef {import('../../../types/index').Choices.Item} Item\n       */\n\n\n      var store_Store = /*#__PURE__*/function () {\n        function Store() {\n          this._store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n        }\n        /**\n         * Subscribe store to function call (wrapped Redux method)\n         * @param  {Function} onChange Function to trigger when state changes\n         * @return\n         */\n\n\n        var _proto = Store.prototype;\n\n        _proto.subscribe = function subscribe(onChange) {\n          this._store.subscribe(onChange);\n        }\n        /**\n         * Dispatch event to store (wrapped Redux method)\n         * @param  {{ type: string, [x: string]: any }} action Action to trigger\n         * @return\n         */\n        ;\n\n        _proto.dispatch = function dispatch(action) {\n          this._store.dispatch(action);\n        }\n        /**\n         * Get store object (wrapping Redux method)\n         * @returns {object} State\n         */\n        ;\n        /**\n         * Get loading state from store\n         * @returns {boolean} Loading State\n         */\n\n\n        _proto.isLoading = function isLoading() {\n          return this.state.general.loading;\n        }\n        /**\n         * Get single choice by it's ID\n         * @param {string} id\n         * @returns {Choice | undefined} Found choice\n         */\n        ;\n\n        _proto.getChoiceById = function getChoiceById(id) {\n          return this.activeChoices.find(function (choice) {\n            return choice.id === parseInt(id, 10);\n          });\n        }\n        /**\n         * Get group by group id\n         * @param  {number} id Group ID\n         * @returns {Group | undefined} Group data\n         */\n        ;\n\n        _proto.getGroupById = function getGroupById(id) {\n          return this.groups.find(function (group) {\n            return group.id === id;\n          });\n        };\n\n        _createClass(Store, [{\n          key: \"state\",\n          get: function get() {\n            return this._store.getState();\n          }\n          /**\n           * Get items from store\n           * @returns {Item[]} Item objects\n           */\n\n        }, {\n          key: \"items\",\n          get: function get() {\n            return this.state.items;\n          }\n          /**\n           * Get active items from store\n           * @returns {Item[]} Item objects\n           */\n\n        }, {\n          key: \"activeItems\",\n          get: function get() {\n            return this.items.filter(function (item) {\n              return item.active === true;\n            });\n          }\n          /**\n           * Get highlighted items from store\n           * @returns {Item[]} Item objects\n           */\n\n        }, {\n          key: \"highlightedActiveItems\",\n          get: function get() {\n            return this.items.filter(function (item) {\n              return item.active && item.highlighted;\n            });\n          }\n          /**\n           * Get choices from store\n           * @returns {Choice[]} Option objects\n           */\n\n        }, {\n          key: \"choices\",\n          get: function get() {\n            return this.state.choices;\n          }\n          /**\n           * Get active choices from store\n           * @returns {Choice[]} Option objects\n           */\n\n        }, {\n          key: \"activeChoices\",\n          get: function get() {\n            return this.choices.filter(function (choice) {\n              return choice.active === true;\n            });\n          }\n          /**\n           * Get selectable choices from store\n           * @returns {Choice[]} Option objects\n           */\n\n        }, {\n          key: \"selectableChoices\",\n          get: function get() {\n            return this.choices.filter(function (choice) {\n              return choice.disabled !== true;\n            });\n          }\n          /**\n           * Get choices that can be searched (excluding placeholders)\n           * @returns {Choice[]} Option objects\n           */\n\n        }, {\n          key: \"searchableChoices\",\n          get: function get() {\n            return this.selectableChoices.filter(function (choice) {\n              return choice.placeholder !== true;\n            });\n          }\n          /**\n           * Get placeholder choice from store\n           * @returns {Choice | undefined} Found placeholder\n           */\n\n        }, {\n          key: \"placeholderChoice\",\n          get: function get() {\n            return [].concat(this.choices).reverse().find(function (choice) {\n              return choice.placeholder === true;\n            });\n          }\n          /**\n           * Get groups from store\n           * @returns {Group[]} Group objects\n           */\n\n        }, {\n          key: \"groups\",\n          get: function get() {\n            return this.state.groups;\n          }\n          /**\n           * Get active groups from store\n           * @returns {Group[]} Group objects\n           */\n\n        }, {\n          key: \"activeGroups\",\n          get: function get() {\n            var groups = this.groups,\n                choices = this.choices;\n            return groups.filter(function (group) {\n              var isActive = group.active === true && group.disabled === false;\n              var hasActiveOptions = choices.some(function (choice) {\n                return choice.active === true && choice.disabled === false;\n              });\n              return isActive && hasActiveOptions;\n            }, []);\n          }\n        }]);\n\n        return Store;\n      }(); // CONCATENATED MODULE: ./src/scripts/components/dropdown.js\n\n\n      function dropdown_defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      function dropdown_createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) dropdown_defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) dropdown_defineProperties(Constructor, staticProps);\n        return Constructor;\n      }\n      /**\n       * @typedef {import('../../../types/index').Choices.passedElement} passedElement\n       * @typedef {import('../../../types/index').Choices.ClassNames} ClassNames\n       */\n\n\n      var Dropdown = /*#__PURE__*/function () {\n        /**\n         * @param {{\n         *  element: HTMLElement,\n         *  type: passedElement['type'],\n         *  classNames: ClassNames,\n         * }} args\n         */\n        function Dropdown(_ref) {\n          var element = _ref.element,\n              type = _ref.type,\n              classNames = _ref.classNames;\n          this.element = element;\n          this.classNames = classNames;\n          this.type = type;\n          this.isActive = false;\n        }\n        /**\n         * Bottom position of dropdown in viewport coordinates\n         * @returns {number} Vertical position\n         */\n\n\n        var _proto = Dropdown.prototype;\n        /**\n         * Find element that matches passed selector\n         * @param {string} selector\n         * @returns {HTMLElement | null}\n         */\n\n        _proto.getChild = function getChild(selector) {\n          return this.element.querySelector(selector);\n        }\n        /**\n         * Show dropdown to user by adding active state class\n         * @returns {this}\n         */\n        ;\n\n        _proto.show = function show() {\n          this.element.classList.add(this.classNames.activeState);\n          this.element.setAttribute('aria-expanded', 'true');\n          this.isActive = true;\n          return this;\n        }\n        /**\n         * Hide dropdown from user\n         * @returns {this}\n         */\n        ;\n\n        _proto.hide = function hide() {\n          this.element.classList.remove(this.classNames.activeState);\n          this.element.setAttribute('aria-expanded', 'false');\n          this.isActive = false;\n          return this;\n        };\n\n        dropdown_createClass(Dropdown, [{\n          key: \"distanceFromTopWindow\",\n          get: function get() {\n            return this.element.getBoundingClientRect().bottom;\n          }\n        }]);\n        return Dropdown;\n      }(); // CONCATENATED MODULE: ./src/scripts/constants.js\n\n      /**\n       * @typedef {import('../../types/index').Choices.ClassNames} ClassNames\n       * @typedef {import('../../types/index').Choices.Options} Options\n       */\n\n      /** @type {ClassNames} */\n\n\n      var DEFAULT_CLASSNAMES = {\n        containerOuter: 'choices',\n        containerInner: 'choices__inner',\n        input: 'choices__input',\n        inputCloned: 'choices__input--cloned',\n        list: 'choices__list',\n        listItems: 'choices__list--multiple',\n        listSingle: 'choices__list--single',\n        listDropdown: 'choices__list--dropdown',\n        item: 'choices__item',\n        itemSelectable: 'choices__item--selectable',\n        itemDisabled: 'choices__item--disabled',\n        itemChoice: 'choices__item--choice',\n        placeholder: 'choices__placeholder',\n        group: 'choices__group',\n        groupHeading: 'choices__heading',\n        button: 'choices__button',\n        activeState: 'is-active',\n        focusState: 'is-focused',\n        openState: 'is-open',\n        disabledState: 'is-disabled',\n        highlightedState: 'is-highlighted',\n        selectedState: 'is-selected',\n        flippedState: 'is-flipped',\n        loadingState: 'is-loading',\n        noResults: 'has-no-results',\n        noChoices: 'has-no-choices'\n      };\n      /** @type {Options} */\n\n      var DEFAULT_CONFIG = {\n        items: [],\n        choices: [],\n        silent: false,\n        renderChoiceLimit: -1,\n        maxItemCount: -1,\n        addItems: true,\n        addItemFilter: null,\n        removeItems: true,\n        removeItemButton: false,\n        editItems: false,\n        duplicateItemsAllowed: true,\n        delimiter: ',',\n        paste: true,\n        searchEnabled: true,\n        searchChoices: true,\n        searchFloor: 1,\n        searchResultLimit: 4,\n        searchFields: ['label', 'value'],\n        position: 'auto',\n        resetScrollPosition: true,\n        shouldSort: true,\n        shouldSortItems: false,\n        sorter: sortByAlpha,\n        placeholder: true,\n        placeholderValue: null,\n        searchPlaceholderValue: null,\n        prependValue: null,\n        appendValue: null,\n        renderSelectedChoices: 'auto',\n        loadingText: 'Loading...',\n        noResultsText: 'No results found',\n        noChoicesText: 'No choices to choose from',\n        itemSelectText: 'Press to select',\n        uniqueItemText: 'Only unique values can be added',\n        customAddItemText: 'Only values matching specific conditions can be added',\n        addItemText: function addItemText(value) {\n          return \"Press Enter to add <b>\\\"\" + sanitise(value) + \"\\\"</b>\";\n        },\n        maxItemText: function maxItemText(maxItemCount) {\n          return \"Only \" + maxItemCount + \" values can be added\";\n        },\n        valueComparer: function valueComparer(value1, value2) {\n          return value1 === value2;\n        },\n        fuseOptions: {\n          includeScore: true\n        },\n        callbackOnInit: null,\n        callbackOnCreateTemplates: null,\n        classNames: DEFAULT_CLASSNAMES\n      };\n      var EVENTS = {\n        showDropdown: 'showDropdown',\n        hideDropdown: 'hideDropdown',\n        change: 'change',\n        choice: 'choice',\n        search: 'search',\n        addItem: 'addItem',\n        removeItem: 'removeItem',\n        highlightItem: 'highlightItem',\n        highlightChoice: 'highlightChoice'\n      };\n      var ACTION_TYPES = {\n        ADD_CHOICE: 'ADD_CHOICE',\n        FILTER_CHOICES: 'FILTER_CHOICES',\n        ACTIVATE_CHOICES: 'ACTIVATE_CHOICES',\n        CLEAR_CHOICES: 'CLEAR_CHOICES',\n        ADD_GROUP: 'ADD_GROUP',\n        ADD_ITEM: 'ADD_ITEM',\n        REMOVE_ITEM: 'REMOVE_ITEM',\n        HIGHLIGHT_ITEM: 'HIGHLIGHT_ITEM',\n        CLEAR_ALL: 'CLEAR_ALL'\n      };\n      var KEY_CODES = {\n        BACK_KEY: 46,\n        DELETE_KEY: 8,\n        ENTER_KEY: 13,\n        A_KEY: 65,\n        ESC_KEY: 27,\n        UP_KEY: 38,\n        DOWN_KEY: 40,\n        PAGE_UP_KEY: 33,\n        PAGE_DOWN_KEY: 34\n      };\n      var TEXT_TYPE = 'text';\n      var SELECT_ONE_TYPE = 'select-one';\n      var SELECT_MULTIPLE_TYPE = 'select-multiple';\n      var SCROLLING_SPEED = 4; // CONCATENATED MODULE: ./src/scripts/components/container.js\n\n      /**\n       * @typedef {import('../../../types/index').Choices.passedElement} passedElement\n       * @typedef {import('../../../types/index').Choices.ClassNames} ClassNames\n       */\n\n      var container_Container = /*#__PURE__*/function () {\n        /**\n         * @param {{\n         *  element: HTMLElement,\n         *  type: passedElement['type'],\n         *  classNames: ClassNames,\n         *  position\n         * }} args\n         */\n        function Container(_ref) {\n          var element = _ref.element,\n              type = _ref.type,\n              classNames = _ref.classNames,\n              position = _ref.position;\n          this.element = element;\n          this.classNames = classNames;\n          this.type = type;\n          this.position = position;\n          this.isOpen = false;\n          this.isFlipped = false;\n          this.isFocussed = false;\n          this.isDisabled = false;\n          this.isLoading = false;\n          this._onFocus = this._onFocus.bind(this);\n          this._onBlur = this._onBlur.bind(this);\n        }\n\n        var _proto = Container.prototype;\n\n        _proto.addEventListeners = function addEventListeners() {\n          this.element.addEventListener('focus', this._onFocus);\n          this.element.addEventListener('blur', this._onBlur);\n        };\n\n        _proto.removeEventListeners = function removeEventListeners() {\n          this.element.removeEventListener('focus', this._onFocus);\n          this.element.removeEventListener('blur', this._onBlur);\n        }\n        /**\n         * Determine whether container should be flipped based on passed\n         * dropdown position\n         * @param {number} dropdownPos\n         * @returns {boolean}\n         */\n        ;\n\n        _proto.shouldFlip = function shouldFlip(dropdownPos) {\n          if (typeof dropdownPos !== 'number') {\n            return false;\n          } // If flip is enabled and the dropdown bottom position is\n          // greater than the window height flip the dropdown.\n\n\n          var shouldFlip = false;\n\n          if (this.position === 'auto') {\n            shouldFlip = !window.matchMedia(\"(min-height: \" + (dropdownPos + 1) + \"px)\").matches;\n          } else if (this.position === 'top') {\n            shouldFlip = true;\n          }\n\n          return shouldFlip;\n        }\n        /**\n         * @param {string} activeDescendantID\n         */\n        ;\n\n        _proto.setActiveDescendant = function setActiveDescendant(activeDescendantID) {\n          this.element.setAttribute('aria-activedescendant', activeDescendantID);\n        };\n\n        _proto.removeActiveDescendant = function removeActiveDescendant() {\n          this.element.removeAttribute('aria-activedescendant');\n        }\n        /**\n         * @param {number} dropdownPos\n         */\n        ;\n\n        _proto.open = function open(dropdownPos) {\n          this.element.classList.add(this.classNames.openState);\n          this.element.setAttribute('aria-expanded', 'true');\n          this.isOpen = true;\n\n          if (this.shouldFlip(dropdownPos)) {\n            this.element.classList.add(this.classNames.flippedState);\n            this.isFlipped = true;\n          }\n        };\n\n        _proto.close = function close() {\n          this.element.classList.remove(this.classNames.openState);\n          this.element.setAttribute('aria-expanded', 'false');\n          this.removeActiveDescendant();\n          this.isOpen = false; // A dropdown flips if it does not have space within the page\n\n          if (this.isFlipped) {\n            this.element.classList.remove(this.classNames.flippedState);\n            this.isFlipped = false;\n          }\n        };\n\n        _proto.focus = function focus() {\n          if (!this.isFocussed) {\n            this.element.focus();\n          }\n        };\n\n        _proto.addFocusState = function addFocusState() {\n          this.element.classList.add(this.classNames.focusState);\n        };\n\n        _proto.removeFocusState = function removeFocusState() {\n          this.element.classList.remove(this.classNames.focusState);\n        };\n\n        _proto.enable = function enable() {\n          this.element.classList.remove(this.classNames.disabledState);\n          this.element.removeAttribute('aria-disabled');\n\n          if (this.type === SELECT_ONE_TYPE) {\n            this.element.setAttribute('tabindex', '0');\n          }\n\n          this.isDisabled = false;\n        };\n\n        _proto.disable = function disable() {\n          this.element.classList.add(this.classNames.disabledState);\n          this.element.setAttribute('aria-disabled', 'true');\n\n          if (this.type === SELECT_ONE_TYPE) {\n            this.element.setAttribute('tabindex', '-1');\n          }\n\n          this.isDisabled = true;\n        }\n        /**\n         * @param {HTMLElement} element\n         */\n        ;\n\n        _proto.wrap = function wrap(element) {\n          utils_wrap(element, this.element);\n        }\n        /**\n         * @param {Element} element\n         */\n        ;\n\n        _proto.unwrap = function unwrap(element) {\n          // Move passed element outside this element\n          this.element.parentNode.insertBefore(element, this.element); // Remove this element\n\n          this.element.parentNode.removeChild(this.element);\n        };\n\n        _proto.addLoadingState = function addLoadingState() {\n          this.element.classList.add(this.classNames.loadingState);\n          this.element.setAttribute('aria-busy', 'true');\n          this.isLoading = true;\n        };\n\n        _proto.removeLoadingState = function removeLoadingState() {\n          this.element.classList.remove(this.classNames.loadingState);\n          this.element.removeAttribute('aria-busy');\n          this.isLoading = false;\n        };\n\n        _proto._onFocus = function _onFocus() {\n          this.isFocussed = true;\n        };\n\n        _proto._onBlur = function _onBlur() {\n          this.isFocussed = false;\n        };\n\n        return Container;\n      }(); // CONCATENATED MODULE: ./src/scripts/components/input.js\n\n\n      function input_defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      function input_createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) input_defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) input_defineProperties(Constructor, staticProps);\n        return Constructor;\n      }\n      /**\n       * @typedef {import('../../../types/index').Choices.passedElement} passedElement\n       * @typedef {import('../../../types/index').Choices.ClassNames} ClassNames\n       */\n\n\n      var input_Input = /*#__PURE__*/function () {\n        /**\n         * @param {{\n         *  element: HTMLInputElement,\n         *  type: passedElement['type'],\n         *  classNames: ClassNames,\n         *  preventPaste: boolean\n         * }} args\n         */\n        function Input(_ref) {\n          var element = _ref.element,\n              type = _ref.type,\n              classNames = _ref.classNames,\n              preventPaste = _ref.preventPaste;\n          this.element = element;\n          this.type = type;\n          this.classNames = classNames;\n          this.preventPaste = preventPaste;\n          this.isFocussed = this.element === document.activeElement;\n          this.isDisabled = element.disabled;\n          this._onPaste = this._onPaste.bind(this);\n          this._onInput = this._onInput.bind(this);\n          this._onFocus = this._onFocus.bind(this);\n          this._onBlur = this._onBlur.bind(this);\n        }\n        /**\n         * @param {string} placeholder\n         */\n\n\n        var _proto = Input.prototype;\n\n        _proto.addEventListeners = function addEventListeners() {\n          this.element.addEventListener('paste', this._onPaste);\n          this.element.addEventListener('input', this._onInput, {\n            passive: true\n          });\n          this.element.addEventListener('focus', this._onFocus, {\n            passive: true\n          });\n          this.element.addEventListener('blur', this._onBlur, {\n            passive: true\n          });\n        };\n\n        _proto.removeEventListeners = function removeEventListeners() {\n          this.element.removeEventListener('input', this._onInput, {\n            passive: true\n          });\n          this.element.removeEventListener('paste', this._onPaste);\n          this.element.removeEventListener('focus', this._onFocus, {\n            passive: true\n          });\n          this.element.removeEventListener('blur', this._onBlur, {\n            passive: true\n          });\n        };\n\n        _proto.enable = function enable() {\n          this.element.removeAttribute('disabled');\n          this.isDisabled = false;\n        };\n\n        _proto.disable = function disable() {\n          this.element.setAttribute('disabled', '');\n          this.isDisabled = true;\n        };\n\n        _proto.focus = function focus() {\n          if (!this.isFocussed) {\n            this.element.focus();\n          }\n        };\n\n        _proto.blur = function blur() {\n          if (this.isFocussed) {\n            this.element.blur();\n          }\n        }\n        /**\n         * Set value of input to blank\n         * @param {boolean} setWidth\n         * @returns {this}\n         */\n        ;\n\n        _proto.clear = function clear(setWidth) {\n          if (setWidth === void 0) {\n            setWidth = true;\n          }\n\n          if (this.element.value) {\n            this.element.value = '';\n          }\n\n          if (setWidth) {\n            this.setWidth();\n          }\n\n          return this;\n        }\n        /**\n         * Set the correct input width based on placeholder\n         * value or input value\n         */\n        ;\n\n        _proto.setWidth = function setWidth() {\n          // Resize input to contents or placeholder\n          var _this$element = this.element,\n              style = _this$element.style,\n              value = _this$element.value,\n              placeholder = _this$element.placeholder;\n          style.minWidth = placeholder.length + 1 + \"ch\";\n          style.width = value.length + 1 + \"ch\";\n        }\n        /**\n         * @param {string} activeDescendantID\n         */\n        ;\n\n        _proto.setActiveDescendant = function setActiveDescendant(activeDescendantID) {\n          this.element.setAttribute('aria-activedescendant', activeDescendantID);\n        };\n\n        _proto.removeActiveDescendant = function removeActiveDescendant() {\n          this.element.removeAttribute('aria-activedescendant');\n        };\n\n        _proto._onInput = function _onInput() {\n          if (this.type !== SELECT_ONE_TYPE) {\n            this.setWidth();\n          }\n        }\n        /**\n         * @param {Event} event\n         */\n        ;\n\n        _proto._onPaste = function _onPaste(event) {\n          if (this.preventPaste) {\n            event.preventDefault();\n          }\n        };\n\n        _proto._onFocus = function _onFocus() {\n          this.isFocussed = true;\n        };\n\n        _proto._onBlur = function _onBlur() {\n          this.isFocussed = false;\n        };\n\n        input_createClass(Input, [{\n          key: \"placeholder\",\n          set: function set(placeholder) {\n            this.element.placeholder = placeholder;\n          }\n          /**\n           * @returns {string}\n           */\n\n        }, {\n          key: \"value\",\n          get: function get() {\n            return sanitise(this.element.value);\n          }\n          /**\n           * @param {string} value\n           */\n          ,\n          set: function set(value) {\n            this.element.value = value;\n          }\n        }]);\n        return Input;\n      }(); // CONCATENATED MODULE: ./src/scripts/components/list.js\n\n      /**\n       * @typedef {import('../../../types/index').Choices.Choice} Choice\n       */\n\n\n      var list_List = /*#__PURE__*/function () {\n        /**\n         * @param {{ element: HTMLElement }} args\n         */\n        function List(_ref) {\n          var element = _ref.element;\n          this.element = element;\n          this.scrollPos = this.element.scrollTop;\n          this.height = this.element.offsetHeight;\n        }\n\n        var _proto = List.prototype;\n\n        _proto.clear = function clear() {\n          this.element.innerHTML = '';\n        }\n        /**\n         * @param {Element | DocumentFragment} node\n         */\n        ;\n\n        _proto.append = function append(node) {\n          this.element.appendChild(node);\n        }\n        /**\n         * @param {string} selector\n         * @returns {Element | null}\n         */\n        ;\n\n        _proto.getChild = function getChild(selector) {\n          return this.element.querySelector(selector);\n        }\n        /**\n         * @returns {boolean}\n         */\n        ;\n\n        _proto.hasChildren = function hasChildren() {\n          return this.element.hasChildNodes();\n        };\n\n        _proto.scrollToTop = function scrollToTop() {\n          this.element.scrollTop = 0;\n        }\n        /**\n         * @param {Element} element\n         * @param {1 | -1} direction\n         */\n        ;\n\n        _proto.scrollToChildElement = function scrollToChildElement(element, direction) {\n          var _this = this;\n\n          if (!element) {\n            return;\n          }\n\n          var listHeight = this.element.offsetHeight; // Scroll position of dropdown\n\n          var listScrollPosition = this.element.scrollTop + listHeight;\n          var elementHeight = element.offsetHeight; // Distance from bottom of element to top of parent\n\n          var elementPos = element.offsetTop + elementHeight; // Difference between the element and scroll position\n\n          var destination = direction > 0 ? this.element.scrollTop + elementPos - listScrollPosition : element.offsetTop;\n          requestAnimationFrame(function () {\n            _this._animateScroll(destination, direction);\n          });\n        }\n        /**\n         * @param {number} scrollPos\n         * @param {number} strength\n         * @param {number} destination\n         */\n        ;\n\n        _proto._scrollDown = function _scrollDown(scrollPos, strength, destination) {\n          var easing = (destination - scrollPos) / strength;\n          var distance = easing > 1 ? easing : 1;\n          this.element.scrollTop = scrollPos + distance;\n        }\n        /**\n         * @param {number} scrollPos\n         * @param {number} strength\n         * @param {number} destination\n         */\n        ;\n\n        _proto._scrollUp = function _scrollUp(scrollPos, strength, destination) {\n          var easing = (scrollPos - destination) / strength;\n          var distance = easing > 1 ? easing : 1;\n          this.element.scrollTop = scrollPos - distance;\n        }\n        /**\n         * @param {*} destination\n         * @param {*} direction\n         */\n        ;\n\n        _proto._animateScroll = function _animateScroll(destination, direction) {\n          var _this2 = this;\n\n          var strength = SCROLLING_SPEED;\n          var choiceListScrollTop = this.element.scrollTop;\n          var continueAnimation = false;\n\n          if (direction > 0) {\n            this._scrollDown(choiceListScrollTop, strength, destination);\n\n            if (choiceListScrollTop < destination) {\n              continueAnimation = true;\n            }\n          } else {\n            this._scrollUp(choiceListScrollTop, strength, destination);\n\n            if (choiceListScrollTop > destination) {\n              continueAnimation = true;\n            }\n          }\n\n          if (continueAnimation) {\n            requestAnimationFrame(function () {\n              _this2._animateScroll(destination, direction);\n            });\n          }\n        };\n\n        return List;\n      }(); // CONCATENATED MODULE: ./src/scripts/components/wrapped-element.js\n\n\n      function wrapped_element_defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      function wrapped_element_createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) wrapped_element_defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) wrapped_element_defineProperties(Constructor, staticProps);\n        return Constructor;\n      }\n      /**\n       * @typedef {import('../../../types/index').Choices.passedElement} passedElement\n       * @typedef {import('../../../types/index').Choices.ClassNames} ClassNames\n       */\n\n\n      var wrapped_element_WrappedElement = /*#__PURE__*/function () {\n        /**\n         * @param {{\n         *  element: HTMLInputElement | HTMLSelectElement,\n         *  classNames: ClassNames,\n         * }} args\n         */\n        function WrappedElement(_ref) {\n          var element = _ref.element,\n              classNames = _ref.classNames;\n          this.element = element;\n          this.classNames = classNames;\n\n          if (!(element instanceof HTMLInputElement) && !(element instanceof HTMLSelectElement)) {\n            throw new TypeError('Invalid element passed');\n          }\n\n          this.isDisabled = false;\n        }\n\n        var _proto = WrappedElement.prototype;\n\n        _proto.conceal = function conceal() {\n          // Hide passed input\n          this.element.classList.add(this.classNames.input);\n          this.element.hidden = true; // Remove element from tab index\n\n          this.element.tabIndex = -1; // Backup original styles if any\n\n          var origStyle = this.element.getAttribute('style');\n\n          if (origStyle) {\n            this.element.setAttribute('data-choice-orig-style', origStyle);\n          }\n\n          this.element.setAttribute('data-choice', 'active');\n        };\n\n        _proto.reveal = function reveal() {\n          // Reinstate passed element\n          this.element.classList.remove(this.classNames.input);\n          this.element.hidden = false;\n          this.element.removeAttribute('tabindex'); // Recover original styles if any\n\n          var origStyle = this.element.getAttribute('data-choice-orig-style');\n\n          if (origStyle) {\n            this.element.removeAttribute('data-choice-orig-style');\n            this.element.setAttribute('style', origStyle);\n          } else {\n            this.element.removeAttribute('style');\n          }\n\n          this.element.removeAttribute('data-choice'); // Re-assign values - this is weird, I know\n          // @todo Figure out why we need to do this\n\n          this.element.value = this.element.value; // eslint-disable-line no-self-assign\n        };\n\n        _proto.enable = function enable() {\n          this.element.removeAttribute('disabled');\n          this.element.disabled = false;\n          this.isDisabled = false;\n        };\n\n        _proto.disable = function disable() {\n          this.element.setAttribute('disabled', '');\n          this.element.disabled = true;\n          this.isDisabled = true;\n        };\n\n        _proto.triggerEvent = function triggerEvent(eventType, data) {\n          dispatchEvent(this.element, eventType, data);\n        };\n\n        wrapped_element_createClass(WrappedElement, [{\n          key: \"isActive\",\n          get: function get() {\n            return this.element.dataset.choice === 'active';\n          }\n        }, {\n          key: \"dir\",\n          get: function get() {\n            return this.element.dir;\n          }\n        }, {\n          key: \"value\",\n          get: function get() {\n            return this.element.value;\n          },\n          set: function set(value) {\n            // you must define setter here otherwise it will be readonly property\n            this.element.value = value;\n          }\n        }]);\n        return WrappedElement;\n      }(); // CONCATENATED MODULE: ./src/scripts/components/wrapped-input.js\n\n\n      function wrapped_input_defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      function wrapped_input_createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) wrapped_input_defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) wrapped_input_defineProperties(Constructor, staticProps);\n        return Constructor;\n      }\n\n      function _inheritsLoose(subClass, superClass) {\n        subClass.prototype = Object.create(superClass.prototype);\n        subClass.prototype.constructor = subClass;\n        subClass.__proto__ = superClass;\n      }\n      /**\n       * @typedef {import('../../../types/index').Choices.ClassNames} ClassNames\n       * @typedef {import('../../../types/index').Choices.Item} Item\n       */\n\n\n      var WrappedInput = /*#__PURE__*/function (_WrappedElement) {\n        _inheritsLoose(WrappedInput, _WrappedElement);\n        /**\n         * @param {{\n         *  element: HTMLInputElement,\n         *  classNames: ClassNames,\n         *  delimiter: string\n         * }} args\n         */\n\n\n        function WrappedInput(_ref) {\n          var _this;\n\n          var element = _ref.element,\n              classNames = _ref.classNames,\n              delimiter = _ref.delimiter;\n          _this = _WrappedElement.call(this, {\n            element: element,\n            classNames: classNames\n          }) || this;\n          _this.delimiter = delimiter;\n          return _this;\n        }\n        /**\n         * @returns {string}\n         */\n\n\n        wrapped_input_createClass(WrappedInput, [{\n          key: \"value\",\n          get: function get() {\n            return this.element.value;\n          }\n          /**\n           * @param {Item[]} items\n           */\n          ,\n          set: function set(items) {\n            var itemValues = items.map(function (_ref2) {\n              var value = _ref2.value;\n              return value;\n            });\n            var joinedValues = itemValues.join(this.delimiter);\n            this.element.setAttribute('value', joinedValues);\n            this.element.value = joinedValues;\n          }\n        }]);\n        return WrappedInput;\n      }(wrapped_element_WrappedElement); // CONCATENATED MODULE: ./src/scripts/components/wrapped-select.js\n\n\n      function wrapped_select_defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      function wrapped_select_createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) wrapped_select_defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) wrapped_select_defineProperties(Constructor, staticProps);\n        return Constructor;\n      }\n\n      function wrapped_select_inheritsLoose(subClass, superClass) {\n        subClass.prototype = Object.create(superClass.prototype);\n        subClass.prototype.constructor = subClass;\n        subClass.__proto__ = superClass;\n      }\n      /**\n       * @typedef {import('../../../types/index').Choices.ClassNames} ClassNames\n       * @typedef {import('../../../types/index').Choices.Item} Item\n       * @typedef {import('../../../types/index').Choices.Choice} Choice\n       */\n\n\n      var WrappedSelect = /*#__PURE__*/function (_WrappedElement) {\n        wrapped_select_inheritsLoose(WrappedSelect, _WrappedElement);\n        /**\n         * @param {{\n         *  element: HTMLSelectElement,\n         *  classNames: ClassNames,\n         *  delimiter: string\n         *  template: function\n         * }} args\n         */\n\n        function WrappedSelect(_ref) {\n          var _this;\n\n          var element = _ref.element,\n              classNames = _ref.classNames,\n              template = _ref.template;\n          _this = _WrappedElement.call(this, {\n            element: element,\n            classNames: classNames\n          }) || this;\n          _this.template = template;\n          return _this;\n        }\n\n        var _proto = WrappedSelect.prototype;\n        /**\n         * @param {DocumentFragment} fragment\n         */\n\n        _proto.appendDocFragment = function appendDocFragment(fragment) {\n          this.element.innerHTML = '';\n          this.element.appendChild(fragment);\n        };\n\n        wrapped_select_createClass(WrappedSelect, [{\n          key: \"placeholderOption\",\n          get: function get() {\n            return this.element.querySelector('option[value=\"\"]') || // Backward compatibility layer for the non-standard placeholder attribute supported in older versions.\n            this.element.querySelector('option[placeholder]');\n          }\n          /**\n           * @returns {Element[]}\n           */\n\n        }, {\n          key: \"optionGroups\",\n          get: function get() {\n            return Array.from(this.element.getElementsByTagName('OPTGROUP'));\n          }\n          /**\n           * @returns {Item[] | Choice[]}\n           */\n\n        }, {\n          key: \"options\",\n          get: function get() {\n            return Array.from(this.element.options);\n          }\n          /**\n           * @param {Item[] | Choice[]} options\n           */\n          ,\n          set: function set(options) {\n            var _this2 = this;\n\n            var fragment = document.createDocumentFragment();\n\n            var addOptionToFragment = function addOptionToFragment(data) {\n              // Create a standard select option\n              var option = _this2.template(data); // Append it to fragment\n\n\n              fragment.appendChild(option);\n            }; // Add each list item to list\n\n\n            options.forEach(function (optionData) {\n              return addOptionToFragment(optionData);\n            });\n            this.appendDocFragment(fragment);\n          }\n        }]);\n        return WrappedSelect;\n      }(wrapped_element_WrappedElement); // CONCATENATED MODULE: ./src/scripts/components/index.js\n      // CONCATENATED MODULE: ./src/scripts/templates.js\n\n      /**\n       * Helpers to create HTML elements used by Choices\n       * Can be overridden by providing `callbackOnCreateTemplates` option\n       * @typedef {import('../../types/index').Choices.Templates} Templates\n       * @typedef {import('../../types/index').Choices.ClassNames} ClassNames\n       * @typedef {import('../../types/index').Choices.Options} Options\n       * @typedef {import('../../types/index').Choices.Item} Item\n       * @typedef {import('../../types/index').Choices.Choice} Choice\n       * @typedef {import('../../types/index').Choices.Group} Group\n       */\n\n\n      var TEMPLATES =\n      /** @type {Templates} */\n      {\n        /**\n         * @param {Partial<ClassNames>} classNames\n         * @param {\"ltr\" | \"rtl\" | \"auto\"} dir\n         * @param {boolean} isSelectElement\n         * @param {boolean} isSelectOneElement\n         * @param {boolean} searchEnabled\n         * @param {\"select-one\" | \"select-multiple\" | \"text\"} passedElementType\n         */\n        containerOuter: function containerOuter(_ref, dir, isSelectElement, isSelectOneElement, searchEnabled, passedElementType) {\n          var _containerOuter = _ref.containerOuter;\n          var div = Object.assign(document.createElement('div'), {\n            className: _containerOuter\n          });\n          div.dataset.type = passedElementType;\n\n          if (dir) {\n            div.dir = dir;\n          }\n\n          if (isSelectOneElement) {\n            div.tabIndex = 0;\n          }\n\n          if (isSelectElement) {\n            div.setAttribute('role', searchEnabled ? 'combobox' : 'listbox');\n\n            if (searchEnabled) {\n              div.setAttribute('aria-autocomplete', 'list');\n            }\n          }\n\n          div.setAttribute('aria-haspopup', 'true');\n          div.setAttribute('aria-expanded', 'false');\n          return div;\n        },\n\n        /**\n         * @param {Partial<ClassNames>} classNames\n         */\n        containerInner: function containerInner(_ref2) {\n          var _containerInner = _ref2.containerInner;\n          return Object.assign(document.createElement('div'), {\n            className: _containerInner\n          });\n        },\n\n        /**\n         * @param {Partial<ClassNames>} classNames\n         * @param {boolean} isSelectOneElement\n         */\n        itemList: function itemList(_ref3, isSelectOneElement) {\n          var list = _ref3.list,\n              listSingle = _ref3.listSingle,\n              listItems = _ref3.listItems;\n          return Object.assign(document.createElement('div'), {\n            className: list + \" \" + (isSelectOneElement ? listSingle : listItems)\n          });\n        },\n\n        /**\n         * @param {Partial<ClassNames>} classNames\n         * @param {string} value\n         */\n        placeholder: function placeholder(_ref4, value) {\n          var _placeholder = _ref4.placeholder;\n          return Object.assign(document.createElement('div'), {\n            className: _placeholder,\n            innerHTML: value\n          });\n        },\n\n        /**\n         * @param {Partial<ClassNames>} classNames\n         * @param {Item} item\n         * @param {boolean} removeItemButton\n         */\n        item: function item(_ref5, _ref6, removeItemButton) {\n          var _item = _ref5.item,\n              button = _ref5.button,\n              highlightedState = _ref5.highlightedState,\n              itemSelectable = _ref5.itemSelectable,\n              placeholder = _ref5.placeholder;\n          var id = _ref6.id,\n              value = _ref6.value,\n              label = _ref6.label,\n              customProperties = _ref6.customProperties,\n              active = _ref6.active,\n              disabled = _ref6.disabled,\n              highlighted = _ref6.highlighted,\n              isPlaceholder = _ref6.placeholder;\n          var div = Object.assign(document.createElement('div'), {\n            className: _item,\n            innerHTML: label\n          });\n          Object.assign(div.dataset, {\n            item: '',\n            id: id,\n            value: value,\n            customProperties: customProperties\n          });\n\n          if (active) {\n            div.setAttribute('aria-selected', 'true');\n          }\n\n          if (disabled) {\n            div.setAttribute('aria-disabled', 'true');\n          }\n\n          if (isPlaceholder) {\n            div.classList.add(placeholder);\n          }\n\n          div.classList.add(highlighted ? highlightedState : itemSelectable);\n\n          if (removeItemButton) {\n            if (disabled) {\n              div.classList.remove(itemSelectable);\n            }\n\n            div.dataset.deletable = '';\n            /** @todo This MUST be localizable, not hardcoded! */\n\n            var REMOVE_ITEM_TEXT = 'Remove item';\n            var removeButton = Object.assign(document.createElement('button'), {\n              type: 'button',\n              className: button,\n              innerHTML: REMOVE_ITEM_TEXT\n            });\n            removeButton.setAttribute('aria-label', REMOVE_ITEM_TEXT + \": '\" + value + \"'\");\n            removeButton.dataset.button = '';\n            div.appendChild(removeButton);\n          }\n\n          return div;\n        },\n\n        /**\n         * @param {Partial<ClassNames>} classNames\n         * @param {boolean} isSelectOneElement\n         */\n        choiceList: function choiceList(_ref7, isSelectOneElement) {\n          var list = _ref7.list;\n          var div = Object.assign(document.createElement('div'), {\n            className: list\n          });\n\n          if (!isSelectOneElement) {\n            div.setAttribute('aria-multiselectable', 'true');\n          }\n\n          div.setAttribute('role', 'listbox');\n          return div;\n        },\n\n        /**\n         * @param {Partial<ClassNames>} classNames\n         * @param {Group} group\n         */\n        choiceGroup: function choiceGroup(_ref8, _ref9) {\n          var group = _ref8.group,\n              groupHeading = _ref8.groupHeading,\n              itemDisabled = _ref8.itemDisabled;\n          var id = _ref9.id,\n              value = _ref9.value,\n              disabled = _ref9.disabled;\n          var div = Object.assign(document.createElement('div'), {\n            className: group + \" \" + (disabled ? itemDisabled : '')\n          });\n          div.setAttribute('role', 'group');\n          Object.assign(div.dataset, {\n            group: '',\n            id: id,\n            value: value\n          });\n\n          if (disabled) {\n            div.setAttribute('aria-disabled', 'true');\n          }\n\n          div.appendChild(Object.assign(document.createElement('div'), {\n            className: groupHeading,\n            innerHTML: value\n          }));\n          return div;\n        },\n\n        /**\n         * @param {Partial<ClassNames>} classNames\n         * @param {Choice} choice\n         * @param {Options['itemSelectText']} selectText\n         */\n        choice: function choice(_ref10, _ref11, selectText) {\n          var item = _ref10.item,\n              itemChoice = _ref10.itemChoice,\n              itemSelectable = _ref10.itemSelectable,\n              selectedState = _ref10.selectedState,\n              itemDisabled = _ref10.itemDisabled,\n              placeholder = _ref10.placeholder;\n          var id = _ref11.id,\n              value = _ref11.value,\n              label = _ref11.label,\n              groupId = _ref11.groupId,\n              elementId = _ref11.elementId,\n              isDisabled = _ref11.disabled,\n              isSelected = _ref11.selected,\n              isPlaceholder = _ref11.placeholder;\n          var div = Object.assign(document.createElement('div'), {\n            id: elementId,\n            innerHTML: label,\n            className: item + \" \" + itemChoice\n          });\n\n          if (isSelected) {\n            div.classList.add(selectedState);\n          }\n\n          if (isPlaceholder) {\n            div.classList.add(placeholder);\n          }\n\n          div.setAttribute('role', groupId > 0 ? 'treeitem' : 'option');\n          Object.assign(div.dataset, {\n            choice: '',\n            id: id,\n            value: value,\n            selectText: selectText\n          });\n\n          if (isDisabled) {\n            div.classList.add(itemDisabled);\n            div.dataset.choiceDisabled = '';\n            div.setAttribute('aria-disabled', 'true');\n          } else {\n            div.classList.add(itemSelectable);\n            div.dataset.choiceSelectable = '';\n          }\n\n          return div;\n        },\n\n        /**\n         * @param {Partial<ClassNames>} classNames\n         * @param {string} placeholderValue\n         */\n        input: function input(_ref12, placeholderValue) {\n          var _input = _ref12.input,\n              inputCloned = _ref12.inputCloned;\n          var inp = Object.assign(document.createElement('input'), {\n            type: 'text',\n            className: _input + \" \" + inputCloned,\n            autocomplete: 'off',\n            autocapitalize: 'off',\n            spellcheck: false\n          });\n          inp.setAttribute('role', 'textbox');\n          inp.setAttribute('aria-autocomplete', 'list');\n          inp.setAttribute('aria-label', placeholderValue);\n          return inp;\n        },\n\n        /**\n         * @param {Partial<ClassNames>} classNames\n         */\n        dropdown: function dropdown(_ref13) {\n          var list = _ref13.list,\n              listDropdown = _ref13.listDropdown;\n          var div = document.createElement('div');\n          div.classList.add(list, listDropdown);\n          div.setAttribute('aria-expanded', 'false');\n          return div;\n        },\n\n        /**\n         *\n         * @param {Partial<ClassNames>} classNames\n         * @param {string} innerHTML\n         * @param {\"no-choices\" | \"no-results\" | \"\"} type\n         */\n        notice: function notice(_ref14, innerHTML, type) {\n          var item = _ref14.item,\n              itemChoice = _ref14.itemChoice,\n              noResults = _ref14.noResults,\n              noChoices = _ref14.noChoices;\n\n          if (type === void 0) {\n            type = '';\n          }\n\n          var classes = [item, itemChoice];\n\n          if (type === 'no-choices') {\n            classes.push(noChoices);\n          } else if (type === 'no-results') {\n            classes.push(noResults);\n          }\n\n          return Object.assign(document.createElement('div'), {\n            innerHTML: innerHTML,\n            className: classes.join(' ')\n          });\n        },\n\n        /**\n         * @param {Item} option\n         */\n        option: function option(_ref15) {\n          var label = _ref15.label,\n              value = _ref15.value,\n              customProperties = _ref15.customProperties,\n              active = _ref15.active,\n              disabled = _ref15.disabled;\n          var opt = new Option(label, value, false, active);\n\n          if (customProperties) {\n            opt.dataset.customProperties = customProperties;\n          }\n\n          opt.disabled = disabled;\n          return opt;\n        }\n      };\n      /* harmony default export */\n\n      var templates = TEMPLATES; // CONCATENATED MODULE: ./src/scripts/actions/choices.js\n\n      /**\n       * @typedef {import('redux').Action} Action\n       * @typedef {import('../../../types/index').Choices.Choice} Choice\n       */\n\n      /**\n       * @argument {Choice} choice\n       * @returns {Action & Choice}\n       */\n\n      var choices_addChoice = function addChoice(_ref) {\n        var value = _ref.value,\n            label = _ref.label,\n            id = _ref.id,\n            groupId = _ref.groupId,\n            disabled = _ref.disabled,\n            elementId = _ref.elementId,\n            customProperties = _ref.customProperties,\n            placeholder = _ref.placeholder,\n            keyCode = _ref.keyCode;\n        return {\n          type: ACTION_TYPES.ADD_CHOICE,\n          value: value,\n          label: label,\n          id: id,\n          groupId: groupId,\n          disabled: disabled,\n          elementId: elementId,\n          customProperties: customProperties,\n          placeholder: placeholder,\n          keyCode: keyCode\n        };\n      };\n      /**\n       * @argument {Choice[]} results\n       * @returns {Action & { results: Choice[] }}\n       */\n\n\n      var choices_filterChoices = function filterChoices(results) {\n        return {\n          type: ACTION_TYPES.FILTER_CHOICES,\n          results: results\n        };\n      };\n      /**\n       * @argument {boolean} active\n       * @returns {Action & { active: boolean }}\n       */\n\n\n      var choices_activateChoices = function activateChoices(active) {\n        if (active === void 0) {\n          active = true;\n        }\n\n        return {\n          type: ACTION_TYPES.ACTIVATE_CHOICES,\n          active: active\n        };\n      };\n      /**\n       * @returns {Action}\n       */\n\n\n      var choices_clearChoices = function clearChoices() {\n        return {\n          type: ACTION_TYPES.CLEAR_CHOICES\n        };\n      }; // CONCATENATED MODULE: ./src/scripts/actions/items.js\n\n      /**\n       * @typedef {import('redux').Action} Action\n       * @typedef {import('../../../types/index').Choices.Item} Item\n       */\n\n      /**\n       * @param {Item} item\n       * @returns {Action & Item}\n       */\n\n\n      var items_addItem = function addItem(_ref) {\n        var value = _ref.value,\n            label = _ref.label,\n            id = _ref.id,\n            choiceId = _ref.choiceId,\n            groupId = _ref.groupId,\n            customProperties = _ref.customProperties,\n            placeholder = _ref.placeholder,\n            keyCode = _ref.keyCode;\n        return {\n          type: ACTION_TYPES.ADD_ITEM,\n          value: value,\n          label: label,\n          id: id,\n          choiceId: choiceId,\n          groupId: groupId,\n          customProperties: customProperties,\n          placeholder: placeholder,\n          keyCode: keyCode\n        };\n      };\n      /**\n       * @param {string} id\n       * @param {string} choiceId\n       * @returns {Action & { id: string, choiceId: string }}\n       */\n\n\n      var items_removeItem = function removeItem(id, choiceId) {\n        return {\n          type: ACTION_TYPES.REMOVE_ITEM,\n          id: id,\n          choiceId: choiceId\n        };\n      };\n      /**\n       * @param {string} id\n       * @param {boolean} highlighted\n       * @returns {Action & { id: string, highlighted: boolean }}\n       */\n\n\n      var items_highlightItem = function highlightItem(id, highlighted) {\n        return {\n          type: ACTION_TYPES.HIGHLIGHT_ITEM,\n          id: id,\n          highlighted: highlighted\n        };\n      }; // CONCATENATED MODULE: ./src/scripts/actions/groups.js\n\n      /**\n       * @typedef {import('redux').Action} Action\n       * @typedef {import('../../../types/index').Choices.Group} Group\n       */\n\n      /**\n       * @param {Group} group\n       * @returns {Action & Group}\n       */\n\n\n      var groups_addGroup = function addGroup(_ref) {\n        var value = _ref.value,\n            id = _ref.id,\n            active = _ref.active,\n            disabled = _ref.disabled;\n        return {\n          type: ACTION_TYPES.ADD_GROUP,\n          value: value,\n          id: id,\n          active: active,\n          disabled: disabled\n        };\n      }; // CONCATENATED MODULE: ./src/scripts/actions/misc.js\n\n      /**\n       * @typedef {import('redux').Action} Action\n       */\n\n      /**\n       * @returns {Action}\n       */\n\n\n      var clearAll = function clearAll() {\n        return {\n          type: 'CLEAR_ALL'\n        };\n      };\n      /**\n       * @param {any} state\n       * @returns {Action & { state: object }}\n       */\n\n\n      var resetTo = function resetTo(state) {\n        return {\n          type: 'RESET_TO',\n          state: state\n        };\n      };\n      /**\n       * @param {boolean} isLoading\n       * @returns {Action & { isLoading: boolean }}\n       */\n\n\n      var setIsLoading = function setIsLoading(isLoading) {\n        return {\n          type: 'SET_IS_LOADING',\n          isLoading: isLoading\n        };\n      }; // CONCATENATED MODULE: ./src/scripts/choices.js\n\n\n      function choices_defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      function choices_createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) choices_defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) choices_defineProperties(Constructor, staticProps);\n        return Constructor;\n      }\n      /** @see {@link http://browserhacks.com/#hack-acea075d0ac6954f275a70023906050c} */\n\n\n      var IS_IE11 = '-ms-scroll-limit' in document.documentElement.style && '-ms-ime-align' in document.documentElement.style;\n      /**\n       * @typedef {import('../../types/index').Choices.Choice} Choice\n       * @typedef {import('../../types/index').Choices.Item} Item\n       * @typedef {import('../../types/index').Choices.Group} Group\n       * @typedef {import('../../types/index').Choices.Options} Options\n       */\n\n      /** @type {Partial<Options>} */\n\n      var USER_DEFAULTS = {};\n      /**\n       * Choices\n       * @author Josh Johnson<josh@joshuajohnson.co.uk>\n       */\n\n      var choices_Choices = /*#__PURE__*/function () {\n        choices_createClass(Choices, null, [{\n          key: \"defaults\",\n          get: function get() {\n            return Object.preventExtensions({\n              get options() {\n                return USER_DEFAULTS;\n              },\n\n              get templates() {\n                return TEMPLATES;\n              }\n\n            });\n          }\n          /**\n           * @param {string | HTMLInputElement | HTMLSelectElement} element\n           * @param {Partial<Options>} userConfig\n           */\n\n        }]);\n\n        function Choices(element, userConfig) {\n          var _this = this;\n\n          if (element === void 0) {\n            element = '[data-choice]';\n          }\n\n          if (userConfig === void 0) {\n            userConfig = {};\n          }\n          /** @type {Partial<Options>} */\n\n\n          this.config = cjs_default.a.all([DEFAULT_CONFIG, Choices.defaults.options, userConfig], // When merging array configs, replace with a copy of the userConfig array,\n          // instead of concatenating with the default array\n          {\n            arrayMerge: function arrayMerge(_, sourceArray) {\n              return [].concat(sourceArray);\n            }\n          });\n          var invalidConfigOptions = diff(this.config, DEFAULT_CONFIG);\n\n          if (invalidConfigOptions.length) {\n            console.warn('Unknown config option(s) passed', invalidConfigOptions.join(', '));\n          }\n\n          var passedElement = typeof element === 'string' ? document.querySelector(element) : element;\n\n          if (!(passedElement instanceof HTMLInputElement || passedElement instanceof HTMLSelectElement)) {\n            throw TypeError('Expected one of the following types text|select-one|select-multiple');\n          }\n\n          this._isTextElement = passedElement.type === TEXT_TYPE;\n          this._isSelectOneElement = passedElement.type === SELECT_ONE_TYPE;\n          this._isSelectMultipleElement = passedElement.type === SELECT_MULTIPLE_TYPE;\n          this._isSelectElement = this._isSelectOneElement || this._isSelectMultipleElement;\n          this.config.searchEnabled = this._isSelectMultipleElement || this.config.searchEnabled;\n\n          if (!['auto', 'always'].includes(this.config.renderSelectedChoices)) {\n            this.config.renderSelectedChoices = 'auto';\n          }\n\n          if (userConfig.addItemFilter && typeof userConfig.addItemFilter !== 'function') {\n            var re = userConfig.addItemFilter instanceof RegExp ? userConfig.addItemFilter : new RegExp(userConfig.addItemFilter);\n            this.config.addItemFilter = re.test.bind(re);\n          }\n\n          if (this._isTextElement) {\n            this.passedElement = new WrappedInput({\n              element: passedElement,\n              classNames: this.config.classNames,\n              delimiter: this.config.delimiter\n            });\n          } else {\n            this.passedElement = new WrappedSelect({\n              element: passedElement,\n              classNames: this.config.classNames,\n              template: function template(data) {\n                return _this._templates.option(data);\n              }\n            });\n          }\n\n          this.initialised = false;\n          this._store = new store_Store();\n          this._initialState = {};\n          this._currentState = {};\n          this._prevState = {};\n          this._currentValue = '';\n          this._canSearch = this.config.searchEnabled;\n          this._isScrollingOnIe = false;\n          this._highlightPosition = 0;\n          this._wasTap = true;\n          this._placeholderValue = this._generatePlaceholderValue();\n          this._baseId = generateId(this.passedElement.element, 'choices-');\n          /**\n           * setting direction in cases where it's explicitly set on passedElement\n           * or when calculated direction is different from the document\n           * @type {HTMLElement['dir']}\n           */\n\n          this._direction = this.passedElement.dir;\n\n          if (!this._direction) {\n            var _window$getComputedSt = window.getComputedStyle(this.passedElement.element),\n                elementDirection = _window$getComputedSt.direction;\n\n            var _window$getComputedSt2 = window.getComputedStyle(document.documentElement),\n                documentDirection = _window$getComputedSt2.direction;\n\n            if (elementDirection !== documentDirection) {\n              this._direction = elementDirection;\n            }\n          }\n\n          this._idNames = {\n            itemChoice: 'item-choice'\n          }; // Assign preset groups from passed element\n\n          this._presetGroups = this.passedElement.optionGroups; // Assign preset options from passed element\n\n          this._presetOptions = this.passedElement.options; // Assign preset choices from passed object\n\n          this._presetChoices = this.config.choices; // Assign preset items from passed object first\n\n          this._presetItems = this.config.items; // Add any values passed from attribute\n\n          if (this.passedElement.value) {\n            this._presetItems = this._presetItems.concat(this.passedElement.value.split(this.config.delimiter));\n          } // Create array of choices from option elements\n\n\n          if (this.passedElement.options) {\n            this.passedElement.options.forEach(function (o) {\n              _this._presetChoices.push({\n                value: o.value,\n                label: o.innerHTML,\n                selected: o.selected,\n                disabled: o.disabled || o.parentNode.disabled,\n                placeholder: o.value === '' || o.hasAttribute('placeholder'),\n                customProperties: o.getAttribute('data-custom-properties')\n              });\n            });\n          }\n\n          this._render = this._render.bind(this);\n          this._onFocus = this._onFocus.bind(this);\n          this._onBlur = this._onBlur.bind(this);\n          this._onKeyUp = this._onKeyUp.bind(this);\n          this._onKeyDown = this._onKeyDown.bind(this);\n          this._onClick = this._onClick.bind(this);\n          this._onTouchMove = this._onTouchMove.bind(this);\n          this._onTouchEnd = this._onTouchEnd.bind(this);\n          this._onMouseDown = this._onMouseDown.bind(this);\n          this._onMouseOver = this._onMouseOver.bind(this);\n          this._onFormReset = this._onFormReset.bind(this);\n          this._onAKey = this._onAKey.bind(this);\n          this._onEnterKey = this._onEnterKey.bind(this);\n          this._onEscapeKey = this._onEscapeKey.bind(this);\n          this._onDirectionKey = this._onDirectionKey.bind(this);\n          this._onDeleteKey = this._onDeleteKey.bind(this); // If element has already been initialised with Choices, fail silently\n\n          if (this.passedElement.isActive) {\n            if (!this.config.silent) {\n              console.warn('Trying to initialise Choices on element already initialised');\n            }\n\n            this.initialised = true;\n            return;\n          } // Let's go\n\n\n          this.init();\n        }\n\n        var _proto = Choices.prototype;\n\n        _proto.init = function init() {\n          if (this.initialised) {\n            return;\n          }\n\n          this._createTemplates();\n\n          this._createElements();\n\n          this._createStructure(); // Set initial state (We need to clone the state because some reducers\n          // modify the inner objects properties in the state) 🤢\n\n\n          this._initialState = cloneObject(this._store.state);\n\n          this._store.subscribe(this._render);\n\n          this._render();\n\n          this._addEventListeners();\n\n          var shouldDisable = !this.config.addItems || this.passedElement.element.hasAttribute('disabled');\n\n          if (shouldDisable) {\n            this.disable();\n          }\n\n          this.initialised = true;\n          var callbackOnInit = this.config.callbackOnInit; // Run callback if it is a function\n\n          if (callbackOnInit && typeof callbackOnInit === 'function') {\n            callbackOnInit.call(this);\n          }\n        };\n\n        _proto.destroy = function destroy() {\n          if (!this.initialised) {\n            return;\n          }\n\n          this._removeEventListeners();\n\n          this.passedElement.reveal();\n          this.containerOuter.unwrap(this.passedElement.element);\n          this.clearStore();\n\n          if (this._isSelectElement) {\n            this.passedElement.options = this._presetOptions;\n          }\n\n          this._templates = null;\n          this.initialised = false;\n        };\n\n        _proto.enable = function enable() {\n          if (this.passedElement.isDisabled) {\n            this.passedElement.enable();\n          }\n\n          if (this.containerOuter.isDisabled) {\n            this._addEventListeners();\n\n            this.input.enable();\n            this.containerOuter.enable();\n          }\n\n          return this;\n        };\n\n        _proto.disable = function disable() {\n          if (!this.passedElement.isDisabled) {\n            this.passedElement.disable();\n          }\n\n          if (!this.containerOuter.isDisabled) {\n            this._removeEventListeners();\n\n            this.input.disable();\n            this.containerOuter.disable();\n          }\n\n          return this;\n        };\n\n        _proto.highlightItem = function highlightItem(item, runEvent) {\n          if (runEvent === void 0) {\n            runEvent = true;\n          }\n\n          if (!item) {\n            return this;\n          }\n\n          var id = item.id,\n              _item$groupId = item.groupId,\n              groupId = _item$groupId === void 0 ? -1 : _item$groupId,\n              _item$value = item.value,\n              value = _item$value === void 0 ? '' : _item$value,\n              _item$label = item.label,\n              label = _item$label === void 0 ? '' : _item$label;\n          var group = groupId >= 0 ? this._store.getGroupById(groupId) : null;\n\n          this._store.dispatch(items_highlightItem(id, true));\n\n          if (runEvent) {\n            this.passedElement.triggerEvent(EVENTS.highlightItem, {\n              id: id,\n              value: value,\n              label: label,\n              groupValue: group && group.value ? group.value : null\n            });\n          }\n\n          return this;\n        };\n\n        _proto.unhighlightItem = function unhighlightItem(item) {\n          if (!item) {\n            return this;\n          }\n\n          var id = item.id,\n              _item$groupId2 = item.groupId,\n              groupId = _item$groupId2 === void 0 ? -1 : _item$groupId2,\n              _item$value2 = item.value,\n              value = _item$value2 === void 0 ? '' : _item$value2,\n              _item$label2 = item.label,\n              label = _item$label2 === void 0 ? '' : _item$label2;\n          var group = groupId >= 0 ? this._store.getGroupById(groupId) : null;\n\n          this._store.dispatch(items_highlightItem(id, false));\n\n          this.passedElement.triggerEvent(EVENTS.highlightItem, {\n            id: id,\n            value: value,\n            label: label,\n            groupValue: group && group.value ? group.value : null\n          });\n          return this;\n        };\n\n        _proto.highlightAll = function highlightAll() {\n          var _this2 = this;\n\n          this._store.items.forEach(function (item) {\n            return _this2.highlightItem(item);\n          });\n\n          return this;\n        };\n\n        _proto.unhighlightAll = function unhighlightAll() {\n          var _this3 = this;\n\n          this._store.items.forEach(function (item) {\n            return _this3.unhighlightItem(item);\n          });\n\n          return this;\n        };\n\n        _proto.removeActiveItemsByValue = function removeActiveItemsByValue(value) {\n          var _this4 = this;\n\n          this._store.activeItems.filter(function (item) {\n            return item.value === value;\n          }).forEach(function (item) {\n            return _this4._removeItem(item);\n          });\n\n          return this;\n        };\n\n        _proto.removeActiveItems = function removeActiveItems(excludedId) {\n          var _this5 = this;\n\n          this._store.activeItems.filter(function (_ref) {\n            var id = _ref.id;\n            return id !== excludedId;\n          }).forEach(function (item) {\n            return _this5._removeItem(item);\n          });\n\n          return this;\n        };\n\n        _proto.removeHighlightedItems = function removeHighlightedItems(runEvent) {\n          var _this6 = this;\n\n          if (runEvent === void 0) {\n            runEvent = false;\n          }\n\n          this._store.highlightedActiveItems.forEach(function (item) {\n            _this6._removeItem(item); // If this action was performed by the user\n            // trigger the event\n\n\n            if (runEvent) {\n              _this6._triggerChange(item.value);\n            }\n          });\n\n          return this;\n        };\n\n        _proto.showDropdown = function showDropdown(preventInputFocus) {\n          var _this7 = this;\n\n          if (this.dropdown.isActive) {\n            return this;\n          }\n\n          requestAnimationFrame(function () {\n            _this7.dropdown.show();\n\n            _this7.containerOuter.open(_this7.dropdown.distanceFromTopWindow);\n\n            if (!preventInputFocus && _this7._canSearch) {\n              _this7.input.focus();\n            }\n\n            _this7.passedElement.triggerEvent(EVENTS.showDropdown, {});\n          });\n          return this;\n        };\n\n        _proto.hideDropdown = function hideDropdown(preventInputBlur) {\n          var _this8 = this;\n\n          if (!this.dropdown.isActive) {\n            return this;\n          }\n\n          requestAnimationFrame(function () {\n            _this8.dropdown.hide();\n\n            _this8.containerOuter.close();\n\n            if (!preventInputBlur && _this8._canSearch) {\n              _this8.input.removeActiveDescendant();\n\n              _this8.input.blur();\n            }\n\n            _this8.passedElement.triggerEvent(EVENTS.hideDropdown, {});\n          });\n          return this;\n        };\n\n        _proto.getValue = function getValue(valueOnly) {\n          if (valueOnly === void 0) {\n            valueOnly = false;\n          }\n\n          var values = this._store.activeItems.reduce(function (selectedItems, item) {\n            var itemValue = valueOnly ? item.value : item;\n            selectedItems.push(itemValue);\n            return selectedItems;\n          }, []);\n\n          return this._isSelectOneElement ? values[0] : values;\n        }\n        /**\n         * @param {string[] | import('../../types/index').Choices.Item[]} items\n         */\n        ;\n\n        _proto.setValue = function setValue(items) {\n          var _this9 = this;\n\n          if (!this.initialised) {\n            return this;\n          }\n\n          items.forEach(function (value) {\n            return _this9._setChoiceOrItem(value);\n          });\n          return this;\n        };\n\n        _proto.setChoiceByValue = function setChoiceByValue(value) {\n          var _this10 = this;\n\n          if (!this.initialised || this._isTextElement) {\n            return this;\n          } // If only one value has been passed, convert to array\n\n\n          var choiceValue = Array.isArray(value) ? value : [value]; // Loop through each value and\n\n          choiceValue.forEach(function (val) {\n            return _this10._findAndSelectChoiceByValue(val);\n          });\n          return this;\n        }\n        /**\n         * Set choices of select input via an array of objects (or function that returns array of object or promise of it),\n         * a value field name and a label field name.\n         * This behaves the same as passing items via the choices option but can be called after initialising Choices.\n         * This can also be used to add groups of choices (see example 2); Optionally pass a true `replaceChoices` value to remove any existing choices.\n         * Optionally pass a `customProperties` object to add additional data to your choices (useful when searching/filtering etc).\n         *\n         * **Input types affected:** select-one, select-multiple\n         *\n         * @template {Choice[] | ((instance: Choices) => object[] | Promise<object[]>)} T\n         * @param {T} [choicesArrayOrFetcher]\n         * @param {string} [value = 'value'] - name of `value` field\n         * @param {string} [label = 'label'] - name of 'label' field\n         * @param {boolean} [replaceChoices = false] - whether to replace of add choices\n         * @returns {this | Promise<this>}\n         *\n         * @example\n         * ```js\n         * const example = new Choices(element);\n         *\n         * example.setChoices([\n         *   {value: 'One', label: 'Label One', disabled: true},\n         *   {value: 'Two', label: 'Label Two', selected: true},\n         *   {value: 'Three', label: 'Label Three'},\n         * ], 'value', 'label', false);\n         * ```\n         *\n         * @example\n         * ```js\n         * const example = new Choices(element);\n         *\n         * example.setChoices(async () => {\n         *   try {\n         *      const items = await fetch('/items');\n         *      return items.json()\n         *   } catch(err) {\n         *      console.error(err)\n         *   }\n         * });\n         * ```\n         *\n         * @example\n         * ```js\n         * const example = new Choices(element);\n         *\n         * example.setChoices([{\n         *   label: 'Group one',\n         *   id: 1,\n         *   disabled: false,\n         *   choices: [\n         *     {value: 'Child One', label: 'Child One', selected: true},\n         *     {value: 'Child Two', label: 'Child Two',  disabled: true},\n         *     {value: 'Child Three', label: 'Child Three'},\n         *   ]\n         * },\n         * {\n         *   label: 'Group two',\n         *   id: 2,\n         *   disabled: false,\n         *   choices: [\n         *     {value: 'Child Four', label: 'Child Four', disabled: true},\n         *     {value: 'Child Five', label: 'Child Five'},\n         *     {value: 'Child Six', label: 'Child Six', customProperties: {\n         *       description: 'Custom description about child six',\n         *       random: 'Another random custom property'\n         *     }},\n         *   ]\n         * }], 'value', 'label', false);\n         * ```\n         */\n        ;\n\n        _proto.setChoices = function setChoices(choicesArrayOrFetcher, value, label, replaceChoices) {\n          var _this11 = this;\n\n          if (choicesArrayOrFetcher === void 0) {\n            choicesArrayOrFetcher = [];\n          }\n\n          if (value === void 0) {\n            value = 'value';\n          }\n\n          if (label === void 0) {\n            label = 'label';\n          }\n\n          if (replaceChoices === void 0) {\n            replaceChoices = false;\n          }\n\n          if (!this.initialised) {\n            throw new ReferenceError(\"setChoices was called on a non-initialized instance of Choices\");\n          }\n\n          if (!this._isSelectElement) {\n            throw new TypeError(\"setChoices can't be used with INPUT based Choices\");\n          }\n\n          if (typeof value !== 'string' || !value) {\n            throw new TypeError(\"value parameter must be a name of 'value' field in passed objects\");\n          } // Clear choices if needed\n\n\n          if (replaceChoices) {\n            this.clearChoices();\n          }\n\n          if (typeof choicesArrayOrFetcher === 'function') {\n            // it's a choices fetcher function\n            var fetcher = choicesArrayOrFetcher(this);\n\n            if (typeof Promise === 'function' && fetcher instanceof Promise) {\n              // that's a promise\n              // eslint-disable-next-line compat/compat\n              return new Promise(function (resolve) {\n                return requestAnimationFrame(resolve);\n              }).then(function () {\n                return _this11._handleLoadingState(true);\n              }).then(function () {\n                return fetcher;\n              }).then(function (data) {\n                return _this11.setChoices(data, value, label, replaceChoices);\n              })[\"catch\"](function (err) {\n                if (!_this11.config.silent) {\n                  console.error(err);\n                }\n              }).then(function () {\n                return _this11._handleLoadingState(false);\n              }).then(function () {\n                return _this11;\n              });\n            } // function returned something else than promise, let's check if it's an array of choices\n\n\n            if (!Array.isArray(fetcher)) {\n              throw new TypeError(\".setChoices first argument function must return either array of choices or Promise, got: \" + _typeof(fetcher));\n            } // recursion with results, it's sync and choices were cleared already\n\n\n            return this.setChoices(fetcher, value, label, false);\n          }\n\n          if (!Array.isArray(choicesArrayOrFetcher)) {\n            throw new TypeError(\".setChoices must be called either with array of choices with a function resulting into Promise of array of choices\");\n          }\n\n          this.containerOuter.removeLoadingState();\n\n          this._startLoading();\n\n          choicesArrayOrFetcher.forEach(function (groupOrChoice) {\n            if (groupOrChoice.choices) {\n              _this11._addGroup({\n                id: parseInt(groupOrChoice.id, 10) || null,\n                group: groupOrChoice,\n                valueKey: value,\n                labelKey: label\n              });\n            } else {\n              _this11._addChoice({\n                value: groupOrChoice[value],\n                label: groupOrChoice[label],\n                isSelected: groupOrChoice.selected,\n                isDisabled: groupOrChoice.disabled,\n                customProperties: groupOrChoice.customProperties,\n                placeholder: groupOrChoice.placeholder\n              });\n            }\n          });\n\n          this._stopLoading();\n\n          return this;\n        };\n\n        _proto.clearChoices = function clearChoices() {\n          this._store.dispatch(choices_clearChoices());\n\n          return this;\n        };\n\n        _proto.clearStore = function clearStore() {\n          this._store.dispatch(clearAll());\n\n          return this;\n        };\n\n        _proto.clearInput = function clearInput() {\n          var shouldSetInputWidth = !this._isSelectOneElement;\n          this.input.clear(shouldSetInputWidth);\n\n          if (!this._isTextElement && this._canSearch) {\n            this._isSearching = false;\n\n            this._store.dispatch(choices_activateChoices(true));\n          }\n\n          return this;\n        };\n\n        _proto._render = function _render() {\n          if (this._store.isLoading()) {\n            return;\n          }\n\n          this._currentState = this._store.state;\n          var stateChanged = this._currentState.choices !== this._prevState.choices || this._currentState.groups !== this._prevState.groups || this._currentState.items !== this._prevState.items;\n          var shouldRenderChoices = this._isSelectElement;\n          var shouldRenderItems = this._currentState.items !== this._prevState.items;\n\n          if (!stateChanged) {\n            return;\n          }\n\n          if (shouldRenderChoices) {\n            this._renderChoices();\n          }\n\n          if (shouldRenderItems) {\n            this._renderItems();\n          }\n\n          this._prevState = this._currentState;\n        };\n\n        _proto._renderChoices = function _renderChoices() {\n          var _this12 = this;\n\n          var _this$_store = this._store,\n              activeGroups = _this$_store.activeGroups,\n              activeChoices = _this$_store.activeChoices;\n          var choiceListFragment = document.createDocumentFragment();\n          this.choiceList.clear();\n\n          if (this.config.resetScrollPosition) {\n            requestAnimationFrame(function () {\n              return _this12.choiceList.scrollToTop();\n            });\n          } // If we have grouped options\n\n\n          if (activeGroups.length >= 1 && !this._isSearching) {\n            // If we have a placeholder choice along with groups\n            var activePlaceholders = activeChoices.filter(function (activeChoice) {\n              return activeChoice.placeholder === true && activeChoice.groupId === -1;\n            });\n\n            if (activePlaceholders.length >= 1) {\n              choiceListFragment = this._createChoicesFragment(activePlaceholders, choiceListFragment);\n            }\n\n            choiceListFragment = this._createGroupsFragment(activeGroups, activeChoices, choiceListFragment);\n          } else if (activeChoices.length >= 1) {\n            choiceListFragment = this._createChoicesFragment(activeChoices, choiceListFragment);\n          } // If we have choices to show\n\n\n          if (choiceListFragment.childNodes && choiceListFragment.childNodes.length > 0) {\n            var activeItems = this._store.activeItems;\n\n            var canAddItem = this._canAddItem(activeItems, this.input.value); // ...and we can select them\n\n\n            if (canAddItem.response) {\n              // ...append them and highlight the first choice\n              this.choiceList.append(choiceListFragment);\n\n              this._highlightChoice();\n            } else {\n              // ...otherwise show a notice\n              this.choiceList.append(this._getTemplate('notice', canAddItem.notice));\n            }\n          } else {\n            // Otherwise show a notice\n            var dropdownItem;\n            var notice;\n\n            if (this._isSearching) {\n              notice = typeof this.config.noResultsText === 'function' ? this.config.noResultsText() : this.config.noResultsText;\n              dropdownItem = this._getTemplate('notice', notice, 'no-results');\n            } else {\n              notice = typeof this.config.noChoicesText === 'function' ? this.config.noChoicesText() : this.config.noChoicesText;\n              dropdownItem = this._getTemplate('notice', notice, 'no-choices');\n            }\n\n            this.choiceList.append(dropdownItem);\n          }\n        };\n\n        _proto._renderItems = function _renderItems() {\n          var activeItems = this._store.activeItems || [];\n          this.itemList.clear(); // Create a fragment to store our list items\n          // (so we don't have to update the DOM for each item)\n\n          var itemListFragment = this._createItemsFragment(activeItems); // If we have items to add, append them\n\n\n          if (itemListFragment.childNodes) {\n            this.itemList.append(itemListFragment);\n          }\n        };\n\n        _proto._createGroupsFragment = function _createGroupsFragment(groups, choices, fragment) {\n          var _this13 = this;\n\n          if (fragment === void 0) {\n            fragment = document.createDocumentFragment();\n          }\n\n          var getGroupChoices = function getGroupChoices(group) {\n            return choices.filter(function (choice) {\n              if (_this13._isSelectOneElement) {\n                return choice.groupId === group.id;\n              }\n\n              return choice.groupId === group.id && (_this13.config.renderSelectedChoices === 'always' || !choice.selected);\n            });\n          }; // If sorting is enabled, filter groups\n\n\n          if (this.config.shouldSort) {\n            groups.sort(this.config.sorter);\n          }\n\n          groups.forEach(function (group) {\n            var groupChoices = getGroupChoices(group);\n\n            if (groupChoices.length >= 1) {\n              var dropdownGroup = _this13._getTemplate('choiceGroup', group);\n\n              fragment.appendChild(dropdownGroup);\n\n              _this13._createChoicesFragment(groupChoices, fragment, true);\n            }\n          });\n          return fragment;\n        };\n\n        _proto._createChoicesFragment = function _createChoicesFragment(choices, fragment, withinGroup) {\n          var _this14 = this;\n\n          if (fragment === void 0) {\n            fragment = document.createDocumentFragment();\n          }\n\n          if (withinGroup === void 0) {\n            withinGroup = false;\n          } // Create a fragment to store our list items (so we don't have to update the DOM for each item)\n\n\n          var _this$config = this.config,\n              renderSelectedChoices = _this$config.renderSelectedChoices,\n              searchResultLimit = _this$config.searchResultLimit,\n              renderChoiceLimit = _this$config.renderChoiceLimit;\n          var filter = this._isSearching ? sortByScore : this.config.sorter;\n\n          var appendChoice = function appendChoice(choice) {\n            var shouldRender = renderSelectedChoices === 'auto' ? _this14._isSelectOneElement || !choice.selected : true;\n\n            if (shouldRender) {\n              var dropdownItem = _this14._getTemplate('choice', choice, _this14.config.itemSelectText);\n\n              fragment.appendChild(dropdownItem);\n            }\n          };\n\n          var rendererableChoices = choices;\n\n          if (renderSelectedChoices === 'auto' && !this._isSelectOneElement) {\n            rendererableChoices = choices.filter(function (choice) {\n              return !choice.selected;\n            });\n          } // Split array into placeholders and \"normal\" choices\n\n\n          var _rendererableChoices$ = rendererableChoices.reduce(function (acc, choice) {\n            if (choice.placeholder) {\n              acc.placeholderChoices.push(choice);\n            } else {\n              acc.normalChoices.push(choice);\n            }\n\n            return acc;\n          }, {\n            placeholderChoices: [],\n            normalChoices: []\n          }),\n              placeholderChoices = _rendererableChoices$.placeholderChoices,\n              normalChoices = _rendererableChoices$.normalChoices; // If sorting is enabled or the user is searching, filter choices\n\n\n          if (this.config.shouldSort || this._isSearching) {\n            normalChoices.sort(filter);\n          }\n\n          var choiceLimit = rendererableChoices.length; // Prepend placeholeder\n\n          var sortedChoices = this._isSelectOneElement ? [].concat(placeholderChoices, normalChoices) : normalChoices;\n\n          if (this._isSearching) {\n            choiceLimit = searchResultLimit;\n          } else if (renderChoiceLimit && renderChoiceLimit > 0 && !withinGroup) {\n            choiceLimit = renderChoiceLimit;\n          } // Add each choice to dropdown within range\n\n\n          for (var i = 0; i < choiceLimit; i += 1) {\n            if (sortedChoices[i]) {\n              appendChoice(sortedChoices[i]);\n            }\n          }\n\n          return fragment;\n        };\n\n        _proto._createItemsFragment = function _createItemsFragment(items, fragment) {\n          var _this15 = this;\n\n          if (fragment === void 0) {\n            fragment = document.createDocumentFragment();\n          } // Create fragment to add elements to\n\n\n          var _this$config2 = this.config,\n              shouldSortItems = _this$config2.shouldSortItems,\n              sorter = _this$config2.sorter,\n              removeItemButton = _this$config2.removeItemButton; // If sorting is enabled, filter items\n\n          if (shouldSortItems && !this._isSelectOneElement) {\n            items.sort(sorter);\n          }\n\n          if (this._isTextElement) {\n            // Update the value of the hidden input\n            this.passedElement.value = items;\n          } else {\n            // Update the options of the hidden input\n            this.passedElement.options = items;\n          }\n\n          var addItemToFragment = function addItemToFragment(item) {\n            // Create new list element\n            var listItem = _this15._getTemplate('item', item, removeItemButton); // Append it to list\n\n\n            fragment.appendChild(listItem);\n          }; // Add each list item to list\n\n\n          items.forEach(addItemToFragment);\n          return fragment;\n        };\n\n        _proto._triggerChange = function _triggerChange(value) {\n          if (value === undefined || value === null) {\n            return;\n          }\n\n          this.passedElement.triggerEvent(EVENTS.change, {\n            value: value\n          });\n        };\n\n        _proto._selectPlaceholderChoice = function _selectPlaceholderChoice() {\n          var placeholderChoice = this._store.placeholderChoice;\n\n          if (placeholderChoice) {\n            this._addItem({\n              value: placeholderChoice.value,\n              label: placeholderChoice.label,\n              choiceId: placeholderChoice.id,\n              groupId: placeholderChoice.groupId,\n              placeholder: placeholderChoice.placeholder\n            });\n\n            this._triggerChange(placeholderChoice.value);\n          }\n        };\n\n        _proto._handleButtonAction = function _handleButtonAction(activeItems, element) {\n          if (!activeItems || !element || !this.config.removeItems || !this.config.removeItemButton) {\n            return;\n          }\n\n          var itemId = element.parentNode.getAttribute('data-id');\n          var itemToRemove = activeItems.find(function (item) {\n            return item.id === parseInt(itemId, 10);\n          }); // Remove item associated with button\n\n          this._removeItem(itemToRemove);\n\n          this._triggerChange(itemToRemove.value);\n\n          if (this._isSelectOneElement) {\n            this._selectPlaceholderChoice();\n          }\n        };\n\n        _proto._handleItemAction = function _handleItemAction(activeItems, element, hasShiftKey) {\n          var _this16 = this;\n\n          if (hasShiftKey === void 0) {\n            hasShiftKey = false;\n          }\n\n          if (!activeItems || !element || !this.config.removeItems || this._isSelectOneElement) {\n            return;\n          }\n\n          var passedId = element.getAttribute('data-id'); // We only want to select one item with a click\n          // so we deselect any items that aren't the target\n          // unless shift is being pressed\n\n          activeItems.forEach(function (item) {\n            if (item.id === parseInt(passedId, 10) && !item.highlighted) {\n              _this16.highlightItem(item);\n            } else if (!hasShiftKey && item.highlighted) {\n              _this16.unhighlightItem(item);\n            }\n          }); // Focus input as without focus, a user cannot do anything with a\n          // highlighted item\n\n          this.input.focus();\n        };\n\n        _proto._handleChoiceAction = function _handleChoiceAction(activeItems, element) {\n          if (!activeItems || !element) {\n            return;\n          } // If we are clicking on an option\n\n\n          var id = element.dataset.id;\n\n          var choice = this._store.getChoiceById(id);\n\n          if (!choice) {\n            return;\n          }\n\n          var passedKeyCode = activeItems[0] && activeItems[0].keyCode ? activeItems[0].keyCode : null;\n          var hasActiveDropdown = this.dropdown.isActive; // Update choice keyCode\n\n          choice.keyCode = passedKeyCode;\n          this.passedElement.triggerEvent(EVENTS.choice, {\n            choice: choice\n          });\n\n          if (!choice.selected && !choice.disabled) {\n            var canAddItem = this._canAddItem(activeItems, choice.value);\n\n            if (canAddItem.response) {\n              this._addItem({\n                value: choice.value,\n                label: choice.label,\n                choiceId: choice.id,\n                groupId: choice.groupId,\n                customProperties: choice.customProperties,\n                placeholder: choice.placeholder,\n                keyCode: choice.keyCode\n              });\n\n              this._triggerChange(choice.value);\n            }\n          }\n\n          this.clearInput(); // We want to close the dropdown if we are dealing with a single select box\n\n          if (hasActiveDropdown && this._isSelectOneElement) {\n            this.hideDropdown(true);\n            this.containerOuter.focus();\n          }\n        };\n\n        _proto._handleBackspace = function _handleBackspace(activeItems) {\n          if (!this.config.removeItems || !activeItems) {\n            return;\n          }\n\n          var lastItem = activeItems[activeItems.length - 1];\n          var hasHighlightedItems = activeItems.some(function (item) {\n            return item.highlighted;\n          }); // If editing the last item is allowed and there are not other selected items,\n          // we can edit the item value. Otherwise if we can remove items, remove all selected items\n\n          if (this.config.editItems && !hasHighlightedItems && lastItem) {\n            this.input.value = lastItem.value;\n            this.input.setWidth();\n\n            this._removeItem(lastItem);\n\n            this._triggerChange(lastItem.value);\n          } else {\n            if (!hasHighlightedItems) {\n              // Highlight last item if none already highlighted\n              this.highlightItem(lastItem, false);\n            }\n\n            this.removeHighlightedItems(true);\n          }\n        };\n\n        _proto._startLoading = function _startLoading() {\n          this._store.dispatch(setIsLoading(true));\n        };\n\n        _proto._stopLoading = function _stopLoading() {\n          this._store.dispatch(setIsLoading(false));\n        };\n\n        _proto._handleLoadingState = function _handleLoadingState(setLoading) {\n          if (setLoading === void 0) {\n            setLoading = true;\n          }\n\n          var placeholderItem = this.itemList.getChild(\".\" + this.config.classNames.placeholder);\n\n          if (setLoading) {\n            this.disable();\n            this.containerOuter.addLoadingState();\n\n            if (this._isSelectOneElement) {\n              if (!placeholderItem) {\n                placeholderItem = this._getTemplate('placeholder', this.config.loadingText);\n                this.itemList.append(placeholderItem);\n              } else {\n                placeholderItem.innerHTML = this.config.loadingText;\n              }\n            } else {\n              this.input.placeholder = this.config.loadingText;\n            }\n          } else {\n            this.enable();\n            this.containerOuter.removeLoadingState();\n\n            if (this._isSelectOneElement) {\n              placeholderItem.innerHTML = this._placeholderValue || '';\n            } else {\n              this.input.placeholder = this._placeholderValue || '';\n            }\n          }\n        };\n\n        _proto._handleSearch = function _handleSearch(value) {\n          if (!value || !this.input.isFocussed) {\n            return;\n          }\n\n          var choices = this._store.choices;\n          var _this$config3 = this.config,\n              searchFloor = _this$config3.searchFloor,\n              searchChoices = _this$config3.searchChoices;\n          var hasUnactiveChoices = choices.some(function (option) {\n            return !option.active;\n          }); // Check that we have a value to search and the input was an alphanumeric character\n\n          if (value && value.length >= searchFloor) {\n            var resultCount = searchChoices ? this._searchChoices(value) : 0; // Trigger search event\n\n            this.passedElement.triggerEvent(EVENTS.search, {\n              value: value,\n              resultCount: resultCount\n            });\n          } else if (hasUnactiveChoices) {\n            // Otherwise reset choices to active\n            this._isSearching = false;\n\n            this._store.dispatch(choices_activateChoices(true));\n          }\n        };\n\n        _proto._canAddItem = function _canAddItem(activeItems, value) {\n          var canAddItem = true;\n          var notice = typeof this.config.addItemText === 'function' ? this.config.addItemText(value) : this.config.addItemText;\n\n          if (!this._isSelectOneElement) {\n            var isDuplicateValue = existsInArray(activeItems, value);\n\n            if (this.config.maxItemCount > 0 && this.config.maxItemCount <= activeItems.length) {\n              // If there is a max entry limit and we have reached that limit\n              // don't update\n              canAddItem = false;\n              notice = typeof this.config.maxItemText === 'function' ? this.config.maxItemText(this.config.maxItemCount) : this.config.maxItemText;\n            }\n\n            if (!this.config.duplicateItemsAllowed && isDuplicateValue && canAddItem) {\n              canAddItem = false;\n              notice = typeof this.config.uniqueItemText === 'function' ? this.config.uniqueItemText(value) : this.config.uniqueItemText;\n            }\n\n            if (this._isTextElement && this.config.addItems && canAddItem && typeof this.config.addItemFilter === 'function' && !this.config.addItemFilter(value)) {\n              canAddItem = false;\n              notice = typeof this.config.customAddItemText === 'function' ? this.config.customAddItemText(value) : this.config.customAddItemText;\n            }\n          }\n\n          return {\n            response: canAddItem,\n            notice: notice\n          };\n        };\n\n        _proto._searchChoices = function _searchChoices(value) {\n          var newValue = typeof value === 'string' ? value.trim() : value;\n          var currentValue = typeof this._currentValue === 'string' ? this._currentValue.trim() : this._currentValue;\n\n          if (newValue.length < 1 && newValue === currentValue + \" \") {\n            return 0;\n          } // If new value matches the desired length and is not the same as the current value with a space\n\n\n          var haystack = this._store.searchableChoices;\n          var needle = newValue;\n          var keys = [].concat(this.config.searchFields);\n          var options = Object.assign(this.config.fuseOptions, {\n            keys: keys\n          });\n          var fuse = new fuse_default.a(haystack, options);\n          var results = fuse.search(needle);\n          this._currentValue = newValue;\n          this._highlightPosition = 0;\n          this._isSearching = true;\n\n          this._store.dispatch(choices_filterChoices(results));\n\n          return results.length;\n        };\n\n        _proto._addEventListeners = function _addEventListeners() {\n          var _document = document,\n              documentElement = _document.documentElement; // capture events - can cancel event processing or propagation\n\n          documentElement.addEventListener('touchend', this._onTouchEnd, true);\n          this.containerOuter.element.addEventListener('keydown', this._onKeyDown, true);\n          this.containerOuter.element.addEventListener('mousedown', this._onMouseDown, true); // passive events - doesn't call `preventDefault` or `stopPropagation`\n\n          documentElement.addEventListener('click', this._onClick, {\n            passive: true\n          });\n          documentElement.addEventListener('touchmove', this._onTouchMove, {\n            passive: true\n          });\n          this.dropdown.element.addEventListener('mouseover', this._onMouseOver, {\n            passive: true\n          });\n\n          if (this._isSelectOneElement) {\n            this.containerOuter.element.addEventListener('focus', this._onFocus, {\n              passive: true\n            });\n            this.containerOuter.element.addEventListener('blur', this._onBlur, {\n              passive: true\n            });\n          }\n\n          this.input.element.addEventListener('keyup', this._onKeyUp, {\n            passive: true\n          });\n          this.input.element.addEventListener('focus', this._onFocus, {\n            passive: true\n          });\n          this.input.element.addEventListener('blur', this._onBlur, {\n            passive: true\n          });\n\n          if (this.input.element.form) {\n            this.input.element.form.addEventListener('reset', this._onFormReset, {\n              passive: true\n            });\n          }\n\n          this.input.addEventListeners();\n        };\n\n        _proto._removeEventListeners = function _removeEventListeners() {\n          var _document2 = document,\n              documentElement = _document2.documentElement;\n          documentElement.removeEventListener('touchend', this._onTouchEnd, true);\n          this.containerOuter.element.removeEventListener('keydown', this._onKeyDown, true);\n          this.containerOuter.element.removeEventListener('mousedown', this._onMouseDown, true);\n          documentElement.removeEventListener('click', this._onClick);\n          documentElement.removeEventListener('touchmove', this._onTouchMove);\n          this.dropdown.element.removeEventListener('mouseover', this._onMouseOver);\n\n          if (this._isSelectOneElement) {\n            this.containerOuter.element.removeEventListener('focus', this._onFocus);\n            this.containerOuter.element.removeEventListener('blur', this._onBlur);\n          }\n\n          this.input.element.removeEventListener('keyup', this._onKeyUp);\n          this.input.element.removeEventListener('focus', this._onFocus);\n          this.input.element.removeEventListener('blur', this._onBlur);\n\n          if (this.input.element.form) {\n            this.input.element.form.removeEventListener('reset', this._onFormReset);\n          }\n\n          this.input.removeEventListeners();\n        }\n        /**\n         * @param {KeyboardEvent} event\n         */\n        ;\n\n        _proto._onKeyDown = function _onKeyDown(event) {\n          var _keyDownActions;\n\n          var target = event.target,\n              keyCode = event.keyCode,\n              ctrlKey = event.ctrlKey,\n              metaKey = event.metaKey;\n          var activeItems = this._store.activeItems;\n          var hasFocusedInput = this.input.isFocussed;\n          var hasActiveDropdown = this.dropdown.isActive;\n          var hasItems = this.itemList.hasChildren();\n          var keyString = String.fromCharCode(keyCode);\n          var BACK_KEY = KEY_CODES.BACK_KEY,\n              DELETE_KEY = KEY_CODES.DELETE_KEY,\n              ENTER_KEY = KEY_CODES.ENTER_KEY,\n              A_KEY = KEY_CODES.A_KEY,\n              ESC_KEY = KEY_CODES.ESC_KEY,\n              UP_KEY = KEY_CODES.UP_KEY,\n              DOWN_KEY = KEY_CODES.DOWN_KEY,\n              PAGE_UP_KEY = KEY_CODES.PAGE_UP_KEY,\n              PAGE_DOWN_KEY = KEY_CODES.PAGE_DOWN_KEY;\n          var hasCtrlDownKeyPressed = ctrlKey || metaKey; // If a user is typing and the dropdown is not active\n\n          if (!this._isTextElement && /[a-zA-Z0-9-_ ]/.test(keyString)) {\n            this.showDropdown();\n          } // Map keys to key actions\n\n\n          var keyDownActions = (_keyDownActions = {}, _keyDownActions[A_KEY] = this._onAKey, _keyDownActions[ENTER_KEY] = this._onEnterKey, _keyDownActions[ESC_KEY] = this._onEscapeKey, _keyDownActions[UP_KEY] = this._onDirectionKey, _keyDownActions[PAGE_UP_KEY] = this._onDirectionKey, _keyDownActions[DOWN_KEY] = this._onDirectionKey, _keyDownActions[PAGE_DOWN_KEY] = this._onDirectionKey, _keyDownActions[DELETE_KEY] = this._onDeleteKey, _keyDownActions[BACK_KEY] = this._onDeleteKey, _keyDownActions); // If keycode has a function, run it\n\n          if (keyDownActions[keyCode]) {\n            keyDownActions[keyCode]({\n              event: event,\n              target: target,\n              keyCode: keyCode,\n              metaKey: metaKey,\n              activeItems: activeItems,\n              hasFocusedInput: hasFocusedInput,\n              hasActiveDropdown: hasActiveDropdown,\n              hasItems: hasItems,\n              hasCtrlDownKeyPressed: hasCtrlDownKeyPressed\n            });\n          }\n        };\n\n        _proto._onKeyUp = function _onKeyUp(_ref2) {\n          var target = _ref2.target,\n              keyCode = _ref2.keyCode;\n          var value = this.input.value;\n          var activeItems = this._store.activeItems;\n\n          var canAddItem = this._canAddItem(activeItems, value);\n\n          var backKey = KEY_CODES.BACK_KEY,\n              deleteKey = KEY_CODES.DELETE_KEY; // We are typing into a text input and have a value, we want to show a dropdown\n          // notice. Otherwise hide the dropdown\n\n          if (this._isTextElement) {\n            var canShowDropdownNotice = canAddItem.notice && value;\n\n            if (canShowDropdownNotice) {\n              var dropdownItem = this._getTemplate('notice', canAddItem.notice);\n\n              this.dropdown.element.innerHTML = dropdownItem.outerHTML;\n              this.showDropdown(true);\n            } else {\n              this.hideDropdown(true);\n            }\n          } else {\n            var userHasRemovedValue = (keyCode === backKey || keyCode === deleteKey) && !target.value;\n            var canReactivateChoices = !this._isTextElement && this._isSearching;\n            var canSearch = this._canSearch && canAddItem.response;\n\n            if (userHasRemovedValue && canReactivateChoices) {\n              this._isSearching = false;\n\n              this._store.dispatch(choices_activateChoices(true));\n            } else if (canSearch) {\n              this._handleSearch(this.input.value);\n            }\n          }\n\n          this._canSearch = this.config.searchEnabled;\n        };\n\n        _proto._onAKey = function _onAKey(_ref3) {\n          var hasItems = _ref3.hasItems,\n              hasCtrlDownKeyPressed = _ref3.hasCtrlDownKeyPressed; // If CTRL + A or CMD + A have been pressed and there are items to select\n\n          if (hasCtrlDownKeyPressed && hasItems) {\n            this._canSearch = false;\n            var shouldHightlightAll = this.config.removeItems && !this.input.value && this.input.element === document.activeElement;\n\n            if (shouldHightlightAll) {\n              this.highlightAll();\n            }\n          }\n        };\n\n        _proto._onEnterKey = function _onEnterKey(_ref4) {\n          var event = _ref4.event,\n              target = _ref4.target,\n              activeItems = _ref4.activeItems,\n              hasActiveDropdown = _ref4.hasActiveDropdown;\n          var enterKey = KEY_CODES.ENTER_KEY;\n          var targetWasButton = target.hasAttribute('data-button');\n\n          if (this._isTextElement && target.value) {\n            var value = this.input.value;\n\n            var canAddItem = this._canAddItem(activeItems, value);\n\n            if (canAddItem.response) {\n              this.hideDropdown(true);\n\n              this._addItem({\n                value: value\n              });\n\n              this._triggerChange(value);\n\n              this.clearInput();\n            }\n          }\n\n          if (targetWasButton) {\n            this._handleButtonAction(activeItems, target);\n\n            event.preventDefault();\n          }\n\n          if (hasActiveDropdown) {\n            var highlightedChoice = this.dropdown.getChild(\".\" + this.config.classNames.highlightedState);\n\n            if (highlightedChoice) {\n              // add enter keyCode value\n              if (activeItems[0]) {\n                activeItems[0].keyCode = enterKey; // eslint-disable-line no-param-reassign\n              }\n\n              this._handleChoiceAction(activeItems, highlightedChoice);\n            }\n\n            event.preventDefault();\n          } else if (this._isSelectOneElement) {\n            this.showDropdown();\n            event.preventDefault();\n          }\n        };\n\n        _proto._onEscapeKey = function _onEscapeKey(_ref5) {\n          var hasActiveDropdown = _ref5.hasActiveDropdown;\n\n          if (hasActiveDropdown) {\n            this.hideDropdown(true);\n            this.containerOuter.focus();\n          }\n        };\n\n        _proto._onDirectionKey = function _onDirectionKey(_ref6) {\n          var event = _ref6.event,\n              hasActiveDropdown = _ref6.hasActiveDropdown,\n              keyCode = _ref6.keyCode,\n              metaKey = _ref6.metaKey;\n          var downKey = KEY_CODES.DOWN_KEY,\n              pageUpKey = KEY_CODES.PAGE_UP_KEY,\n              pageDownKey = KEY_CODES.PAGE_DOWN_KEY; // If up or down key is pressed, traverse through options\n\n          if (hasActiveDropdown || this._isSelectOneElement) {\n            this.showDropdown();\n            this._canSearch = false;\n            var directionInt = keyCode === downKey || keyCode === pageDownKey ? 1 : -1;\n            var skipKey = metaKey || keyCode === pageDownKey || keyCode === pageUpKey;\n            var selectableChoiceIdentifier = '[data-choice-selectable]';\n            var nextEl;\n\n            if (skipKey) {\n              if (directionInt > 0) {\n                nextEl = this.dropdown.element.querySelector(selectableChoiceIdentifier + \":last-of-type\");\n              } else {\n                nextEl = this.dropdown.element.querySelector(selectableChoiceIdentifier);\n              }\n            } else {\n              var currentEl = this.dropdown.element.querySelector(\".\" + this.config.classNames.highlightedState);\n\n              if (currentEl) {\n                nextEl = getAdjacentEl(currentEl, selectableChoiceIdentifier, directionInt);\n              } else {\n                nextEl = this.dropdown.element.querySelector(selectableChoiceIdentifier);\n              }\n            }\n\n            if (nextEl) {\n              // We prevent default to stop the cursor moving\n              // when pressing the arrow\n              if (!isScrolledIntoView(nextEl, this.choiceList.element, directionInt)) {\n                this.choiceList.scrollToChildElement(nextEl, directionInt);\n              }\n\n              this._highlightChoice(nextEl);\n            } // Prevent default to maintain cursor position whilst\n            // traversing dropdown options\n\n\n            event.preventDefault();\n          }\n        };\n\n        _proto._onDeleteKey = function _onDeleteKey(_ref7) {\n          var event = _ref7.event,\n              target = _ref7.target,\n              hasFocusedInput = _ref7.hasFocusedInput,\n              activeItems = _ref7.activeItems; // If backspace or delete key is pressed and the input has no value\n\n          if (hasFocusedInput && !target.value && !this._isSelectOneElement) {\n            this._handleBackspace(activeItems);\n\n            event.preventDefault();\n          }\n        };\n\n        _proto._onTouchMove = function _onTouchMove() {\n          if (this._wasTap) {\n            this._wasTap = false;\n          }\n        };\n\n        _proto._onTouchEnd = function _onTouchEnd(event) {\n          var _ref8 = event || event.touches[0],\n              target = _ref8.target;\n\n          var touchWasWithinContainer = this._wasTap && this.containerOuter.element.contains(target);\n\n          if (touchWasWithinContainer) {\n            var containerWasExactTarget = target === this.containerOuter.element || target === this.containerInner.element;\n\n            if (containerWasExactTarget) {\n              if (this._isTextElement) {\n                this.input.focus();\n              } else if (this._isSelectMultipleElement) {\n                this.showDropdown();\n              }\n            } // Prevents focus event firing\n\n\n            event.stopPropagation();\n          }\n\n          this._wasTap = true;\n        }\n        /**\n         * Handles mousedown event in capture mode for containetOuter.element\n         * @param {MouseEvent} event\n         */\n        ;\n\n        _proto._onMouseDown = function _onMouseDown(event) {\n          var target = event.target;\n\n          if (!(target instanceof HTMLElement)) {\n            return;\n          } // If we have our mouse down on the scrollbar and are on IE11...\n\n\n          if (IS_IE11 && this.choiceList.element.contains(target)) {\n            // check if click was on a scrollbar area\n            var firstChoice =\n            /** @type {HTMLElement} */\n            this.choiceList.element.firstElementChild;\n            var isOnScrollbar = this._direction === 'ltr' ? event.offsetX >= firstChoice.offsetWidth : event.offsetX < firstChoice.offsetLeft;\n            this._isScrollingOnIe = isOnScrollbar;\n          }\n\n          if (target === this.input.element) {\n            return;\n          }\n\n          var item = target.closest('[data-button],[data-item],[data-choice]');\n\n          if (item instanceof HTMLElement) {\n            var hasShiftKey = event.shiftKey;\n            var activeItems = this._store.activeItems;\n            var dataset = item.dataset;\n\n            if ('button' in dataset) {\n              this._handleButtonAction(activeItems, item);\n            } else if ('item' in dataset) {\n              this._handleItemAction(activeItems, item, hasShiftKey);\n            } else if ('choice' in dataset) {\n              this._handleChoiceAction(activeItems, item);\n            }\n          }\n\n          event.preventDefault();\n        }\n        /**\n         * Handles mouseover event over this.dropdown\n         * @param {MouseEvent} event\n         */\n        ;\n\n        _proto._onMouseOver = function _onMouseOver(_ref9) {\n          var target = _ref9.target;\n\n          if (target instanceof HTMLElement && 'choice' in target.dataset) {\n            this._highlightChoice(target);\n          }\n        };\n\n        _proto._onClick = function _onClick(_ref10) {\n          var target = _ref10.target;\n          var clickWasWithinContainer = this.containerOuter.element.contains(target);\n\n          if (clickWasWithinContainer) {\n            if (!this.dropdown.isActive && !this.containerOuter.isDisabled) {\n              if (this._isTextElement) {\n                if (document.activeElement !== this.input.element) {\n                  this.input.focus();\n                }\n              } else {\n                this.showDropdown();\n                this.containerOuter.focus();\n              }\n            } else if (this._isSelectOneElement && target !== this.input.element && !this.dropdown.element.contains(target)) {\n              this.hideDropdown();\n            }\n          } else {\n            var hasHighlightedItems = this._store.highlightedActiveItems.length > 0;\n\n            if (hasHighlightedItems) {\n              this.unhighlightAll();\n            }\n\n            this.containerOuter.removeFocusState();\n            this.hideDropdown(true);\n          }\n        };\n\n        _proto._onFocus = function _onFocus(_ref11) {\n          var _this17 = this,\n              _focusActions;\n\n          var target = _ref11.target;\n          var focusWasWithinContainer = this.containerOuter.element.contains(target);\n\n          if (!focusWasWithinContainer) {\n            return;\n          }\n\n          var focusActions = (_focusActions = {}, _focusActions[TEXT_TYPE] = function () {\n            if (target === _this17.input.element) {\n              _this17.containerOuter.addFocusState();\n            }\n          }, _focusActions[SELECT_ONE_TYPE] = function () {\n            _this17.containerOuter.addFocusState();\n\n            if (target === _this17.input.element) {\n              _this17.showDropdown(true);\n            }\n          }, _focusActions[SELECT_MULTIPLE_TYPE] = function () {\n            if (target === _this17.input.element) {\n              _this17.showDropdown(true); // If element is a select box, the focused element is the container and the dropdown\n              // isn't already open, focus and show dropdown\n\n\n              _this17.containerOuter.addFocusState();\n            }\n          }, _focusActions);\n          focusActions[this.passedElement.element.type]();\n        };\n\n        _proto._onBlur = function _onBlur(_ref12) {\n          var _this18 = this;\n\n          var target = _ref12.target;\n          var blurWasWithinContainer = this.containerOuter.element.contains(target);\n\n          if (blurWasWithinContainer && !this._isScrollingOnIe) {\n            var _blurActions;\n\n            var activeItems = this._store.activeItems;\n            var hasHighlightedItems = activeItems.some(function (item) {\n              return item.highlighted;\n            });\n            var blurActions = (_blurActions = {}, _blurActions[TEXT_TYPE] = function () {\n              if (target === _this18.input.element) {\n                _this18.containerOuter.removeFocusState();\n\n                if (hasHighlightedItems) {\n                  _this18.unhighlightAll();\n                }\n\n                _this18.hideDropdown(true);\n              }\n            }, _blurActions[SELECT_ONE_TYPE] = function () {\n              _this18.containerOuter.removeFocusState();\n\n              if (target === _this18.input.element || target === _this18.containerOuter.element && !_this18._canSearch) {\n                _this18.hideDropdown(true);\n              }\n            }, _blurActions[SELECT_MULTIPLE_TYPE] = function () {\n              if (target === _this18.input.element) {\n                _this18.containerOuter.removeFocusState();\n\n                _this18.hideDropdown(true);\n\n                if (hasHighlightedItems) {\n                  _this18.unhighlightAll();\n                }\n              }\n            }, _blurActions);\n            blurActions[this.passedElement.element.type]();\n          } else {\n            // On IE11, clicking the scollbar blurs our input and thus\n            // closes the dropdown. To stop this, we refocus our input\n            // if we know we are on IE *and* are scrolling.\n            this._isScrollingOnIe = false;\n            this.input.element.focus();\n          }\n        };\n\n        _proto._onFormReset = function _onFormReset() {\n          this._store.dispatch(resetTo(this._initialState));\n        };\n\n        _proto._highlightChoice = function _highlightChoice(el) {\n          var _this19 = this;\n\n          if (el === void 0) {\n            el = null;\n          }\n\n          var choices = Array.from(this.dropdown.element.querySelectorAll('[data-choice-selectable]'));\n\n          if (!choices.length) {\n            return;\n          }\n\n          var passedEl = el;\n          var highlightedChoices = Array.from(this.dropdown.element.querySelectorAll(\".\" + this.config.classNames.highlightedState)); // Remove any highlighted choices\n\n          highlightedChoices.forEach(function (choice) {\n            choice.classList.remove(_this19.config.classNames.highlightedState);\n            choice.setAttribute('aria-selected', 'false');\n          });\n\n          if (passedEl) {\n            this._highlightPosition = choices.indexOf(passedEl);\n          } else {\n            // Highlight choice based on last known highlight location\n            if (choices.length > this._highlightPosition) {\n              // If we have an option to highlight\n              passedEl = choices[this._highlightPosition];\n            } else {\n              // Otherwise highlight the option before\n              passedEl = choices[choices.length - 1];\n            }\n\n            if (!passedEl) {\n              passedEl = choices[0];\n            }\n          }\n\n          passedEl.classList.add(this.config.classNames.highlightedState);\n          passedEl.setAttribute('aria-selected', 'true');\n          this.passedElement.triggerEvent(EVENTS.highlightChoice, {\n            el: passedEl\n          });\n\n          if (this.dropdown.isActive) {\n            // IE11 ignores aria-label and blocks virtual keyboard\n            // if aria-activedescendant is set without a dropdown\n            this.input.setActiveDescendant(passedEl.id);\n            this.containerOuter.setActiveDescendant(passedEl.id);\n          }\n        };\n\n        _proto._addItem = function _addItem(_ref13) {\n          var value = _ref13.value,\n              _ref13$label = _ref13.label,\n              label = _ref13$label === void 0 ? null : _ref13$label,\n              _ref13$choiceId = _ref13.choiceId,\n              choiceId = _ref13$choiceId === void 0 ? -1 : _ref13$choiceId,\n              _ref13$groupId = _ref13.groupId,\n              groupId = _ref13$groupId === void 0 ? -1 : _ref13$groupId,\n              _ref13$customProperti = _ref13.customProperties,\n              customProperties = _ref13$customProperti === void 0 ? null : _ref13$customProperti,\n              _ref13$placeholder = _ref13.placeholder,\n              placeholder = _ref13$placeholder === void 0 ? false : _ref13$placeholder,\n              _ref13$keyCode = _ref13.keyCode,\n              keyCode = _ref13$keyCode === void 0 ? null : _ref13$keyCode;\n          var passedValue = typeof value === 'string' ? value.trim() : value;\n          var passedKeyCode = keyCode;\n          var passedCustomProperties = customProperties;\n          var items = this._store.items;\n          var passedLabel = label || passedValue;\n          var passedOptionId = choiceId || -1;\n          var group = groupId >= 0 ? this._store.getGroupById(groupId) : null;\n          var id = items ? items.length + 1 : 1; // If a prepended value has been passed, prepend it\n\n          if (this.config.prependValue) {\n            passedValue = this.config.prependValue + passedValue.toString();\n          } // If an appended value has been passed, append it\n\n\n          if (this.config.appendValue) {\n            passedValue += this.config.appendValue.toString();\n          }\n\n          this._store.dispatch(items_addItem({\n            value: passedValue,\n            label: passedLabel,\n            id: id,\n            choiceId: passedOptionId,\n            groupId: groupId,\n            customProperties: customProperties,\n            placeholder: placeholder,\n            keyCode: passedKeyCode\n          }));\n\n          if (this._isSelectOneElement) {\n            this.removeActiveItems(id);\n          } // Trigger change event\n\n\n          this.passedElement.triggerEvent(EVENTS.addItem, {\n            id: id,\n            value: passedValue,\n            label: passedLabel,\n            customProperties: passedCustomProperties,\n            groupValue: group && group.value ? group.value : undefined,\n            keyCode: passedKeyCode\n          });\n          return this;\n        };\n\n        _proto._removeItem = function _removeItem(item) {\n          if (!item || !isType('Object', item)) {\n            return this;\n          }\n\n          var id = item.id,\n              value = item.value,\n              label = item.label,\n              choiceId = item.choiceId,\n              groupId = item.groupId;\n          var group = groupId >= 0 ? this._store.getGroupById(groupId) : null;\n\n          this._store.dispatch(items_removeItem(id, choiceId));\n\n          if (group && group.value) {\n            this.passedElement.triggerEvent(EVENTS.removeItem, {\n              id: id,\n              value: value,\n              label: label,\n              groupValue: group.value\n            });\n          } else {\n            this.passedElement.triggerEvent(EVENTS.removeItem, {\n              id: id,\n              value: value,\n              label: label\n            });\n          }\n\n          return this;\n        };\n\n        _proto._addChoice = function _addChoice(_ref14) {\n          var value = _ref14.value,\n              _ref14$label = _ref14.label,\n              label = _ref14$label === void 0 ? null : _ref14$label,\n              _ref14$isSelected = _ref14.isSelected,\n              isSelected = _ref14$isSelected === void 0 ? false : _ref14$isSelected,\n              _ref14$isDisabled = _ref14.isDisabled,\n              isDisabled = _ref14$isDisabled === void 0 ? false : _ref14$isDisabled,\n              _ref14$groupId = _ref14.groupId,\n              groupId = _ref14$groupId === void 0 ? -1 : _ref14$groupId,\n              _ref14$customProperti = _ref14.customProperties,\n              customProperties = _ref14$customProperti === void 0 ? null : _ref14$customProperti,\n              _ref14$placeholder = _ref14.placeholder,\n              placeholder = _ref14$placeholder === void 0 ? false : _ref14$placeholder,\n              _ref14$keyCode = _ref14.keyCode,\n              keyCode = _ref14$keyCode === void 0 ? null : _ref14$keyCode;\n\n          if (typeof value === 'undefined' || value === null) {\n            return;\n          } // Generate unique id\n\n\n          var choices = this._store.choices;\n          var choiceLabel = label || value;\n          var choiceId = choices ? choices.length + 1 : 1;\n          var choiceElementId = this._baseId + \"-\" + this._idNames.itemChoice + \"-\" + choiceId;\n\n          this._store.dispatch(choices_addChoice({\n            id: choiceId,\n            groupId: groupId,\n            elementId: choiceElementId,\n            value: value,\n            label: choiceLabel,\n            disabled: isDisabled,\n            customProperties: customProperties,\n            placeholder: placeholder,\n            keyCode: keyCode\n          }));\n\n          if (isSelected) {\n            this._addItem({\n              value: value,\n              label: choiceLabel,\n              choiceId: choiceId,\n              customProperties: customProperties,\n              placeholder: placeholder,\n              keyCode: keyCode\n            });\n          }\n        };\n\n        _proto._addGroup = function _addGroup(_ref15) {\n          var _this20 = this;\n\n          var group = _ref15.group,\n              id = _ref15.id,\n              _ref15$valueKey = _ref15.valueKey,\n              valueKey = _ref15$valueKey === void 0 ? 'value' : _ref15$valueKey,\n              _ref15$labelKey = _ref15.labelKey,\n              labelKey = _ref15$labelKey === void 0 ? 'label' : _ref15$labelKey;\n          var groupChoices = isType('Object', group) ? group.choices : Array.from(group.getElementsByTagName('OPTION'));\n          var groupId = id || Math.floor(new Date().valueOf() * Math.random());\n          var isDisabled = group.disabled ? group.disabled : false;\n\n          if (groupChoices) {\n            this._store.dispatch(groups_addGroup({\n              value: group.label,\n              id: groupId,\n              active: true,\n              disabled: isDisabled\n            }));\n\n            var addGroupChoices = function addGroupChoices(choice) {\n              var isOptDisabled = choice.disabled || choice.parentNode && choice.parentNode.disabled;\n\n              _this20._addChoice({\n                value: choice[valueKey],\n                label: isType('Object', choice) ? choice[labelKey] : choice.innerHTML,\n                isSelected: choice.selected,\n                isDisabled: isOptDisabled,\n                groupId: groupId,\n                customProperties: choice.customProperties,\n                placeholder: choice.placeholder\n              });\n            };\n\n            groupChoices.forEach(addGroupChoices);\n          } else {\n            this._store.dispatch(groups_addGroup({\n              value: group.label,\n              id: group.id,\n              active: false,\n              disabled: group.disabled\n            }));\n          }\n        };\n\n        _proto._getTemplate = function _getTemplate(template) {\n          var _this$_templates$temp;\n\n          if (!template) {\n            return null;\n          }\n\n          var classNames = this.config.classNames;\n\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          return (_this$_templates$temp = this._templates[template]).call.apply(_this$_templates$temp, [this, classNames].concat(args));\n        };\n\n        _proto._createTemplates = function _createTemplates() {\n          var callbackOnCreateTemplates = this.config.callbackOnCreateTemplates;\n          var userTemplates = {};\n\n          if (callbackOnCreateTemplates && typeof callbackOnCreateTemplates === 'function') {\n            userTemplates = callbackOnCreateTemplates.call(this, strToEl);\n          }\n\n          this._templates = cjs_default()(TEMPLATES, userTemplates);\n        };\n\n        _proto._createElements = function _createElements() {\n          this.containerOuter = new container_Container({\n            element: this._getTemplate('containerOuter', this._direction, this._isSelectElement, this._isSelectOneElement, this.config.searchEnabled, this.passedElement.element.type),\n            classNames: this.config.classNames,\n            type: this.passedElement.element.type,\n            position: this.config.position\n          });\n          this.containerInner = new container_Container({\n            element: this._getTemplate('containerInner'),\n            classNames: this.config.classNames,\n            type: this.passedElement.element.type,\n            position: this.config.position\n          });\n          this.input = new input_Input({\n            element: this._getTemplate('input', this._placeholderValue),\n            classNames: this.config.classNames,\n            type: this.passedElement.element.type,\n            preventPaste: !this.config.paste\n          });\n          this.choiceList = new list_List({\n            element: this._getTemplate('choiceList', this._isSelectOneElement)\n          });\n          this.itemList = new list_List({\n            element: this._getTemplate('itemList', this._isSelectOneElement)\n          });\n          this.dropdown = new Dropdown({\n            element: this._getTemplate('dropdown'),\n            classNames: this.config.classNames,\n            type: this.passedElement.element.type\n          });\n        };\n\n        _proto._createStructure = function _createStructure() {\n          // Hide original element\n          this.passedElement.conceal(); // Wrap input in container preserving DOM ordering\n\n          this.containerInner.wrap(this.passedElement.element); // Wrapper inner container with outer container\n\n          this.containerOuter.wrap(this.containerInner.element);\n\n          if (this._isSelectOneElement) {\n            this.input.placeholder = this.config.searchPlaceholderValue || '';\n          } else if (this._placeholderValue) {\n            this.input.placeholder = this._placeholderValue;\n            this.input.setWidth();\n          }\n\n          this.containerOuter.element.appendChild(this.containerInner.element);\n          this.containerOuter.element.appendChild(this.dropdown.element);\n          this.containerInner.element.appendChild(this.itemList.element);\n\n          if (!this._isTextElement) {\n            this.dropdown.element.appendChild(this.choiceList.element);\n          }\n\n          if (!this._isSelectOneElement) {\n            this.containerInner.element.appendChild(this.input.element);\n          } else if (this.config.searchEnabled) {\n            this.dropdown.element.insertBefore(this.input.element, this.dropdown.element.firstChild);\n          }\n\n          if (this._isSelectElement) {\n            this._highlightPosition = 0;\n            this._isSearching = false;\n\n            this._startLoading();\n\n            if (this._presetGroups.length) {\n              this._addPredefinedGroups(this._presetGroups);\n            } else {\n              this._addPredefinedChoices(this._presetChoices);\n            }\n\n            this._stopLoading();\n          }\n\n          if (this._isTextElement) {\n            this._addPredefinedItems(this._presetItems);\n          }\n        };\n\n        _proto._addPredefinedGroups = function _addPredefinedGroups(groups) {\n          var _this21 = this; // If we have a placeholder option\n\n\n          var placeholderChoice = this.passedElement.placeholderOption;\n\n          if (placeholderChoice && placeholderChoice.parentNode.tagName === 'SELECT') {\n            this._addChoice({\n              value: placeholderChoice.value,\n              label: placeholderChoice.innerHTML,\n              isSelected: placeholderChoice.selected,\n              isDisabled: placeholderChoice.disabled,\n              placeholder: true\n            });\n          }\n\n          groups.forEach(function (group) {\n            return _this21._addGroup({\n              group: group,\n              id: group.id || null\n            });\n          });\n        };\n\n        _proto._addPredefinedChoices = function _addPredefinedChoices(choices) {\n          var _this22 = this; // If sorting is enabled or the user is searching, filter choices\n\n\n          if (this.config.shouldSort) {\n            choices.sort(this.config.sorter);\n          }\n\n          var hasSelectedChoice = choices.some(function (choice) {\n            return choice.selected;\n          });\n          var firstEnabledChoiceIndex = choices.findIndex(function (choice) {\n            return choice.disabled === undefined || !choice.disabled;\n          });\n          choices.forEach(function (choice, index) {\n            var value = choice.value,\n                label = choice.label,\n                customProperties = choice.customProperties,\n                placeholder = choice.placeholder;\n\n            if (_this22._isSelectElement) {\n              // If the choice is actually a group\n              if (choice.choices) {\n                _this22._addGroup({\n                  group: choice,\n                  id: choice.id || null\n                });\n              } else {\n                /**\n                 * If there is a selected choice already or the choice is not the first in\n                 * the array, add each choice normally.\n                 *\n                 * Otherwise we pre-select the first enabled choice in the array (\"select-one\" only)\n                 */\n                var shouldPreselect = _this22._isSelectOneElement && !hasSelectedChoice && index === firstEnabledChoiceIndex;\n                var isSelected = shouldPreselect ? true : choice.selected;\n                var isDisabled = choice.disabled;\n\n                _this22._addChoice({\n                  value: value,\n                  label: label,\n                  isSelected: isSelected,\n                  isDisabled: isDisabled,\n                  customProperties: customProperties,\n                  placeholder: placeholder\n                });\n              }\n            } else {\n              _this22._addChoice({\n                value: value,\n                label: label,\n                isSelected: choice.selected,\n                isDisabled: choice.disabled,\n                customProperties: customProperties,\n                placeholder: placeholder\n              });\n            }\n          });\n        }\n        /**\n         * @param {Item[]} items\n         */\n        ;\n\n        _proto._addPredefinedItems = function _addPredefinedItems(items) {\n          var _this23 = this;\n\n          items.forEach(function (item) {\n            if (_typeof(item) === 'object' && item.value) {\n              _this23._addItem({\n                value: item.value,\n                label: item.label,\n                choiceId: item.id,\n                customProperties: item.customProperties,\n                placeholder: item.placeholder\n              });\n            }\n\n            if (typeof item === 'string') {\n              _this23._addItem({\n                value: item\n              });\n            }\n          });\n        };\n\n        _proto._setChoiceOrItem = function _setChoiceOrItem(item) {\n          var _this24 = this;\n\n          var itemType = getType(item).toLowerCase();\n          var handleType = {\n            object: function object() {\n              if (!item.value) {\n                return;\n              } // If we are dealing with a select input, we need to create an option first\n              // that is then selected. For text inputs we can just add items normally.\n\n\n              if (!_this24._isTextElement) {\n                _this24._addChoice({\n                  value: item.value,\n                  label: item.label,\n                  isSelected: true,\n                  isDisabled: false,\n                  customProperties: item.customProperties,\n                  placeholder: item.placeholder\n                });\n              } else {\n                _this24._addItem({\n                  value: item.value,\n                  label: item.label,\n                  choiceId: item.id,\n                  customProperties: item.customProperties,\n                  placeholder: item.placeholder\n                });\n              }\n            },\n            string: function string() {\n              if (!_this24._isTextElement) {\n                _this24._addChoice({\n                  value: item,\n                  label: item,\n                  isSelected: true,\n                  isDisabled: false\n                });\n              } else {\n                _this24._addItem({\n                  value: item\n                });\n              }\n            }\n          };\n          handleType[itemType]();\n        };\n\n        _proto._findAndSelectChoiceByValue = function _findAndSelectChoiceByValue(val) {\n          var _this25 = this;\n\n          var choices = this._store.choices; // Check 'value' property exists and the choice isn't already selected\n\n          var foundChoice = choices.find(function (choice) {\n            return _this25.config.valueComparer(choice.value, val);\n          });\n\n          if (foundChoice && !foundChoice.selected) {\n            this._addItem({\n              value: foundChoice.value,\n              label: foundChoice.label,\n              choiceId: foundChoice.id,\n              groupId: foundChoice.groupId,\n              customProperties: foundChoice.customProperties,\n              placeholder: foundChoice.placeholder,\n              keyCode: foundChoice.keyCode\n            });\n          }\n        };\n\n        _proto._generatePlaceholderValue = function _generatePlaceholderValue() {\n          if (this._isSelectElement) {\n            var placeholderOption = this.passedElement.placeholderOption;\n            return placeholderOption ? placeholderOption.text : false;\n          }\n\n          var _this$config4 = this.config,\n              placeholder = _this$config4.placeholder,\n              placeholderValue = _this$config4.placeholderValue;\n          var dataset = this.passedElement.element.dataset;\n\n          if (placeholder) {\n            if (placeholderValue) {\n              return placeholderValue;\n            }\n\n            if (dataset.placeholder) {\n              return dataset.placeholder;\n            }\n          }\n\n          return false;\n        };\n\n        return Choices;\n      }();\n      /* harmony default export */\n\n\n      var scripts_choices = __webpack_exports__[\"default\"] = choices_Choices;\n      /***/\n    }\n    /******/\n    ])[\"default\"]\n  );\n});\n\n},{}],13:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CountUp = void 0;\n\nvar __assign = void 0 && (void 0).__assign || function () {\n  return (__assign = Object.assign || function (t) {\n    for (var i, a = 1, s = arguments.length; a < s; a++) {\n      for (var n in i = arguments[a]) {\n        Object.prototype.hasOwnProperty.call(i, n) && (t[n] = i[n]);\n      }\n    }\n\n    return t;\n  }).apply(this, arguments);\n},\n    CountUp = function () {\n  function t(t, i, a) {\n    var s = this;\n    this.target = t, this.endVal = i, this.options = a, this.version = \"2.0.7\", this.defaults = {\n      startVal: 0,\n      decimalPlaces: 0,\n      duration: 2,\n      useEasing: !0,\n      useGrouping: !0,\n      smartEasingThreshold: 999,\n      smartEasingAmount: 333,\n      separator: \",\",\n      decimal: \".\",\n      prefix: \"\",\n      suffix: \"\"\n    }, this.finalEndVal = null, this.useEasing = !0, this.countDown = !1, this.error = \"\", this.startVal = 0, this.paused = !0, this.count = function (t) {\n      s.startTime || (s.startTime = t);\n      var i = t - s.startTime;\n      s.remaining = s.duration - i, s.useEasing ? s.countDown ? s.frameVal = s.startVal - s.easingFn(i, 0, s.startVal - s.endVal, s.duration) : s.frameVal = s.easingFn(i, s.startVal, s.endVal - s.startVal, s.duration) : s.countDown ? s.frameVal = s.startVal - (s.startVal - s.endVal) * (i / s.duration) : s.frameVal = s.startVal + (s.endVal - s.startVal) * (i / s.duration), s.countDown ? s.frameVal = s.frameVal < s.endVal ? s.endVal : s.frameVal : s.frameVal = s.frameVal > s.endVal ? s.endVal : s.frameVal, s.frameVal = Number(s.frameVal.toFixed(s.options.decimalPlaces)), s.printValue(s.frameVal), i < s.duration ? s.rAF = requestAnimationFrame(s.count) : null !== s.finalEndVal ? s.update(s.finalEndVal) : s.callback && s.callback();\n    }, this.formatNumber = function (t) {\n      var i,\n          a,\n          n,\n          e,\n          r,\n          o = t < 0 ? \"-\" : \"\";\n\n      if (i = Math.abs(t).toFixed(s.options.decimalPlaces), n = (a = (i += \"\").split(\".\"))[0], e = a.length > 1 ? s.options.decimal + a[1] : \"\", s.options.useGrouping) {\n        r = \"\";\n\n        for (var l = 0, h = n.length; l < h; ++l) {\n          0 !== l && l % 3 == 0 && (r = s.options.separator + r), r = n[h - l - 1] + r;\n        }\n\n        n = r;\n      }\n\n      return s.options.numerals && s.options.numerals.length && (n = n.replace(/[0-9]/g, function (t) {\n        return s.options.numerals[+t];\n      }), e = e.replace(/[0-9]/g, function (t) {\n        return s.options.numerals[+t];\n      })), o + s.options.prefix + n + e + s.options.suffix;\n    }, this.easeOutExpo = function (t, i, a, s) {\n      return a * (1 - Math.pow(2, -10 * t / s)) * 1024 / 1023 + i;\n    }, this.options = __assign(__assign({}, this.defaults), a), this.formattingFn = this.options.formattingFn ? this.options.formattingFn : this.formatNumber, this.easingFn = this.options.easingFn ? this.options.easingFn : this.easeOutExpo, this.startVal = this.validateValue(this.options.startVal), this.frameVal = this.startVal, this.endVal = this.validateValue(i), this.options.decimalPlaces = Math.max(this.options.decimalPlaces), this.resetDuration(), this.options.separator = String(this.options.separator), this.useEasing = this.options.useEasing, \"\" === this.options.separator && (this.options.useGrouping = !1), this.el = \"string\" == typeof t ? document.getElementById(t) : t, this.el ? this.printValue(this.startVal) : this.error = \"[CountUp] target is null or undefined\";\n  }\n\n  return t.prototype.determineDirectionAndSmartEasing = function () {\n    var t = this.finalEndVal ? this.finalEndVal : this.endVal;\n    this.countDown = this.startVal > t;\n    var i = t - this.startVal;\n\n    if (Math.abs(i) > this.options.smartEasingThreshold) {\n      this.finalEndVal = t;\n      var a = this.countDown ? 1 : -1;\n      this.endVal = t + a * this.options.smartEasingAmount, this.duration = this.duration / 2;\n    } else this.endVal = t, this.finalEndVal = null;\n\n    this.finalEndVal ? this.useEasing = !1 : this.useEasing = this.options.useEasing;\n  }, t.prototype.start = function (t) {\n    this.error || (this.callback = t, this.duration > 0 ? (this.determineDirectionAndSmartEasing(), this.paused = !1, this.rAF = requestAnimationFrame(this.count)) : this.printValue(this.endVal));\n  }, t.prototype.pauseResume = function () {\n    this.paused ? (this.startTime = null, this.duration = this.remaining, this.startVal = this.frameVal, this.determineDirectionAndSmartEasing(), this.rAF = requestAnimationFrame(this.count)) : cancelAnimationFrame(this.rAF), this.paused = !this.paused;\n  }, t.prototype.reset = function () {\n    cancelAnimationFrame(this.rAF), this.paused = !0, this.resetDuration(), this.startVal = this.validateValue(this.options.startVal), this.frameVal = this.startVal, this.printValue(this.startVal);\n  }, t.prototype.update = function (t) {\n    cancelAnimationFrame(this.rAF), this.startTime = null, this.endVal = this.validateValue(t), this.endVal !== this.frameVal && (this.startVal = this.frameVal, this.finalEndVal || this.resetDuration(), this.finalEndVal = null, this.determineDirectionAndSmartEasing(), this.rAF = requestAnimationFrame(this.count));\n  }, t.prototype.printValue = function (t) {\n    var i = this.formattingFn(t);\n    \"INPUT\" === this.el.tagName ? this.el.value = i : \"text\" === this.el.tagName || \"tspan\" === this.el.tagName ? this.el.textContent = i : this.el.innerHTML = i;\n  }, t.prototype.ensureNumber = function (t) {\n    return \"number\" == typeof t && !isNaN(t);\n  }, t.prototype.validateValue = function (t) {\n    var i = Number(t);\n    return this.ensureNumber(i) ? i : (this.error = \"[CountUp] invalid start or end value: \" + t, null);\n  }, t.prototype.resetDuration = function () {\n    this.startTime = null, this.duration = 1e3 * Number(this.options.duration), this.remaining = this.duration;\n  }, t;\n}();\n\nexports.CountUp = CountUp;\n\n},{}],14:[function(require,module,exports){\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * jQuery JavaScript Library v3.6.0\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2021-03-02T17:08Z\n */\n(function (global, factory) {\n  \"use strict\";\n\n  if ((typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) === \"object\" && _typeof(module.exports) === \"object\") {\n    // For CommonJS and CommonJS-like environments where a proper `window`\n    // is present, execute the factory and get jQuery.\n    // For environments that do not have a `window` with a `document`\n    // (such as Node.js), expose a factory as module.exports.\n    // This accentuates the need for the creation of a real `window`.\n    // e.g. var jQuery = require(\"jquery\")(window);\n    // See ticket #14549 for more info.\n    module.exports = global.document ? factory(global, true) : function (w) {\n      if (!w.document) {\n        throw new Error(\"jQuery requires a window with a document\");\n      }\n\n      return factory(w);\n    };\n  } else {\n    factory(global);\n  } // Pass this if window is not defined yet\n\n})(typeof window !== \"undefined\" ? window : void 0, function (window, noGlobal) {\n  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n  // enough that all such attempts are guarded in a try block.\n  \"use strict\";\n\n  var arr = [];\n  var getProto = Object.getPrototypeOf;\n  var _slice = arr.slice;\n  var flat = arr.flat ? function (array) {\n    return arr.flat.call(array);\n  } : function (array) {\n    return arr.concat.apply([], array);\n  };\n  var push = arr.push;\n  var indexOf = arr.indexOf;\n  var class2type = {};\n  var toString = class2type.toString;\n  var hasOwn = class2type.hasOwnProperty;\n  var fnToString = hasOwn.toString;\n  var ObjectFunctionString = fnToString.call(Object);\n  var support = {};\n\n  var isFunction = function isFunction(obj) {\n    // Support: Chrome <=57, Firefox <=52\n    // In some browsers, typeof returns \"function\" for HTML <object> elements\n    // (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n    // We don't want to classify *any* DOM node as a function.\n    // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\n    // Plus for old WebKit, typeof returns \"function\" for HTML collections\n    // (e.g., `typeof document.getElementsByTagName(\"div\") === \"function\"`). (gh-4756)\n    return typeof obj === \"function\" && typeof obj.nodeType !== \"number\" && typeof obj.item !== \"function\";\n  };\n\n  var isWindow = function isWindow(obj) {\n    return obj != null && obj === obj.window;\n  };\n\n  var document = window.document;\n  var preservedScriptAttributes = {\n    type: true,\n    src: true,\n    nonce: true,\n    noModule: true\n  };\n\n  function DOMEval(code, node, doc) {\n    doc = doc || document;\n    var i,\n        val,\n        script = doc.createElement(\"script\");\n    script.text = code;\n\n    if (node) {\n      for (i in preservedScriptAttributes) {\n        // Support: Firefox 64+, Edge 18+\n        // Some browsers don't support the \"nonce\" property on scripts.\n        // On the other hand, just using `getAttribute` is not enough as\n        // the `nonce` attribute is reset to an empty string whenever it\n        // becomes browsing-context connected.\n        // See https://github.com/whatwg/html/issues/2369\n        // See https://html.spec.whatwg.org/#nonce-attributes\n        // The `node.getAttribute` check was added for the sake of\n        // `jQuery.globalEval` so that it can fake a nonce-containing node\n        // via an object.\n        val = node[i] || node.getAttribute && node.getAttribute(i);\n\n        if (val) {\n          script.setAttribute(i, val);\n        }\n      }\n    }\n\n    doc.head.appendChild(script).parentNode.removeChild(script);\n  }\n\n  function toType(obj) {\n    if (obj == null) {\n      return obj + \"\";\n    } // Support: Android <=2.3 only (functionish RegExp)\n\n\n    return _typeof(obj) === \"object\" || typeof obj === \"function\" ? class2type[toString.call(obj)] || \"object\" : _typeof(obj);\n  }\n  /* global Symbol */\n  // Defining this global in .eslintrc.json would create a danger of using the global\n  // unguarded in another place, it seems safer to define global only for this module\n\n\n  var version = \"3.6.0\",\n      // Define a local copy of jQuery\n  jQuery = function jQuery(selector, context) {\n    // The jQuery object is actually just the init constructor 'enhanced'\n    // Need init if jQuery is called (just allow error to be thrown if not included)\n    return new jQuery.fn.init(selector, context);\n  };\n\n  jQuery.fn = jQuery.prototype = {\n    // The current version of jQuery being used\n    jquery: version,\n    constructor: jQuery,\n    // The default length of a jQuery object is 0\n    length: 0,\n    toArray: function toArray() {\n      return _slice.call(this);\n    },\n    // Get the Nth element in the matched element set OR\n    // Get the whole matched element set as a clean array\n    get: function get(num) {\n      // Return all the elements in a clean array\n      if (num == null) {\n        return _slice.call(this);\n      } // Return just the one element from the set\n\n\n      return num < 0 ? this[num + this.length] : this[num];\n    },\n    // Take an array of elements and push it onto the stack\n    // (returning the new matched element set)\n    pushStack: function pushStack(elems) {\n      // Build a new jQuery matched element set\n      var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)\n\n      ret.prevObject = this; // Return the newly-formed element set\n\n      return ret;\n    },\n    // Execute a callback for every element in the matched set.\n    each: function each(callback) {\n      return jQuery.each(this, callback);\n    },\n    map: function map(callback) {\n      return this.pushStack(jQuery.map(this, function (elem, i) {\n        return callback.call(elem, i, elem);\n      }));\n    },\n    slice: function slice() {\n      return this.pushStack(_slice.apply(this, arguments));\n    },\n    first: function first() {\n      return this.eq(0);\n    },\n    last: function last() {\n      return this.eq(-1);\n    },\n    even: function even() {\n      return this.pushStack(jQuery.grep(this, function (_elem, i) {\n        return (i + 1) % 2;\n      }));\n    },\n    odd: function odd() {\n      return this.pushStack(jQuery.grep(this, function (_elem, i) {\n        return i % 2;\n      }));\n    },\n    eq: function eq(i) {\n      var len = this.length,\n          j = +i + (i < 0 ? len : 0);\n      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n    },\n    end: function end() {\n      return this.prevObject || this.constructor();\n    },\n    // For internal use only.\n    // Behaves like an Array's method, not like a jQuery method.\n    push: push,\n    sort: arr.sort,\n    splice: arr.splice\n  };\n\n  jQuery.extend = jQuery.fn.extend = function () {\n    var options,\n        name,\n        src,\n        copy,\n        copyIsArray,\n        clone,\n        target = arguments[0] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false; // Handle a deep copy situation\n\n    if (typeof target === \"boolean\") {\n      deep = target; // Skip the boolean and the target\n\n      target = arguments[i] || {};\n      i++;\n    } // Handle case when target is a string or something (possible in deep copy)\n\n\n    if (_typeof(target) !== \"object\" && !isFunction(target)) {\n      target = {};\n    } // Extend jQuery itself if only one argument is passed\n\n\n    if (i === length) {\n      target = this;\n      i--;\n    }\n\n    for (; i < length; i++) {\n      // Only deal with non-null/undefined values\n      if ((options = arguments[i]) != null) {\n        // Extend the base object\n        for (name in options) {\n          copy = options[name]; // Prevent Object.prototype pollution\n          // Prevent never-ending loop\n\n          if (name === \"__proto__\" || target === copy) {\n            continue;\n          } // Recurse if we're merging plain objects or arrays\n\n\n          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n            src = target[name]; // Ensure proper type for the source value\n\n            if (copyIsArray && !Array.isArray(src)) {\n              clone = [];\n            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {\n              clone = {};\n            } else {\n              clone = src;\n            }\n\n            copyIsArray = false; // Never move original objects, clone them\n\n            target[name] = jQuery.extend(deep, clone, copy); // Don't bring in undefined values\n          } else if (copy !== undefined) {\n            target[name] = copy;\n          }\n        }\n      }\n    } // Return the modified object\n\n\n    return target;\n  };\n\n  jQuery.extend({\n    // Unique for each copy of jQuery on the page\n    expando: \"jQuery\" + (version + Math.random()).replace(/\\D/g, \"\"),\n    // Assume jQuery is ready without the ready module\n    isReady: true,\n    error: function error(msg) {\n      throw new Error(msg);\n    },\n    noop: function noop() {},\n    isPlainObject: function isPlainObject(obj) {\n      var proto, Ctor; // Detect obvious negatives\n      // Use toString instead of jQuery.type to catch host objects\n\n      if (!obj || toString.call(obj) !== \"[object Object]\") {\n        return false;\n      }\n\n      proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain\n\n      if (!proto) {\n        return true;\n      } // Objects with prototype are plain iff they were constructed by a global Object function\n\n\n      Ctor = hasOwn.call(proto, \"constructor\") && proto.constructor;\n      return typeof Ctor === \"function\" && fnToString.call(Ctor) === ObjectFunctionString;\n    },\n    isEmptyObject: function isEmptyObject(obj) {\n      var name;\n\n      for (name in obj) {\n        return false;\n      }\n\n      return true;\n    },\n    // Evaluates a script in a provided context; falls back to the global one\n    // if not specified.\n    globalEval: function globalEval(code, options, doc) {\n      DOMEval(code, {\n        nonce: options && options.nonce\n      }, doc);\n    },\n    each: function each(obj, callback) {\n      var length,\n          i = 0;\n\n      if (isArrayLike(obj)) {\n        length = obj.length;\n\n        for (; i < length; i++) {\n          if (callback.call(obj[i], i, obj[i]) === false) {\n            break;\n          }\n        }\n      } else {\n        for (i in obj) {\n          if (callback.call(obj[i], i, obj[i]) === false) {\n            break;\n          }\n        }\n      }\n\n      return obj;\n    },\n    // results is for internal usage only\n    makeArray: function makeArray(arr, results) {\n      var ret = results || [];\n\n      if (arr != null) {\n        if (isArrayLike(Object(arr))) {\n          jQuery.merge(ret, typeof arr === \"string\" ? [arr] : arr);\n        } else {\n          push.call(ret, arr);\n        }\n      }\n\n      return ret;\n    },\n    inArray: function inArray(elem, arr, i) {\n      return arr == null ? -1 : indexOf.call(arr, elem, i);\n    },\n    // Support: Android <=4.0 only, PhantomJS 1 only\n    // push.apply(_, arraylike) throws on ancient WebKit\n    merge: function merge(first, second) {\n      var len = +second.length,\n          j = 0,\n          i = first.length;\n\n      for (; j < len; j++) {\n        first[i++] = second[j];\n      }\n\n      first.length = i;\n      return first;\n    },\n    grep: function grep(elems, callback, invert) {\n      var callbackInverse,\n          matches = [],\n          i = 0,\n          length = elems.length,\n          callbackExpect = !invert; // Go through the array, only saving the items\n      // that pass the validator function\n\n      for (; i < length; i++) {\n        callbackInverse = !callback(elems[i], i);\n\n        if (callbackInverse !== callbackExpect) {\n          matches.push(elems[i]);\n        }\n      }\n\n      return matches;\n    },\n    // arg is for internal usage only\n    map: function map(elems, callback, arg) {\n      var length,\n          value,\n          i = 0,\n          ret = []; // Go through the array, translating each of the items to their new values\n\n      if (isArrayLike(elems)) {\n        length = elems.length;\n\n        for (; i < length; i++) {\n          value = callback(elems[i], i, arg);\n\n          if (value != null) {\n            ret.push(value);\n          }\n        } // Go through every key on the object,\n\n      } else {\n        for (i in elems) {\n          value = callback(elems[i], i, arg);\n\n          if (value != null) {\n            ret.push(value);\n          }\n        }\n      } // Flatten any nested arrays\n\n\n      return flat(ret);\n    },\n    // A global GUID counter for objects\n    guid: 1,\n    // jQuery.support is not used in Core but other projects attach their\n    // properties to it so it needs to exist.\n    support: support\n  });\n\n  if (typeof Symbol === \"function\") {\n    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];\n  } // Populate the class2type map\n\n\n  jQuery.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"), function (_i, name) {\n    class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\n  });\n\n  function isArrayLike(obj) {\n    // Support: real iOS 8.2 only (not reproducible in simulator)\n    // `in` check used to prevent JIT error (gh-2145)\n    // hasOwn isn't used here due to false negatives\n    // regarding Nodelist length in IE\n    var length = !!obj && \"length\" in obj && obj.length,\n        type = toType(obj);\n\n    if (isFunction(obj) || isWindow(obj)) {\n      return false;\n    }\n\n    return type === \"array\" || length === 0 || typeof length === \"number\" && length > 0 && length - 1 in obj;\n  }\n\n  var Sizzle =\n  /*!\n   * Sizzle CSS Selector Engine v2.3.6\n   * https://sizzlejs.com/\n   *\n   * Copyright JS Foundation and other contributors\n   * Released under the MIT license\n   * https://js.foundation/\n   *\n   * Date: 2021-02-16\n   */\n  function (window) {\n    var i,\n        support,\n        Expr,\n        getText,\n        isXML,\n        tokenize,\n        compile,\n        select,\n        outermostContext,\n        sortInput,\n        hasDuplicate,\n        // Local document vars\n    setDocument,\n        document,\n        docElem,\n        documentIsHTML,\n        rbuggyQSA,\n        rbuggyMatches,\n        matches,\n        contains,\n        // Instance-specific data\n    expando = \"sizzle\" + 1 * new Date(),\n        preferredDoc = window.document,\n        dirruns = 0,\n        done = 0,\n        classCache = createCache(),\n        tokenCache = createCache(),\n        compilerCache = createCache(),\n        nonnativeSelectorCache = createCache(),\n        sortOrder = function sortOrder(a, b) {\n      if (a === b) {\n        hasDuplicate = true;\n      }\n\n      return 0;\n    },\n        // Instance methods\n    hasOwn = {}.hasOwnProperty,\n        arr = [],\n        pop = arr.pop,\n        pushNative = arr.push,\n        push = arr.push,\n        slice = arr.slice,\n        // Use a stripped-down indexOf as it's faster than native\n    // https://jsperf.com/thor-indexof-vs-for/5\n    indexOf = function indexOf(list, elem) {\n      var i = 0,\n          len = list.length;\n\n      for (; i < len; i++) {\n        if (list[i] === elem) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n        booleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|\" + \"ismap|loop|multiple|open|readonly|required|scoped\",\n        // Regular expressions\n    // http://www.w3.org/TR/css3-selectors/#whitespace\n    whitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n        // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n    identifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace + \"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n    attributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace + // Operator (capture 2)\n    \"*([*^$|!~]?=)\" + whitespace + // \"Attribute values must be CSS identifiers [capture 5]\n    // or strings [capture 3 or capture 4]\"\n    \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace + \"*\\\\]\",\n        pseudos = \":(\" + identifier + \")(?:\\\\((\" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n    // 1. quoted (capture 3; capture 4 or capture 5)\n    \"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" + // 2. simple (capture 6)\n    \"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" + // 3. anything else (capture 2)\n    \".*\" + \")\\\\)|)\",\n        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n    rwhitespace = new RegExp(whitespace + \"+\", \"g\"),\n        rtrim = new RegExp(\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\"),\n        rcomma = new RegExp(\"^\" + whitespace + \"*,\" + whitespace + \"*\"),\n        rcombinators = new RegExp(\"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\"),\n        rdescend = new RegExp(whitespace + \"|>\"),\n        rpseudo = new RegExp(pseudos),\n        ridentifier = new RegExp(\"^\" + identifier + \"$\"),\n        matchExpr = {\n      \"ID\": new RegExp(\"^#(\" + identifier + \")\"),\n      \"CLASS\": new RegExp(\"^\\\\.(\" + identifier + \")\"),\n      \"TAG\": new RegExp(\"^(\" + identifier + \"|[*])\"),\n      \"ATTR\": new RegExp(\"^\" + attributes),\n      \"PSEUDO\": new RegExp(\"^\" + pseudos),\n      \"CHILD\": new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\"),\n      \"bool\": new RegExp(\"^(?:\" + booleans + \")$\", \"i\"),\n      // For use in libraries implementing .is()\n      // We use this for POS matching in `select`\n      \"needsContext\": new RegExp(\"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n    },\n        rhtml = /HTML$/i,\n        rinputs = /^(?:input|select|textarea|button)$/i,\n        rheader = /^h\\d$/i,\n        rnative = /^[^{]+\\{\\s*\\[native \\w/,\n        // Easily-parseable/retrievable ID or TAG or CLASS selectors\n    rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n        rsibling = /[+~]/,\n        // CSS escapes\n    // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n    runescape = new RegExp(\"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace + \"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\"),\n        funescape = function funescape(escape, nonHex) {\n      var high = \"0x\" + escape.slice(1) - 0x10000;\n      return nonHex ? // Strip the backslash prefix from a non-hex escape sequence\n      nonHex : // Replace a hexadecimal escape sequence with the encoded Unicode code point\n      // Support: IE <=11+\n      // For values outside the Basic Multilingual Plane (BMP), manually construct a\n      // surrogate pair\n      high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);\n    },\n        // CSS string/identifier serialization\n    // https://drafts.csswg.org/cssom/#common-serializing-idioms\n    rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n        fcssescape = function fcssescape(ch, asCodePoint) {\n      if (asCodePoint) {\n        // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n        if (ch === \"\\0\") {\n          return \"\\uFFFD\";\n        } // Control characters and (dependent upon position) numbers get escaped as code points\n\n\n        return ch.slice(0, -1) + \"\\\\\" + ch.charCodeAt(ch.length - 1).toString(16) + \" \";\n      } // Other potentially-special ASCII characters get backslash-escaped\n\n\n      return \"\\\\\" + ch;\n    },\n        // Used for iframes\n    // See setDocument()\n    // Removing the function wrapper causes a \"Permission Denied\"\n    // error in IE\n    unloadHandler = function unloadHandler() {\n      setDocument();\n    },\n        inDisabledFieldset = addCombinator(function (elem) {\n      return elem.disabled === true && elem.nodeName.toLowerCase() === \"fieldset\";\n    }, {\n      dir: \"parentNode\",\n      next: \"legend\"\n    }); // Optimize for push.apply( _, NodeList )\n\n\n    try {\n      push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0\n      // Detect silently failing push.apply\n      // eslint-disable-next-line no-unused-expressions\n\n      arr[preferredDoc.childNodes.length].nodeType;\n    } catch (e) {\n      push = {\n        apply: arr.length ? // Leverage slice if possible\n        function (target, els) {\n          pushNative.apply(target, slice.call(els));\n        } : // Support: IE<9\n        // Otherwise append directly\n        function (target, els) {\n          var j = target.length,\n              i = 0; // Can't trust NodeList.length\n\n          while (target[j++] = els[i++]) {}\n\n          target.length = j - 1;\n        }\n      };\n    }\n\n    function Sizzle(selector, context, results, seed) {\n      var m,\n          i,\n          elem,\n          nid,\n          match,\n          groups,\n          newSelector,\n          newContext = context && context.ownerDocument,\n          // nodeType defaults to 9, since context defaults to document\n      nodeType = context ? context.nodeType : 9;\n      results = results || []; // Return early from calls with invalid selector or context\n\n      if (typeof selector !== \"string\" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {\n        return results;\n      } // Try to shortcut find operations (as opposed to filters) in HTML documents\n\n\n      if (!seed) {\n        setDocument(context);\n        context = context || document;\n\n        if (documentIsHTML) {\n          // If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n          // (excepting DocumentFragment context, where the methods don't exist)\n          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {\n            // ID selector\n            if (m = match[1]) {\n              // Document context\n              if (nodeType === 9) {\n                if (elem = context.getElementById(m)) {\n                  // Support: IE, Opera, Webkit\n                  // TODO: identify versions\n                  // getElementById can match elements by name instead of ID\n                  if (elem.id === m) {\n                    results.push(elem);\n                    return results;\n                  }\n                } else {\n                  return results;\n                } // Element context\n\n              } else {\n                // Support: IE, Opera, Webkit\n                // TODO: identify versions\n                // getElementById can match elements by name instead of ID\n                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {\n                  results.push(elem);\n                  return results;\n                }\n              } // Type selector\n\n            } else if (match[2]) {\n              push.apply(results, context.getElementsByTagName(selector));\n              return results; // Class selector\n            } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {\n              push.apply(results, context.getElementsByClassName(m));\n              return results;\n            }\n          } // Take advantage of querySelectorAll\n\n\n          if (support.qsa && !nonnativeSelectorCache[selector + \" \"] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && ( // Support: IE 8 only\n          // Exclude object elements\n          nodeType !== 1 || context.nodeName.toLowerCase() !== \"object\")) {\n            newSelector = selector;\n            newContext = context; // qSA considers elements outside a scoping root when evaluating child or\n            // descendant combinators, which is not what we want.\n            // In such cases, we work around the behavior by prefixing every selector in the\n            // list with an ID selector referencing the scope context.\n            // The technique has to be used as well when a leading combinator is used\n            // as such selectors are not recognized by querySelectorAll.\n            // Thanks to Andrew Dupont for this technique.\n\n            if (nodeType === 1 && (rdescend.test(selector) || rcombinators.test(selector))) {\n              // Expand context for sibling selectors\n              newContext = rsibling.test(selector) && testContext(context.parentNode) || context; // We can use :scope instead of the ID hack if the browser\n              // supports it & if we're not changing the context.\n\n              if (newContext !== context || !support.scope) {\n                // Capture the context ID, setting it first if necessary\n                if (nid = context.getAttribute(\"id\")) {\n                  nid = nid.replace(rcssescape, fcssescape);\n                } else {\n                  context.setAttribute(\"id\", nid = expando);\n                }\n              } // Prefix every selector in the list\n\n\n              groups = tokenize(selector);\n              i = groups.length;\n\n              while (i--) {\n                groups[i] = (nid ? \"#\" + nid : \":scope\") + \" \" + toSelector(groups[i]);\n              }\n\n              newSelector = groups.join(\",\");\n            }\n\n            try {\n              push.apply(results, newContext.querySelectorAll(newSelector));\n              return results;\n            } catch (qsaError) {\n              nonnativeSelectorCache(selector, true);\n            } finally {\n              if (nid === expando) {\n                context.removeAttribute(\"id\");\n              }\n            }\n          }\n        }\n      } // All others\n\n\n      return select(selector.replace(rtrim, \"$1\"), context, results, seed);\n    }\n    /**\n     * Create key-value caches of limited size\n     * @returns {function(string, object)} Returns the Object data after storing it on itself with\n     *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n     *\tdeleting the oldest entry\n     */\n\n\n    function createCache() {\n      var keys = [];\n\n      function cache(key, value) {\n        // Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n        if (keys.push(key + \" \") > Expr.cacheLength) {\n          // Only keep the most recent entries\n          delete cache[keys.shift()];\n        }\n\n        return cache[key + \" \"] = value;\n      }\n\n      return cache;\n    }\n    /**\n     * Mark a function for special use by Sizzle\n     * @param {Function} fn The function to mark\n     */\n\n\n    function markFunction(fn) {\n      fn[expando] = true;\n      return fn;\n    }\n    /**\n     * Support testing using an element\n     * @param {Function} fn Passed the created element and returns a boolean result\n     */\n\n\n    function assert(fn) {\n      var el = document.createElement(\"fieldset\");\n\n      try {\n        return !!fn(el);\n      } catch (e) {\n        return false;\n      } finally {\n        // Remove from its parent by default\n        if (el.parentNode) {\n          el.parentNode.removeChild(el);\n        } // release memory in IE\n\n\n        el = null;\n      }\n    }\n    /**\n     * Adds the same handler for all of the specified attrs\n     * @param {String} attrs Pipe-separated list of attributes\n     * @param {Function} handler The method that will be applied\n     */\n\n\n    function addHandle(attrs, handler) {\n      var arr = attrs.split(\"|\"),\n          i = arr.length;\n\n      while (i--) {\n        Expr.attrHandle[arr[i]] = handler;\n      }\n    }\n    /**\n     * Checks document order of two siblings\n     * @param {Element} a\n     * @param {Element} b\n     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n     */\n\n\n    function siblingCheck(a, b) {\n      var cur = b && a,\n          diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex; // Use IE sourceIndex if available on both nodes\n\n      if (diff) {\n        return diff;\n      } // Check if b follows a\n\n\n      if (cur) {\n        while (cur = cur.nextSibling) {\n          if (cur === b) {\n            return -1;\n          }\n        }\n      }\n\n      return a ? 1 : -1;\n    }\n    /**\n     * Returns a function to use in pseudos for input types\n     * @param {String} type\n     */\n\n\n    function createInputPseudo(type) {\n      return function (elem) {\n        var name = elem.nodeName.toLowerCase();\n        return name === \"input\" && elem.type === type;\n      };\n    }\n    /**\n     * Returns a function to use in pseudos for buttons\n     * @param {String} type\n     */\n\n\n    function createButtonPseudo(type) {\n      return function (elem) {\n        var name = elem.nodeName.toLowerCase();\n        return (name === \"input\" || name === \"button\") && elem.type === type;\n      };\n    }\n    /**\n     * Returns a function to use in pseudos for :enabled/:disabled\n     * @param {Boolean} disabled true for :disabled; false for :enabled\n     */\n\n\n    function createDisabledPseudo(disabled) {\n      // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n      return function (elem) {\n        // Only certain elements can match :enabled or :disabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n        if (\"form\" in elem) {\n          // Check for inherited disabledness on relevant non-disabled elements:\n          // * listed form-associated elements in a disabled fieldset\n          //   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n          //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n          // * option elements in a disabled optgroup\n          //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n          // All such elements have a \"form\" property.\n          if (elem.parentNode && elem.disabled === false) {\n            // Option elements defer to a parent optgroup if present\n            if (\"label\" in elem) {\n              if (\"label\" in elem.parentNode) {\n                return elem.parentNode.disabled === disabled;\n              } else {\n                return elem.disabled === disabled;\n              }\n            } // Support: IE 6 - 11\n            // Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\n\n            return elem.isDisabled === disabled || // Where there is no isDisabled, check manually\n\n            /* jshint -W018 */\n            elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;\n          }\n\n          return elem.disabled === disabled; // Try to winnow out elements that can't be disabled before trusting the disabled property.\n          // Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n          // even exist on them, let alone have a boolean value.\n        } else if (\"label\" in elem) {\n          return elem.disabled === disabled;\n        } // Remaining elements are neither :enabled nor :disabled\n\n\n        return false;\n      };\n    }\n    /**\n     * Returns a function to use in pseudos for positionals\n     * @param {Function} fn\n     */\n\n\n    function createPositionalPseudo(fn) {\n      return markFunction(function (argument) {\n        argument = +argument;\n        return markFunction(function (seed, matches) {\n          var j,\n              matchIndexes = fn([], seed.length, argument),\n              i = matchIndexes.length; // Match elements found at the specified indexes\n\n          while (i--) {\n            if (seed[j = matchIndexes[i]]) {\n              seed[j] = !(matches[j] = seed[j]);\n            }\n          }\n        });\n      });\n    }\n    /**\n     * Checks a node for validity as a Sizzle context\n     * @param {Element|Object=} context\n     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n     */\n\n\n    function testContext(context) {\n      return context && typeof context.getElementsByTagName !== \"undefined\" && context;\n    } // Expose support vars for convenience\n\n\n    support = Sizzle.support = {};\n    /**\n     * Detects XML nodes\n     * @param {Element|Object} elem An element or a document\n     * @returns {Boolean} True iff elem is a non-HTML XML node\n     */\n\n    isXML = Sizzle.isXML = function (elem) {\n      var namespace = elem && elem.namespaceURI,\n          docElem = elem && (elem.ownerDocument || elem).documentElement; // Support: IE <=8\n      // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes\n      // https://bugs.jquery.com/ticket/4833\n\n      return !rhtml.test(namespace || docElem && docElem.nodeName || \"HTML\");\n    };\n    /**\n     * Sets document-related variables once based on the current document\n     * @param {Element|Object} [doc] An element or document object to use to set the document\n     * @returns {Object} Returns the current document\n     */\n\n\n    setDocument = Sizzle.setDocument = function (node) {\n      var hasCompare,\n          subWindow,\n          doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n\n      if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {\n        return document;\n      } // Update global variables\n\n\n      document = doc;\n      docElem = document.documentElement;\n      documentIsHTML = !isXML(document); // Support: IE 9 - 11+, Edge 12 - 18+\n      // Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n\n      if (preferredDoc != document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {\n        // Support: IE 11, Edge\n        if (subWindow.addEventListener) {\n          subWindow.addEventListener(\"unload\", unloadHandler, false); // Support: IE 9 - 10 only\n        } else if (subWindow.attachEvent) {\n          subWindow.attachEvent(\"onunload\", unloadHandler);\n        }\n      } // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,\n      // Safari 4 - 5 only, Opera <=11.6 - 12.x only\n      // IE/Edge & older browsers don't support the :scope pseudo-class.\n      // Support: Safari 6.0 only\n      // Safari 6.0 supports :scope but it's an alias of :root there.\n\n\n      support.scope = assert(function (el) {\n        docElem.appendChild(el).appendChild(document.createElement(\"div\"));\n        return typeof el.querySelectorAll !== \"undefined\" && !el.querySelectorAll(\":scope fieldset div\").length;\n      });\n      /* Attributes\n      ---------------------------------------------------------------------- */\n      // Support: IE<8\n      // Verify that getAttribute really returns attributes and not properties\n      // (excepting IE8 booleans)\n\n      support.attributes = assert(function (el) {\n        el.className = \"i\";\n        return !el.getAttribute(\"className\");\n      });\n      /* getElement(s)By*\n      ---------------------------------------------------------------------- */\n      // Check if getElementsByTagName(\"*\") returns only elements\n\n      support.getElementsByTagName = assert(function (el) {\n        el.appendChild(document.createComment(\"\"));\n        return !el.getElementsByTagName(\"*\").length;\n      }); // Support: IE<9\n\n      support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10\n      // Check if getElementById returns elements by name\n      // The broken getElementById methods don't pick up programmatically-set names,\n      // so use a roundabout getElementsByName test\n\n      support.getById = assert(function (el) {\n        docElem.appendChild(el).id = expando;\n        return !document.getElementsByName || !document.getElementsByName(expando).length;\n      }); // ID filter and find\n\n      if (support.getById) {\n        Expr.filter[\"ID\"] = function (id) {\n          var attrId = id.replace(runescape, funescape);\n          return function (elem) {\n            return elem.getAttribute(\"id\") === attrId;\n          };\n        };\n\n        Expr.find[\"ID\"] = function (id, context) {\n          if (typeof context.getElementById !== \"undefined\" && documentIsHTML) {\n            var elem = context.getElementById(id);\n            return elem ? [elem] : [];\n          }\n        };\n      } else {\n        Expr.filter[\"ID\"] = function (id) {\n          var attrId = id.replace(runescape, funescape);\n          return function (elem) {\n            var node = typeof elem.getAttributeNode !== \"undefined\" && elem.getAttributeNode(\"id\");\n            return node && node.value === attrId;\n          };\n        }; // Support: IE 6 - 7 only\n        // getElementById is not reliable as a find shortcut\n\n\n        Expr.find[\"ID\"] = function (id, context) {\n          if (typeof context.getElementById !== \"undefined\" && documentIsHTML) {\n            var node,\n                i,\n                elems,\n                elem = context.getElementById(id);\n\n            if (elem) {\n              // Verify the id attribute\n              node = elem.getAttributeNode(\"id\");\n\n              if (node && node.value === id) {\n                return [elem];\n              } // Fall back on getElementsByName\n\n\n              elems = context.getElementsByName(id);\n              i = 0;\n\n              while (elem = elems[i++]) {\n                node = elem.getAttributeNode(\"id\");\n\n                if (node && node.value === id) {\n                  return [elem];\n                }\n              }\n            }\n\n            return [];\n          }\n        };\n      } // Tag\n\n\n      Expr.find[\"TAG\"] = support.getElementsByTagName ? function (tag, context) {\n        if (typeof context.getElementsByTagName !== \"undefined\") {\n          return context.getElementsByTagName(tag); // DocumentFragment nodes don't have gEBTN\n        } else if (support.qsa) {\n          return context.querySelectorAll(tag);\n        }\n      } : function (tag, context) {\n        var elem,\n            tmp = [],\n            i = 0,\n            // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n        results = context.getElementsByTagName(tag); // Filter out possible comments\n\n        if (tag === \"*\") {\n          while (elem = results[i++]) {\n            if (elem.nodeType === 1) {\n              tmp.push(elem);\n            }\n          }\n\n          return tmp;\n        }\n\n        return results;\n      }; // Class\n\n      Expr.find[\"CLASS\"] = support.getElementsByClassName && function (className, context) {\n        if (typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML) {\n          return context.getElementsByClassName(className);\n        }\n      };\n      /* QSA/matchesSelector\n      ---------------------------------------------------------------------- */\n      // QSA and matchesSelector support\n      // matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\n\n      rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)\n      // We allow this because of a bug in IE8/9 that throws an error\n      // whenever `document.activeElement` is accessed on an iframe\n      // So, we allow :focus to pass through QSA all the time to avoid the IE error\n      // See https://bugs.jquery.com/ticket/13378\n\n      rbuggyQSA = [];\n\n      if (support.qsa = rnative.test(document.querySelectorAll)) {\n        // Build QSA regex\n        // Regex strategy adopted from Diego Perini\n        assert(function (el) {\n          var input; // Select is set to empty string on purpose\n          // This is to test IE's treatment of not explicitly\n          // setting a boolean content attribute,\n          // since its presence should be enough\n          // https://bugs.jquery.com/ticket/12359\n\n          docElem.appendChild(el).innerHTML = \"<a id='\" + expando + \"'></a>\" + \"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" + \"<option selected=''></option></select>\"; // Support: IE8, Opera 11-12.16\n          // Nothing should be selected when empty strings follow ^= or $= or *=\n          // The test attribute must be unknown in Opera but \"safe\" for WinRT\n          // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\n          if (el.querySelectorAll(\"[msallowcapture^='']\").length) {\n            rbuggyQSA.push(\"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\");\n          } // Support: IE8\n          // Boolean attributes and \"value\" are not treated correctly\n\n\n          if (!el.querySelectorAll(\"[selected]\").length) {\n            rbuggyQSA.push(\"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\");\n          } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\n\n          if (!el.querySelectorAll(\"[id~=\" + expando + \"-]\").length) {\n            rbuggyQSA.push(\"~=\");\n          } // Support: IE 11+, Edge 15 - 18+\n          // IE 11/Edge don't find elements on a `[name='']` query in some cases.\n          // Adding a temporary attribute to the document before the selection works\n          // around the issue.\n          // Interestingly, IE 10 & older don't seem to have the issue.\n\n\n          input = document.createElement(\"input\");\n          input.setAttribute(\"name\", \"\");\n          el.appendChild(input);\n\n          if (!el.querySelectorAll(\"[name='']\").length) {\n            rbuggyQSA.push(\"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" + whitespace + \"*(?:''|\\\"\\\")\");\n          } // Webkit/Opera - :checked should return selected option elements\n          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n          // IE8 throws error here and will not see later tests\n\n\n          if (!el.querySelectorAll(\":checked\").length) {\n            rbuggyQSA.push(\":checked\");\n          } // Support: Safari 8+, iOS 8+\n          // https://bugs.webkit.org/show_bug.cgi?id=136851\n          // In-page `selector#id sibling-combinator selector` fails\n\n\n          if (!el.querySelectorAll(\"a#\" + expando + \"+*\").length) {\n            rbuggyQSA.push(\".#.+[+~]\");\n          } // Support: Firefox <=3.6 - 5 only\n          // Old Firefox doesn't throw on a badly-escaped identifier.\n\n\n          el.querySelectorAll(\"\\\\\\f\");\n          rbuggyQSA.push(\"[\\\\r\\\\n\\\\f]\");\n        });\n        assert(function (el) {\n          el.innerHTML = \"<a href='' disabled='disabled'></a>\" + \"<select disabled='disabled'><option/></select>\"; // Support: Windows 8 Native Apps\n          // The type and name attributes are restricted during .innerHTML assignment\n\n          var input = document.createElement(\"input\");\n          input.setAttribute(\"type\", \"hidden\");\n          el.appendChild(input).setAttribute(\"name\", \"D\"); // Support: IE8\n          // Enforce case-sensitivity of name attribute\n\n          if (el.querySelectorAll(\"[name=d]\").length) {\n            rbuggyQSA.push(\"name\" + whitespace + \"*[*^$|!~]?=\");\n          } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n          // IE8 throws error here and will not see later tests\n\n\n          if (el.querySelectorAll(\":enabled\").length !== 2) {\n            rbuggyQSA.push(\":enabled\", \":disabled\");\n          } // Support: IE9-11+\n          // IE's :disabled selector does not pick up the children of disabled fieldsets\n\n\n          docElem.appendChild(el).disabled = true;\n\n          if (el.querySelectorAll(\":disabled\").length !== 2) {\n            rbuggyQSA.push(\":enabled\", \":disabled\");\n          } // Support: Opera 10 - 11 only\n          // Opera 10-11 does not throw on post-comma invalid pseudos\n\n\n          el.querySelectorAll(\"*,:x\");\n          rbuggyQSA.push(\",.*:\");\n        });\n      }\n\n      if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {\n        assert(function (el) {\n          // Check to see if it's possible to do matchesSelector\n          // on a disconnected node (IE 9)\n          support.disconnectedMatch = matches.call(el, \"*\"); // This should fail with an exception\n          // Gecko does not error, returns false instead\n\n          matches.call(el, \"[s!='']:x\");\n          rbuggyMatches.push(\"!=\", pseudos);\n        });\n      }\n\n      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join(\"|\"));\n      rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join(\"|\"));\n      /* Contains\n      ---------------------------------------------------------------------- */\n\n      hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another\n      // Purposefully self-exclusive\n      // As in, an element does not contain itself\n\n      contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {\n        var adown = a.nodeType === 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\n      } : function (a, b) {\n        if (b) {\n          while (b = b.parentNode) {\n            if (b === a) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      };\n      /* Sorting\n      ---------------------------------------------------------------------- */\n      // Document order sorting\n\n      sortOrder = hasCompare ? function (a, b) {\n        // Flag for duplicate removal\n        if (a === b) {\n          hasDuplicate = true;\n          return 0;\n        } // Sort on method existence if only one input has compareDocumentPosition\n\n\n        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\n        if (compare) {\n          return compare;\n        } // Calculate position if both inputs belong to the same document\n        // Support: IE 11+, Edge 17 - 18+\n        // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n        // two documents; shallow comparisons work.\n        // eslint-disable-next-line eqeqeq\n\n\n        compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected\n        1; // Disconnected nodes\n\n        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {\n          // Choose the first element that is related to our preferred document\n          // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n          // two documents; shallow comparisons work.\n          // eslint-disable-next-line eqeqeq\n          if (a == document || a.ownerDocument == preferredDoc && contains(preferredDoc, a)) {\n            return -1;\n          } // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n          // two documents; shallow comparisons work.\n          // eslint-disable-next-line eqeqeq\n\n\n          if (b == document || b.ownerDocument == preferredDoc && contains(preferredDoc, b)) {\n            return 1;\n          } // Maintain original order\n\n\n          return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\n        }\n\n        return compare & 4 ? -1 : 1;\n      } : function (a, b) {\n        // Exit early if the nodes are identical\n        if (a === b) {\n          hasDuplicate = true;\n          return 0;\n        }\n\n        var cur,\n            i = 0,\n            aup = a.parentNode,\n            bup = b.parentNode,\n            ap = [a],\n            bp = [b]; // Parentless nodes are either documents or disconnected\n\n        if (!aup || !bup) {\n          // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n          // two documents; shallow comparisons work.\n\n          /* eslint-disable eqeqeq */\n          return a == document ? -1 : b == document ? 1 :\n          /* eslint-enable eqeqeq */\n          aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check\n        } else if (aup === bup) {\n          return siblingCheck(a, b);\n        } // Otherwise we need full lists of their ancestors for comparison\n\n\n        cur = a;\n\n        while (cur = cur.parentNode) {\n          ap.unshift(cur);\n        }\n\n        cur = b;\n\n        while (cur = cur.parentNode) {\n          bp.unshift(cur);\n        } // Walk down the tree looking for a discrepancy\n\n\n        while (ap[i] === bp[i]) {\n          i++;\n        }\n\n        return i ? // Do a sibling check if the nodes have a common ancestor\n        siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first\n        // Support: IE 11+, Edge 17 - 18+\n        // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n        // two documents; shallow comparisons work.\n\n        /* eslint-disable eqeqeq */\n        ap[i] == preferredDoc ? -1 : bp[i] == preferredDoc ? 1 :\n        /* eslint-enable eqeqeq */\n        0;\n      };\n      return document;\n    };\n\n    Sizzle.matches = function (expr, elements) {\n      return Sizzle(expr, null, null, elements);\n    };\n\n    Sizzle.matchesSelector = function (elem, expr) {\n      setDocument(elem);\n\n      if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + \" \"] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {\n        try {\n          var ret = matches.call(elem, expr); // IE 9's matchesSelector returns false on disconnected nodes\n\n          if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document\n          // fragment in IE 9\n          elem.document && elem.document.nodeType !== 11) {\n            return ret;\n          }\n        } catch (e) {\n          nonnativeSelectorCache(expr, true);\n        }\n      }\n\n      return Sizzle(expr, document, null, [elem]).length > 0;\n    };\n\n    Sizzle.contains = function (context, elem) {\n      // Set document vars if needed\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n      if ((context.ownerDocument || context) != document) {\n        setDocument(context);\n      }\n\n      return contains(context, elem);\n    };\n\n    Sizzle.attr = function (elem, name) {\n      // Set document vars if needed\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n      if ((elem.ownerDocument || elem) != document) {\n        setDocument(elem);\n      }\n\n      var fn = Expr.attrHandle[name.toLowerCase()],\n          // Don't get fooled by Object.prototype properties (jQuery #13807)\n      val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;\n      return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n    };\n\n    Sizzle.escape = function (sel) {\n      return (sel + \"\").replace(rcssescape, fcssescape);\n    };\n\n    Sizzle.error = function (msg) {\n      throw new Error(\"Syntax error, unrecognized expression: \" + msg);\n    };\n    /**\n     * Document sorting and removing duplicates\n     * @param {ArrayLike} results\n     */\n\n\n    Sizzle.uniqueSort = function (results) {\n      var elem,\n          duplicates = [],\n          j = 0,\n          i = 0; // Unless we *know* we can detect duplicates, assume their presence\n\n      hasDuplicate = !support.detectDuplicates;\n      sortInput = !support.sortStable && results.slice(0);\n      results.sort(sortOrder);\n\n      if (hasDuplicate) {\n        while (elem = results[i++]) {\n          if (elem === results[i]) {\n            j = duplicates.push(i);\n          }\n        }\n\n        while (j--) {\n          results.splice(duplicates[j], 1);\n        }\n      } // Clear input after sorting to release objects\n      // See https://github.com/jquery/sizzle/pull/225\n\n\n      sortInput = null;\n      return results;\n    };\n    /**\n     * Utility function for retrieving the text value of an array of DOM nodes\n     * @param {Array|Element} elem\n     */\n\n\n    getText = Sizzle.getText = function (elem) {\n      var node,\n          ret = \"\",\n          i = 0,\n          nodeType = elem.nodeType;\n\n      if (!nodeType) {\n        // If no nodeType, this is expected to be an array\n        while (node = elem[i++]) {\n          // Do not traverse comment nodes\n          ret += getText(node);\n        }\n      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\n        // Use textContent for elements\n        // innerText usage removed for consistency of new lines (jQuery #11153)\n        if (typeof elem.textContent === \"string\") {\n          return elem.textContent;\n        } else {\n          // Traverse its children\n          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n            ret += getText(elem);\n          }\n        }\n      } else if (nodeType === 3 || nodeType === 4) {\n        return elem.nodeValue;\n      } // Do not include comment or processing instruction nodes\n\n\n      return ret;\n    };\n\n    Expr = Sizzle.selectors = {\n      // Can be adjusted by the user\n      cacheLength: 50,\n      createPseudo: markFunction,\n      match: matchExpr,\n      attrHandle: {},\n      find: {},\n      relative: {\n        \">\": {\n          dir: \"parentNode\",\n          first: true\n        },\n        \" \": {\n          dir: \"parentNode\"\n        },\n        \"+\": {\n          dir: \"previousSibling\",\n          first: true\n        },\n        \"~\": {\n          dir: \"previousSibling\"\n        }\n      },\n      preFilter: {\n        \"ATTR\": function ATTR(match) {\n          match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted\n\n          match[3] = (match[3] || match[4] || match[5] || \"\").replace(runescape, funescape);\n\n          if (match[2] === \"~=\") {\n            match[3] = \" \" + match[3] + \" \";\n          }\n\n          return match.slice(0, 4);\n        },\n        \"CHILD\": function CHILD(match) {\n          /* matches from matchExpr[\"CHILD\"]\n          \t1 type (only|nth|...)\n          \t2 what (child|of-type)\n          \t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n          \t4 xn-component of xn+y argument ([+-]?\\d*n|)\n          \t5 sign of xn-component\n          \t6 x of xn-component\n          \t7 sign of y-component\n          \t8 y of y-component\n          */\n          match[1] = match[1].toLowerCase();\n\n          if (match[1].slice(0, 3) === \"nth\") {\n            // nth-* requires argument\n            if (!match[3]) {\n              Sizzle.error(match[0]);\n            } // numeric x and y parameters for Expr.filter.CHILD\n            // remember that false/true cast respectively to 0/1\n\n\n            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === \"even\" || match[3] === \"odd\"));\n            match[5] = +(match[7] + match[8] || match[3] === \"odd\"); // other types prohibit arguments\n          } else if (match[3]) {\n            Sizzle.error(match[0]);\n          }\n\n          return match;\n        },\n        \"PSEUDO\": function PSEUDO(match) {\n          var excess,\n              unquoted = !match[6] && match[2];\n\n          if (matchExpr[\"CHILD\"].test(match[0])) {\n            return null;\n          } // Accept quoted arguments as-is\n\n\n          if (match[3]) {\n            match[2] = match[4] || match[5] || \"\"; // Strip excess characters from unquoted arguments\n          } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)\n          excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis\n          excess = unquoted.indexOf(\")\", unquoted.length - excess) - unquoted.length)) {\n            // excess is a negative index\n            match[0] = match[0].slice(0, excess);\n            match[2] = unquoted.slice(0, excess);\n          } // Return only captures needed by the pseudo filter method (type and argument)\n\n\n          return match.slice(0, 3);\n        }\n      },\n      filter: {\n        \"TAG\": function TAG(nodeNameSelector) {\n          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();\n          return nodeNameSelector === \"*\" ? function () {\n            return true;\n          } : function (elem) {\n            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n          };\n        },\n        \"CLASS\": function CLASS(className) {\n          var pattern = classCache[className + \" \"];\n          return pattern || (pattern = new RegExp(\"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\")) && classCache(className, function (elem) {\n            return pattern.test(typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\");\n          });\n        },\n        \"ATTR\": function ATTR(name, operator, check) {\n          return function (elem) {\n            var result = Sizzle.attr(elem, name);\n\n            if (result == null) {\n              return operator === \"!=\";\n            }\n\n            if (!operator) {\n              return true;\n            }\n\n            result += \"\";\n            /* eslint-disable max-len */\n\n            return operator === \"=\" ? result === check : operator === \"!=\" ? result !== check : operator === \"^=\" ? check && result.indexOf(check) === 0 : operator === \"*=\" ? check && result.indexOf(check) > -1 : operator === \"$=\" ? check && result.slice(-check.length) === check : operator === \"~=\" ? (\" \" + result.replace(rwhitespace, \" \") + \" \").indexOf(check) > -1 : operator === \"|=\" ? result === check || result.slice(0, check.length + 1) === check + \"-\" : false;\n            /* eslint-enable max-len */\n          };\n        },\n        \"CHILD\": function CHILD(type, what, _argument, first, last) {\n          var simple = type.slice(0, 3) !== \"nth\",\n              forward = type.slice(-4) !== \"last\",\n              ofType = what === \"of-type\";\n          return first === 1 && last === 0 ? // Shortcut for :nth-*(n)\n          function (elem) {\n            return !!elem.parentNode;\n          } : function (elem, _context, xml) {\n            var cache,\n                uniqueCache,\n                outerCache,\n                node,\n                nodeIndex,\n                start,\n                dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n                parent = elem.parentNode,\n                name = ofType && elem.nodeName.toLowerCase(),\n                useCache = !xml && !ofType,\n                diff = false;\n\n            if (parent) {\n              // :(first|last|only)-(child|of-type)\n              if (simple) {\n                while (dir) {\n                  node = elem;\n\n                  while (node = node[dir]) {\n                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {\n                      return false;\n                    }\n                  } // Reverse direction for :only-* (if we haven't yet done so)\n\n\n                  start = dir = type === \"only\" && !start && \"nextSibling\";\n                }\n\n                return true;\n              }\n\n              start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`\n\n              if (forward && useCache) {\n                // Seek `elem` from a previously-cached index\n                // ...in a gzip-friendly way\n                node = parent;\n                outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                // Defend against cloned attroperties (jQuery gh-1709)\n\n                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                cache = uniqueCache[type] || [];\n                nodeIndex = cache[0] === dirruns && cache[1];\n                diff = nodeIndex && cache[2];\n                node = nodeIndex && parent.childNodes[nodeIndex];\n\n                while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start\n                diff = nodeIndex = 0) || start.pop()) {\n                  // When found, cache indexes on `parent` and break\n                  if (node.nodeType === 1 && ++diff && node === elem) {\n                    uniqueCache[type] = [dirruns, nodeIndex, diff];\n                    break;\n                  }\n                }\n              } else {\n                // Use previously-cached element index if available\n                if (useCache) {\n                  // ...in a gzip-friendly way\n                  node = elem;\n                  outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                  // Defend against cloned attroperties (jQuery gh-1709)\n\n                  uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                  cache = uniqueCache[type] || [];\n                  nodeIndex = cache[0] === dirruns && cache[1];\n                  diff = nodeIndex;\n                } // xml :nth-child(...)\n                // or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\n\n                if (diff === false) {\n                  // Use the same loop as above to seek `elem` from the start\n                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\n                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {\n                      // Cache the index of each encountered element\n                      if (useCache) {\n                        outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                        // Defend against cloned attroperties (jQuery gh-1709)\n\n                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                        uniqueCache[type] = [dirruns, diff];\n                      }\n\n                      if (node === elem) {\n                        break;\n                      }\n                    }\n                  }\n                }\n              } // Incorporate the offset, then check against cycle size\n\n\n              diff -= last;\n              return diff === first || diff % first === 0 && diff / first >= 0;\n            }\n          };\n        },\n        \"PSEUDO\": function PSEUDO(pseudo, argument) {\n          // pseudo-class names are case-insensitive\n          // http://www.w3.org/TR/selectors/#pseudo-classes\n          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n          // Remember that setFilters inherits from pseudos\n          var args,\n              fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error(\"unsupported pseudo: \" + pseudo); // The user may use createPseudo to indicate that\n          // arguments are needed to create the filter function\n          // just as Sizzle does\n\n          if (fn[expando]) {\n            return fn(argument);\n          } // But maintain support for old signatures\n\n\n          if (fn.length > 1) {\n            args = [pseudo, pseudo, \"\", argument];\n            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\n              var idx,\n                  matched = fn(seed, argument),\n                  i = matched.length;\n\n              while (i--) {\n                idx = indexOf(seed, matched[i]);\n                seed[idx] = !(matches[idx] = matched[i]);\n              }\n            }) : function (elem) {\n              return fn(elem, 0, args);\n            };\n          }\n\n          return fn;\n        }\n      },\n      pseudos: {\n        // Potentially complex pseudos\n        \"not\": markFunction(function (selector) {\n          // Trim the selector passed to compile\n          // to avoid treating leading and trailing\n          // spaces as combinators\n          var input = [],\n              results = [],\n              matcher = compile(selector.replace(rtrim, \"$1\"));\n          return matcher[expando] ? markFunction(function (seed, matches, _context, xml) {\n            var elem,\n                unmatched = matcher(seed, null, xml, []),\n                i = seed.length; // Match elements unmatched by `matcher`\n\n            while (i--) {\n              if (elem = unmatched[i]) {\n                seed[i] = !(matches[i] = elem);\n              }\n            }\n          }) : function (elem, _context, xml) {\n            input[0] = elem;\n            matcher(input, null, xml, results); // Don't keep the element (issue #299)\n\n            input[0] = null;\n            return !results.pop();\n          };\n        }),\n        \"has\": markFunction(function (selector) {\n          return function (elem) {\n            return Sizzle(selector, elem).length > 0;\n          };\n        }),\n        \"contains\": markFunction(function (text) {\n          text = text.replace(runescape, funescape);\n          return function (elem) {\n            return (elem.textContent || getText(elem)).indexOf(text) > -1;\n          };\n        }),\n        // \"Whether an element is represented by a :lang() selector\n        // is based solely on the element's language value\n        // being equal to the identifier C,\n        // or beginning with the identifier C immediately followed by \"-\".\n        // The matching of C against the element's language value is performed case-insensitively.\n        // The identifier C does not have to be a valid language name.\"\n        // http://www.w3.org/TR/selectors/#lang-pseudo\n        \"lang\": markFunction(function (lang) {\n          // lang value must be a valid identifier\n          if (!ridentifier.test(lang || \"\")) {\n            Sizzle.error(\"unsupported lang: \" + lang);\n          }\n\n          lang = lang.replace(runescape, funescape).toLowerCase();\n          return function (elem) {\n            var elemLang;\n\n            do {\n              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) {\n                elemLang = elemLang.toLowerCase();\n                return elemLang === lang || elemLang.indexOf(lang + \"-\") === 0;\n              }\n            } while ((elem = elem.parentNode) && elem.nodeType === 1);\n\n            return false;\n          };\n        }),\n        // Miscellaneous\n        \"target\": function target(elem) {\n          var hash = window.location && window.location.hash;\n          return hash && hash.slice(1) === elem.id;\n        },\n        \"root\": function root(elem) {\n          return elem === docElem;\n        },\n        \"focus\": function focus(elem) {\n          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n        },\n        // Boolean properties\n        \"enabled\": createDisabledPseudo(false),\n        \"disabled\": createDisabledPseudo(true),\n        \"checked\": function checked(elem) {\n          // In CSS3, :checked should return both checked and selected elements\n          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n          var nodeName = elem.nodeName.toLowerCase();\n          return nodeName === \"input\" && !!elem.checked || nodeName === \"option\" && !!elem.selected;\n        },\n        \"selected\": function selected(elem) {\n          // Accessing this property makes selected-by-default\n          // options in Safari work properly\n          if (elem.parentNode) {\n            // eslint-disable-next-line no-unused-expressions\n            elem.parentNode.selectedIndex;\n          }\n\n          return elem.selected === true;\n        },\n        // Contents\n        \"empty\": function empty(elem) {\n          // http://www.w3.org/TR/selectors/#empty-pseudo\n          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n          //   but not by others (comment: 8; processing instruction: 7; etc.)\n          // nodeType < 6 works because attributes (2) do not appear as children\n          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n            if (elem.nodeType < 6) {\n              return false;\n            }\n          }\n\n          return true;\n        },\n        \"parent\": function parent(elem) {\n          return !Expr.pseudos[\"empty\"](elem);\n        },\n        // Element/input types\n        \"header\": function header(elem) {\n          return rheader.test(elem.nodeName);\n        },\n        \"input\": function input(elem) {\n          return rinputs.test(elem.nodeName);\n        },\n        \"button\": function button(elem) {\n          var name = elem.nodeName.toLowerCase();\n          return name === \"input\" && elem.type === \"button\" || name === \"button\";\n        },\n        \"text\": function text(elem) {\n          var attr;\n          return elem.nodeName.toLowerCase() === \"input\" && elem.type === \"text\" && ( // Support: IE<8\n          // New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n          (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\");\n        },\n        // Position-in-collection\n        \"first\": createPositionalPseudo(function () {\n          return [0];\n        }),\n        \"last\": createPositionalPseudo(function (_matchIndexes, length) {\n          return [length - 1];\n        }),\n        \"eq\": createPositionalPseudo(function (_matchIndexes, length, argument) {\n          return [argument < 0 ? argument + length : argument];\n        }),\n        \"even\": createPositionalPseudo(function (matchIndexes, length) {\n          var i = 0;\n\n          for (; i < length; i += 2) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        }),\n        \"odd\": createPositionalPseudo(function (matchIndexes, length) {\n          var i = 1;\n\n          for (; i < length; i += 2) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        }),\n        \"lt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n          var i = argument < 0 ? argument + length : argument > length ? length : argument;\n\n          for (; --i >= 0;) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        }),\n        \"gt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n          var i = argument < 0 ? argument + length : argument;\n\n          for (; ++i < length;) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        })\n      }\n    };\n    Expr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"]; // Add button/input type pseudos\n\n    for (i in {\n      radio: true,\n      checkbox: true,\n      file: true,\n      password: true,\n      image: true\n    }) {\n      Expr.pseudos[i] = createInputPseudo(i);\n    }\n\n    for (i in {\n      submit: true,\n      reset: true\n    }) {\n      Expr.pseudos[i] = createButtonPseudo(i);\n    } // Easy API for creating new setFilters\n\n\n    function setFilters() {}\n\n    setFilters.prototype = Expr.filters = Expr.pseudos;\n    Expr.setFilters = new setFilters();\n\n    tokenize = Sizzle.tokenize = function (selector, parseOnly) {\n      var matched,\n          match,\n          tokens,\n          type,\n          soFar,\n          groups,\n          preFilters,\n          cached = tokenCache[selector + \" \"];\n\n      if (cached) {\n        return parseOnly ? 0 : cached.slice(0);\n      }\n\n      soFar = selector;\n      groups = [];\n      preFilters = Expr.preFilter;\n\n      while (soFar) {\n        // Comma and first run\n        if (!matched || (match = rcomma.exec(soFar))) {\n          if (match) {\n            // Don't consume trailing commas as valid\n            soFar = soFar.slice(match[0].length) || soFar;\n          }\n\n          groups.push(tokens = []);\n        }\n\n        matched = false; // Combinators\n\n        if (match = rcombinators.exec(soFar)) {\n          matched = match.shift();\n          tokens.push({\n            value: matched,\n            // Cast descendant combinators to space\n            type: match[0].replace(rtrim, \" \")\n          });\n          soFar = soFar.slice(matched.length);\n        } // Filters\n\n\n        for (type in Expr.filter) {\n          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\n            matched = match.shift();\n            tokens.push({\n              value: matched,\n              type: type,\n              matches: match\n            });\n            soFar = soFar.slice(matched.length);\n          }\n        }\n\n        if (!matched) {\n          break;\n        }\n      } // Return the length of the invalid excess\n      // if we're just parsing\n      // Otherwise, throw an error or return tokens\n\n\n      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens\n      tokenCache(selector, groups).slice(0);\n    };\n\n    function toSelector(tokens) {\n      var i = 0,\n          len = tokens.length,\n          selector = \"\";\n\n      for (; i < len; i++) {\n        selector += tokens[i].value;\n      }\n\n      return selector;\n    }\n\n    function addCombinator(matcher, combinator, base) {\n      var dir = combinator.dir,\n          skip = combinator.next,\n          key = skip || dir,\n          checkNonElements = base && key === \"parentNode\",\n          doneName = done++;\n      return combinator.first ? // Check against closest ancestor/preceding element\n      function (elem, context, xml) {\n        while (elem = elem[dir]) {\n          if (elem.nodeType === 1 || checkNonElements) {\n            return matcher(elem, context, xml);\n          }\n        }\n\n        return false;\n      } : // Check against all ancestor/preceding elements\n      function (elem, context, xml) {\n        var oldCache,\n            uniqueCache,\n            outerCache,\n            newCache = [dirruns, doneName]; // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\n        if (xml) {\n          while (elem = elem[dir]) {\n            if (elem.nodeType === 1 || checkNonElements) {\n              if (matcher(elem, context, xml)) {\n                return true;\n              }\n            }\n          }\n        } else {\n          while (elem = elem[dir]) {\n            if (elem.nodeType === 1 || checkNonElements) {\n              outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only\n              // Defend against cloned attroperties (jQuery gh-1709)\n\n              uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});\n\n              if (skip && skip === elem.nodeName.toLowerCase()) {\n                elem = elem[dir] || elem;\n              } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {\n                // Assign to newCache so results back-propagate to previous elements\n                return newCache[2] = oldCache[2];\n              } else {\n                // Reuse newcache so results back-propagate to previous elements\n                uniqueCache[key] = newCache; // A match means we're done; a fail means we have to keep checking\n\n                if (newCache[2] = matcher(elem, context, xml)) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n\n        return false;\n      };\n    }\n\n    function elementMatcher(matchers) {\n      return matchers.length > 1 ? function (elem, context, xml) {\n        var i = matchers.length;\n\n        while (i--) {\n          if (!matchers[i](elem, context, xml)) {\n            return false;\n          }\n        }\n\n        return true;\n      } : matchers[0];\n    }\n\n    function multipleContexts(selector, contexts, results) {\n      var i = 0,\n          len = contexts.length;\n\n      for (; i < len; i++) {\n        Sizzle(selector, contexts[i], results);\n      }\n\n      return results;\n    }\n\n    function condense(unmatched, map, filter, context, xml) {\n      var elem,\n          newUnmatched = [],\n          i = 0,\n          len = unmatched.length,\n          mapped = map != null;\n\n      for (; i < len; i++) {\n        if (elem = unmatched[i]) {\n          if (!filter || filter(elem, context, xml)) {\n            newUnmatched.push(elem);\n\n            if (mapped) {\n              map.push(i);\n            }\n          }\n        }\n      }\n\n      return newUnmatched;\n    }\n\n    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\n      if (postFilter && !postFilter[expando]) {\n        postFilter = setMatcher(postFilter);\n      }\n\n      if (postFinder && !postFinder[expando]) {\n        postFinder = setMatcher(postFinder, postSelector);\n      }\n\n      return markFunction(function (seed, results, context, xml) {\n        var temp,\n            i,\n            elem,\n            preMap = [],\n            postMap = [],\n            preexisting = results.length,\n            // Get initial elements from seed or context\n        elems = seed || multipleContexts(selector || \"*\", context.nodeType ? [context] : context, []),\n            // Prefilter to get matcher input, preserving a map for seed-results synchronization\n        matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,\n            matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n        postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary\n        [] : // ...otherwise use results directly\n        results : matcherIn; // Find primary matches\n\n        if (matcher) {\n          matcher(matcherIn, matcherOut, context, xml);\n        } // Apply postFilter\n\n\n        if (postFilter) {\n          temp = condense(matcherOut, postMap);\n          postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn\n\n          i = temp.length;\n\n          while (i--) {\n            if (elem = temp[i]) {\n              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\n            }\n          }\n        }\n\n        if (seed) {\n          if (postFinder || preFilter) {\n            if (postFinder) {\n              // Get the final matcherOut by condensing this intermediate into postFinder contexts\n              temp = [];\n              i = matcherOut.length;\n\n              while (i--) {\n                if (elem = matcherOut[i]) {\n                  // Restore matcherIn since elem is not yet a final match\n                  temp.push(matcherIn[i] = elem);\n                }\n              }\n\n              postFinder(null, matcherOut = [], temp, xml);\n            } // Move matched elements from seed to results to keep them synchronized\n\n\n            i = matcherOut.length;\n\n            while (i--) {\n              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {\n                seed[temp] = !(results[temp] = elem);\n              }\n            }\n          } // Add elements to results, through postFinder if defined\n\n        } else {\n          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\n\n          if (postFinder) {\n            postFinder(null, results, matcherOut, xml);\n          } else {\n            push.apply(results, matcherOut);\n          }\n        }\n      });\n    }\n\n    function matcherFromTokens(tokens) {\n      var checkContext,\n          matcher,\n          j,\n          len = tokens.length,\n          leadingRelative = Expr.relative[tokens[0].type],\n          implicitRelative = leadingRelative || Expr.relative[\" \"],\n          i = leadingRelative ? 1 : 0,\n          // The foundational matcher ensures that elements are reachable from top-level context(s)\n      matchContext = addCombinator(function (elem) {\n        return elem === checkContext;\n      }, implicitRelative, true),\n          matchAnyContext = addCombinator(function (elem) {\n        return indexOf(checkContext, elem) > -1;\n      }, implicitRelative, true),\n          matchers = [function (elem, context, xml) {\n        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)\n\n        checkContext = null;\n        return ret;\n      }];\n\n      for (; i < len; i++) {\n        if (matcher = Expr.relative[tokens[i].type]) {\n          matchers = [addCombinator(elementMatcher(matchers), matcher)];\n        } else {\n          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher\n\n          if (matcher[expando]) {\n            // Find the next relative operator (if any) for proper handling\n            j = ++i;\n\n            for (; j < len; j++) {\n              if (Expr.relative[tokens[j].type]) {\n                break;\n              }\n            }\n\n            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`\n            tokens.slice(0, i - 1).concat({\n              value: tokens[i - 2].type === \" \" ? \"*\" : \"\"\n            })).replace(rtrim, \"$1\"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));\n          }\n\n          matchers.push(matcher);\n        }\n      }\n\n      return elementMatcher(matchers);\n    }\n\n    function matcherFromGroupMatchers(elementMatchers, setMatchers) {\n      var bySet = setMatchers.length > 0,\n          byElement = elementMatchers.length > 0,\n          superMatcher = function superMatcher(seed, context, xml, results, outermost) {\n        var elem,\n            j,\n            matcher,\n            matchedCount = 0,\n            i = \"0\",\n            unmatched = seed && [],\n            setMatched = [],\n            contextBackup = outermostContext,\n            // We must always have either seed elements or outermost context\n        elems = seed || byElement && Expr.find[\"TAG\"](\"*\", outermost),\n            // Use integer dirruns iff this is the outermost matcher\n        dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,\n            len = elems.length;\n\n        if (outermost) {\n          // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n          // two documents; shallow comparisons work.\n          // eslint-disable-next-line eqeqeq\n          outermostContext = context == document || context || outermost;\n        } // Add elements passing elementMatchers directly to results\n        // Support: IE<9, Safari\n        // Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\n\n        for (; i !== len && (elem = elems[i]) != null; i++) {\n          if (byElement && elem) {\n            j = 0; // Support: IE 11+, Edge 17 - 18+\n            // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n            // two documents; shallow comparisons work.\n            // eslint-disable-next-line eqeqeq\n\n            if (!context && elem.ownerDocument != document) {\n              setDocument(elem);\n              xml = !documentIsHTML;\n            }\n\n            while (matcher = elementMatchers[j++]) {\n              if (matcher(elem, context || document, xml)) {\n                results.push(elem);\n                break;\n              }\n            }\n\n            if (outermost) {\n              dirruns = dirrunsUnique;\n            }\n          } // Track unmatched elements for set filters\n\n\n          if (bySet) {\n            // They will have gone through all possible matchers\n            if (elem = !matcher && elem) {\n              matchedCount--;\n            } // Lengthen the array for every element, matched or not\n\n\n            if (seed) {\n              unmatched.push(elem);\n            }\n          }\n        } // `i` is now the count of elements visited above, and adding it to `matchedCount`\n        // makes the latter nonnegative.\n\n\n        matchedCount += i; // Apply set filters to unmatched elements\n        // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n        // equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n        // no element matchers and no seed.\n        // Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n        // case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n        // numerically zero.\n\n        if (bySet && i !== matchedCount) {\n          j = 0;\n\n          while (matcher = setMatchers[j++]) {\n            matcher(unmatched, setMatched, context, xml);\n          }\n\n          if (seed) {\n            // Reintegrate element matches to eliminate the need for sorting\n            if (matchedCount > 0) {\n              while (i--) {\n                if (!(unmatched[i] || setMatched[i])) {\n                  setMatched[i] = pop.call(results);\n                }\n              }\n            } // Discard index placeholder values to get only actual matches\n\n\n            setMatched = condense(setMatched);\n          } // Add matches to results\n\n\n          push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting\n\n          if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\n            Sizzle.uniqueSort(results);\n          }\n        } // Override manipulation of globals by nested matchers\n\n\n        if (outermost) {\n          dirruns = dirrunsUnique;\n          outermostContext = contextBackup;\n        }\n\n        return unmatched;\n      };\n\n      return bySet ? markFunction(superMatcher) : superMatcher;\n    }\n\n    compile = Sizzle.compile = function (selector, match\n    /* Internal Use Only */\n    ) {\n      var i,\n          setMatchers = [],\n          elementMatchers = [],\n          cached = compilerCache[selector + \" \"];\n\n      if (!cached) {\n        // Generate a function of recursive functions that can be used to check each element\n        if (!match) {\n          match = tokenize(selector);\n        }\n\n        i = match.length;\n\n        while (i--) {\n          cached = matcherFromTokens(match[i]);\n\n          if (cached[expando]) {\n            setMatchers.push(cached);\n          } else {\n            elementMatchers.push(cached);\n          }\n        } // Cache the compiled function\n\n\n        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization\n\n        cached.selector = selector;\n      }\n\n      return cached;\n    };\n    /**\n     * A low-level selection function that works with Sizzle's compiled\n     *  selector functions\n     * @param {String|Function} selector A selector or a pre-compiled\n     *  selector function built with Sizzle.compile\n     * @param {Element} context\n     * @param {Array} [results]\n     * @param {Array} [seed] A set of elements to match against\n     */\n\n\n    select = Sizzle.select = function (selector, context, results, seed) {\n      var i,\n          tokens,\n          token,\n          type,\n          find,\n          compiled = typeof selector === \"function\" && selector,\n          match = !seed && tokenize(selector = compiled.selector || selector);\n      results = results || []; // Try to minimize operations if there is only one selector in the list and no seed\n      // (the latter of which guarantees us context)\n\n      if (match.length === 1) {\n        // Reduce context if the leading compound selector is an ID\n        tokens = match[0] = match[0].slice(0);\n\n        if (tokens.length > 2 && (token = tokens[0]).type === \"ID\" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {\n          context = (Expr.find[\"ID\"](token.matches[0].replace(runescape, funescape), context) || [])[0];\n\n          if (!context) {\n            return results; // Precompiled matchers will still verify ancestry, so step up a level\n          } else if (compiled) {\n            context = context.parentNode;\n          }\n\n          selector = selector.slice(tokens.shift().value.length);\n        } // Fetch a seed set for right-to-left matching\n\n\n        i = matchExpr[\"needsContext\"].test(selector) ? 0 : tokens.length;\n\n        while (i--) {\n          token = tokens[i]; // Abort if we hit a combinator\n\n          if (Expr.relative[type = token.type]) {\n            break;\n          }\n\n          if (find = Expr.find[type]) {\n            // Search, expanding context for leading sibling combinators\n            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {\n              // If seed is empty or no tokens remain, we can return early\n              tokens.splice(i, 1);\n              selector = seed.length && toSelector(tokens);\n\n              if (!selector) {\n                push.apply(results, seed);\n                return results;\n              }\n\n              break;\n            }\n          }\n        }\n      } // Compile and execute a filtering function if one is not provided\n      // Provide `match` to avoid retokenization if we modified the selector above\n\n\n      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);\n      return results;\n    }; // One-time assignments\n    // Sort stability\n\n\n    support.sortStable = expando.split(\"\").sort(sortOrder).join(\"\") === expando; // Support: Chrome 14-35+\n    // Always assume duplicates if they aren't passed to the comparison function\n\n    support.detectDuplicates = !!hasDuplicate; // Initialize against the default document\n\n    setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n    // Detached nodes confoundingly follow *each other*\n\n    support.sortDetached = assert(function (el) {\n      // Should return 1, but returns 4 (following)\n      return el.compareDocumentPosition(document.createElement(\"fieldset\")) & 1;\n    }); // Support: IE<8\n    // Prevent attribute/property \"interpolation\"\n    // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\n\n    if (!assert(function (el) {\n      el.innerHTML = \"<a href='#'></a>\";\n      return el.firstChild.getAttribute(\"href\") === \"#\";\n    })) {\n      addHandle(\"type|href|height|width\", function (elem, name, isXML) {\n        if (!isXML) {\n          return elem.getAttribute(name, name.toLowerCase() === \"type\" ? 1 : 2);\n        }\n      });\n    } // Support: IE<9\n    // Use defaultValue in place of getAttribute(\"value\")\n\n\n    if (!support.attributes || !assert(function (el) {\n      el.innerHTML = \"<input/>\";\n      el.firstChild.setAttribute(\"value\", \"\");\n      return el.firstChild.getAttribute(\"value\") === \"\";\n    })) {\n      addHandle(\"value\", function (elem, _name, isXML) {\n        if (!isXML && elem.nodeName.toLowerCase() === \"input\") {\n          return elem.defaultValue;\n        }\n      });\n    } // Support: IE<9\n    // Use getAttributeNode to fetch booleans when getAttribute lies\n\n\n    if (!assert(function (el) {\n      return el.getAttribute(\"disabled\") == null;\n    })) {\n      addHandle(booleans, function (elem, name, isXML) {\n        var val;\n\n        if (!isXML) {\n          return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n        }\n      });\n    }\n\n    return Sizzle;\n  }(window);\n\n  jQuery.find = Sizzle;\n  jQuery.expr = Sizzle.selectors; // Deprecated\n\n  jQuery.expr[\":\"] = jQuery.expr.pseudos;\n  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\n  jQuery.text = Sizzle.getText;\n  jQuery.isXMLDoc = Sizzle.isXML;\n  jQuery.contains = Sizzle.contains;\n  jQuery.escapeSelector = Sizzle.escape;\n\n  var dir = function dir(elem, _dir, until) {\n    var matched = [],\n        truncate = until !== undefined;\n\n    while ((elem = elem[_dir]) && elem.nodeType !== 9) {\n      if (elem.nodeType === 1) {\n        if (truncate && jQuery(elem).is(until)) {\n          break;\n        }\n\n        matched.push(elem);\n      }\n    }\n\n    return matched;\n  };\n\n  var _siblings = function siblings(n, elem) {\n    var matched = [];\n\n    for (; n; n = n.nextSibling) {\n      if (n.nodeType === 1 && n !== elem) {\n        matched.push(n);\n      }\n    }\n\n    return matched;\n  };\n\n  var rneedsContext = jQuery.expr.match.needsContext;\n\n  function nodeName(elem, name) {\n    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n  }\n\n  var rsingleTag = /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i; // Implement the identical functionality for filter and not\n\n  function winnow(elements, qualifier, not) {\n    if (isFunction(qualifier)) {\n      return jQuery.grep(elements, function (elem, i) {\n        return !!qualifier.call(elem, i, elem) !== not;\n      });\n    } // Single element\n\n\n    if (qualifier.nodeType) {\n      return jQuery.grep(elements, function (elem) {\n        return elem === qualifier !== not;\n      });\n    } // Arraylike of elements (jQuery, arguments, Array)\n\n\n    if (typeof qualifier !== \"string\") {\n      return jQuery.grep(elements, function (elem) {\n        return indexOf.call(qualifier, elem) > -1 !== not;\n      });\n    } // Filtered directly for both simple and complex selectors\n\n\n    return jQuery.filter(qualifier, elements, not);\n  }\n\n  jQuery.filter = function (expr, elems, not) {\n    var elem = elems[0];\n\n    if (not) {\n      expr = \":not(\" + expr + \")\";\n    }\n\n    if (elems.length === 1 && elem.nodeType === 1) {\n      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];\n    }\n\n    return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {\n      return elem.nodeType === 1;\n    }));\n  };\n\n  jQuery.fn.extend({\n    find: function find(selector) {\n      var i,\n          ret,\n          len = this.length,\n          self = this;\n\n      if (typeof selector !== \"string\") {\n        return this.pushStack(jQuery(selector).filter(function () {\n          for (i = 0; i < len; i++) {\n            if (jQuery.contains(self[i], this)) {\n              return true;\n            }\n          }\n        }));\n      }\n\n      ret = this.pushStack([]);\n\n      for (i = 0; i < len; i++) {\n        jQuery.find(selector, self[i], ret);\n      }\n\n      return len > 1 ? jQuery.uniqueSort(ret) : ret;\n    },\n    filter: function filter(selector) {\n      return this.pushStack(winnow(this, selector || [], false));\n    },\n    not: function not(selector) {\n      return this.pushStack(winnow(this, selector || [], true));\n    },\n    is: function is(selector) {\n      return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set\n      // so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n      typeof selector === \"string\" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;\n    }\n  }); // Initialize a jQuery object\n  // A central reference to the root jQuery(document)\n\n  var rootjQuery,\n      // A simple way to check for HTML strings\n  // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n  // Strict HTML recognition (#11290: must start with <)\n  // Shortcut simple #id case for speed\n  rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n      init = jQuery.fn.init = function (selector, context, root) {\n    var match, elem; // HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\n    if (!selector) {\n      return this;\n    } // Method init() accepts an alternate rootjQuery\n    // so migrate can support jQuery.sub (gh-2101)\n\n\n    root = root || rootjQuery; // Handle HTML strings\n\n    if (typeof selector === \"string\") {\n      if (selector[0] === \"<\" && selector[selector.length - 1] === \">\" && selector.length >= 3) {\n        // Assume that strings that start and end with <> are HTML and skip the regex check\n        match = [null, selector, null];\n      } else {\n        match = rquickExpr.exec(selector);\n      } // Match html or make sure no context is specified for #id\n\n\n      if (match && (match[1] || !context)) {\n        // HANDLE: $(html) -> $(array)\n        if (match[1]) {\n          context = context instanceof jQuery ? context[0] : context; // Option to run scripts is true for back-compat\n          // Intentionally let the error be thrown if parseHTML is not present\n\n          jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); // HANDLE: $(html, props)\n\n          if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n            for (match in context) {\n              // Properties of context are called as methods if possible\n              if (isFunction(this[match])) {\n                this[match](context[match]); // ...and otherwise set as attributes\n              } else {\n                this.attr(match, context[match]);\n              }\n            }\n          }\n\n          return this; // HANDLE: $(#id)\n        } else {\n          elem = document.getElementById(match[2]);\n\n          if (elem) {\n            // Inject the element directly into the jQuery object\n            this[0] = elem;\n            this.length = 1;\n          }\n\n          return this;\n        } // HANDLE: $(expr, $(...))\n\n      } else if (!context || context.jquery) {\n        return (context || root).find(selector); // HANDLE: $(expr, context)\n        // (which is just equivalent to: $(context).find(expr)\n      } else {\n        return this.constructor(context).find(selector);\n      } // HANDLE: $(DOMElement)\n\n    } else if (selector.nodeType) {\n      this[0] = selector;\n      this.length = 1;\n      return this; // HANDLE: $(function)\n      // Shortcut for document ready\n    } else if (isFunction(selector)) {\n      return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present\n      selector(jQuery);\n    }\n\n    return jQuery.makeArray(selector, this);\n  }; // Give the init function the jQuery prototype for later instantiation\n\n\n  init.prototype = jQuery.fn; // Initialize central reference\n\n  rootjQuery = jQuery(document);\n  var rparentsprev = /^(?:parents|prev(?:Until|All))/,\n      // Methods guaranteed to produce a unique set when starting from a unique set\n  guaranteedUnique = {\n    children: true,\n    contents: true,\n    next: true,\n    prev: true\n  };\n  jQuery.fn.extend({\n    has: function has(target) {\n      var targets = jQuery(target, this),\n          l = targets.length;\n      return this.filter(function () {\n        var i = 0;\n\n        for (; i < l; i++) {\n          if (jQuery.contains(this, targets[i])) {\n            return true;\n          }\n        }\n      });\n    },\n    closest: function closest(selectors, context) {\n      var cur,\n          i = 0,\n          l = this.length,\n          matched = [],\n          targets = typeof selectors !== \"string\" && jQuery(selectors); // Positional selectors never match, since there's no _selection_ context\n\n      if (!rneedsContext.test(selectors)) {\n        for (; i < l; i++) {\n          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {\n            // Always skip document fragments\n            if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don't pass non-elements to Sizzle\n            cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {\n              matched.push(cur);\n              break;\n            }\n          }\n        }\n      }\n\n      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);\n    },\n    // Determine the position of an element within the set\n    index: function index(elem) {\n      // No argument, return index in parent\n      if (!elem) {\n        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n      } // Index in selector\n\n\n      if (typeof elem === \"string\") {\n        return indexOf.call(jQuery(elem), this[0]);\n      } // Locate the position of the desired element\n\n\n      return indexOf.call(this, // If it receives a jQuery object, the first element is used\n      elem.jquery ? elem[0] : elem);\n    },\n    add: function add(selector, context) {\n      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));\n    },\n    addBack: function addBack(selector) {\n      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n    }\n  });\n\n  function sibling(cur, dir) {\n    while ((cur = cur[dir]) && cur.nodeType !== 1) {}\n\n    return cur;\n  }\n\n  jQuery.each({\n    parent: function parent(elem) {\n      var parent = elem.parentNode;\n      return parent && parent.nodeType !== 11 ? parent : null;\n    },\n    parents: function parents(elem) {\n      return dir(elem, \"parentNode\");\n    },\n    parentsUntil: function parentsUntil(elem, _i, until) {\n      return dir(elem, \"parentNode\", until);\n    },\n    next: function next(elem) {\n      return sibling(elem, \"nextSibling\");\n    },\n    prev: function prev(elem) {\n      return sibling(elem, \"previousSibling\");\n    },\n    nextAll: function nextAll(elem) {\n      return dir(elem, \"nextSibling\");\n    },\n    prevAll: function prevAll(elem) {\n      return dir(elem, \"previousSibling\");\n    },\n    nextUntil: function nextUntil(elem, _i, until) {\n      return dir(elem, \"nextSibling\", until);\n    },\n    prevUntil: function prevUntil(elem, _i, until) {\n      return dir(elem, \"previousSibling\", until);\n    },\n    siblings: function siblings(elem) {\n      return _siblings((elem.parentNode || {}).firstChild, elem);\n    },\n    children: function children(elem) {\n      return _siblings(elem.firstChild);\n    },\n    contents: function contents(elem) {\n      if (elem.contentDocument != null && // Support: IE 11+\n      // <object> elements with no `data` attribute has an object\n      // `contentDocument` with a `null` prototype.\n      getProto(elem.contentDocument)) {\n        return elem.contentDocument;\n      } // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n      // Treat the template element as a regular one in browsers that\n      // don't support it.\n\n\n      if (nodeName(elem, \"template\")) {\n        elem = elem.content || elem;\n      }\n\n      return jQuery.merge([], elem.childNodes);\n    }\n  }, function (name, fn) {\n    jQuery.fn[name] = function (until, selector) {\n      var matched = jQuery.map(this, fn, until);\n\n      if (name.slice(-5) !== \"Until\") {\n        selector = until;\n      }\n\n      if (selector && typeof selector === \"string\") {\n        matched = jQuery.filter(selector, matched);\n      }\n\n      if (this.length > 1) {\n        // Remove duplicates\n        if (!guaranteedUnique[name]) {\n          jQuery.uniqueSort(matched);\n        } // Reverse order for parents* and prev-derivatives\n\n\n        if (rparentsprev.test(name)) {\n          matched.reverse();\n        }\n      }\n\n      return this.pushStack(matched);\n    };\n  });\n  var rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g; // Convert String-formatted options into Object-formatted ones\n\n  function createOptions(options) {\n    var object = {};\n    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {\n      object[flag] = true;\n    });\n    return object;\n  }\n  /*\n   * Create a callback list using the following parameters:\n   *\n   *\toptions: an optional list of space-separated options that will change how\n   *\t\t\tthe callback list behaves or a more traditional option object\n   *\n   * By default a callback list will act like an event callback list and can be\n   * \"fired\" multiple times.\n   *\n   * Possible options:\n   *\n   *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n   *\n   *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n   *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n   *\t\t\t\t\tvalues (like a Deferred)\n   *\n   *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n   *\n   *\tstopOnFalse:\tinterrupt callings when a callback returns false\n   *\n   */\n\n\n  jQuery.Callbacks = function (options) {\n    // Convert options from String-formatted to Object-formatted if needed\n    // (we check in cache first)\n    options = typeof options === \"string\" ? createOptions(options) : jQuery.extend({}, options);\n\n    var // Flag to know if list is currently firing\n    firing,\n        // Last fire value for non-forgettable lists\n    memory,\n        // Flag to know if list was already fired\n    _fired,\n        // Flag to prevent firing\n    _locked,\n        // Actual callback list\n    list = [],\n        // Queue of execution data for repeatable lists\n    queue = [],\n        // Index of currently firing callback (modified by add/remove as needed)\n    firingIndex = -1,\n        // Fire callbacks\n    fire = function fire() {\n      // Enforce single-firing\n      _locked = _locked || options.once; // Execute callbacks for all pending executions,\n      // respecting firingIndex overrides and runtime changes\n\n      _fired = firing = true;\n\n      for (; queue.length; firingIndex = -1) {\n        memory = queue.shift();\n\n        while (++firingIndex < list.length) {\n          // Run callback and check for early termination\n          if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {\n            // Jump to end and forget the data so .add doesn't re-fire\n            firingIndex = list.length;\n            memory = false;\n          }\n        }\n      } // Forget the data if we're done with it\n\n\n      if (!options.memory) {\n        memory = false;\n      }\n\n      firing = false; // Clean up if we're done firing for good\n\n      if (_locked) {\n        // Keep an empty list if we have data for future add calls\n        if (memory) {\n          list = []; // Otherwise, this object is spent\n        } else {\n          list = \"\";\n        }\n      }\n    },\n        // Actual Callbacks object\n    self = {\n      // Add a callback or a collection of callbacks to the list\n      add: function add() {\n        if (list) {\n          // If we have memory from a past run, we should fire after adding\n          if (memory && !firing) {\n            firingIndex = list.length - 1;\n            queue.push(memory);\n          }\n\n          (function add(args) {\n            jQuery.each(args, function (_, arg) {\n              if (isFunction(arg)) {\n                if (!options.unique || !self.has(arg)) {\n                  list.push(arg);\n                }\n              } else if (arg && arg.length && toType(arg) !== \"string\") {\n                // Inspect recursively\n                add(arg);\n              }\n            });\n          })(arguments);\n\n          if (memory && !firing) {\n            fire();\n          }\n        }\n\n        return this;\n      },\n      // Remove a callback from the list\n      remove: function remove() {\n        jQuery.each(arguments, function (_, arg) {\n          var index;\n\n          while ((index = jQuery.inArray(arg, list, index)) > -1) {\n            list.splice(index, 1); // Handle firing indexes\n\n            if (index <= firingIndex) {\n              firingIndex--;\n            }\n          }\n        });\n        return this;\n      },\n      // Check if a given callback is in the list.\n      // If no argument is given, return whether or not list has callbacks attached.\n      has: function has(fn) {\n        return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;\n      },\n      // Remove all callbacks from the list\n      empty: function empty() {\n        if (list) {\n          list = [];\n        }\n\n        return this;\n      },\n      // Disable .fire and .add\n      // Abort any current/pending executions\n      // Clear all callbacks and values\n      disable: function disable() {\n        _locked = queue = [];\n        list = memory = \"\";\n        return this;\n      },\n      disabled: function disabled() {\n        return !list;\n      },\n      // Disable .fire\n      // Also disable .add unless we have memory (since it would have no effect)\n      // Abort any pending executions\n      lock: function lock() {\n        _locked = queue = [];\n\n        if (!memory && !firing) {\n          list = memory = \"\";\n        }\n\n        return this;\n      },\n      locked: function locked() {\n        return !!_locked;\n      },\n      // Call all callbacks with the given context and arguments\n      fireWith: function fireWith(context, args) {\n        if (!_locked) {\n          args = args || [];\n          args = [context, args.slice ? args.slice() : args];\n          queue.push(args);\n\n          if (!firing) {\n            fire();\n          }\n        }\n\n        return this;\n      },\n      // Call all the callbacks with the given arguments\n      fire: function fire() {\n        self.fireWith(this, arguments);\n        return this;\n      },\n      // To know if the callbacks have already been called at least once\n      fired: function fired() {\n        return !!_fired;\n      }\n    };\n\n    return self;\n  };\n\n  function Identity(v) {\n    return v;\n  }\n\n  function Thrower(ex) {\n    throw ex;\n  }\n\n  function adoptValue(value, resolve, reject, noValue) {\n    var method;\n\n    try {\n      // Check for promise aspect first to privilege synchronous behavior\n      if (value && isFunction(method = value.promise)) {\n        method.call(value).done(resolve).fail(reject); // Other thenables\n      } else if (value && isFunction(method = value.then)) {\n        method.call(value, resolve, reject); // Other non-thenables\n      } else {\n        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n        // * false: [ value ].slice( 0 ) => resolve( value )\n        // * true: [ value ].slice( 1 ) => resolve()\n        resolve.apply(undefined, [value].slice(noValue));\n      } // For Promises/A+, convert exceptions into rejections\n      // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n      // Deferred#then to conditionally suppress rejection.\n\n    } catch (value) {\n      // Support: Android 4.0 only\n      // Strict mode functions invoked without .call/.apply get global-object context\n      reject.apply(undefined, [value]);\n    }\n  }\n\n  jQuery.extend({\n    Deferred: function Deferred(func) {\n      var tuples = [// action, add listener, callbacks,\n      // ... .then handlers, argument index, [final state]\n      [\"notify\", \"progress\", jQuery.Callbacks(\"memory\"), jQuery.Callbacks(\"memory\"), 2], [\"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), jQuery.Callbacks(\"once memory\"), 0, \"resolved\"], [\"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), jQuery.Callbacks(\"once memory\"), 1, \"rejected\"]],\n          _state = \"pending\",\n          _promise = {\n        state: function state() {\n          return _state;\n        },\n        always: function always() {\n          deferred.done(arguments).fail(arguments);\n          return this;\n        },\n        \"catch\": function _catch(fn) {\n          return _promise.then(null, fn);\n        },\n        // Keep pipe for back-compat\n        pipe: function pipe()\n        /* fnDone, fnFail, fnProgress */\n        {\n          var fns = arguments;\n          return jQuery.Deferred(function (newDefer) {\n            jQuery.each(tuples, function (_i, tuple) {\n              // Map tuples (progress, done, fail) to arguments (done, fail, progress)\n              var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]]; // deferred.progress(function() { bind to newDefer or newDefer.notify })\n              // deferred.done(function() { bind to newDefer or newDefer.resolve })\n              // deferred.fail(function() { bind to newDefer or newDefer.reject })\n\n              deferred[tuple[1]](function () {\n                var returned = fn && fn.apply(this, arguments);\n\n                if (returned && isFunction(returned.promise)) {\n                  returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);\n                } else {\n                  newDefer[tuple[0] + \"With\"](this, fn ? [returned] : arguments);\n                }\n              });\n            });\n            fns = null;\n          }).promise();\n        },\n        then: function then(onFulfilled, onRejected, onProgress) {\n          var maxDepth = 0;\n\n          function resolve(depth, deferred, handler, special) {\n            return function () {\n              var that = this,\n                  args = arguments,\n                  mightThrow = function mightThrow() {\n                var returned, then; // Support: Promises/A+ section 2.3.3.3.3\n                // https://promisesaplus.com/#point-59\n                // Ignore double-resolution attempts\n\n                if (depth < maxDepth) {\n                  return;\n                }\n\n                returned = handler.apply(that, args); // Support: Promises/A+ section 2.3.1\n                // https://promisesaplus.com/#point-48\n\n                if (returned === deferred.promise()) {\n                  throw new TypeError(\"Thenable self-resolution\");\n                } // Support: Promises/A+ sections 2.3.3.1, 3.5\n                // https://promisesaplus.com/#point-54\n                // https://promisesaplus.com/#point-75\n                // Retrieve `then` only once\n\n\n                then = returned && ( // Support: Promises/A+ section 2.3.4\n                // https://promisesaplus.com/#point-64\n                // Only check objects and functions for thenability\n                _typeof(returned) === \"object\" || typeof returned === \"function\") && returned.then; // Handle a returned thenable\n\n                if (isFunction(then)) {\n                  // Special processors (notify) just wait for resolution\n                  if (special) {\n                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special)); // Normal processors (resolve) also hook into progress\n                  } else {\n                    // ...and disregard older resolution values\n                    maxDepth++;\n                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));\n                  } // Handle all other returned values\n\n                } else {\n                  // Only substitute handlers pass on context\n                  // and multiple values (non-spec behavior)\n                  if (handler !== Identity) {\n                    that = undefined;\n                    args = [returned];\n                  } // Process the value(s)\n                  // Default process is resolve\n\n\n                  (special || deferred.resolveWith)(that, args);\n                }\n              },\n                  // Only normal processors (resolve) catch and reject exceptions\n              process = special ? mightThrow : function () {\n                try {\n                  mightThrow();\n                } catch (e) {\n                  if (jQuery.Deferred.exceptionHook) {\n                    jQuery.Deferred.exceptionHook(e, process.stackTrace);\n                  } // Support: Promises/A+ section 2.3.3.3.4.1\n                  // https://promisesaplus.com/#point-61\n                  // Ignore post-resolution exceptions\n\n\n                  if (depth + 1 >= maxDepth) {\n                    // Only substitute handlers pass on context\n                    // and multiple values (non-spec behavior)\n                    if (handler !== Thrower) {\n                      that = undefined;\n                      args = [e];\n                    }\n\n                    deferred.rejectWith(that, args);\n                  }\n                }\n              }; // Support: Promises/A+ section 2.3.3.3.1\n              // https://promisesaplus.com/#point-57\n              // Re-resolve promises immediately to dodge false rejection from\n              // subsequent errors\n\n\n              if (depth) {\n                process();\n              } else {\n                // Call an optional hook to record the stack, in case of exception\n                // since it's otherwise lost when execution goes async\n                if (jQuery.Deferred.getStackHook) {\n                  process.stackTrace = jQuery.Deferred.getStackHook();\n                }\n\n                window.setTimeout(process);\n              }\n            };\n          }\n\n          return jQuery.Deferred(function (newDefer) {\n            // progress_handlers.add( ... )\n            tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith)); // fulfilled_handlers.add( ... )\n\n            tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity)); // rejected_handlers.add( ... )\n\n            tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));\n          }).promise();\n        },\n        // Get a promise for this deferred\n        // If obj is provided, the promise aspect is added to the object\n        promise: function promise(obj) {\n          return obj != null ? jQuery.extend(obj, _promise) : _promise;\n        }\n      },\n          deferred = {}; // Add list-specific methods\n\n      jQuery.each(tuples, function (i, tuple) {\n        var list = tuple[2],\n            stateString = tuple[5]; // promise.progress = list.add\n        // promise.done = list.add\n        // promise.fail = list.add\n\n        _promise[tuple[1]] = list.add; // Handle state\n\n        if (stateString) {\n          list.add(function () {\n            // state = \"resolved\" (i.e., fulfilled)\n            // state = \"rejected\"\n            _state = stateString;\n          }, // rejected_callbacks.disable\n          // fulfilled_callbacks.disable\n          tuples[3 - i][2].disable, // rejected_handlers.disable\n          // fulfilled_handlers.disable\n          tuples[3 - i][3].disable, // progress_callbacks.lock\n          tuples[0][2].lock, // progress_handlers.lock\n          tuples[0][3].lock);\n        } // progress_handlers.fire\n        // fulfilled_handlers.fire\n        // rejected_handlers.fire\n\n\n        list.add(tuple[3].fire); // deferred.notify = function() { deferred.notifyWith(...) }\n        // deferred.resolve = function() { deferred.resolveWith(...) }\n        // deferred.reject = function() { deferred.rejectWith(...) }\n\n        deferred[tuple[0]] = function () {\n          deferred[tuple[0] + \"With\"](this === deferred ? undefined : this, arguments);\n          return this;\n        }; // deferred.notifyWith = list.fireWith\n        // deferred.resolveWith = list.fireWith\n        // deferred.rejectWith = list.fireWith\n\n\n        deferred[tuple[0] + \"With\"] = list.fireWith;\n      }); // Make the deferred a promise\n\n      _promise.promise(deferred); // Call given func if any\n\n\n      if (func) {\n        func.call(deferred, deferred);\n      } // All done!\n\n\n      return deferred;\n    },\n    // Deferred helper\n    when: function when(singleValue) {\n      var // count of uncompleted subordinates\n      remaining = arguments.length,\n          // count of unprocessed arguments\n      i = remaining,\n          // subordinate fulfillment data\n      resolveContexts = Array(i),\n          resolveValues = _slice.call(arguments),\n          // the primary Deferred\n      primary = jQuery.Deferred(),\n          // subordinate callback factory\n      updateFunc = function updateFunc(i) {\n        return function (value) {\n          resolveContexts[i] = this;\n          resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;\n\n          if (! --remaining) {\n            primary.resolveWith(resolveContexts, resolveValues);\n          }\n        };\n      }; // Single- and empty arguments are adopted like Promise.resolve\n\n\n      if (remaining <= 1) {\n        adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining); // Use .then() to unwrap secondary thenables (cf. gh-3000)\n\n        if (primary.state() === \"pending\" || isFunction(resolveValues[i] && resolveValues[i].then)) {\n          return primary.then();\n        }\n      } // Multiple arguments are aggregated like Promise.all array elements\n\n\n      while (i--) {\n        adoptValue(resolveValues[i], updateFunc(i), primary.reject);\n      }\n\n      return primary.promise();\n    }\n  }); // These usually indicate a programmer mistake during development,\n  // warn about them ASAP rather than swallowing them by default.\n\n  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\n  jQuery.Deferred.exceptionHook = function (error, stack) {\n    // Support: IE 8 - 9 only\n    // Console exists when dev tools are open, which can happen at any time\n    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {\n      window.console.warn(\"jQuery.Deferred exception: \" + error.message, error.stack, stack);\n    }\n  };\n\n  jQuery.readyException = function (error) {\n    window.setTimeout(function () {\n      throw error;\n    });\n  }; // The deferred used on DOM ready\n\n\n  var readyList = jQuery.Deferred();\n\n  jQuery.fn.ready = function (fn) {\n    readyList.then(fn) // Wrap jQuery.readyException in a function so that the lookup\n    // happens at the time of error handling instead of callback\n    // registration.\n    [\"catch\"](function (error) {\n      jQuery.readyException(error);\n    });\n    return this;\n  };\n\n  jQuery.extend({\n    // Is the DOM ready to be used? Set to true once it occurs.\n    isReady: false,\n    // A counter to track how many items to wait for before\n    // the ready event fires. See #6781\n    readyWait: 1,\n    // Handle when the DOM is ready\n    ready: function ready(wait) {\n      // Abort if there are pending holds or we're already ready\n      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {\n        return;\n      } // Remember that the DOM is ready\n\n\n      jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be\n\n      if (wait !== true && --jQuery.readyWait > 0) {\n        return;\n      } // If there are functions bound, to execute\n\n\n      readyList.resolveWith(document, [jQuery]);\n    }\n  });\n  jQuery.ready.then = readyList.then; // The ready event handler and self cleanup method\n\n  function completed() {\n    document.removeEventListener(\"DOMContentLoaded\", completed);\n    window.removeEventListener(\"load\", completed);\n    jQuery.ready();\n  } // Catch cases where $(document).ready() is called\n  // after the browser event has already occurred.\n  // Support: IE <=9 - 10 only\n  // Older IE sometimes signals \"interactive\" too soon\n\n\n  if (document.readyState === \"complete\" || document.readyState !== \"loading\" && !document.documentElement.doScroll) {\n    // Handle it asynchronously to allow scripts the opportunity to delay ready\n    window.setTimeout(jQuery.ready);\n  } else {\n    // Use the handy event callback\n    document.addEventListener(\"DOMContentLoaded\", completed); // A fallback to window.onload, that will always work\n\n    window.addEventListener(\"load\", completed);\n  } // Multifunctional method to get and set values of a collection\n  // The value/s can optionally be executed if it's a function\n\n\n  var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {\n    var i = 0,\n        len = elems.length,\n        bulk = key == null; // Sets many values\n\n    if (toType(key) === \"object\") {\n      chainable = true;\n\n      for (i in key) {\n        access(elems, fn, i, key[i], true, emptyGet, raw);\n      } // Sets one value\n\n    } else if (value !== undefined) {\n      chainable = true;\n\n      if (!isFunction(value)) {\n        raw = true;\n      }\n\n      if (bulk) {\n        // Bulk operations run against the entire set\n        if (raw) {\n          fn.call(elems, value);\n          fn = null; // ...except when executing function values\n        } else {\n          bulk = fn;\n\n          fn = function fn(elem, _key, value) {\n            return bulk.call(jQuery(elem), value);\n          };\n        }\n      }\n\n      if (fn) {\n        for (; i < len; i++) {\n          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));\n        }\n      }\n    }\n\n    if (chainable) {\n      return elems;\n    } // Gets\n\n\n    if (bulk) {\n      return fn.call(elems);\n    }\n\n    return len ? fn(elems[0], key) : emptyGet;\n  }; // Matches dashed string for camelizing\n\n\n  var rmsPrefix = /^-ms-/,\n      rdashAlpha = /-([a-z])/g; // Used by camelCase as callback to replace()\n\n  function fcamelCase(_all, letter) {\n    return letter.toUpperCase();\n  } // Convert dashed to camelCase; used by the css and data modules\n  // Support: IE <=9 - 11, Edge 12 - 15\n  // Microsoft forgot to hump their vendor prefix (#9572)\n\n\n  function camelCase(string) {\n    return string.replace(rmsPrefix, \"ms-\").replace(rdashAlpha, fcamelCase);\n  }\n\n  var acceptData = function acceptData(owner) {\n    // Accepts only:\n    //  - Node\n    //    - Node.ELEMENT_NODE\n    //    - Node.DOCUMENT_NODE\n    //  - Object\n    //    - Any\n    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;\n  };\n\n  function Data() {\n    this.expando = jQuery.expando + Data.uid++;\n  }\n\n  Data.uid = 1;\n  Data.prototype = {\n    cache: function cache(owner) {\n      // Check if the owner object already has a cache\n      var value = owner[this.expando]; // If not, create one\n\n      if (!value) {\n        value = {}; // We can accept data for non-element nodes in modern browsers,\n        // but we should not, see #8335.\n        // Always return an empty object.\n\n        if (acceptData(owner)) {\n          // If it is a node unlikely to be stringify-ed or looped over\n          // use plain assignment\n          if (owner.nodeType) {\n            owner[this.expando] = value; // Otherwise secure it in a non-enumerable property\n            // configurable must be true to allow the property to be\n            // deleted when data is removed\n          } else {\n            Object.defineProperty(owner, this.expando, {\n              value: value,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      return value;\n    },\n    set: function set(owner, data, value) {\n      var prop,\n          cache = this.cache(owner); // Handle: [ owner, key, value ] args\n      // Always use camelCase key (gh-2257)\n\n      if (typeof data === \"string\") {\n        cache[camelCase(data)] = value; // Handle: [ owner, { properties } ] args\n      } else {\n        // Copy the properties one-by-one to the cache object\n        for (prop in data) {\n          cache[camelCase(prop)] = data[prop];\n        }\n      }\n\n      return cache;\n    },\n    get: function get(owner, key) {\n      return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)\n      owner[this.expando] && owner[this.expando][camelCase(key)];\n    },\n    access: function access(owner, key, value) {\n      // In cases where either:\n      //\n      //   1. No key was specified\n      //   2. A string key was specified, but no value provided\n      //\n      // Take the \"read\" path and allow the get method to determine\n      // which value to return, respectively either:\n      //\n      //   1. The entire cache object\n      //   2. The data stored at the key\n      //\n      if (key === undefined || key && typeof key === \"string\" && value === undefined) {\n        return this.get(owner, key);\n      } // When the key is not a string, or both a key and value\n      // are specified, set or extend (existing objects) with either:\n      //\n      //   1. An object of properties\n      //   2. A key and value\n      //\n\n\n      this.set(owner, key, value); // Since the \"set\" path can have two possible entry points\n      // return the expected data based on which path was taken[*]\n\n      return value !== undefined ? value : key;\n    },\n    remove: function remove(owner, key) {\n      var i,\n          cache = owner[this.expando];\n\n      if (cache === undefined) {\n        return;\n      }\n\n      if (key !== undefined) {\n        // Support array or space separated string of keys\n        if (Array.isArray(key)) {\n          // If key is an array of keys...\n          // We always set camelCase keys, so remove that.\n          key = key.map(camelCase);\n        } else {\n          key = camelCase(key); // If a key with the spaces exists, use it.\n          // Otherwise, create an array by matching non-whitespace\n\n          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];\n        }\n\n        i = key.length;\n\n        while (i--) {\n          delete cache[key[i]];\n        }\n      } // Remove the expando if there's no more data\n\n\n      if (key === undefined || jQuery.isEmptyObject(cache)) {\n        // Support: Chrome <=35 - 45\n        // Webkit & Blink performance suffers when deleting properties\n        // from DOM nodes, so set to undefined instead\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n        if (owner.nodeType) {\n          owner[this.expando] = undefined;\n        } else {\n          delete owner[this.expando];\n        }\n      }\n    },\n    hasData: function hasData(owner) {\n      var cache = owner[this.expando];\n      return cache !== undefined && !jQuery.isEmptyObject(cache);\n    }\n  };\n  var dataPriv = new Data();\n  var dataUser = new Data(); //\tImplementation Summary\n  //\n  //\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n  //\t2. Improve the module's maintainability by reducing the storage\n  //\t\tpaths to a single mechanism.\n  //\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n  //\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n  //\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n  //\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\n  var rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n      rmultiDash = /[A-Z]/g;\n\n  function getData(data) {\n    if (data === \"true\") {\n      return true;\n    }\n\n    if (data === \"false\") {\n      return false;\n    }\n\n    if (data === \"null\") {\n      return null;\n    } // Only convert to a number if it doesn't change the string\n\n\n    if (data === +data + \"\") {\n      return +data;\n    }\n\n    if (rbrace.test(data)) {\n      return JSON.parse(data);\n    }\n\n    return data;\n  }\n\n  function dataAttr(elem, key, data) {\n    var name; // If nothing was found internally, try to fetch any\n    // data from the HTML5 data-* attribute\n\n    if (data === undefined && elem.nodeType === 1) {\n      name = \"data-\" + key.replace(rmultiDash, \"-$&\").toLowerCase();\n      data = elem.getAttribute(name);\n\n      if (typeof data === \"string\") {\n        try {\n          data = getData(data);\n        } catch (e) {} // Make sure we set the data so it isn't changed later\n\n\n        dataUser.set(elem, key, data);\n      } else {\n        data = undefined;\n      }\n    }\n\n    return data;\n  }\n\n  jQuery.extend({\n    hasData: function hasData(elem) {\n      return dataUser.hasData(elem) || dataPriv.hasData(elem);\n    },\n    data: function data(elem, name, _data) {\n      return dataUser.access(elem, name, _data);\n    },\n    removeData: function removeData(elem, name) {\n      dataUser.remove(elem, name);\n    },\n    // TODO: Now that all calls to _data and _removeData have been replaced\n    // with direct calls to dataPriv methods, these can be deprecated.\n    _data: function _data(elem, name, data) {\n      return dataPriv.access(elem, name, data);\n    },\n    _removeData: function _removeData(elem, name) {\n      dataPriv.remove(elem, name);\n    }\n  });\n  jQuery.fn.extend({\n    data: function data(key, value) {\n      var i,\n          name,\n          data,\n          elem = this[0],\n          attrs = elem && elem.attributes; // Gets all values\n\n      if (key === undefined) {\n        if (this.length) {\n          data = dataUser.get(elem);\n\n          if (elem.nodeType === 1 && !dataPriv.get(elem, \"hasDataAttrs\")) {\n            i = attrs.length;\n\n            while (i--) {\n              // Support: IE 11 only\n              // The attrs elements can be null (#14894)\n              if (attrs[i]) {\n                name = attrs[i].name;\n\n                if (name.indexOf(\"data-\") === 0) {\n                  name = camelCase(name.slice(5));\n                  dataAttr(elem, name, data[name]);\n                }\n              }\n            }\n\n            dataPriv.set(elem, \"hasDataAttrs\", true);\n          }\n        }\n\n        return data;\n      } // Sets multiple values\n\n\n      if (_typeof(key) === \"object\") {\n        return this.each(function () {\n          dataUser.set(this, key);\n        });\n      }\n\n      return access(this, function (value) {\n        var data; // The calling jQuery object (element matches) is not empty\n        // (and therefore has an element appears at this[ 0 ]) and the\n        // `value` parameter was not undefined. An empty jQuery object\n        // will result in `undefined` for elem = this[ 0 ] which will\n        // throw an exception if an attempt to read a data cache is made.\n\n        if (elem && value === undefined) {\n          // Attempt to get data from the cache\n          // The key will always be camelCased in Data\n          data = dataUser.get(elem, key);\n\n          if (data !== undefined) {\n            return data;\n          } // Attempt to \"discover\" the data in\n          // HTML5 custom data-* attrs\n\n\n          data = dataAttr(elem, key);\n\n          if (data !== undefined) {\n            return data;\n          } // We tried really hard, but the data doesn't exist.\n\n\n          return;\n        } // Set the data...\n\n\n        this.each(function () {\n          // We always store the camelCased key\n          dataUser.set(this, key, value);\n        });\n      }, null, value, arguments.length > 1, null, true);\n    },\n    removeData: function removeData(key) {\n      return this.each(function () {\n        dataUser.remove(this, key);\n      });\n    }\n  });\n  jQuery.extend({\n    queue: function queue(elem, type, data) {\n      var queue;\n\n      if (elem) {\n        type = (type || \"fx\") + \"queue\";\n        queue = dataPriv.get(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup\n\n        if (data) {\n          if (!queue || Array.isArray(data)) {\n            queue = dataPriv.access(elem, type, jQuery.makeArray(data));\n          } else {\n            queue.push(data);\n          }\n        }\n\n        return queue || [];\n      }\n    },\n    dequeue: function dequeue(elem, type) {\n      type = type || \"fx\";\n\n      var queue = jQuery.queue(elem, type),\n          startLength = queue.length,\n          fn = queue.shift(),\n          hooks = jQuery._queueHooks(elem, type),\n          next = function next() {\n        jQuery.dequeue(elem, type);\n      }; // If the fx queue is dequeued, always remove the progress sentinel\n\n\n      if (fn === \"inprogress\") {\n        fn = queue.shift();\n        startLength--;\n      }\n\n      if (fn) {\n        // Add a progress sentinel to prevent the fx queue from being\n        // automatically dequeued\n        if (type === \"fx\") {\n          queue.unshift(\"inprogress\");\n        } // Clear up the last queue stop function\n\n\n        delete hooks.stop;\n        fn.call(elem, next, hooks);\n      }\n\n      if (!startLength && hooks) {\n        hooks.empty.fire();\n      }\n    },\n    // Not public - generate a queueHooks object, or return the current one\n    _queueHooks: function _queueHooks(elem, type) {\n      var key = type + \"queueHooks\";\n      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {\n        empty: jQuery.Callbacks(\"once memory\").add(function () {\n          dataPriv.remove(elem, [type + \"queue\", key]);\n        })\n      });\n    }\n  });\n  jQuery.fn.extend({\n    queue: function queue(type, data) {\n      var setter = 2;\n\n      if (typeof type !== \"string\") {\n        data = type;\n        type = \"fx\";\n        setter--;\n      }\n\n      if (arguments.length < setter) {\n        return jQuery.queue(this[0], type);\n      }\n\n      return data === undefined ? this : this.each(function () {\n        var queue = jQuery.queue(this, type, data); // Ensure a hooks for this queue\n\n        jQuery._queueHooks(this, type);\n\n        if (type === \"fx\" && queue[0] !== \"inprogress\") {\n          jQuery.dequeue(this, type);\n        }\n      });\n    },\n    dequeue: function dequeue(type) {\n      return this.each(function () {\n        jQuery.dequeue(this, type);\n      });\n    },\n    clearQueue: function clearQueue(type) {\n      return this.queue(type || \"fx\", []);\n    },\n    // Get a promise resolved when queues of a certain type\n    // are emptied (fx is the type by default)\n    promise: function promise(type, obj) {\n      var tmp,\n          count = 1,\n          defer = jQuery.Deferred(),\n          elements = this,\n          i = this.length,\n          resolve = function resolve() {\n        if (! --count) {\n          defer.resolveWith(elements, [elements]);\n        }\n      };\n\n      if (typeof type !== \"string\") {\n        obj = type;\n        type = undefined;\n      }\n\n      type = type || \"fx\";\n\n      while (i--) {\n        tmp = dataPriv.get(elements[i], type + \"queueHooks\");\n\n        if (tmp && tmp.empty) {\n          count++;\n          tmp.empty.add(resolve);\n        }\n      }\n\n      resolve();\n      return defer.promise(obj);\n    }\n  });\n  var pnum = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source;\n  var rcssNum = new RegExp(\"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\");\n  var cssExpand = [\"Top\", \"Right\", \"Bottom\", \"Left\"];\n  var documentElement = document.documentElement;\n\n  var isAttached = function isAttached(elem) {\n    return jQuery.contains(elem.ownerDocument, elem);\n  },\n      composed = {\n    composed: true\n  }; // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n  // Check attachment across shadow DOM boundaries when possible (gh-3504)\n  // Support: iOS 10.0-10.2 only\n  // Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n  // leading to errors. We need to check for `getRootNode`.\n\n\n  if (documentElement.getRootNode) {\n    isAttached = function isAttached(elem) {\n      return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;\n    };\n  }\n\n  var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {\n    // isHiddenWithinTree might be called from jQuery#filter function;\n    // in that case, element will be second argument\n    elem = el || elem; // Inline style trumps all\n\n    return elem.style.display === \"none\" || elem.style.display === \"\" && // Otherwise, check computed style\n    // Support: Firefox <=43 - 45\n    // Disconnected elements can have computed display: none, so first confirm that elem is\n    // in the document.\n    isAttached(elem) && jQuery.css(elem, \"display\") === \"none\";\n  };\n\n  function adjustCSS(elem, prop, valueParts, tween) {\n    var adjusted,\n        scale,\n        maxIterations = 20,\n        currentValue = tween ? function () {\n      return tween.cur();\n    } : function () {\n      return jQuery.css(elem, prop, \"\");\n    },\n        initial = currentValue(),\n        unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? \"\" : \"px\"),\n        // Starting value computation is required for potential unit mismatches\n    initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== \"px\" && +initial) && rcssNum.exec(jQuery.css(elem, prop));\n\n    if (initialInUnit && initialInUnit[3] !== unit) {\n      // Support: Firefox <=54\n      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n      initial = initial / 2; // Trust units reported by jQuery.css\n\n      unit = unit || initialInUnit[3]; // Iteratively approximate from a nonzero starting point\n\n      initialInUnit = +initial || 1;\n\n      while (maxIterations--) {\n        // Evaluate and update our best guess (doubling guesses that zero out).\n        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n        jQuery.style(elem, prop, initialInUnit + unit);\n\n        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {\n          maxIterations = 0;\n        }\n\n        initialInUnit = initialInUnit / scale;\n      }\n\n      initialInUnit = initialInUnit * 2;\n      jQuery.style(elem, prop, initialInUnit + unit); // Make sure we update the tween properties later on\n\n      valueParts = valueParts || [];\n    }\n\n    if (valueParts) {\n      initialInUnit = +initialInUnit || +initial || 0; // Apply relative offset (+=/-=) if specified\n\n      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];\n\n      if (tween) {\n        tween.unit = unit;\n        tween.start = initialInUnit;\n        tween.end = adjusted;\n      }\n    }\n\n    return adjusted;\n  }\n\n  var defaultDisplayMap = {};\n\n  function getDefaultDisplay(elem) {\n    var temp,\n        doc = elem.ownerDocument,\n        nodeName = elem.nodeName,\n        display = defaultDisplayMap[nodeName];\n\n    if (display) {\n      return display;\n    }\n\n    temp = doc.body.appendChild(doc.createElement(nodeName));\n    display = jQuery.css(temp, \"display\");\n    temp.parentNode.removeChild(temp);\n\n    if (display === \"none\") {\n      display = \"block\";\n    }\n\n    defaultDisplayMap[nodeName] = display;\n    return display;\n  }\n\n  function showHide(elements, show) {\n    var display,\n        elem,\n        values = [],\n        index = 0,\n        length = elements.length; // Determine new display value for elements that need to change\n\n    for (; index < length; index++) {\n      elem = elements[index];\n\n      if (!elem.style) {\n        continue;\n      }\n\n      display = elem.style.display;\n\n      if (show) {\n        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n        // check is required in this first loop unless we have a nonempty display value (either\n        // inline or about-to-be-restored)\n        if (display === \"none\") {\n          values[index] = dataPriv.get(elem, \"display\") || null;\n\n          if (!values[index]) {\n            elem.style.display = \"\";\n          }\n        }\n\n        if (elem.style.display === \"\" && isHiddenWithinTree(elem)) {\n          values[index] = getDefaultDisplay(elem);\n        }\n      } else {\n        if (display !== \"none\") {\n          values[index] = \"none\"; // Remember what we're overwriting\n\n          dataPriv.set(elem, \"display\", display);\n        }\n      }\n    } // Set the display of the elements in a second loop to avoid constant reflow\n\n\n    for (index = 0; index < length; index++) {\n      if (values[index] != null) {\n        elements[index].style.display = values[index];\n      }\n    }\n\n    return elements;\n  }\n\n  jQuery.fn.extend({\n    show: function show() {\n      return showHide(this, true);\n    },\n    hide: function hide() {\n      return showHide(this);\n    },\n    toggle: function toggle(state) {\n      if (typeof state === \"boolean\") {\n        return state ? this.show() : this.hide();\n      }\n\n      return this.each(function () {\n        if (isHiddenWithinTree(this)) {\n          jQuery(this).show();\n        } else {\n          jQuery(this).hide();\n        }\n      });\n    }\n  });\n  var rcheckableType = /^(?:checkbox|radio)$/i;\n  var rtagName = /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i;\n  var rscriptType = /^$|^module$|\\/(?:java|ecma)script/i;\n\n  (function () {\n    var fragment = document.createDocumentFragment(),\n        div = fragment.appendChild(document.createElement(\"div\")),\n        input = document.createElement(\"input\"); // Support: Android 4.0 - 4.3 only\n    // Check state lost if the name is set (#11217)\n    // Support: Windows Web Apps (WWA)\n    // `name` and `type` must use .setAttribute for WWA (#14901)\n\n    input.setAttribute(\"type\", \"radio\");\n    input.setAttribute(\"checked\", \"checked\");\n    input.setAttribute(\"name\", \"t\");\n    div.appendChild(input); // Support: Android <=4.1 only\n    // Older WebKit doesn't clone checked state correctly in fragments\n\n    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE <=11 only\n    // Make sure textarea (and checkbox) defaultValue is properly cloned\n\n    div.innerHTML = \"<textarea>x</textarea>\";\n    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue; // Support: IE <=9 only\n    // IE <=9 replaces <option> tags with their contents when inserted outside of\n    // the select element.\n\n    div.innerHTML = \"<option></option>\";\n    support.option = !!div.lastChild;\n  })(); // We have to close these tags to support XHTML (#13200)\n\n\n  var wrapMap = {\n    // XHTML parsers do not magically insert elements in the\n    // same way that tag soup parsers do. So we cannot shorten\n    // this by omitting <tbody> or other required elements.\n    thead: [1, \"<table>\", \"</table>\"],\n    col: [2, \"<table><colgroup>\", \"</colgroup></table>\"],\n    tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n    td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n    _default: [0, \"\", \"\"]\n  };\n  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n  wrapMap.th = wrapMap.td; // Support: IE <=9 only\n\n  if (!support.option) {\n    wrapMap.optgroup = wrapMap.option = [1, \"<select multiple='multiple'>\", \"</select>\"];\n  }\n\n  function getAll(context, tag) {\n    // Support: IE <=9 - 11 only\n    // Use typeof to avoid zero-argument method invocation on host objects (#15151)\n    var ret;\n\n    if (typeof context.getElementsByTagName !== \"undefined\") {\n      ret = context.getElementsByTagName(tag || \"*\");\n    } else if (typeof context.querySelectorAll !== \"undefined\") {\n      ret = context.querySelectorAll(tag || \"*\");\n    } else {\n      ret = [];\n    }\n\n    if (tag === undefined || tag && nodeName(context, tag)) {\n      return jQuery.merge([context], ret);\n    }\n\n    return ret;\n  } // Mark scripts as having already been evaluated\n\n\n  function setGlobalEval(elems, refElements) {\n    var i = 0,\n        l = elems.length;\n\n    for (; i < l; i++) {\n      dataPriv.set(elems[i], \"globalEval\", !refElements || dataPriv.get(refElements[i], \"globalEval\"));\n    }\n  }\n\n  var rhtml = /<|&#?\\w+;/;\n\n  function buildFragment(elems, context, scripts, selection, ignored) {\n    var elem,\n        tmp,\n        tag,\n        wrap,\n        attached,\n        j,\n        fragment = context.createDocumentFragment(),\n        nodes = [],\n        i = 0,\n        l = elems.length;\n\n    for (; i < l; i++) {\n      elem = elems[i];\n\n      if (elem || elem === 0) {\n        // Add nodes directly\n        if (toType(elem) === \"object\") {\n          // Support: Android <=4.0 only, PhantomJS 1 only\n          // push.apply(_, arraylike) throws on ancient WebKit\n          jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node\n        } else if (!rhtml.test(elem)) {\n          nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes\n        } else {\n          tmp = tmp || fragment.appendChild(context.createElement(\"div\")); // Deserialize a standard representation\n\n          tag = (rtagName.exec(elem) || [\"\", \"\"])[1].toLowerCase();\n          wrap = wrapMap[tag] || wrapMap._default;\n          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]; // Descend through wrappers to the right content\n\n          j = wrap[0];\n\n          while (j--) {\n            tmp = tmp.lastChild;\n          } // Support: Android <=4.0 only, PhantomJS 1 only\n          // push.apply(_, arraylike) throws on ancient WebKit\n\n\n          jQuery.merge(nodes, tmp.childNodes); // Remember the top-level container\n\n          tmp = fragment.firstChild; // Ensure the created nodes are orphaned (#12392)\n\n          tmp.textContent = \"\";\n        }\n      }\n    } // Remove wrapper from fragment\n\n\n    fragment.textContent = \"\";\n    i = 0;\n\n    while (elem = nodes[i++]) {\n      // Skip elements already in the context collection (trac-4087)\n      if (selection && jQuery.inArray(elem, selection) > -1) {\n        if (ignored) {\n          ignored.push(elem);\n        }\n\n        continue;\n      }\n\n      attached = isAttached(elem); // Append to fragment\n\n      tmp = getAll(fragment.appendChild(elem), \"script\"); // Preserve script evaluation history\n\n      if (attached) {\n        setGlobalEval(tmp);\n      } // Capture executables\n\n\n      if (scripts) {\n        j = 0;\n\n        while (elem = tmp[j++]) {\n          if (rscriptType.test(elem.type || \"\")) {\n            scripts.push(elem);\n          }\n        }\n      }\n    }\n\n    return fragment;\n  }\n\n  var rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\n  function returnTrue() {\n    return true;\n  }\n\n  function returnFalse() {\n    return false;\n  } // Support: IE <=9 - 11+\n  // focus() and blur() are asynchronous, except when they are no-op.\n  // So expect focus to be synchronous when the element is already active,\n  // and blur to be synchronous when the element is not already active.\n  // (focus and blur are always synchronous in other supported browsers,\n  // this just defines when we can count on it).\n\n\n  function expectSync(elem, type) {\n    return elem === safeActiveElement() === (type === \"focus\");\n  } // Support: IE <=9 only\n  // Accessing document.activeElement can throw unexpectedly\n  // https://bugs.jquery.com/ticket/13393\n\n\n  function safeActiveElement() {\n    try {\n      return document.activeElement;\n    } catch (err) {}\n  }\n\n  function _on(elem, types, selector, data, fn, one) {\n    var origFn, type; // Types can be a map of types/handlers\n\n    if (_typeof(types) === \"object\") {\n      // ( types-Object, selector, data )\n      if (typeof selector !== \"string\") {\n        // ( types-Object, data )\n        data = data || selector;\n        selector = undefined;\n      }\n\n      for (type in types) {\n        _on(elem, type, selector, data, types[type], one);\n      }\n\n      return elem;\n    }\n\n    if (data == null && fn == null) {\n      // ( types, fn )\n      fn = selector;\n      data = selector = undefined;\n    } else if (fn == null) {\n      if (typeof selector === \"string\") {\n        // ( types, selector, fn )\n        fn = data;\n        data = undefined;\n      } else {\n        // ( types, data, fn )\n        fn = data;\n        data = selector;\n        selector = undefined;\n      }\n    }\n\n    if (fn === false) {\n      fn = returnFalse;\n    } else if (!fn) {\n      return elem;\n    }\n\n    if (one === 1) {\n      origFn = fn;\n\n      fn = function fn(event) {\n        // Can use an empty set, since event contains the info\n        jQuery().off(event);\n        return origFn.apply(this, arguments);\n      }; // Use same guid so caller can remove using origFn\n\n\n      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);\n    }\n\n    return elem.each(function () {\n      jQuery.event.add(this, types, fn, data, selector);\n    });\n  }\n  /*\n   * Helper functions for managing events -- not part of the public interface.\n   * Props to Dean Edwards' addEvent library for many of the ideas.\n   */\n\n\n  jQuery.event = {\n    global: {},\n    add: function add(elem, types, handler, data, selector) {\n      var handleObjIn,\n          eventHandle,\n          tmp,\n          events,\n          t,\n          handleObj,\n          special,\n          handlers,\n          type,\n          namespaces,\n          origType,\n          elemData = dataPriv.get(elem); // Only attach events to objects that accept data\n\n      if (!acceptData(elem)) {\n        return;\n      } // Caller can pass in an object of custom data in lieu of the handler\n\n\n      if (handler.handler) {\n        handleObjIn = handler;\n        handler = handleObjIn.handler;\n        selector = handleObjIn.selector;\n      } // Ensure that invalid selectors throw exceptions at attach time\n      // Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\n\n      if (selector) {\n        jQuery.find.matchesSelector(documentElement, selector);\n      } // Make sure that the handler has a unique ID, used to find/remove it later\n\n\n      if (!handler.guid) {\n        handler.guid = jQuery.guid++;\n      } // Init the element's event structure and main handler, if this is the first\n\n\n      if (!(events = elemData.events)) {\n        events = elemData.events = Object.create(null);\n      }\n\n      if (!(eventHandle = elemData.handle)) {\n        eventHandle = elemData.handle = function (e) {\n          // Discard the second event of a jQuery.event.trigger() and\n          // when an event is called after a page has unloaded\n          return typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;\n        };\n      } // Handle multiple events separated by a space\n\n\n      types = (types || \"\").match(rnothtmlwhite) || [\"\"];\n      t = types.length;\n\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || \"\").split(\".\").sort(); // There *must* be a type, no attaching namespace-only handlers\n\n        if (!type) {\n          continue;\n        } // If event changes its type, use the special event handlers for the changed type\n\n\n        special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type\n\n        type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type\n\n        special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers\n\n        handleObj = jQuery.extend({\n          type: type,\n          origType: origType,\n          data: data,\n          handler: handler,\n          guid: handler.guid,\n          selector: selector,\n          needsContext: selector && jQuery.expr.match.needsContext.test(selector),\n          namespace: namespaces.join(\".\")\n        }, handleObjIn); // Init the event handler queue if we're the first\n\n        if (!(handlers = events[type])) {\n          handlers = events[type] = [];\n          handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false\n\n          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\n            if (elem.addEventListener) {\n              elem.addEventListener(type, eventHandle);\n            }\n          }\n        }\n\n        if (special.add) {\n          special.add.call(elem, handleObj);\n\n          if (!handleObj.handler.guid) {\n            handleObj.handler.guid = handler.guid;\n          }\n        } // Add to the element's handler list, delegates in front\n\n\n        if (selector) {\n          handlers.splice(handlers.delegateCount++, 0, handleObj);\n        } else {\n          handlers.push(handleObj);\n        } // Keep track of which events have ever been used, for event optimization\n\n\n        jQuery.event.global[type] = true;\n      }\n    },\n    // Detach an event or set of events from an element\n    remove: function remove(elem, types, handler, selector, mappedTypes) {\n      var j,\n          origCount,\n          tmp,\n          events,\n          t,\n          handleObj,\n          special,\n          handlers,\n          type,\n          namespaces,\n          origType,\n          elemData = dataPriv.hasData(elem) && dataPriv.get(elem);\n\n      if (!elemData || !(events = elemData.events)) {\n        return;\n      } // Once for each type.namespace in types; type may be omitted\n\n\n      types = (types || \"\").match(rnothtmlwhite) || [\"\"];\n      t = types.length;\n\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || \"\").split(\".\").sort(); // Unbind all events (on this namespace, if provided) for the element\n\n        if (!type) {\n          for (type in events) {\n            jQuery.event.remove(elem, type + types[t], handler, selector, true);\n          }\n\n          continue;\n        }\n\n        special = jQuery.event.special[type] || {};\n        type = (selector ? special.delegateType : special.bindType) || type;\n        handlers = events[type] || [];\n        tmp = tmp[2] && new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\"); // Remove matching events\n\n        origCount = j = handlers.length;\n\n        while (j--) {\n          handleObj = handlers[j];\n\n          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === \"**\" && handleObj.selector)) {\n            handlers.splice(j, 1);\n\n            if (handleObj.selector) {\n              handlers.delegateCount--;\n            }\n\n            if (special.remove) {\n              special.remove.call(elem, handleObj);\n            }\n          }\n        } // Remove generic event handler if we removed something and no more handlers exist\n        // (avoids potential for endless recursion during removal of special event handlers)\n\n\n        if (origCount && !handlers.length) {\n          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\n            jQuery.removeEvent(elem, type, elemData.handle);\n          }\n\n          delete events[type];\n        }\n      } // Remove data and the expando if it's no longer used\n\n\n      if (jQuery.isEmptyObject(events)) {\n        dataPriv.remove(elem, \"handle events\");\n      }\n    },\n    dispatch: function dispatch(nativeEvent) {\n      var i,\n          j,\n          ret,\n          matched,\n          handleObj,\n          handlerQueue,\n          args = new Array(arguments.length),\n          // Make a writable jQuery.Event from the native event object\n      event = jQuery.event.fix(nativeEvent),\n          handlers = (dataPriv.get(this, \"events\") || Object.create(null))[event.type] || [],\n          special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event\n\n      args[0] = event;\n\n      for (i = 1; i < arguments.length; i++) {\n        args[i] = arguments[i];\n      }\n\n      event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired\n\n      if (special.preDispatch && special.preDispatch.call(this, event) === false) {\n        return;\n      } // Determine handlers\n\n\n      handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us\n\n      i = 0;\n\n      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\n        event.currentTarget = matched.elem;\n        j = 0;\n\n        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {\n          // If the event is namespaced, then each handler is only invoked if it is\n          // specially universal or its namespaces are a superset of the event's.\n          if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {\n            event.handleObj = handleObj;\n            event.data = handleObj.data;\n            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);\n\n            if (ret !== undefined) {\n              if ((event.result = ret) === false) {\n                event.preventDefault();\n                event.stopPropagation();\n              }\n            }\n          }\n        }\n      } // Call the postDispatch hook for the mapped type\n\n\n      if (special.postDispatch) {\n        special.postDispatch.call(this, event);\n      }\n\n      return event.result;\n    },\n    handlers: function handlers(event, _handlers) {\n      var i,\n          handleObj,\n          sel,\n          matchedHandlers,\n          matchedSelectors,\n          handlerQueue = [],\n          delegateCount = _handlers.delegateCount,\n          cur = event.target; // Find delegate handlers\n\n      if (delegateCount && // Support: IE <=9\n      // Black-hole SVG <use> instance trees (trac-13180)\n      cur.nodeType && // Support: Firefox <=42\n      // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n      // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n      // Support: IE 11 only\n      // ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n      !(event.type === \"click\" && event.button >= 1)) {\n        for (; cur !== this; cur = cur.parentNode || this) {\n          // Don't check non-elements (#13208)\n          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n          if (cur.nodeType === 1 && !(event.type === \"click\" && cur.disabled === true)) {\n            matchedHandlers = [];\n            matchedSelectors = {};\n\n            for (i = 0; i < delegateCount; i++) {\n              handleObj = _handlers[i]; // Don't conflict with Object.prototype properties (#13203)\n\n              sel = handleObj.selector + \" \";\n\n              if (matchedSelectors[sel] === undefined) {\n                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;\n              }\n\n              if (matchedSelectors[sel]) {\n                matchedHandlers.push(handleObj);\n              }\n            }\n\n            if (matchedHandlers.length) {\n              handlerQueue.push({\n                elem: cur,\n                handlers: matchedHandlers\n              });\n            }\n          }\n        }\n      } // Add the remaining (directly-bound) handlers\n\n\n      cur = this;\n\n      if (delegateCount < _handlers.length) {\n        handlerQueue.push({\n          elem: cur,\n          handlers: _handlers.slice(delegateCount)\n        });\n      }\n\n      return handlerQueue;\n    },\n    addProp: function addProp(name, hook) {\n      Object.defineProperty(jQuery.Event.prototype, name, {\n        enumerable: true,\n        configurable: true,\n        get: isFunction(hook) ? function () {\n          if (this.originalEvent) {\n            return hook(this.originalEvent);\n          }\n        } : function () {\n          if (this.originalEvent) {\n            return this.originalEvent[name];\n          }\n        },\n        set: function set(value) {\n          Object.defineProperty(this, name, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: value\n          });\n        }\n      });\n    },\n    fix: function fix(originalEvent) {\n      return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);\n    },\n    special: {\n      load: {\n        // Prevent triggered image.load events from bubbling to window.load\n        noBubble: true\n      },\n      click: {\n        // Utilize native event to ensure correct state for checkable inputs\n        setup: function setup(data) {\n          // For mutual compressibility with _default, replace `this` access with a local var.\n          // `|| data` is dead code meant only to preserve the variable through minification.\n          var el = this || data; // Claim the first handler\n\n          if (rcheckableType.test(el.type) && el.click && nodeName(el, \"input\")) {\n            // dataPriv.set( el, \"click\", ... )\n            leverageNative(el, \"click\", returnTrue);\n          } // Return false to allow normal processing in the caller\n\n\n          return false;\n        },\n        trigger: function trigger(data) {\n          // For mutual compressibility with _default, replace `this` access with a local var.\n          // `|| data` is dead code meant only to preserve the variable through minification.\n          var el = this || data; // Force setup before triggering a click\n\n          if (rcheckableType.test(el.type) && el.click && nodeName(el, \"input\")) {\n            leverageNative(el, \"click\");\n          } // Return non-false to allow normal event-path propagation\n\n\n          return true;\n        },\n        // For cross-browser consistency, suppress native .click() on links\n        // Also prevent it if we're currently inside a leveraged native-event stack\n        _default: function _default(event) {\n          var target = event.target;\n          return rcheckableType.test(target.type) && target.click && nodeName(target, \"input\") && dataPriv.get(target, \"click\") || nodeName(target, \"a\");\n        }\n      },\n      beforeunload: {\n        postDispatch: function postDispatch(event) {\n          // Support: Firefox 20+\n          // Firefox doesn't alert if the returnValue field is not set.\n          if (event.result !== undefined && event.originalEvent) {\n            event.originalEvent.returnValue = event.result;\n          }\n        }\n      }\n    }\n  }; // Ensure the presence of an event listener that handles manually-triggered\n  // synthetic events by interrupting progress until reinvoked in response to\n  // *native* events that it fires directly, ensuring that state changes have\n  // already occurred before other listeners are invoked.\n\n  function leverageNative(el, type, expectSync) {\n    // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n    if (!expectSync) {\n      if (dataPriv.get(el, type) === undefined) {\n        jQuery.event.add(el, type, returnTrue);\n      }\n\n      return;\n    } // Register the controller as a special universal handler for all event namespaces\n\n\n    dataPriv.set(el, type, false);\n    jQuery.event.add(el, type, {\n      namespace: false,\n      handler: function handler(event) {\n        var notAsync,\n            result,\n            saved = dataPriv.get(this, type);\n\n        if (event.isTrigger & 1 && this[type]) {\n          // Interrupt processing of the outer synthetic .trigger()ed event\n          // Saved data should be false in such cases, but might be a leftover capture object\n          // from an async native handler (gh-4350)\n          if (!saved.length) {\n            // Store arguments for use when handling the inner native event\n            // There will always be at least one argument (an event object), so this array\n            // will not be confused with a leftover capture object.\n            saved = _slice.call(arguments);\n            dataPriv.set(this, type, saved); // Trigger the native event and capture its result\n            // Support: IE <=9 - 11+\n            // focus() and blur() are asynchronous\n\n            notAsync = expectSync(this, type);\n            this[type]();\n            result = dataPriv.get(this, type);\n\n            if (saved !== result || notAsync) {\n              dataPriv.set(this, type, false);\n            } else {\n              result = {};\n            }\n\n            if (saved !== result) {\n              // Cancel the outer synthetic event\n              event.stopImmediatePropagation();\n              event.preventDefault(); // Support: Chrome 86+\n              // In Chrome, if an element having a focusout handler is blurred by\n              // clicking outside of it, it invokes the handler synchronously. If\n              // that handler calls `.remove()` on the element, the data is cleared,\n              // leaving `result` undefined. We need to guard against this.\n\n              return result && result.value;\n            } // If this is an inner synthetic event for an event with a bubbling surrogate\n            // (focus or blur), assume that the surrogate already propagated from triggering the\n            // native event and prevent that from happening again here.\n            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n            // bubbling surrogate propagates *after* the non-bubbling base), but that seems\n            // less bad than duplication.\n\n          } else if ((jQuery.event.special[type] || {}).delegateType) {\n            event.stopPropagation();\n          } // If this is a native event triggered above, everything is now in order\n          // Fire an inner synthetic event with the original arguments\n\n        } else if (saved.length) {\n          // ...and capture the result\n          dataPriv.set(this, type, {\n            value: jQuery.event.trigger( // Support: IE <=9 - 11+\n            // Extend with the prototype to reset the above stopImmediatePropagation()\n            jQuery.extend(saved[0], jQuery.Event.prototype), saved.slice(1), this)\n          }); // Abort handling of the native event\n\n          event.stopImmediatePropagation();\n        }\n      }\n    });\n  }\n\n  jQuery.removeEvent = function (elem, type, handle) {\n    // This \"if\" is needed for plain objects\n    if (elem.removeEventListener) {\n      elem.removeEventListener(type, handle);\n    }\n  };\n\n  jQuery.Event = function (src, props) {\n    // Allow instantiation without the 'new' keyword\n    if (!(this instanceof jQuery.Event)) {\n      return new jQuery.Event(src, props);\n    } // Event object\n\n\n    if (src && src.type) {\n      this.originalEvent = src;\n      this.type = src.type; // Events bubbling up the document may have been marked as prevented\n      // by a handler lower down the tree; reflect the correct value.\n\n      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only\n      src.returnValue === false ? returnTrue : returnFalse; // Create target properties\n      // Support: Safari <=6 - 7 only\n      // Target should not be a text node (#504, #13143)\n\n      this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;\n      this.currentTarget = src.currentTarget;\n      this.relatedTarget = src.relatedTarget; // Event type\n    } else {\n      this.type = src;\n    } // Put explicitly provided properties onto the event object\n\n\n    if (props) {\n      jQuery.extend(this, props);\n    } // Create a timestamp if incoming event doesn't have one\n\n\n    this.timeStamp = src && src.timeStamp || Date.now(); // Mark it as fixed\n\n    this[jQuery.expando] = true;\n  }; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n\n\n  jQuery.Event.prototype = {\n    constructor: jQuery.Event,\n    isDefaultPrevented: returnFalse,\n    isPropagationStopped: returnFalse,\n    isImmediatePropagationStopped: returnFalse,\n    isSimulated: false,\n    preventDefault: function preventDefault() {\n      var e = this.originalEvent;\n      this.isDefaultPrevented = returnTrue;\n\n      if (e && !this.isSimulated) {\n        e.preventDefault();\n      }\n    },\n    stopPropagation: function stopPropagation() {\n      var e = this.originalEvent;\n      this.isPropagationStopped = returnTrue;\n\n      if (e && !this.isSimulated) {\n        e.stopPropagation();\n      }\n    },\n    stopImmediatePropagation: function stopImmediatePropagation() {\n      var e = this.originalEvent;\n      this.isImmediatePropagationStopped = returnTrue;\n\n      if (e && !this.isSimulated) {\n        e.stopImmediatePropagation();\n      }\n\n      this.stopPropagation();\n    }\n  }; // Includes all common event props including KeyEvent and MouseEvent specific props\n\n  jQuery.each({\n    altKey: true,\n    bubbles: true,\n    cancelable: true,\n    changedTouches: true,\n    ctrlKey: true,\n    detail: true,\n    eventPhase: true,\n    metaKey: true,\n    pageX: true,\n    pageY: true,\n    shiftKey: true,\n    view: true,\n    \"char\": true,\n    code: true,\n    charCode: true,\n    key: true,\n    keyCode: true,\n    button: true,\n    buttons: true,\n    clientX: true,\n    clientY: true,\n    offsetX: true,\n    offsetY: true,\n    pointerId: true,\n    pointerType: true,\n    screenX: true,\n    screenY: true,\n    targetTouches: true,\n    toElement: true,\n    touches: true,\n    which: true\n  }, jQuery.event.addProp);\n  jQuery.each({\n    focus: \"focusin\",\n    blur: \"focusout\"\n  }, function (type, delegateType) {\n    jQuery.event.special[type] = {\n      // Utilize native event if possible so blur/focus sequence is correct\n      setup: function setup() {\n        // Claim the first handler\n        // dataPriv.set( this, \"focus\", ... )\n        // dataPriv.set( this, \"blur\", ... )\n        leverageNative(this, type, expectSync); // Return false to allow normal processing in the caller\n\n        return false;\n      },\n      trigger: function trigger() {\n        // Force setup before trigger\n        leverageNative(this, type); // Return non-false to allow normal event-path propagation\n\n        return true;\n      },\n      // Suppress native focus or blur as it's already being fired\n      // in leverageNative.\n      _default: function _default() {\n        return true;\n      },\n      delegateType: delegateType\n    };\n  }); // Create mouseenter/leave events using mouseover/out and event-time checks\n  // so that event delegation works in jQuery.\n  // Do the same for pointerenter/pointerleave and pointerover/pointerout\n  //\n  // Support: Safari 7 only\n  // Safari sends mouseenter too often; see:\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n  // for the description of the bug (it existed in older Chrome versions as well).\n\n  jQuery.each({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\",\n    pointerenter: \"pointerover\",\n    pointerleave: \"pointerout\"\n  }, function (orig, fix) {\n    jQuery.event.special[orig] = {\n      delegateType: fix,\n      bindType: fix,\n      handle: function handle(event) {\n        var ret,\n            target = this,\n            related = event.relatedTarget,\n            handleObj = event.handleObj; // For mouseenter/leave call the handler if related is outside the target.\n        // NB: No relatedTarget if the mouse left/entered the browser window\n\n        if (!related || related !== target && !jQuery.contains(target, related)) {\n          event.type = handleObj.origType;\n          ret = handleObj.handler.apply(this, arguments);\n          event.type = fix;\n        }\n\n        return ret;\n      }\n    };\n  });\n  jQuery.fn.extend({\n    on: function on(types, selector, data, fn) {\n      return _on(this, types, selector, data, fn);\n    },\n    one: function one(types, selector, data, fn) {\n      return _on(this, types, selector, data, fn, 1);\n    },\n    off: function off(types, selector, fn) {\n      var handleObj, type;\n\n      if (types && types.preventDefault && types.handleObj) {\n        // ( event )  dispatched jQuery.Event\n        handleObj = types.handleObj;\n        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + \".\" + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);\n        return this;\n      }\n\n      if (_typeof(types) === \"object\") {\n        // ( types-object [, selector] )\n        for (type in types) {\n          this.off(type, selector, types[type]);\n        }\n\n        return this;\n      }\n\n      if (selector === false || typeof selector === \"function\") {\n        // ( types [, fn] )\n        fn = selector;\n        selector = undefined;\n      }\n\n      if (fn === false) {\n        fn = returnFalse;\n      }\n\n      return this.each(function () {\n        jQuery.event.remove(this, types, fn, selector);\n      });\n    }\n  });\n  var // Support: IE <=10 - 11, Edge 12 - 13 only\n  // In IE/Edge using regex groups here causes severe slowdowns.\n  // See https://connect.microsoft.com/IE/feedback/details/1736512/\n  rnoInnerhtml = /<script|<style|<link/i,\n      // checked=\"checked\" or checked\n  rchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n      rcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g; // Prefer a tbody over its parent table for containing new rows\n\n  function manipulationTarget(elem, content) {\n    if (nodeName(elem, \"table\") && nodeName(content.nodeType !== 11 ? content : content.firstChild, \"tr\")) {\n      return jQuery(elem).children(\"tbody\")[0] || elem;\n    }\n\n    return elem;\n  } // Replace/restore the type attribute of script elements for safe DOM manipulation\n\n\n  function disableScript(elem) {\n    elem.type = (elem.getAttribute(\"type\") !== null) + \"/\" + elem.type;\n    return elem;\n  }\n\n  function restoreScript(elem) {\n    if ((elem.type || \"\").slice(0, 5) === \"true/\") {\n      elem.type = elem.type.slice(5);\n    } else {\n      elem.removeAttribute(\"type\");\n    }\n\n    return elem;\n  }\n\n  function cloneCopyEvent(src, dest) {\n    var i, l, type, pdataOld, udataOld, udataCur, events;\n\n    if (dest.nodeType !== 1) {\n      return;\n    } // 1. Copy private data: events, handlers, etc.\n\n\n    if (dataPriv.hasData(src)) {\n      pdataOld = dataPriv.get(src);\n      events = pdataOld.events;\n\n      if (events) {\n        dataPriv.remove(dest, \"handle events\");\n\n        for (type in events) {\n          for (i = 0, l = events[type].length; i < l; i++) {\n            jQuery.event.add(dest, type, events[type][i]);\n          }\n        }\n      }\n    } // 2. Copy user data\n\n\n    if (dataUser.hasData(src)) {\n      udataOld = dataUser.access(src);\n      udataCur = jQuery.extend({}, udataOld);\n      dataUser.set(dest, udataCur);\n    }\n  } // Fix IE bugs, see support tests\n\n\n  function fixInput(src, dest) {\n    var nodeName = dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.\n\n    if (nodeName === \"input\" && rcheckableType.test(src.type)) {\n      dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options\n    } else if (nodeName === \"input\" || nodeName === \"textarea\") {\n      dest.defaultValue = src.defaultValue;\n    }\n  }\n\n  function domManip(collection, args, callback, ignored) {\n    // Flatten any nested arrays\n    args = flat(args);\n    var fragment,\n        first,\n        scripts,\n        hasScripts,\n        node,\n        doc,\n        i = 0,\n        l = collection.length,\n        iNoClone = l - 1,\n        value = args[0],\n        valueIsFunction = isFunction(value); // We can't cloneNode fragments that contain checked, in WebKit\n\n    if (valueIsFunction || l > 1 && typeof value === \"string\" && !support.checkClone && rchecked.test(value)) {\n      return collection.each(function (index) {\n        var self = collection.eq(index);\n\n        if (valueIsFunction) {\n          args[0] = value.call(this, index, self.html());\n        }\n\n        domManip(self, args, callback, ignored);\n      });\n    }\n\n    if (l) {\n      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);\n      first = fragment.firstChild;\n\n      if (fragment.childNodes.length === 1) {\n        fragment = first;\n      } // Require either new content or an interest in ignored elements to invoke the callback\n\n\n      if (first || ignored) {\n        scripts = jQuery.map(getAll(fragment, \"script\"), disableScript);\n        hasScripts = scripts.length; // Use the original fragment for the last item\n        // instead of the first because it can end up\n        // being emptied incorrectly in certain situations (#8070).\n\n        for (; i < l; i++) {\n          node = fragment;\n\n          if (i !== iNoClone) {\n            node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration\n\n            if (hasScripts) {\n              // Support: Android <=4.0 only, PhantomJS 1 only\n              // push.apply(_, arraylike) throws on ancient WebKit\n              jQuery.merge(scripts, getAll(node, \"script\"));\n            }\n          }\n\n          callback.call(collection[i], node, i);\n        }\n\n        if (hasScripts) {\n          doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts\n\n          jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion\n\n          for (i = 0; i < hasScripts; i++) {\n            node = scripts[i];\n\n            if (rscriptType.test(node.type || \"\") && !dataPriv.access(node, \"globalEval\") && jQuery.contains(doc, node)) {\n              if (node.src && (node.type || \"\").toLowerCase() !== \"module\") {\n                // Optional AJAX dependency, but won't run scripts if not present\n                if (jQuery._evalUrl && !node.noModule) {\n                  jQuery._evalUrl(node.src, {\n                    nonce: node.nonce || node.getAttribute(\"nonce\")\n                  }, doc);\n                }\n              } else {\n                DOMEval(node.textContent.replace(rcleanScript, \"\"), node, doc);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return collection;\n  }\n\n  function _remove(elem, selector, keepData) {\n    var node,\n        nodes = selector ? jQuery.filter(selector, elem) : elem,\n        i = 0;\n\n    for (; (node = nodes[i]) != null; i++) {\n      if (!keepData && node.nodeType === 1) {\n        jQuery.cleanData(getAll(node));\n      }\n\n      if (node.parentNode) {\n        if (keepData && isAttached(node)) {\n          setGlobalEval(getAll(node, \"script\"));\n        }\n\n        node.parentNode.removeChild(node);\n      }\n    }\n\n    return elem;\n  }\n\n  jQuery.extend({\n    htmlPrefilter: function htmlPrefilter(html) {\n      return html;\n    },\n    clone: function clone(elem, dataAndEvents, deepDataAndEvents) {\n      var i,\n          l,\n          srcElements,\n          destElements,\n          clone = elem.cloneNode(true),\n          inPage = isAttached(elem); // Fix IE cloning issues\n\n      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {\n        // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n        destElements = getAll(clone);\n        srcElements = getAll(elem);\n\n        for (i = 0, l = srcElements.length; i < l; i++) {\n          fixInput(srcElements[i], destElements[i]);\n        }\n      } // Copy the events from the original to the clone\n\n\n      if (dataAndEvents) {\n        if (deepDataAndEvents) {\n          srcElements = srcElements || getAll(elem);\n          destElements = destElements || getAll(clone);\n\n          for (i = 0, l = srcElements.length; i < l; i++) {\n            cloneCopyEvent(srcElements[i], destElements[i]);\n          }\n        } else {\n          cloneCopyEvent(elem, clone);\n        }\n      } // Preserve script evaluation history\n\n\n      destElements = getAll(clone, \"script\");\n\n      if (destElements.length > 0) {\n        setGlobalEval(destElements, !inPage && getAll(elem, \"script\"));\n      } // Return the cloned set\n\n\n      return clone;\n    },\n    cleanData: function cleanData(elems) {\n      var data,\n          elem,\n          type,\n          special = jQuery.event.special,\n          i = 0;\n\n      for (; (elem = elems[i]) !== undefined; i++) {\n        if (acceptData(elem)) {\n          if (data = elem[dataPriv.expando]) {\n            if (data.events) {\n              for (type in data.events) {\n                if (special[type]) {\n                  jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove's overhead\n                } else {\n                  jQuery.removeEvent(elem, type, data.handle);\n                }\n              }\n            } // Support: Chrome <=35 - 45+\n            // Assign undefined instead of using delete, see Data#remove\n\n\n            elem[dataPriv.expando] = undefined;\n          }\n\n          if (elem[dataUser.expando]) {\n            // Support: Chrome <=35 - 45+\n            // Assign undefined instead of using delete, see Data#remove\n            elem[dataUser.expando] = undefined;\n          }\n        }\n      }\n    }\n  });\n  jQuery.fn.extend({\n    detach: function detach(selector) {\n      return _remove(this, selector, true);\n    },\n    remove: function remove(selector) {\n      return _remove(this, selector);\n    },\n    text: function text(value) {\n      return access(this, function (value) {\n        return value === undefined ? jQuery.text(this) : this.empty().each(function () {\n          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n            this.textContent = value;\n          }\n        });\n      }, null, value, arguments.length);\n    },\n    append: function append() {\n      return domManip(this, arguments, function (elem) {\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n          var target = manipulationTarget(this, elem);\n          target.appendChild(elem);\n        }\n      });\n    },\n    prepend: function prepend() {\n      return domManip(this, arguments, function (elem) {\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n          var target = manipulationTarget(this, elem);\n          target.insertBefore(elem, target.firstChild);\n        }\n      });\n    },\n    before: function before() {\n      return domManip(this, arguments, function (elem) {\n        if (this.parentNode) {\n          this.parentNode.insertBefore(elem, this);\n        }\n      });\n    },\n    after: function after() {\n      return domManip(this, arguments, function (elem) {\n        if (this.parentNode) {\n          this.parentNode.insertBefore(elem, this.nextSibling);\n        }\n      });\n    },\n    empty: function empty() {\n      var elem,\n          i = 0;\n\n      for (; (elem = this[i]) != null; i++) {\n        if (elem.nodeType === 1) {\n          // Prevent memory leaks\n          jQuery.cleanData(getAll(elem, false)); // Remove any remaining nodes\n\n          elem.textContent = \"\";\n        }\n      }\n\n      return this;\n    },\n    clone: function clone(dataAndEvents, deepDataAndEvents) {\n      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n      return this.map(function () {\n        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n      });\n    },\n    html: function html(value) {\n      return access(this, function (value) {\n        var elem = this[0] || {},\n            i = 0,\n            l = this.length;\n\n        if (value === undefined && elem.nodeType === 1) {\n          return elem.innerHTML;\n        } // See if we can take a shortcut and just use innerHTML\n\n\n        if (typeof value === \"string\" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [\"\", \"\"])[1].toLowerCase()]) {\n          value = jQuery.htmlPrefilter(value);\n\n          try {\n            for (; i < l; i++) {\n              elem = this[i] || {}; // Remove element nodes and prevent memory leaks\n\n              if (elem.nodeType === 1) {\n                jQuery.cleanData(getAll(elem, false));\n                elem.innerHTML = value;\n              }\n            }\n\n            elem = 0; // If using innerHTML throws an exception, use the fallback method\n          } catch (e) {}\n        }\n\n        if (elem) {\n          this.empty().append(value);\n        }\n      }, null, value, arguments.length);\n    },\n    replaceWith: function replaceWith() {\n      var ignored = []; // Make the changes, replacing each non-ignored context element with the new content\n\n      return domManip(this, arguments, function (elem) {\n        var parent = this.parentNode;\n\n        if (jQuery.inArray(this, ignored) < 0) {\n          jQuery.cleanData(getAll(this));\n\n          if (parent) {\n            parent.replaceChild(elem, this);\n          }\n        } // Force callback invocation\n\n      }, ignored);\n    }\n  });\n  jQuery.each({\n    appendTo: \"append\",\n    prependTo: \"prepend\",\n    insertBefore: \"before\",\n    insertAfter: \"after\",\n    replaceAll: \"replaceWith\"\n  }, function (name, original) {\n    jQuery.fn[name] = function (selector) {\n      var elems,\n          ret = [],\n          insert = jQuery(selector),\n          last = insert.length - 1,\n          i = 0;\n\n      for (; i <= last; i++) {\n        elems = i === last ? this : this.clone(true);\n        jQuery(insert[i])[original](elems); // Support: Android <=4.0 only, PhantomJS 1 only\n        // .get() because push.apply(_, arraylike) throws on ancient WebKit\n\n        push.apply(ret, elems.get());\n      }\n\n      return this.pushStack(ret);\n    };\n  });\n  var rnumnonpx = new RegExp(\"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\");\n\n  var getStyles = function getStyles(elem) {\n    // Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n    // IE throws on elements created in popups\n    // FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n    var view = elem.ownerDocument.defaultView;\n\n    if (!view || !view.opener) {\n      view = window;\n    }\n\n    return view.getComputedStyle(elem);\n  };\n\n  var swap = function swap(elem, options, callback) {\n    var ret,\n        name,\n        old = {}; // Remember the old values, and insert the new ones\n\n    for (name in options) {\n      old[name] = elem.style[name];\n      elem.style[name] = options[name];\n    }\n\n    ret = callback.call(elem); // Revert the old values\n\n    for (name in options) {\n      elem.style[name] = old[name];\n    }\n\n    return ret;\n  };\n\n  var rboxStyle = new RegExp(cssExpand.join(\"|\"), \"i\");\n\n  (function () {\n    // Executing both pixelPosition & boxSizingReliable tests require only one layout\n    // so they're executed at the same time to save the second computation.\n    function computeStyleTests() {\n      // This is a singleton, we need to execute it only once\n      if (!div) {\n        return;\n      }\n\n      container.style.cssText = \"position:absolute;left:-11111px;width:60px;\" + \"margin-top:1px;padding:0;border:0\";\n      div.style.cssText = \"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" + \"margin:auto;border:1px;padding:1px;\" + \"width:60%;top:1%\";\n      documentElement.appendChild(container).appendChild(div);\n      var divStyle = window.getComputedStyle(div);\n      pixelPositionVal = divStyle.top !== \"1%\"; // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\n      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12; // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n      // Some styles come back with percentage values, even though they shouldn't\n\n      div.style.right = \"60%\";\n      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36; // Support: IE 9 - 11 only\n      // Detect misreporting of content dimensions for box-sizing:border-box elements\n\n      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36; // Support: IE 9 only\n      // Detect overflow:scroll screwiness (gh-3699)\n      // Support: Chrome <=64\n      // Don't get tricked when zoom affects offsetWidth (gh-4029)\n\n      div.style.position = \"absolute\";\n      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;\n      documentElement.removeChild(container); // Nullify the div so it wouldn't be stored in the memory and\n      // it will also be a sign that checks already performed\n\n      div = null;\n    }\n\n    function roundPixelMeasures(measure) {\n      return Math.round(parseFloat(measure));\n    }\n\n    var pixelPositionVal,\n        boxSizingReliableVal,\n        scrollboxSizeVal,\n        pixelBoxStylesVal,\n        reliableTrDimensionsVal,\n        reliableMarginLeftVal,\n        container = document.createElement(\"div\"),\n        div = document.createElement(\"div\"); // Finish early in limited (non-browser) environments\n\n    if (!div.style) {\n      return;\n    } // Support: IE <=9 - 11 only\n    // Style of cloned element affects source element cloned (#8908)\n\n\n    div.style.backgroundClip = \"content-box\";\n    div.cloneNode(true).style.backgroundClip = \"\";\n    support.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n    jQuery.extend(support, {\n      boxSizingReliable: function boxSizingReliable() {\n        computeStyleTests();\n        return boxSizingReliableVal;\n      },\n      pixelBoxStyles: function pixelBoxStyles() {\n        computeStyleTests();\n        return pixelBoxStylesVal;\n      },\n      pixelPosition: function pixelPosition() {\n        computeStyleTests();\n        return pixelPositionVal;\n      },\n      reliableMarginLeft: function reliableMarginLeft() {\n        computeStyleTests();\n        return reliableMarginLeftVal;\n      },\n      scrollboxSize: function scrollboxSize() {\n        computeStyleTests();\n        return scrollboxSizeVal;\n      },\n      // Support: IE 9 - 11+, Edge 15 - 18+\n      // IE/Edge misreport `getComputedStyle` of table rows with width/height\n      // set in CSS while `offset*` properties report correct values.\n      // Behavior in IE 9 is more subtle than in newer versions & it passes\n      // some versions of this test; make sure not to make it pass there!\n      //\n      // Support: Firefox 70+\n      // Only Firefox includes border widths\n      // in computed dimensions. (gh-4529)\n      reliableTrDimensions: function reliableTrDimensions() {\n        var table, tr, trChild, trStyle;\n\n        if (reliableTrDimensionsVal == null) {\n          table = document.createElement(\"table\");\n          tr = document.createElement(\"tr\");\n          trChild = document.createElement(\"div\");\n          table.style.cssText = \"position:absolute;left:-11111px;border-collapse:separate\";\n          tr.style.cssText = \"border:1px solid\"; // Support: Chrome 86+\n          // Height set through cssText does not get applied.\n          // Computed height then comes back as 0.\n\n          tr.style.height = \"1px\";\n          trChild.style.height = \"9px\"; // Support: Android 8 Chrome 86+\n          // In our bodyBackground.html iframe,\n          // display for all div elements is set to \"inline\",\n          // which causes a problem only in Android 8 Chrome 86.\n          // Ensuring the div is display: block\n          // gets around this issue.\n\n          trChild.style.display = \"block\";\n          documentElement.appendChild(table).appendChild(tr).appendChild(trChild);\n          trStyle = window.getComputedStyle(tr);\n          reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;\n          documentElement.removeChild(table);\n        }\n\n        return reliableTrDimensionsVal;\n      }\n    });\n  })();\n\n  function curCSS(elem, name, computed) {\n    var width,\n        minWidth,\n        maxWidth,\n        ret,\n        // Support: Firefox 51+\n    // Retrieving style before computed somehow\n    // fixes an issue with getting wrong values\n    // on detached elements\n    style = elem.style;\n    computed = computed || getStyles(elem); // getPropertyValue is needed for:\n    //   .css('filter') (IE 9 only, #12537)\n    //   .css('--customProperty) (#3144)\n\n    if (computed) {\n      ret = computed.getPropertyValue(name) || computed[name];\n\n      if (ret === \"\" && !isAttached(elem)) {\n        ret = jQuery.style(elem, name);\n      } // A tribute to the \"awesome hack by Dean Edwards\"\n      // Android Browser returns percentage for some values,\n      // but width seems to be reliably pixels.\n      // This is against the CSSOM draft spec:\n      // https://drafts.csswg.org/cssom/#resolved-values\n\n\n      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {\n        // Remember the original values\n        width = style.width;\n        minWidth = style.minWidth;\n        maxWidth = style.maxWidth; // Put in the new values to get a computed value out\n\n        style.minWidth = style.maxWidth = style.width = ret;\n        ret = computed.width; // Revert the changed values\n\n        style.width = width;\n        style.minWidth = minWidth;\n        style.maxWidth = maxWidth;\n      }\n    }\n\n    return ret !== undefined ? // Support: IE <=9 - 11 only\n    // IE returns zIndex value as an integer.\n    ret + \"\" : ret;\n  }\n\n  function addGetHookIf(conditionFn, hookFn) {\n    // Define the hook, we'll check on the first run if it's really needed.\n    return {\n      get: function get() {\n        if (conditionFn()) {\n          // Hook not needed (or it's not possible to use it due\n          // to missing dependency), remove it.\n          delete this.get;\n          return;\n        } // Hook needed; redefine it so that the support test is not executed again.\n\n\n        return (this.get = hookFn).apply(this, arguments);\n      }\n    };\n  }\n\n  var cssPrefixes = [\"Webkit\", \"Moz\", \"ms\"],\n      emptyStyle = document.createElement(\"div\").style,\n      vendorProps = {}; // Return a vendor-prefixed property or undefined\n\n  function vendorPropName(name) {\n    // Check for vendor prefixed names\n    var capName = name[0].toUpperCase() + name.slice(1),\n        i = cssPrefixes.length;\n\n    while (i--) {\n      name = cssPrefixes[i] + capName;\n\n      if (name in emptyStyle) {\n        return name;\n      }\n    }\n  } // Return a potentially-mapped jQuery.cssProps or vendor prefixed property\n\n\n  function finalPropName(name) {\n    var _final = jQuery.cssProps[name] || vendorProps[name];\n\n    if (_final) {\n      return _final;\n    }\n\n    if (name in emptyStyle) {\n      return name;\n    }\n\n    return vendorProps[name] = vendorPropName(name) || name;\n  }\n\n  var // Swappable if display is none or starts with table\n  // except \"table\", \"table-cell\", or \"table-caption\"\n  // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n  rdisplayswap = /^(none|table(?!-c[ea]).+)/,\n      rcustomProp = /^--/,\n      cssShow = {\n    position: \"absolute\",\n    visibility: \"hidden\",\n    display: \"block\"\n  },\n      cssNormalTransform = {\n    letterSpacing: \"0\",\n    fontWeight: \"400\"\n  };\n\n  function setPositiveNumber(_elem, value, subtract) {\n    // Any relative (+/-) values have already been\n    // normalized at this point\n    var matches = rcssNum.exec(value);\n    return matches ? // Guard against undefined \"subtract\", e.g., when used as in cssHooks\n    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || \"px\") : value;\n  }\n\n  function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {\n    var i = dimension === \"width\" ? 1 : 0,\n        extra = 0,\n        delta = 0; // Adjustment may not be necessary\n\n    if (box === (isBorderBox ? \"border\" : \"content\")) {\n      return 0;\n    }\n\n    for (; i < 4; i += 2) {\n      // Both box models exclude margin\n      if (box === \"margin\") {\n        delta += jQuery.css(elem, box + cssExpand[i], true, styles);\n      } // If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\n\n      if (!isBorderBox) {\n        // Add padding\n        delta += jQuery.css(elem, \"padding\" + cssExpand[i], true, styles); // For \"border\" or \"margin\", add border\n\n        if (box !== \"padding\") {\n          delta += jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles); // But still keep track of it otherwise\n        } else {\n          extra += jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n        } // If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n        // \"padding\" or \"margin\"\n\n      } else {\n        // For \"content\", subtract padding\n        if (box === \"content\") {\n          delta -= jQuery.css(elem, \"padding\" + cssExpand[i], true, styles);\n        } // For \"content\" or \"padding\", subtract border\n\n\n        if (box !== \"margin\") {\n          delta -= jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n        }\n      }\n    } // Account for positive content-box scroll gutter when requested by providing computedVal\n\n\n    if (!isBorderBox && computedVal >= 0) {\n      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n      // Assuming integer scroll gutter, subtract the rest and round down\n      delta += Math.max(0, Math.ceil(elem[\"offset\" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5 // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n      // Use an explicit zero to avoid NaN (gh-3964)\n      )) || 0;\n    }\n\n    return delta;\n  }\n\n  function getWidthOrHeight(elem, dimension, extra) {\n    // Start with computed style\n    var styles = getStyles(elem),\n        // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n    // Fake content-box until we know it's needed to know the true value.\n    boxSizingNeeded = !support.boxSizingReliable() || extra,\n        isBorderBox = boxSizingNeeded && jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\",\n        valueIsBorderBox = isBorderBox,\n        val = curCSS(elem, dimension, styles),\n        offsetProp = \"offset\" + dimension[0].toUpperCase() + dimension.slice(1); // Support: Firefox <=54\n    // Return a confounding non-pixel value or feign ignorance, as appropriate.\n\n    if (rnumnonpx.test(val)) {\n      if (!extra) {\n        return val;\n      }\n\n      val = \"auto\";\n    } // Support: IE 9 - 11 only\n    // Use offsetWidth/offsetHeight for when box sizing is unreliable.\n    // In those cases, the computed value can be trusted to be border-box.\n\n\n    if ((!support.boxSizingReliable() && isBorderBox || // Support: IE 10 - 11+, Edge 15 - 18+\n    // IE/Edge misreport `getComputedStyle` of table rows with width/height\n    // set in CSS while `offset*` properties report correct values.\n    // Interestingly, in some cases IE 9 doesn't suffer from this issue.\n    !support.reliableTrDimensions() && nodeName(elem, \"tr\") || // Fall back to offsetWidth/offsetHeight when value is \"auto\"\n    // This happens for inline elements with no explicit setting (gh-3571)\n    val === \"auto\" || // Support: Android <=4.1 - 4.3 only\n    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n    !parseFloat(val) && jQuery.css(elem, \"display\", false, styles) === \"inline\") && // Make sure the element is visible & connected\n    elem.getClientRects().length) {\n      isBorderBox = jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\"; // Where available, offsetWidth/offsetHeight approximate border box dimensions.\n      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n      // retrieved value as a content box dimension.\n\n      valueIsBorderBox = offsetProp in elem;\n\n      if (valueIsBorderBox) {\n        val = elem[offsetProp];\n      }\n    } // Normalize \"\" and auto\n\n\n    val = parseFloat(val) || 0; // Adjust for the element's box model\n\n    return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? \"border\" : \"content\"), valueIsBorderBox, styles, // Provide the current computed size to request scroll gutter calculation (gh-3589)\n    val) + \"px\";\n  }\n\n  jQuery.extend({\n    // Add in style property hooks for overriding the default\n    // behavior of getting and setting a style property\n    cssHooks: {\n      opacity: {\n        get: function get(elem, computed) {\n          if (computed) {\n            // We should always get a number back from opacity\n            var ret = curCSS(elem, \"opacity\");\n            return ret === \"\" ? \"1\" : ret;\n          }\n        }\n      }\n    },\n    // Don't automatically add \"px\" to these possibly-unitless properties\n    cssNumber: {\n      \"animationIterationCount\": true,\n      \"columnCount\": true,\n      \"fillOpacity\": true,\n      \"flexGrow\": true,\n      \"flexShrink\": true,\n      \"fontWeight\": true,\n      \"gridArea\": true,\n      \"gridColumn\": true,\n      \"gridColumnEnd\": true,\n      \"gridColumnStart\": true,\n      \"gridRow\": true,\n      \"gridRowEnd\": true,\n      \"gridRowStart\": true,\n      \"lineHeight\": true,\n      \"opacity\": true,\n      \"order\": true,\n      \"orphans\": true,\n      \"widows\": true,\n      \"zIndex\": true,\n      \"zoom\": true\n    },\n    // Add in properties whose names you wish to fix before\n    // setting or getting the value\n    cssProps: {},\n    // Get and set the style property on a DOM Node\n    style: function style(elem, name, value, extra) {\n      // Don't set styles on text and comment nodes\n      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\n        return;\n      } // Make sure that we're working with the right name\n\n\n      var ret,\n          type,\n          hooks,\n          origName = camelCase(name),\n          isCustomProp = rcustomProp.test(name),\n          style = elem.style; // Make sure that we're working with the right name. We don't\n      // want to query the value if it is a CSS custom property\n      // since they are user-defined.\n\n      if (!isCustomProp) {\n        name = finalPropName(origName);\n      } // Gets hook for the prefixed version, then unprefixed version\n\n\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we're setting a value\n\n      if (value !== undefined) {\n        type = _typeof(value); // Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\n        if (type === \"string\" && (ret = rcssNum.exec(value)) && ret[1]) {\n          value = adjustCSS(elem, name, ret); // Fixes bug #9237\n\n          type = \"number\";\n        } // Make sure that null and NaN values aren't set (#7116)\n\n\n        if (value == null || value !== value) {\n          return;\n        } // If a number was passed in, add the unit (except for certain CSS properties)\n        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n        // \"px\" to a few hardcoded values.\n\n\n        if (type === \"number\" && !isCustomProp) {\n          value += ret && ret[3] || (jQuery.cssNumber[origName] ? \"\" : \"px\");\n        } // background-* props affect original clone's values\n\n\n        if (!support.clearCloneStyle && value === \"\" && name.indexOf(\"background\") === 0) {\n          style[name] = \"inherit\";\n        } // If a hook was provided, use that value, otherwise just set the specified value\n\n\n        if (!hooks || !(\"set\" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {\n          if (isCustomProp) {\n            style.setProperty(name, value);\n          } else {\n            style[name] = value;\n          }\n        }\n      } else {\n        // If a hook was provided get the non-computed value from there\n        if (hooks && \"get\" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {\n          return ret;\n        } // Otherwise just get the value from the style object\n\n\n        return style[name];\n      }\n    },\n    css: function css(elem, name, extra, styles) {\n      var val,\n          num,\n          hooks,\n          origName = camelCase(name),\n          isCustomProp = rcustomProp.test(name); // Make sure that we're working with the right name. We don't\n      // want to modify the value if it is a CSS custom property\n      // since they are user-defined.\n\n      if (!isCustomProp) {\n        name = finalPropName(origName);\n      } // Try prefixed name followed by the unprefixed name\n\n\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there\n\n      if (hooks && \"get\" in hooks) {\n        val = hooks.get(elem, true, extra);\n      } // Otherwise, if a way to get the computed value exists, use that\n\n\n      if (val === undefined) {\n        val = curCSS(elem, name, styles);\n      } // Convert \"normal\" to computed value\n\n\n      if (val === \"normal\" && name in cssNormalTransform) {\n        val = cssNormalTransform[name];\n      } // Make numeric if forced or a qualifier was provided and val looks numeric\n\n\n      if (extra === \"\" || extra) {\n        num = parseFloat(val);\n        return extra === true || isFinite(num) ? num || 0 : val;\n      }\n\n      return val;\n    }\n  });\n  jQuery.each([\"height\", \"width\"], function (_i, dimension) {\n    jQuery.cssHooks[dimension] = {\n      get: function get(elem, computed, extra) {\n        if (computed) {\n          // Certain elements can have dimension info if we invisibly show them\n          // but it must have a current display style that would benefit\n          return rdisplayswap.test(jQuery.css(elem, \"display\")) && ( // Support: Safari 8+\n          // Table columns in Safari have non-zero offsetWidth & zero\n          // getBoundingClientRect().width unless display is changed.\n          // Support: IE <=11 only\n          // Running getBoundingClientRect on a disconnected node\n          // in IE throws an error.\n          !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {\n            return getWidthOrHeight(elem, dimension, extra);\n          }) : getWidthOrHeight(elem, dimension, extra);\n        }\n      },\n      set: function set(elem, value, extra) {\n        var matches,\n            styles = getStyles(elem),\n            // Only read styles.position if the test has a chance to fail\n        // to avoid forcing a reflow.\n        scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === \"absolute\",\n            // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n        boxSizingNeeded = scrollboxSizeBuggy || extra,\n            isBorderBox = boxSizingNeeded && jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\",\n            subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0; // Account for unreliable border-box dimensions by comparing offset* to computed and\n        // faking a content-box to get border and padding (gh-3699)\n\n        if (isBorderBox && scrollboxSizeBuggy) {\n          subtract -= Math.ceil(elem[\"offset\" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, \"border\", false, styles) - 0.5);\n        } // Convert to pixels if value adjustment is needed\n\n\n        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || \"px\") !== \"px\") {\n          elem.style[dimension] = value;\n          value = jQuery.css(elem, dimension);\n        }\n\n        return setPositiveNumber(elem, value, subtract);\n      }\n    };\n  });\n  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {\n    if (computed) {\n      return (parseFloat(curCSS(elem, \"marginLeft\")) || elem.getBoundingClientRect().left - swap(elem, {\n        marginLeft: 0\n      }, function () {\n        return elem.getBoundingClientRect().left;\n      })) + \"px\";\n    }\n  }); // These hooks are used by animate to expand properties\n\n  jQuery.each({\n    margin: \"\",\n    padding: \"\",\n    border: \"Width\"\n  }, function (prefix, suffix) {\n    jQuery.cssHooks[prefix + suffix] = {\n      expand: function expand(value) {\n        var i = 0,\n            expanded = {},\n            // Assumes a single number if not a string\n        parts = typeof value === \"string\" ? value.split(\" \") : [value];\n\n        for (; i < 4; i++) {\n          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];\n        }\n\n        return expanded;\n      }\n    };\n\n    if (prefix !== \"margin\") {\n      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;\n    }\n  });\n  jQuery.fn.extend({\n    css: function css(name, value) {\n      return access(this, function (elem, name, value) {\n        var styles,\n            len,\n            map = {},\n            i = 0;\n\n        if (Array.isArray(name)) {\n          styles = getStyles(elem);\n          len = name.length;\n\n          for (; i < len; i++) {\n            map[name[i]] = jQuery.css(elem, name[i], false, styles);\n          }\n\n          return map;\n        }\n\n        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n      }, name, value, arguments.length > 1);\n    }\n  });\n\n  function Tween(elem, options, prop, end, easing) {\n    return new Tween.prototype.init(elem, options, prop, end, easing);\n  }\n\n  jQuery.Tween = Tween;\n  Tween.prototype = {\n    constructor: Tween,\n    init: function init(elem, options, prop, end, easing, unit) {\n      this.elem = elem;\n      this.prop = prop;\n      this.easing = easing || jQuery.easing._default;\n      this.options = options;\n      this.start = this.now = this.cur();\n      this.end = end;\n      this.unit = unit || (jQuery.cssNumber[prop] ? \"\" : \"px\");\n    },\n    cur: function cur() {\n      var hooks = Tween.propHooks[this.prop];\n      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);\n    },\n    run: function run(percent) {\n      var eased,\n          hooks = Tween.propHooks[this.prop];\n\n      if (this.options.duration) {\n        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);\n      } else {\n        this.pos = eased = percent;\n      }\n\n      this.now = (this.end - this.start) * eased + this.start;\n\n      if (this.options.step) {\n        this.options.step.call(this.elem, this.now, this);\n      }\n\n      if (hooks && hooks.set) {\n        hooks.set(this);\n      } else {\n        Tween.propHooks._default.set(this);\n      }\n\n      return this;\n    }\n  };\n  Tween.prototype.init.prototype = Tween.prototype;\n  Tween.propHooks = {\n    _default: {\n      get: function get(tween) {\n        var result; // Use a property on the element directly when it is not a DOM element,\n        // or when there is no matching style property that exists.\n\n        if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {\n          return tween.elem[tween.prop];\n        } // Passing an empty string as a 3rd parameter to .css will automatically\n        // attempt a parseFloat and fallback to a string if the parse fails.\n        // Simple values such as \"10px\" are parsed to Float;\n        // complex values such as \"rotate(1rad)\" are returned as-is.\n\n\n        result = jQuery.css(tween.elem, tween.prop, \"\"); // Empty strings, null, undefined and \"auto\" are converted to 0.\n\n        return !result || result === \"auto\" ? 0 : result;\n      },\n      set: function set(tween) {\n        // Use step hook for back compat.\n        // Use cssHook if its there.\n        // Use .style if available and use plain properties where available.\n        if (jQuery.fx.step[tween.prop]) {\n          jQuery.fx.step[tween.prop](tween);\n        } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {\n          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);\n        } else {\n          tween.elem[tween.prop] = tween.now;\n        }\n      }\n    }\n  }; // Support: IE <=9 only\n  // Panic based approach to setting things on disconnected nodes\n\n  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n    set: function set(tween) {\n      if (tween.elem.nodeType && tween.elem.parentNode) {\n        tween.elem[tween.prop] = tween.now;\n      }\n    }\n  };\n  jQuery.easing = {\n    linear: function linear(p) {\n      return p;\n    },\n    swing: function swing(p) {\n      return 0.5 - Math.cos(p * Math.PI) / 2;\n    },\n    _default: \"swing\"\n  };\n  jQuery.fx = Tween.prototype.init; // Back compat <1.8 extension point\n\n  jQuery.fx.step = {};\n  var fxNow,\n      inProgress,\n      rfxtypes = /^(?:toggle|show|hide)$/,\n      rrun = /queueHooks$/;\n\n  function schedule() {\n    if (inProgress) {\n      if (document.hidden === false && window.requestAnimationFrame) {\n        window.requestAnimationFrame(schedule);\n      } else {\n        window.setTimeout(schedule, jQuery.fx.interval);\n      }\n\n      jQuery.fx.tick();\n    }\n  } // Animations created synchronously will run synchronously\n\n\n  function createFxNow() {\n    window.setTimeout(function () {\n      fxNow = undefined;\n    });\n    return fxNow = Date.now();\n  } // Generate parameters to create a standard animation\n\n\n  function genFx(type, includeWidth) {\n    var which,\n        i = 0,\n        attrs = {\n      height: type\n    }; // If we include width, step value is 1 to do all cssExpand values,\n    // otherwise step value is 2 to skip over Left and Right\n\n    includeWidth = includeWidth ? 1 : 0;\n\n    for (; i < 4; i += 2 - includeWidth) {\n      which = cssExpand[i];\n      attrs[\"margin\" + which] = attrs[\"padding\" + which] = type;\n    }\n\n    if (includeWidth) {\n      attrs.opacity = attrs.width = type;\n    }\n\n    return attrs;\n  }\n\n  function createTween(value, prop, animation) {\n    var tween,\n        collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners[\"*\"]),\n        index = 0,\n        length = collection.length;\n\n    for (; index < length; index++) {\n      if (tween = collection[index].call(animation, prop, value)) {\n        // We're done with this property\n        return tween;\n      }\n    }\n  }\n\n  function defaultPrefilter(elem, props, opts) {\n    var prop,\n        value,\n        toggle,\n        hooks,\n        oldfire,\n        propTween,\n        restoreDisplay,\n        display,\n        isBox = \"width\" in props || \"height\" in props,\n        anim = this,\n        orig = {},\n        style = elem.style,\n        hidden = elem.nodeType && isHiddenWithinTree(elem),\n        dataShow = dataPriv.get(elem, \"fxshow\"); // Queue-skipping animations hijack the fx hooks\n\n    if (!opts.queue) {\n      hooks = jQuery._queueHooks(elem, \"fx\");\n\n      if (hooks.unqueued == null) {\n        hooks.unqueued = 0;\n        oldfire = hooks.empty.fire;\n\n        hooks.empty.fire = function () {\n          if (!hooks.unqueued) {\n            oldfire();\n          }\n        };\n      }\n\n      hooks.unqueued++;\n      anim.always(function () {\n        // Ensure the complete handler is called before this completes\n        anim.always(function () {\n          hooks.unqueued--;\n\n          if (!jQuery.queue(elem, \"fx\").length) {\n            hooks.empty.fire();\n          }\n        });\n      });\n    } // Detect show/hide animations\n\n\n    for (prop in props) {\n      value = props[prop];\n\n      if (rfxtypes.test(value)) {\n        delete props[prop];\n        toggle = toggle || value === \"toggle\";\n\n        if (value === (hidden ? \"hide\" : \"show\")) {\n          // Pretend to be hidden if this is a \"show\" and\n          // there is still data from a stopped show/hide\n          if (value === \"show\" && dataShow && dataShow[prop] !== undefined) {\n            hidden = true; // Ignore all other no-op show/hide data\n          } else {\n            continue;\n          }\n        }\n\n        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);\n      }\n    } // Bail out if this is a no-op like .hide().hide()\n\n\n    propTween = !jQuery.isEmptyObject(props);\n\n    if (!propTween && jQuery.isEmptyObject(orig)) {\n      return;\n    } // Restrict \"overflow\" and \"display\" styles during box animations\n\n\n    if (isBox && elem.nodeType === 1) {\n      // Support: IE <=9 - 11, Edge 12 - 15\n      // Record all 3 overflow attributes because IE does not infer the shorthand\n      // from identically-valued overflowX and overflowY and Edge just mirrors\n      // the overflowX value there.\n      opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // Identify a display type, preferring old show/hide data over the CSS cascade\n\n      restoreDisplay = dataShow && dataShow.display;\n\n      if (restoreDisplay == null) {\n        restoreDisplay = dataPriv.get(elem, \"display\");\n      }\n\n      display = jQuery.css(elem, \"display\");\n\n      if (display === \"none\") {\n        if (restoreDisplay) {\n          display = restoreDisplay;\n        } else {\n          // Get nonempty value(s) by temporarily forcing visibility\n          showHide([elem], true);\n          restoreDisplay = elem.style.display || restoreDisplay;\n          display = jQuery.css(elem, \"display\");\n          showHide([elem]);\n        }\n      } // Animate inline elements as inline-block\n\n\n      if (display === \"inline\" || display === \"inline-block\" && restoreDisplay != null) {\n        if (jQuery.css(elem, \"float\") === \"none\") {\n          // Restore the original display value at the end of pure show/hide animations\n          if (!propTween) {\n            anim.done(function () {\n              style.display = restoreDisplay;\n            });\n\n            if (restoreDisplay == null) {\n              display = style.display;\n              restoreDisplay = display === \"none\" ? \"\" : display;\n            }\n          }\n\n          style.display = \"inline-block\";\n        }\n      }\n    }\n\n    if (opts.overflow) {\n      style.overflow = \"hidden\";\n      anim.always(function () {\n        style.overflow = opts.overflow[0];\n        style.overflowX = opts.overflow[1];\n        style.overflowY = opts.overflow[2];\n      });\n    } // Implement show/hide animations\n\n\n    propTween = false;\n\n    for (prop in orig) {\n      // General show/hide setup for this element animation\n      if (!propTween) {\n        if (dataShow) {\n          if (\"hidden\" in dataShow) {\n            hidden = dataShow.hidden;\n          }\n        } else {\n          dataShow = dataPriv.access(elem, \"fxshow\", {\n            display: restoreDisplay\n          });\n        } // Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\n\n        if (toggle) {\n          dataShow.hidden = !hidden;\n        } // Show elements before animating them\n\n\n        if (hidden) {\n          showHide([elem], true);\n        }\n        /* eslint-disable no-loop-func */\n\n\n        anim.done(function () {\n          /* eslint-enable no-loop-func */\n          // The final step of a \"hide\" animation is actually hiding the element\n          if (!hidden) {\n            showHide([elem]);\n          }\n\n          dataPriv.remove(elem, \"fxshow\");\n\n          for (prop in orig) {\n            jQuery.style(elem, prop, orig[prop]);\n          }\n        });\n      } // Per-property setup\n\n\n      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);\n\n      if (!(prop in dataShow)) {\n        dataShow[prop] = propTween.start;\n\n        if (hidden) {\n          propTween.end = propTween.start;\n          propTween.start = 0;\n        }\n      }\n    }\n  }\n\n  function propFilter(props, specialEasing) {\n    var index, name, easing, value, hooks; // camelCase, specialEasing and expand cssHook pass\n\n    for (index in props) {\n      name = camelCase(index);\n      easing = specialEasing[name];\n      value = props[index];\n\n      if (Array.isArray(value)) {\n        easing = value[1];\n        value = props[index] = value[0];\n      }\n\n      if (index !== name) {\n        props[name] = value;\n        delete props[index];\n      }\n\n      hooks = jQuery.cssHooks[name];\n\n      if (hooks && \"expand\" in hooks) {\n        value = hooks.expand(value);\n        delete props[name]; // Not quite $.extend, this won't overwrite existing keys.\n        // Reusing 'index' because we have the correct \"name\"\n\n        for (index in value) {\n          if (!(index in props)) {\n            props[index] = value[index];\n            specialEasing[index] = easing;\n          }\n        }\n      } else {\n        specialEasing[name] = easing;\n      }\n    }\n  }\n\n  function Animation(elem, properties, options) {\n    var result,\n        stopped,\n        index = 0,\n        length = Animation.prefilters.length,\n        deferred = jQuery.Deferred().always(function () {\n      // Don't match elem in the :animated selector\n      delete tick.elem;\n    }),\n        tick = function tick() {\n      if (stopped) {\n        return false;\n      }\n\n      var currentTime = fxNow || createFxNow(),\n          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),\n          // Support: Android 2.3 only\n      // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n      temp = remaining / animation.duration || 0,\n          percent = 1 - temp,\n          index = 0,\n          length = animation.tweens.length;\n\n      for (; index < length; index++) {\n        animation.tweens[index].run(percent);\n      }\n\n      deferred.notifyWith(elem, [animation, percent, remaining]); // If there's more to do, yield\n\n      if (percent < 1 && length) {\n        return remaining;\n      } // If this was an empty animation, synthesize a final progress notification\n\n\n      if (!length) {\n        deferred.notifyWith(elem, [animation, 1, 0]);\n      } // Resolve the animation and report its conclusion\n\n\n      deferred.resolveWith(elem, [animation]);\n      return false;\n    },\n        animation = deferred.promise({\n      elem: elem,\n      props: jQuery.extend({}, properties),\n      opts: jQuery.extend(true, {\n        specialEasing: {},\n        easing: jQuery.easing._default\n      }, options),\n      originalProperties: properties,\n      originalOptions: options,\n      startTime: fxNow || createFxNow(),\n      duration: options.duration,\n      tweens: [],\n      createTween: function createTween(prop, end) {\n        var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);\n        animation.tweens.push(tween);\n        return tween;\n      },\n      stop: function stop(gotoEnd) {\n        var index = 0,\n            // If we are going to the end, we want to run all the tweens\n        // otherwise we skip this part\n        length = gotoEnd ? animation.tweens.length : 0;\n\n        if (stopped) {\n          return this;\n        }\n\n        stopped = true;\n\n        for (; index < length; index++) {\n          animation.tweens[index].run(1);\n        } // Resolve when we played the last frame; otherwise, reject\n\n\n        if (gotoEnd) {\n          deferred.notifyWith(elem, [animation, 1, 0]);\n          deferred.resolveWith(elem, [animation, gotoEnd]);\n        } else {\n          deferred.rejectWith(elem, [animation, gotoEnd]);\n        }\n\n        return this;\n      }\n    }),\n        props = animation.props;\n\n    propFilter(props, animation.opts.specialEasing);\n\n    for (; index < length; index++) {\n      result = Animation.prefilters[index].call(animation, elem, props, animation.opts);\n\n      if (result) {\n        if (isFunction(result.stop)) {\n          jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);\n        }\n\n        return result;\n      }\n    }\n\n    jQuery.map(props, createTween, animation);\n\n    if (isFunction(animation.opts.start)) {\n      animation.opts.start.call(elem, animation);\n    } // Attach callbacks from options\n\n\n    animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);\n    jQuery.fx.timer(jQuery.extend(tick, {\n      elem: elem,\n      anim: animation,\n      queue: animation.opts.queue\n    }));\n    return animation;\n  }\n\n  jQuery.Animation = jQuery.extend(Animation, {\n    tweeners: {\n      \"*\": [function (prop, value) {\n        var tween = this.createTween(prop, value);\n        adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);\n        return tween;\n      }]\n    },\n    tweener: function tweener(props, callback) {\n      if (isFunction(props)) {\n        callback = props;\n        props = [\"*\"];\n      } else {\n        props = props.match(rnothtmlwhite);\n      }\n\n      var prop,\n          index = 0,\n          length = props.length;\n\n      for (; index < length; index++) {\n        prop = props[index];\n        Animation.tweeners[prop] = Animation.tweeners[prop] || [];\n        Animation.tweeners[prop].unshift(callback);\n      }\n    },\n    prefilters: [defaultPrefilter],\n    prefilter: function prefilter(callback, prepend) {\n      if (prepend) {\n        Animation.prefilters.unshift(callback);\n      } else {\n        Animation.prefilters.push(callback);\n      }\n    }\n  });\n\n  jQuery.speed = function (speed, easing, fn) {\n    var opt = speed && _typeof(speed) === \"object\" ? jQuery.extend({}, speed) : {\n      complete: fn || !fn && easing || isFunction(speed) && speed,\n      duration: speed,\n      easing: fn && easing || easing && !isFunction(easing) && easing\n    }; // Go to the end state if fx are off\n\n    if (jQuery.fx.off) {\n      opt.duration = 0;\n    } else {\n      if (typeof opt.duration !== \"number\") {\n        if (opt.duration in jQuery.fx.speeds) {\n          opt.duration = jQuery.fx.speeds[opt.duration];\n        } else {\n          opt.duration = jQuery.fx.speeds._default;\n        }\n      }\n    } // Normalize opt.queue - true/undefined/null -> \"fx\"\n\n\n    if (opt.queue == null || opt.queue === true) {\n      opt.queue = \"fx\";\n    } // Queueing\n\n\n    opt.old = opt.complete;\n\n    opt.complete = function () {\n      if (isFunction(opt.old)) {\n        opt.old.call(this);\n      }\n\n      if (opt.queue) {\n        jQuery.dequeue(this, opt.queue);\n      }\n    };\n\n    return opt;\n  };\n\n  jQuery.fn.extend({\n    fadeTo: function fadeTo(speed, to, easing, callback) {\n      // Show any hidden elements after setting opacity to 0\n      return this.filter(isHiddenWithinTree).css(\"opacity\", 0).show() // Animate to the value specified\n      .end().animate({\n        opacity: to\n      }, speed, easing, callback);\n    },\n    animate: function animate(prop, speed, easing, callback) {\n      var empty = jQuery.isEmptyObject(prop),\n          optall = jQuery.speed(speed, easing, callback),\n          doAnimation = function doAnimation() {\n        // Operate on a copy of prop so per-property easing won't be lost\n        var anim = Animation(this, jQuery.extend({}, prop), optall); // Empty animations, or finishing resolves immediately\n\n        if (empty || dataPriv.get(this, \"finish\")) {\n          anim.stop(true);\n        }\n      };\n\n      doAnimation.finish = doAnimation;\n      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);\n    },\n    stop: function stop(type, clearQueue, gotoEnd) {\n      var stopQueue = function stopQueue(hooks) {\n        var stop = hooks.stop;\n        delete hooks.stop;\n        stop(gotoEnd);\n      };\n\n      if (typeof type !== \"string\") {\n        gotoEnd = clearQueue;\n        clearQueue = type;\n        type = undefined;\n      }\n\n      if (clearQueue) {\n        this.queue(type || \"fx\", []);\n      }\n\n      return this.each(function () {\n        var dequeue = true,\n            index = type != null && type + \"queueHooks\",\n            timers = jQuery.timers,\n            data = dataPriv.get(this);\n\n        if (index) {\n          if (data[index] && data[index].stop) {\n            stopQueue(data[index]);\n          }\n        } else {\n          for (index in data) {\n            if (data[index] && data[index].stop && rrun.test(index)) {\n              stopQueue(data[index]);\n            }\n          }\n        }\n\n        for (index = timers.length; index--;) {\n          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {\n            timers[index].anim.stop(gotoEnd);\n            dequeue = false;\n            timers.splice(index, 1);\n          }\n        } // Start the next in the queue if the last step wasn't forced.\n        // Timers currently will call their complete callbacks, which\n        // will dequeue but only if they were gotoEnd.\n\n\n        if (dequeue || !gotoEnd) {\n          jQuery.dequeue(this, type);\n        }\n      });\n    },\n    finish: function finish(type) {\n      if (type !== false) {\n        type = type || \"fx\";\n      }\n\n      return this.each(function () {\n        var index,\n            data = dataPriv.get(this),\n            queue = data[type + \"queue\"],\n            hooks = data[type + \"queueHooks\"],\n            timers = jQuery.timers,\n            length = queue ? queue.length : 0; // Enable finishing flag on private data\n\n        data.finish = true; // Empty the queue first\n\n        jQuery.queue(this, type, []);\n\n        if (hooks && hooks.stop) {\n          hooks.stop.call(this, true);\n        } // Look for any active animations, and finish them\n\n\n        for (index = timers.length; index--;) {\n          if (timers[index].elem === this && timers[index].queue === type) {\n            timers[index].anim.stop(true);\n            timers.splice(index, 1);\n          }\n        } // Look for any animations in the old queue and finish them\n\n\n        for (index = 0; index < length; index++) {\n          if (queue[index] && queue[index].finish) {\n            queue[index].finish.call(this);\n          }\n        } // Turn off finishing flag\n\n\n        delete data.finish;\n      });\n    }\n  });\n  jQuery.each([\"toggle\", \"show\", \"hide\"], function (_i, name) {\n    var cssFn = jQuery.fn[name];\n\n    jQuery.fn[name] = function (speed, easing, callback) {\n      return speed == null || typeof speed === \"boolean\" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\n    };\n  }); // Generate shortcuts for custom animations\n\n  jQuery.each({\n    slideDown: genFx(\"show\"),\n    slideUp: genFx(\"hide\"),\n    slideToggle: genFx(\"toggle\"),\n    fadeIn: {\n      opacity: \"show\"\n    },\n    fadeOut: {\n      opacity: \"hide\"\n    },\n    fadeToggle: {\n      opacity: \"toggle\"\n    }\n  }, function (name, props) {\n    jQuery.fn[name] = function (speed, easing, callback) {\n      return this.animate(props, speed, easing, callback);\n    };\n  });\n  jQuery.timers = [];\n\n  jQuery.fx.tick = function () {\n    var timer,\n        i = 0,\n        timers = jQuery.timers;\n    fxNow = Date.now();\n\n    for (; i < timers.length; i++) {\n      timer = timers[i]; // Run the timer and safely remove it when done (allowing for external removal)\n\n      if (!timer() && timers[i] === timer) {\n        timers.splice(i--, 1);\n      }\n    }\n\n    if (!timers.length) {\n      jQuery.fx.stop();\n    }\n\n    fxNow = undefined;\n  };\n\n  jQuery.fx.timer = function (timer) {\n    jQuery.timers.push(timer);\n    jQuery.fx.start();\n  };\n\n  jQuery.fx.interval = 13;\n\n  jQuery.fx.start = function () {\n    if (inProgress) {\n      return;\n    }\n\n    inProgress = true;\n    schedule();\n  };\n\n  jQuery.fx.stop = function () {\n    inProgress = null;\n  };\n\n  jQuery.fx.speeds = {\n    slow: 600,\n    fast: 200,\n    // Default speed\n    _default: 400\n  }; // Based off of the plugin by Clint Helfers, with permission.\n  // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\n\n  jQuery.fn.delay = function (time, type) {\n    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\n    type = type || \"fx\";\n    return this.queue(type, function (next, hooks) {\n      var timeout = window.setTimeout(next, time);\n\n      hooks.stop = function () {\n        window.clearTimeout(timeout);\n      };\n    });\n  };\n\n  (function () {\n    var input = document.createElement(\"input\"),\n        select = document.createElement(\"select\"),\n        opt = select.appendChild(document.createElement(\"option\"));\n    input.type = \"checkbox\"; // Support: Android <=4.3 only\n    // Default value for a checkbox should be \"on\"\n\n    support.checkOn = input.value !== \"\"; // Support: IE <=11 only\n    // Must access selectedIndex to make default options select\n\n    support.optSelected = opt.selected; // Support: IE <=11 only\n    // An input loses its value after becoming a radio\n\n    input = document.createElement(\"input\");\n    input.value = \"t\";\n    input.type = \"radio\";\n    support.radioValue = input.value === \"t\";\n  })();\n\n  var boolHook,\n      attrHandle = jQuery.expr.attrHandle;\n  jQuery.fn.extend({\n    attr: function attr(name, value) {\n      return access(this, jQuery.attr, name, value, arguments.length > 1);\n    },\n    removeAttr: function removeAttr(name) {\n      return this.each(function () {\n        jQuery.removeAttr(this, name);\n      });\n    }\n  });\n  jQuery.extend({\n    attr: function attr(elem, name, value) {\n      var ret,\n          hooks,\n          nType = elem.nodeType; // Don't get/set attributes on text, comment and attribute nodes\n\n      if (nType === 3 || nType === 8 || nType === 2) {\n        return;\n      } // Fallback to prop when attributes are not supported\n\n\n      if (typeof elem.getAttribute === \"undefined\") {\n        return jQuery.prop(elem, name, value);\n      } // Attribute hooks are determined by the lowercase version\n      // Grab necessary hook if one is defined\n\n\n      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n        hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);\n      }\n\n      if (value !== undefined) {\n        if (value === null) {\n          jQuery.removeAttr(elem, name);\n          return;\n        }\n\n        if (hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n          return ret;\n        }\n\n        elem.setAttribute(name, value + \"\");\n        return value;\n      }\n\n      if (hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\n        return ret;\n      }\n\n      ret = jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined\n\n      return ret == null ? undefined : ret;\n    },\n    attrHooks: {\n      type: {\n        set: function set(elem, value) {\n          if (!support.radioValue && value === \"radio\" && nodeName(elem, \"input\")) {\n            var val = elem.value;\n            elem.setAttribute(\"type\", value);\n\n            if (val) {\n              elem.value = val;\n            }\n\n            return value;\n          }\n        }\n      }\n    },\n    removeAttr: function removeAttr(elem, value) {\n      var name,\n          i = 0,\n          // Attribute names can contain non-HTML whitespace characters\n      // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n      attrNames = value && value.match(rnothtmlwhite);\n\n      if (attrNames && elem.nodeType === 1) {\n        while (name = attrNames[i++]) {\n          elem.removeAttribute(name);\n        }\n      }\n    }\n  }); // Hooks for boolean attributes\n\n  boolHook = {\n    set: function set(elem, value, name) {\n      if (value === false) {\n        // Remove boolean attributes when set to false\n        jQuery.removeAttr(elem, name);\n      } else {\n        elem.setAttribute(name, name);\n      }\n\n      return name;\n    }\n  };\n  jQuery.each(jQuery.expr.match.bool.source.match(/\\w+/g), function (_i, name) {\n    var getter = attrHandle[name] || jQuery.find.attr;\n\n    attrHandle[name] = function (elem, name, isXML) {\n      var ret,\n          handle,\n          lowercaseName = name.toLowerCase();\n\n      if (!isXML) {\n        // Avoid an infinite loop by temporarily removing this function from the getter\n        handle = attrHandle[lowercaseName];\n        attrHandle[lowercaseName] = ret;\n        ret = getter(elem, name, isXML) != null ? lowercaseName : null;\n        attrHandle[lowercaseName] = handle;\n      }\n\n      return ret;\n    };\n  });\n  var rfocusable = /^(?:input|select|textarea|button)$/i,\n      rclickable = /^(?:a|area)$/i;\n  jQuery.fn.extend({\n    prop: function prop(name, value) {\n      return access(this, jQuery.prop, name, value, arguments.length > 1);\n    },\n    removeProp: function removeProp(name) {\n      return this.each(function () {\n        delete this[jQuery.propFix[name] || name];\n      });\n    }\n  });\n  jQuery.extend({\n    prop: function prop(elem, name, value) {\n      var ret,\n          hooks,\n          nType = elem.nodeType; // Don't get/set properties on text, comment and attribute nodes\n\n      if (nType === 3 || nType === 8 || nType === 2) {\n        return;\n      }\n\n      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n        // Fix name and attach hooks\n        name = jQuery.propFix[name] || name;\n        hooks = jQuery.propHooks[name];\n      }\n\n      if (value !== undefined) {\n        if (hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n          return ret;\n        }\n\n        return elem[name] = value;\n      }\n\n      if (hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\n        return ret;\n      }\n\n      return elem[name];\n    },\n    propHooks: {\n      tabIndex: {\n        get: function get(elem) {\n          // Support: IE <=9 - 11 only\n          // elem.tabIndex doesn't always return the\n          // correct value when it hasn't been explicitly set\n          // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n          // Use proper attribute retrieval(#12072)\n          var tabindex = jQuery.find.attr(elem, \"tabindex\");\n\n          if (tabindex) {\n            return parseInt(tabindex, 10);\n          }\n\n          if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {\n            return 0;\n          }\n\n          return -1;\n        }\n      }\n    },\n    propFix: {\n      \"for\": \"htmlFor\",\n      \"class\": \"className\"\n    }\n  }); // Support: IE <=11 only\n  // Accessing the selectedIndex property\n  // forces the browser to respect setting selected\n  // on the option\n  // The getter ensures a default option is selected\n  // when in an optgroup\n  // eslint rule \"no-unused-expressions\" is disabled for this code\n  // since it considers such accessions noop\n\n  if (!support.optSelected) {\n    jQuery.propHooks.selected = {\n      get: function get(elem) {\n        /* eslint no-unused-expressions: \"off\" */\n        var parent = elem.parentNode;\n\n        if (parent && parent.parentNode) {\n          parent.parentNode.selectedIndex;\n        }\n\n        return null;\n      },\n      set: function set(elem) {\n        /* eslint no-unused-expressions: \"off\" */\n        var parent = elem.parentNode;\n\n        if (parent) {\n          parent.selectedIndex;\n\n          if (parent.parentNode) {\n            parent.parentNode.selectedIndex;\n          }\n        }\n      }\n    };\n  }\n\n  jQuery.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\n    jQuery.propFix[this.toLowerCase()] = this;\n  }); // Strip and collapse whitespace according to HTML spec\n  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\n  function stripAndCollapse(value) {\n    var tokens = value.match(rnothtmlwhite) || [];\n    return tokens.join(\" \");\n  }\n\n  function getClass(elem) {\n    return elem.getAttribute && elem.getAttribute(\"class\") || \"\";\n  }\n\n  function classesToArray(value) {\n    if (Array.isArray(value)) {\n      return value;\n    }\n\n    if (typeof value === \"string\") {\n      return value.match(rnothtmlwhite) || [];\n    }\n\n    return [];\n  }\n\n  jQuery.fn.extend({\n    addClass: function addClass(value) {\n      var classes,\n          elem,\n          cur,\n          curValue,\n          clazz,\n          j,\n          finalValue,\n          i = 0;\n\n      if (isFunction(value)) {\n        return this.each(function (j) {\n          jQuery(this).addClass(value.call(this, j, getClass(this)));\n        });\n      }\n\n      classes = classesToArray(value);\n\n      if (classes.length) {\n        while (elem = this[i++]) {\n          curValue = getClass(elem);\n          cur = elem.nodeType === 1 && \" \" + stripAndCollapse(curValue) + \" \";\n\n          if (cur) {\n            j = 0;\n\n            while (clazz = classes[j++]) {\n              if (cur.indexOf(\" \" + clazz + \" \") < 0) {\n                cur += clazz + \" \";\n              }\n            } // Only assign if different to avoid unneeded rendering.\n\n\n            finalValue = stripAndCollapse(cur);\n\n            if (curValue !== finalValue) {\n              elem.setAttribute(\"class\", finalValue);\n            }\n          }\n        }\n      }\n\n      return this;\n    },\n    removeClass: function removeClass(value) {\n      var classes,\n          elem,\n          cur,\n          curValue,\n          clazz,\n          j,\n          finalValue,\n          i = 0;\n\n      if (isFunction(value)) {\n        return this.each(function (j) {\n          jQuery(this).removeClass(value.call(this, j, getClass(this)));\n        });\n      }\n\n      if (!arguments.length) {\n        return this.attr(\"class\", \"\");\n      }\n\n      classes = classesToArray(value);\n\n      if (classes.length) {\n        while (elem = this[i++]) {\n          curValue = getClass(elem); // This expression is here for better compressibility (see addClass)\n\n          cur = elem.nodeType === 1 && \" \" + stripAndCollapse(curValue) + \" \";\n\n          if (cur) {\n            j = 0;\n\n            while (clazz = classes[j++]) {\n              // Remove *all* instances\n              while (cur.indexOf(\" \" + clazz + \" \") > -1) {\n                cur = cur.replace(\" \" + clazz + \" \", \" \");\n              }\n            } // Only assign if different to avoid unneeded rendering.\n\n\n            finalValue = stripAndCollapse(cur);\n\n            if (curValue !== finalValue) {\n              elem.setAttribute(\"class\", finalValue);\n            }\n          }\n        }\n      }\n\n      return this;\n    },\n    toggleClass: function toggleClass(value, stateVal) {\n      var type = _typeof(value),\n          isValidValue = type === \"string\" || Array.isArray(value);\n\n      if (typeof stateVal === \"boolean\" && isValidValue) {\n        return stateVal ? this.addClass(value) : this.removeClass(value);\n      }\n\n      if (isFunction(value)) {\n        return this.each(function (i) {\n          jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);\n        });\n      }\n\n      return this.each(function () {\n        var className, i, self, classNames;\n\n        if (isValidValue) {\n          // Toggle individual class names\n          i = 0;\n          self = jQuery(this);\n          classNames = classesToArray(value);\n\n          while (className = classNames[i++]) {\n            // Check each className given, space separated list\n            if (self.hasClass(className)) {\n              self.removeClass(className);\n            } else {\n              self.addClass(className);\n            }\n          } // Toggle whole class name\n\n        } else if (value === undefined || type === \"boolean\") {\n          className = getClass(this);\n\n          if (className) {\n            // Store className if set\n            dataPriv.set(this, \"__className__\", className);\n          } // If the element has a class name or if we're passed `false`,\n          // then remove the whole classname (if there was one, the above saved it).\n          // Otherwise bring back whatever was previously saved (if anything),\n          // falling back to the empty string if nothing was stored.\n\n\n          if (this.setAttribute) {\n            this.setAttribute(\"class\", className || value === false ? \"\" : dataPriv.get(this, \"__className__\") || \"\");\n          }\n        }\n      });\n    },\n    hasClass: function hasClass(selector) {\n      var className,\n          elem,\n          i = 0;\n      className = \" \" + selector + \" \";\n\n      while (elem = this[i++]) {\n        if (elem.nodeType === 1 && (\" \" + stripAndCollapse(getClass(elem)) + \" \").indexOf(className) > -1) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  });\n  var rreturn = /\\r/g;\n  jQuery.fn.extend({\n    val: function val(value) {\n      var hooks,\n          ret,\n          valueIsFunction,\n          elem = this[0];\n\n      if (!arguments.length) {\n        if (elem) {\n          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];\n\n          if (hooks && \"get\" in hooks && (ret = hooks.get(elem, \"value\")) !== undefined) {\n            return ret;\n          }\n\n          ret = elem.value; // Handle most common string cases\n\n          if (typeof ret === \"string\") {\n            return ret.replace(rreturn, \"\");\n          } // Handle cases where value is null/undef or number\n\n\n          return ret == null ? \"\" : ret;\n        }\n\n        return;\n      }\n\n      valueIsFunction = isFunction(value);\n      return this.each(function (i) {\n        var val;\n\n        if (this.nodeType !== 1) {\n          return;\n        }\n\n        if (valueIsFunction) {\n          val = value.call(this, i, jQuery(this).val());\n        } else {\n          val = value;\n        } // Treat null/undefined as \"\"; convert numbers to string\n\n\n        if (val == null) {\n          val = \"\";\n        } else if (typeof val === \"number\") {\n          val += \"\";\n        } else if (Array.isArray(val)) {\n          val = jQuery.map(val, function (value) {\n            return value == null ? \"\" : value + \"\";\n          });\n        }\n\n        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting\n\n        if (!hooks || !(\"set\" in hooks) || hooks.set(this, val, \"value\") === undefined) {\n          this.value = val;\n        }\n      });\n    }\n  });\n  jQuery.extend({\n    valHooks: {\n      option: {\n        get: function get(elem) {\n          var val = jQuery.find.attr(elem, \"value\");\n          return val != null ? val : // Support: IE <=10 - 11 only\n          // option.text throws exceptions (#14686, #14858)\n          // Strip and collapse whitespace\n          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n          stripAndCollapse(jQuery.text(elem));\n        }\n      },\n      select: {\n        get: function get(elem) {\n          var value,\n              option,\n              i,\n              options = elem.options,\n              index = elem.selectedIndex,\n              one = elem.type === \"select-one\",\n              values = one ? null : [],\n              max = one ? index + 1 : options.length;\n\n          if (index < 0) {\n            i = max;\n          } else {\n            i = one ? index : 0;\n          } // Loop through all the selected options\n\n\n          for (; i < max; i++) {\n            option = options[i]; // Support: IE <=9 only\n            // IE8-9 doesn't update selected after form reset (#2551)\n\n            if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup\n            !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, \"optgroup\"))) {\n              // Get the specific value for the option\n              value = jQuery(option).val(); // We don't need an array for one selects\n\n              if (one) {\n                return value;\n              } // Multi-Selects return an array\n\n\n              values.push(value);\n            }\n          }\n\n          return values;\n        },\n        set: function set(elem, value) {\n          var optionSet,\n              option,\n              options = elem.options,\n              values = jQuery.makeArray(value),\n              i = options.length;\n\n          while (i--) {\n            option = options[i];\n            /* eslint-disable no-cond-assign */\n\n            if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {\n              optionSet = true;\n            }\n            /* eslint-enable no-cond-assign */\n\n          } // Force browsers to behave consistently when non-matching value is set\n\n\n          if (!optionSet) {\n            elem.selectedIndex = -1;\n          }\n\n          return values;\n        }\n      }\n    }\n  }); // Radios and checkboxes getter/setter\n\n  jQuery.each([\"radio\", \"checkbox\"], function () {\n    jQuery.valHooks[this] = {\n      set: function set(elem, value) {\n        if (Array.isArray(value)) {\n          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;\n        }\n      }\n    };\n\n    if (!support.checkOn) {\n      jQuery.valHooks[this].get = function (elem) {\n        return elem.getAttribute(\"value\") === null ? \"on\" : elem.value;\n      };\n    }\n  }); // Return jQuery for attributes-only inclusion\n\n  support.focusin = \"onfocusin\" in window;\n\n  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n      stopPropagationCallback = function stopPropagationCallback(e) {\n    e.stopPropagation();\n  };\n\n  jQuery.extend(jQuery.event, {\n    trigger: function trigger(event, data, elem, onlyHandlers) {\n      var i,\n          cur,\n          tmp,\n          bubbleType,\n          ontype,\n          handle,\n          special,\n          lastElement,\n          eventPath = [elem || document],\n          type = hasOwn.call(event, \"type\") ? event.type : event,\n          namespaces = hasOwn.call(event, \"namespace\") ? event.namespace.split(\".\") : [];\n      cur = lastElement = tmp = elem = elem || document; // Don't do events on text and comment nodes\n\n      if (elem.nodeType === 3 || elem.nodeType === 8) {\n        return;\n      } // focus/blur morphs to focusin/out; ensure we're not firing them right now\n\n\n      if (rfocusMorph.test(type + jQuery.event.triggered)) {\n        return;\n      }\n\n      if (type.indexOf(\".\") > -1) {\n        // Namespaced trigger; create a regexp to match event type in handle()\n        namespaces = type.split(\".\");\n        type = namespaces.shift();\n        namespaces.sort();\n      }\n\n      ontype = type.indexOf(\":\") < 0 && \"on\" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string\n\n      event = event[jQuery.expando] ? event : new jQuery.Event(type, _typeof(event) === \"object\" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\n      event.isTrigger = onlyHandlers ? 2 : 3;\n      event.namespace = namespaces.join(\".\");\n      event.rnamespace = event.namespace ? new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null; // Clean up the event in case it is being reused\n\n      event.result = undefined;\n\n      if (!event.target) {\n        event.target = elem;\n      } // Clone any incoming data and prepend the event, creating the handler arg list\n\n\n      data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines\n\n      special = jQuery.event.special[type] || {};\n\n      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\n        return;\n      } // Determine event propagation path in advance, per W3C events spec (#9951)\n      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\n\n      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {\n        bubbleType = special.delegateType || type;\n\n        if (!rfocusMorph.test(bubbleType + type)) {\n          cur = cur.parentNode;\n        }\n\n        for (; cur; cur = cur.parentNode) {\n          eventPath.push(cur);\n          tmp = cur;\n        } // Only add window if we got to document (e.g., not plain obj or detached DOM)\n\n\n        if (tmp === (elem.ownerDocument || document)) {\n          eventPath.push(tmp.defaultView || tmp.parentWindow || window);\n        }\n      } // Fire handlers on the event path\n\n\n      i = 0;\n\n      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\n        lastElement = cur;\n        event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler\n\n        handle = (dataPriv.get(cur, \"events\") || Object.create(null))[event.type] && dataPriv.get(cur, \"handle\");\n\n        if (handle) {\n          handle.apply(cur, data);\n        } // Native handler\n\n\n        handle = ontype && cur[ontype];\n\n        if (handle && handle.apply && acceptData(cur)) {\n          event.result = handle.apply(cur, data);\n\n          if (event.result === false) {\n            event.preventDefault();\n          }\n        }\n      }\n\n      event.type = type; // If nobody prevented the default action, do it now\n\n      if (!onlyHandlers && !event.isDefaultPrevented()) {\n        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {\n          // Call a native DOM method on the target with the same name as the event.\n          // Don't do default actions on window, that's where global variables be (#6170)\n          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {\n            // Don't re-trigger an onFOO event when we call its FOO() method\n            tmp = elem[ontype];\n\n            if (tmp) {\n              elem[ontype] = null;\n            } // Prevent re-triggering of the same event, since we already bubbled it above\n\n\n            jQuery.event.triggered = type;\n\n            if (event.isPropagationStopped()) {\n              lastElement.addEventListener(type, stopPropagationCallback);\n            }\n\n            elem[type]();\n\n            if (event.isPropagationStopped()) {\n              lastElement.removeEventListener(type, stopPropagationCallback);\n            }\n\n            jQuery.event.triggered = undefined;\n\n            if (tmp) {\n              elem[ontype] = tmp;\n            }\n          }\n        }\n      }\n\n      return event.result;\n    },\n    // Piggyback on a donor event to simulate a different one\n    // Used only for `focus(in | out)` events\n    simulate: function simulate(type, elem, event) {\n      var e = jQuery.extend(new jQuery.Event(), event, {\n        type: type,\n        isSimulated: true\n      });\n      jQuery.event.trigger(e, null, elem);\n    }\n  });\n  jQuery.fn.extend({\n    trigger: function trigger(type, data) {\n      return this.each(function () {\n        jQuery.event.trigger(type, data, this);\n      });\n    },\n    triggerHandler: function triggerHandler(type, data) {\n      var elem = this[0];\n\n      if (elem) {\n        return jQuery.event.trigger(type, data, elem, true);\n      }\n    }\n  }); // Support: Firefox <=44\n  // Firefox doesn't have focus(in | out) events\n  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n  //\n  // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n  // focus(in | out) events fire after focus & blur events,\n  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n  // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\n\n  if (!support.focusin) {\n    jQuery.each({\n      focus: \"focusin\",\n      blur: \"focusout\"\n    }, function (orig, fix) {\n      // Attach a single capturing handler on the document while someone wants focusin/focusout\n      var handler = function handler(event) {\n        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));\n      };\n\n      jQuery.event.special[fix] = {\n        setup: function setup() {\n          // Handle: regular nodes (via `this.ownerDocument`), window\n          // (via `this.document`) & document (via `this`).\n          var doc = this.ownerDocument || this.document || this,\n              attaches = dataPriv.access(doc, fix);\n\n          if (!attaches) {\n            doc.addEventListener(orig, handler, true);\n          }\n\n          dataPriv.access(doc, fix, (attaches || 0) + 1);\n        },\n        teardown: function teardown() {\n          var doc = this.ownerDocument || this.document || this,\n              attaches = dataPriv.access(doc, fix) - 1;\n\n          if (!attaches) {\n            doc.removeEventListener(orig, handler, true);\n            dataPriv.remove(doc, fix);\n          } else {\n            dataPriv.access(doc, fix, attaches);\n          }\n        }\n      };\n    });\n  }\n\n  var location = window.location;\n  var nonce = {\n    guid: Date.now()\n  };\n  var rquery = /\\?/; // Cross-browser xml parsing\n\n  jQuery.parseXML = function (data) {\n    var xml, parserErrorElem;\n\n    if (!data || typeof data !== \"string\") {\n      return null;\n    } // Support: IE 9 - 11 only\n    // IE throws on parseFromString with invalid input.\n\n\n    try {\n      xml = new window.DOMParser().parseFromString(data, \"text/xml\");\n    } catch (e) {}\n\n    parserErrorElem = xml && xml.getElementsByTagName(\"parsererror\")[0];\n\n    if (!xml || parserErrorElem) {\n      jQuery.error(\"Invalid XML: \" + (parserErrorElem ? jQuery.map(parserErrorElem.childNodes, function (el) {\n        return el.textContent;\n      }).join(\"\\n\") : data));\n    }\n\n    return xml;\n  };\n\n  var rbracket = /\\[\\]$/,\n      rCRLF = /\\r?\\n/g,\n      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n      rsubmittable = /^(?:input|select|textarea|keygen)/i;\n\n  function buildParams(prefix, obj, traditional, add) {\n    var name;\n\n    if (Array.isArray(obj)) {\n      // Serialize array item.\n      jQuery.each(obj, function (i, v) {\n        if (traditional || rbracket.test(prefix)) {\n          // Treat each array item as a scalar.\n          add(prefix, v);\n        } else {\n          // Item is non-scalar (array or object), encode its numeric index.\n          buildParams(prefix + \"[\" + (_typeof(v) === \"object\" && v != null ? i : \"\") + \"]\", v, traditional, add);\n        }\n      });\n    } else if (!traditional && toType(obj) === \"object\") {\n      // Serialize object item.\n      for (name in obj) {\n        buildParams(prefix + \"[\" + name + \"]\", obj[name], traditional, add);\n      }\n    } else {\n      // Serialize scalar item.\n      add(prefix, obj);\n    }\n  } // Serialize an array of form elements or a set of\n  // key/values into a query string\n\n\n  jQuery.param = function (a, traditional) {\n    var prefix,\n        s = [],\n        add = function add(key, valueOrFunction) {\n      // If value is a function, invoke it and use its return value\n      var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;\n      s[s.length] = encodeURIComponent(key) + \"=\" + encodeURIComponent(value == null ? \"\" : value);\n    };\n\n    if (a == null) {\n      return \"\";\n    } // If an array was passed in, assume that it is an array of form elements.\n\n\n    if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {\n      // Serialize the form elements\n      jQuery.each(a, function () {\n        add(this.name, this.value);\n      });\n    } else {\n      // If traditional, encode the \"old\" way (the way 1.3.2 or older\n      // did it), otherwise encode params recursively.\n      for (prefix in a) {\n        buildParams(prefix, a[prefix], traditional, add);\n      }\n    } // Return the resulting serialization\n\n\n    return s.join(\"&\");\n  };\n\n  jQuery.fn.extend({\n    serialize: function serialize() {\n      return jQuery.param(this.serializeArray());\n    },\n    serializeArray: function serializeArray() {\n      return this.map(function () {\n        // Can add propHook for \"elements\" to filter or add form elements\n        var elements = jQuery.prop(this, \"elements\");\n        return elements ? jQuery.makeArray(elements) : this;\n      }).filter(function () {\n        var type = this.type; // Use .is( \":disabled\" ) so that fieldset[disabled] works\n\n        return this.name && !jQuery(this).is(\":disabled\") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));\n      }).map(function (_i, elem) {\n        var val = jQuery(this).val();\n\n        if (val == null) {\n          return null;\n        }\n\n        if (Array.isArray(val)) {\n          return jQuery.map(val, function (val) {\n            return {\n              name: elem.name,\n              value: val.replace(rCRLF, \"\\r\\n\")\n            };\n          });\n        }\n\n        return {\n          name: elem.name,\n          value: val.replace(rCRLF, \"\\r\\n\")\n        };\n      }).get();\n    }\n  });\n  var r20 = /%20/g,\n      rhash = /#.*$/,\n      rantiCache = /([?&])_=[^&]*/,\n      rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n      // #7653, #8125, #8152: local protocol detection\n  rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n      rnoContent = /^(?:GET|HEAD)$/,\n      rprotocol = /^\\/\\//,\n\n  /* Prefilters\n   * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n   * 2) These are called:\n   *    - BEFORE asking for a transport\n   *    - AFTER param serialization (s.data is a string if s.processData is true)\n   * 3) key is the dataType\n   * 4) the catchall symbol \"*\" can be used\n   * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n   */\n  prefilters = {},\n\n  /* Transports bindings\n   * 1) key is the dataType\n   * 2) the catchall symbol \"*\" can be used\n   * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n   */\n  transports = {},\n      // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n  allTypes = \"*/\".concat(\"*\"),\n      // Anchor tag for parsing the document origin\n  originAnchor = document.createElement(\"a\");\n  originAnchor.href = location.href; // Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\n\n  function addToPrefiltersOrTransports(structure) {\n    // dataTypeExpression is optional and defaults to \"*\"\n    return function (dataTypeExpression, func) {\n      if (typeof dataTypeExpression !== \"string\") {\n        func = dataTypeExpression;\n        dataTypeExpression = \"*\";\n      }\n\n      var dataType,\n          i = 0,\n          dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];\n\n      if (isFunction(func)) {\n        // For each dataType in the dataTypeExpression\n        while (dataType = dataTypes[i++]) {\n          // Prepend if requested\n          if (dataType[0] === \"+\") {\n            dataType = dataType.slice(1) || \"*\";\n            (structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append\n          } else {\n            (structure[dataType] = structure[dataType] || []).push(func);\n          }\n        }\n      }\n    };\n  } // Base inspection function for prefilters and transports\n\n\n  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\n    var inspected = {},\n        seekingTransport = structure === transports;\n\n    function inspect(dataType) {\n      var selected;\n      inspected[dataType] = true;\n      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\n        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n\n        if (typeof dataTypeOrTransport === \"string\" && !seekingTransport && !inspected[dataTypeOrTransport]) {\n          options.dataTypes.unshift(dataTypeOrTransport);\n          inspect(dataTypeOrTransport);\n          return false;\n        } else if (seekingTransport) {\n          return !(selected = dataTypeOrTransport);\n        }\n      });\n      return selected;\n    }\n\n    return inspect(options.dataTypes[0]) || !inspected[\"*\"] && inspect(\"*\");\n  } // A special extend for ajax options\n  // that takes \"flat\" options (not to be deep extended)\n  // Fixes #9887\n\n\n  function ajaxExtend(target, src) {\n    var key,\n        deep,\n        flatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n    for (key in src) {\n      if (src[key] !== undefined) {\n        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\n      }\n    }\n\n    if (deep) {\n      jQuery.extend(true, target, deep);\n    }\n\n    return target;\n  }\n  /* Handles responses to an ajax request:\n   * - finds the right dataType (mediates between content-type and expected dataType)\n   * - returns the corresponding response\n   */\n\n\n  function ajaxHandleResponses(s, jqXHR, responses) {\n    var ct,\n        type,\n        finalDataType,\n        firstDataType,\n        contents = s.contents,\n        dataTypes = s.dataTypes; // Remove auto dataType and get content-type in the process\n\n    while (dataTypes[0] === \"*\") {\n      dataTypes.shift();\n\n      if (ct === undefined) {\n        ct = s.mimeType || jqXHR.getResponseHeader(\"Content-Type\");\n      }\n    } // Check if we're dealing with a known content-type\n\n\n    if (ct) {\n      for (type in contents) {\n        if (contents[type] && contents[type].test(ct)) {\n          dataTypes.unshift(type);\n          break;\n        }\n      }\n    } // Check to see if we have a response for the expected dataType\n\n\n    if (dataTypes[0] in responses) {\n      finalDataType = dataTypes[0];\n    } else {\n      // Try convertible dataTypes\n      for (type in responses) {\n        if (!dataTypes[0] || s.converters[type + \" \" + dataTypes[0]]) {\n          finalDataType = type;\n          break;\n        }\n\n        if (!firstDataType) {\n          firstDataType = type;\n        }\n      } // Or just use first one\n\n\n      finalDataType = finalDataType || firstDataType;\n    } // If we found a dataType\n    // We add the dataType to the list if needed\n    // and return the corresponding response\n\n\n    if (finalDataType) {\n      if (finalDataType !== dataTypes[0]) {\n        dataTypes.unshift(finalDataType);\n      }\n\n      return responses[finalDataType];\n    }\n  }\n  /* Chain conversions given the request and the original response\n   * Also sets the responseXXX fields on the jqXHR instance\n   */\n\n\n  function ajaxConvert(s, response, jqXHR, isSuccess) {\n    var conv2,\n        current,\n        conv,\n        tmp,\n        prev,\n        converters = {},\n        // Work with a copy of dataTypes in case we need to modify it for conversion\n    dataTypes = s.dataTypes.slice(); // Create converters map with lowercased keys\n\n    if (dataTypes[1]) {\n      for (conv in s.converters) {\n        converters[conv.toLowerCase()] = s.converters[conv];\n      }\n    }\n\n    current = dataTypes.shift(); // Convert to each sequential dataType\n\n    while (current) {\n      if (s.responseFields[current]) {\n        jqXHR[s.responseFields[current]] = response;\n      } // Apply the dataFilter if provided\n\n\n      if (!prev && isSuccess && s.dataFilter) {\n        response = s.dataFilter(response, s.dataType);\n      }\n\n      prev = current;\n      current = dataTypes.shift();\n\n      if (current) {\n        // There's only work to do if current dataType is non-auto\n        if (current === \"*\") {\n          current = prev; // Convert response if prev dataType is non-auto and differs from current\n        } else if (prev !== \"*\" && prev !== current) {\n          // Seek a direct converter\n          conv = converters[prev + \" \" + current] || converters[\"* \" + current]; // If none found, seek a pair\n\n          if (!conv) {\n            for (conv2 in converters) {\n              // If conv2 outputs current\n              tmp = conv2.split(\" \");\n\n              if (tmp[1] === current) {\n                // If prev can be converted to accepted input\n                conv = converters[prev + \" \" + tmp[0]] || converters[\"* \" + tmp[0]];\n\n                if (conv) {\n                  // Condense equivalence converters\n                  if (conv === true) {\n                    conv = converters[conv2]; // Otherwise, insert the intermediate dataType\n                  } else if (converters[conv2] !== true) {\n                    current = tmp[0];\n                    dataTypes.unshift(tmp[1]);\n                  }\n\n                  break;\n                }\n              }\n            }\n          } // Apply converter (if not an equivalence)\n\n\n          if (conv !== true) {\n            // Unless errors are allowed to bubble, catch and return them\n            if (conv && s[\"throws\"]) {\n              response = conv(response);\n            } else {\n              try {\n                response = conv(response);\n              } catch (e) {\n                return {\n                  state: \"parsererror\",\n                  error: conv ? e : \"No conversion from \" + prev + \" to \" + current\n                };\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      state: \"success\",\n      data: response\n    };\n  }\n\n  jQuery.extend({\n    // Counter for holding the number of active queries\n    active: 0,\n    // Last-Modified header cache for next request\n    lastModified: {},\n    etag: {},\n    ajaxSettings: {\n      url: location.href,\n      type: \"GET\",\n      isLocal: rlocalProtocol.test(location.protocol),\n      global: true,\n      processData: true,\n      async: true,\n      contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n      /*\n      timeout: 0,\n      data: null,\n      dataType: null,\n      username: null,\n      password: null,\n      cache: null,\n      throws: false,\n      traditional: false,\n      headers: {},\n      */\n      accepts: {\n        \"*\": allTypes,\n        text: \"text/plain\",\n        html: \"text/html\",\n        xml: \"application/xml, text/xml\",\n        json: \"application/json, text/javascript\"\n      },\n      contents: {\n        xml: /\\bxml\\b/,\n        html: /\\bhtml/,\n        json: /\\bjson\\b/\n      },\n      responseFields: {\n        xml: \"responseXML\",\n        text: \"responseText\",\n        json: \"responseJSON\"\n      },\n      // Data converters\n      // Keys separate source (or catchall \"*\") and destination types with a single space\n      converters: {\n        // Convert anything to text\n        \"* text\": String,\n        // Text to html (true = no transformation)\n        \"text html\": true,\n        // Evaluate text as a json expression\n        \"text json\": JSON.parse,\n        // Parse text as xml\n        \"text xml\": jQuery.parseXML\n      },\n      // For options that shouldn't be deep extended:\n      // you can add your own custom options here if\n      // and when you create one that shouldn't be\n      // deep extended (see ajaxExtend)\n      flatOptions: {\n        url: true,\n        context: true\n      }\n    },\n    // Creates a full fledged settings object into target\n    // with both ajaxSettings and settings fields.\n    // If target is omitted, writes into ajaxSettings.\n    ajaxSetup: function ajaxSetup(target, settings) {\n      return settings ? // Building a settings object\n      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings\n      ajaxExtend(jQuery.ajaxSettings, target);\n    },\n    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),\n    ajaxTransport: addToPrefiltersOrTransports(transports),\n    // Main method\n    ajax: function ajax(url, options) {\n      // If url is an object, simulate pre-1.5 signature\n      if (_typeof(url) === \"object\") {\n        options = url;\n        url = undefined;\n      } // Force options to be an object\n\n\n      options = options || {};\n\n      var transport,\n          // URL without anti-cache param\n      cacheURL,\n          // Response headers\n      responseHeadersString,\n          responseHeaders,\n          // timeout handle\n      timeoutTimer,\n          // Url cleanup var\n      urlAnchor,\n          // Request state (becomes false upon send and true upon completion)\n      completed,\n          // To know if global events are to be dispatched\n      fireGlobals,\n          // Loop variable\n      i,\n          // uncached part of the url\n      uncached,\n          // Create the final options object\n      s = jQuery.ajaxSetup({}, options),\n          // Callbacks context\n      callbackContext = s.context || s,\n          // Context for global events is callbackContext if it is a DOM node or jQuery collection\n      globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,\n          // Deferreds\n      deferred = jQuery.Deferred(),\n          completeDeferred = jQuery.Callbacks(\"once memory\"),\n          // Status-dependent callbacks\n      _statusCode = s.statusCode || {},\n          // Headers (they are sent all at once)\n      requestHeaders = {},\n          requestHeadersNames = {},\n          // Default abort message\n      strAbort = \"canceled\",\n          // Fake xhr\n      jqXHR = {\n        readyState: 0,\n        // Builds headers hashtable if needed\n        getResponseHeader: function getResponseHeader(key) {\n          var match;\n\n          if (completed) {\n            if (!responseHeaders) {\n              responseHeaders = {};\n\n              while (match = rheaders.exec(responseHeadersString)) {\n                responseHeaders[match[1].toLowerCase() + \" \"] = (responseHeaders[match[1].toLowerCase() + \" \"] || []).concat(match[2]);\n              }\n            }\n\n            match = responseHeaders[key.toLowerCase() + \" \"];\n          }\n\n          return match == null ? null : match.join(\", \");\n        },\n        // Raw string\n        getAllResponseHeaders: function getAllResponseHeaders() {\n          return completed ? responseHeadersString : null;\n        },\n        // Caches the header\n        setRequestHeader: function setRequestHeader(name, value) {\n          if (completed == null) {\n            name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;\n            requestHeaders[name] = value;\n          }\n\n          return this;\n        },\n        // Overrides response content-type header\n        overrideMimeType: function overrideMimeType(type) {\n          if (completed == null) {\n            s.mimeType = type;\n          }\n\n          return this;\n        },\n        // Status-dependent callbacks\n        statusCode: function statusCode(map) {\n          var code;\n\n          if (map) {\n            if (completed) {\n              // Execute the appropriate callbacks\n              jqXHR.always(map[jqXHR.status]);\n            } else {\n              // Lazy-add the new callbacks in a way that preserves old ones\n              for (code in map) {\n                _statusCode[code] = [_statusCode[code], map[code]];\n              }\n            }\n          }\n\n          return this;\n        },\n        // Cancel the request\n        abort: function abort(statusText) {\n          var finalText = statusText || strAbort;\n\n          if (transport) {\n            transport.abort(finalText);\n          }\n\n          done(0, finalText);\n          return this;\n        }\n      }; // Attach deferreds\n\n\n      deferred.promise(jqXHR); // Add protocol if not provided (prefilters might expect it)\n      // Handle falsy url in the settings object (#10093: consistency with old signature)\n      // We also use the url parameter if available\n\n      s.url = ((url || s.url || location.href) + \"\").replace(rprotocol, location.protocol + \"//\"); // Alias method option to type as per ticket #12004\n\n      s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list\n\n      s.dataTypes = (s.dataType || \"*\").toLowerCase().match(rnothtmlwhite) || [\"\"]; // A cross-domain request is in order when the origin doesn't match the current origin.\n\n      if (s.crossDomain == null) {\n        urlAnchor = document.createElement(\"a\"); // Support: IE <=8 - 11, Edge 12 - 15\n        // IE throws exception on accessing the href property if url is malformed,\n        // e.g. http://example.com:80x/\n\n        try {\n          urlAnchor.href = s.url; // Support: IE <=8 - 11 only\n          // Anchor's host property isn't correctly set when s.url is relative\n\n          urlAnchor.href = urlAnchor.href;\n          s.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !== urlAnchor.protocol + \"//\" + urlAnchor.host;\n        } catch (e) {\n          // If there is an error parsing the URL, assume it is crossDomain,\n          // it can be rejected by the transport if it is invalid\n          s.crossDomain = true;\n        }\n      } // Convert data if not already a string\n\n\n      if (s.data && s.processData && typeof s.data !== \"string\") {\n        s.data = jQuery.param(s.data, s.traditional);\n      } // Apply prefilters\n\n\n      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // If request was aborted inside a prefilter, stop there\n\n      if (completed) {\n        return jqXHR;\n      } // We can fire global events as of now if asked to\n      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\n\n      fireGlobals = jQuery.event && s.global; // Watch for a new set of requests\n\n      if (fireGlobals && jQuery.active++ === 0) {\n        jQuery.event.trigger(\"ajaxStart\");\n      } // Uppercase the type\n\n\n      s.type = s.type.toUpperCase(); // Determine if request has content\n\n      s.hasContent = !rnoContent.test(s.type); // Save the URL in case we're toying with the If-Modified-Since\n      // and/or If-None-Match header later on\n      // Remove hash to simplify url manipulation\n\n      cacheURL = s.url.replace(rhash, \"\"); // More options handling for requests with no content\n\n      if (!s.hasContent) {\n        // Remember the hash so we can put it back\n        uncached = s.url.slice(cacheURL.length); // If data is available and should be processed, append data to url\n\n        if (s.data && (s.processData || typeof s.data === \"string\")) {\n          cacheURL += (rquery.test(cacheURL) ? \"&\" : \"?\") + s.data; // #9682: remove data so that it's not used in an eventual retry\n\n          delete s.data;\n        } // Add or update anti-cache param if needed\n\n\n        if (s.cache === false) {\n          cacheURL = cacheURL.replace(rantiCache, \"$1\");\n          uncached = (rquery.test(cacheURL) ? \"&\" : \"?\") + \"_=\" + nonce.guid++ + uncached;\n        } // Put hash and anti-cache on the URL that will be requested (gh-1732)\n\n\n        s.url = cacheURL + uncached; // Change '%20' to '+' if this is encoded form body content (gh-2658)\n      } else if (s.data && s.processData && (s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") === 0) {\n        s.data = s.data.replace(r20, \"+\");\n      } // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\n\n      if (s.ifModified) {\n        if (jQuery.lastModified[cacheURL]) {\n          jqXHR.setRequestHeader(\"If-Modified-Since\", jQuery.lastModified[cacheURL]);\n        }\n\n        if (jQuery.etag[cacheURL]) {\n          jqXHR.setRequestHeader(\"If-None-Match\", jQuery.etag[cacheURL]);\n        }\n      } // Set the correct header, if data is being sent\n\n\n      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {\n        jqXHR.setRequestHeader(\"Content-Type\", s.contentType);\n      } // Set the Accepts header for the server, depending on the dataType\n\n\n      jqXHR.setRequestHeader(\"Accept\", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\") : s.accepts[\"*\"]); // Check for headers option\n\n      for (i in s.headers) {\n        jqXHR.setRequestHeader(i, s.headers[i]);\n      } // Allow custom headers/mimetypes and early abort\n\n\n      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {\n        // Abort if not done already and return\n        return jqXHR.abort();\n      } // Aborting is no longer a cancellation\n\n\n      strAbort = \"abort\"; // Install callbacks on deferreds\n\n      completeDeferred.add(s.complete);\n      jqXHR.done(s.success);\n      jqXHR.fail(s.error); // Get transport\n\n      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // If no transport, we auto-abort\n\n      if (!transport) {\n        done(-1, \"No Transport\");\n      } else {\n        jqXHR.readyState = 1; // Send global event\n\n        if (fireGlobals) {\n          globalEventContext.trigger(\"ajaxSend\", [jqXHR, s]);\n        } // If request was aborted inside ajaxSend, stop there\n\n\n        if (completed) {\n          return jqXHR;\n        } // Timeout\n\n\n        if (s.async && s.timeout > 0) {\n          timeoutTimer = window.setTimeout(function () {\n            jqXHR.abort(\"timeout\");\n          }, s.timeout);\n        }\n\n        try {\n          completed = false;\n          transport.send(requestHeaders, done);\n        } catch (e) {\n          // Rethrow post-completion exceptions\n          if (completed) {\n            throw e;\n          } // Propagate others as results\n\n\n          done(-1, e);\n        }\n      } // Callback for when everything is done\n\n\n      function done(status, nativeStatusText, responses, headers) {\n        var isSuccess,\n            success,\n            error,\n            response,\n            modified,\n            statusText = nativeStatusText; // Ignore repeat invocations\n\n        if (completed) {\n          return;\n        }\n\n        completed = true; // Clear timeout if it exists\n\n        if (timeoutTimer) {\n          window.clearTimeout(timeoutTimer);\n        } // Dereference transport for early garbage collection\n        // (no matter how long the jqXHR object will be used)\n\n\n        transport = undefined; // Cache response headers\n\n        responseHeadersString = headers || \"\"; // Set readyState\n\n        jqXHR.readyState = status > 0 ? 4 : 0; // Determine if successful\n\n        isSuccess = status >= 200 && status < 300 || status === 304; // Get response data\n\n        if (responses) {\n          response = ajaxHandleResponses(s, jqXHR, responses);\n        } // Use a noop converter for missing script but not if jsonp\n\n\n        if (!isSuccess && jQuery.inArray(\"script\", s.dataTypes) > -1 && jQuery.inArray(\"json\", s.dataTypes) < 0) {\n          s.converters[\"text script\"] = function () {};\n        } // Convert no matter what (that way responseXXX fields are always set)\n\n\n        response = ajaxConvert(s, response, jqXHR, isSuccess); // If successful, handle type chaining\n\n        if (isSuccess) {\n          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n          if (s.ifModified) {\n            modified = jqXHR.getResponseHeader(\"Last-Modified\");\n\n            if (modified) {\n              jQuery.lastModified[cacheURL] = modified;\n            }\n\n            modified = jqXHR.getResponseHeader(\"etag\");\n\n            if (modified) {\n              jQuery.etag[cacheURL] = modified;\n            }\n          } // if no content\n\n\n          if (status === 204 || s.type === \"HEAD\") {\n            statusText = \"nocontent\"; // if not modified\n          } else if (status === 304) {\n            statusText = \"notmodified\"; // If we have data, let's convert it\n          } else {\n            statusText = response.state;\n            success = response.data;\n            error = response.error;\n            isSuccess = !error;\n          }\n        } else {\n          // Extract error from statusText and normalize for non-aborts\n          error = statusText;\n\n          if (status || !statusText) {\n            statusText = \"error\";\n\n            if (status < 0) {\n              status = 0;\n            }\n          }\n        } // Set data for the fake xhr object\n\n\n        jqXHR.status = status;\n        jqXHR.statusText = (nativeStatusText || statusText) + \"\"; // Success/Error\n\n        if (isSuccess) {\n          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\n        } else {\n          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\n        } // Status-dependent callbacks\n\n\n        jqXHR.statusCode(_statusCode);\n        _statusCode = undefined;\n\n        if (fireGlobals) {\n          globalEventContext.trigger(isSuccess ? \"ajaxSuccess\" : \"ajaxError\", [jqXHR, s, isSuccess ? success : error]);\n        } // Complete\n\n\n        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);\n\n        if (fireGlobals) {\n          globalEventContext.trigger(\"ajaxComplete\", [jqXHR, s]); // Handle the global AJAX counter\n\n          if (! --jQuery.active) {\n            jQuery.event.trigger(\"ajaxStop\");\n          }\n        }\n      }\n\n      return jqXHR;\n    },\n    getJSON: function getJSON(url, data, callback) {\n      return jQuery.get(url, data, callback, \"json\");\n    },\n    getScript: function getScript(url, callback) {\n      return jQuery.get(url, undefined, callback, \"script\");\n    }\n  });\n  jQuery.each([\"get\", \"post\"], function (_i, method) {\n    jQuery[method] = function (url, data, callback, type) {\n      // Shift arguments if data argument was omitted\n      if (isFunction(data)) {\n        type = type || callback;\n        callback = data;\n        data = undefined;\n      } // The url can be an options object (which then must have .url)\n\n\n      return jQuery.ajax(jQuery.extend({\n        url: url,\n        type: method,\n        dataType: type,\n        data: data,\n        success: callback\n      }, jQuery.isPlainObject(url) && url));\n    };\n  });\n  jQuery.ajaxPrefilter(function (s) {\n    var i;\n\n    for (i in s.headers) {\n      if (i.toLowerCase() === \"content-type\") {\n        s.contentType = s.headers[i] || \"\";\n      }\n    }\n  });\n\n  jQuery._evalUrl = function (url, options, doc) {\n    return jQuery.ajax({\n      url: url,\n      // Make this explicit, since user can override this through ajaxSetup (#11264)\n      type: \"GET\",\n      dataType: \"script\",\n      cache: true,\n      async: false,\n      global: false,\n      // Only evaluate the response if it is successful (gh-4126)\n      // dataFilter is not invoked for failure responses, so using it instead\n      // of the default converter is kludgy but it works.\n      converters: {\n        \"text script\": function textScript() {}\n      },\n      dataFilter: function dataFilter(response) {\n        jQuery.globalEval(response, options, doc);\n      }\n    });\n  };\n\n  jQuery.fn.extend({\n    wrapAll: function wrapAll(html) {\n      var wrap;\n\n      if (this[0]) {\n        if (isFunction(html)) {\n          html = html.call(this[0]);\n        } // The elements to wrap the target around\n\n\n        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);\n\n        if (this[0].parentNode) {\n          wrap.insertBefore(this[0]);\n        }\n\n        wrap.map(function () {\n          var elem = this;\n\n          while (elem.firstElementChild) {\n            elem = elem.firstElementChild;\n          }\n\n          return elem;\n        }).append(this);\n      }\n\n      return this;\n    },\n    wrapInner: function wrapInner(html) {\n      if (isFunction(html)) {\n        return this.each(function (i) {\n          jQuery(this).wrapInner(html.call(this, i));\n        });\n      }\n\n      return this.each(function () {\n        var self = jQuery(this),\n            contents = self.contents();\n\n        if (contents.length) {\n          contents.wrapAll(html);\n        } else {\n          self.append(html);\n        }\n      });\n    },\n    wrap: function wrap(html) {\n      var htmlIsFunction = isFunction(html);\n      return this.each(function (i) {\n        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);\n      });\n    },\n    unwrap: function unwrap(selector) {\n      this.parent(selector).not(\"body\").each(function () {\n        jQuery(this).replaceWith(this.childNodes);\n      });\n      return this;\n    }\n  });\n\n  jQuery.expr.pseudos.hidden = function (elem) {\n    return !jQuery.expr.pseudos.visible(elem);\n  };\n\n  jQuery.expr.pseudos.visible = function (elem) {\n    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);\n  };\n\n  jQuery.ajaxSettings.xhr = function () {\n    try {\n      return new window.XMLHttpRequest();\n    } catch (e) {}\n  };\n\n  var xhrSuccessStatus = {\n    // File protocol always yields status code 0, assume 200\n    0: 200,\n    // Support: IE <=9 only\n    // #1450: sometimes IE returns 1223 when it should be 204\n    1223: 204\n  },\n      xhrSupported = jQuery.ajaxSettings.xhr();\n  support.cors = !!xhrSupported && \"withCredentials\" in xhrSupported;\n  support.ajax = xhrSupported = !!xhrSupported;\n  jQuery.ajaxTransport(function (options) {\n    var _callback, errorCallback; // Cross domain only allowed if supported through XMLHttpRequest\n\n\n    if (support.cors || xhrSupported && !options.crossDomain) {\n      return {\n        send: function send(headers, complete) {\n          var i,\n              xhr = options.xhr();\n          xhr.open(options.type, options.url, options.async, options.username, options.password); // Apply custom fields if provided\n\n          if (options.xhrFields) {\n            for (i in options.xhrFields) {\n              xhr[i] = options.xhrFields[i];\n            }\n          } // Override mime type if needed\n\n\n          if (options.mimeType && xhr.overrideMimeType) {\n            xhr.overrideMimeType(options.mimeType);\n          } // X-Requested-With header\n          // For cross-domain requests, seeing as conditions for a preflight are\n          // akin to a jigsaw puzzle, we simply never set it to be sure.\n          // (it can always be set on a per-request basis or even using ajaxSetup)\n          // For same-domain requests, won't change header if already provided.\n\n\n          if (!options.crossDomain && !headers[\"X-Requested-With\"]) {\n            headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n          } // Set headers\n\n\n          for (i in headers) {\n            xhr.setRequestHeader(i, headers[i]);\n          } // Callback\n\n\n          _callback = function callback(type) {\n            return function () {\n              if (_callback) {\n                _callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;\n\n                if (type === \"abort\") {\n                  xhr.abort();\n                } else if (type === \"error\") {\n                  // Support: IE <=9 only\n                  // On a manual native abort, IE9 throws\n                  // errors on any property access that is not readyState\n                  if (typeof xhr.status !== \"number\") {\n                    complete(0, \"error\");\n                  } else {\n                    complete( // File: protocol always yields status 0; see #8605, #14207\n                    xhr.status, xhr.statusText);\n                  }\n                } else {\n                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only\n                  // IE9 has no XHR2 but throws on binary (trac-11426)\n                  // For XHR2 non-text, let the caller handle it (gh-2498)\n                  (xhr.responseType || \"text\") !== \"text\" || typeof xhr.responseText !== \"string\" ? {\n                    binary: xhr.response\n                  } : {\n                    text: xhr.responseText\n                  }, xhr.getAllResponseHeaders());\n                }\n              }\n            };\n          }; // Listen to events\n\n\n          xhr.onload = _callback();\n          errorCallback = xhr.onerror = xhr.ontimeout = _callback(\"error\"); // Support: IE 9 only\n          // Use onreadystatechange to replace onabort\n          // to handle uncaught aborts\n\n          if (xhr.onabort !== undefined) {\n            xhr.onabort = errorCallback;\n          } else {\n            xhr.onreadystatechange = function () {\n              // Check readyState before timeout as it changes\n              if (xhr.readyState === 4) {\n                // Allow onerror to be called first,\n                // but that will not handle a native abort\n                // Also, save errorCallback to a variable\n                // as xhr.onerror cannot be accessed\n                window.setTimeout(function () {\n                  if (_callback) {\n                    errorCallback();\n                  }\n                });\n              }\n            };\n          } // Create the abort callback\n\n\n          _callback = _callback(\"abort\");\n\n          try {\n            // Do send the request (this may raise an exception)\n            xhr.send(options.hasContent && options.data || null);\n          } catch (e) {\n            // #14683: Only rethrow if this hasn't been notified as an error yet\n            if (_callback) {\n              throw e;\n            }\n          }\n        },\n        abort: function abort() {\n          if (_callback) {\n            _callback();\n          }\n        }\n      };\n    }\n  }); // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\n\n  jQuery.ajaxPrefilter(function (s) {\n    if (s.crossDomain) {\n      s.contents.script = false;\n    }\n  }); // Install script dataType\n\n  jQuery.ajaxSetup({\n    accepts: {\n      script: \"text/javascript, application/javascript, \" + \"application/ecmascript, application/x-ecmascript\"\n    },\n    contents: {\n      script: /\\b(?:java|ecma)script\\b/\n    },\n    converters: {\n      \"text script\": function textScript(text) {\n        jQuery.globalEval(text);\n        return text;\n      }\n    }\n  }); // Handle cache's special case and crossDomain\n\n  jQuery.ajaxPrefilter(\"script\", function (s) {\n    if (s.cache === undefined) {\n      s.cache = false;\n    }\n\n    if (s.crossDomain) {\n      s.type = \"GET\";\n    }\n  }); // Bind script tag hack transport\n\n  jQuery.ajaxTransport(\"script\", function (s) {\n    // This transport only deals with cross domain or forced-by-attrs requests\n    if (s.crossDomain || s.scriptAttrs) {\n      var script, _callback2;\n\n      return {\n        send: function send(_, complete) {\n          script = jQuery(\"<script>\").attr(s.scriptAttrs || {}).prop({\n            charset: s.scriptCharset,\n            src: s.url\n          }).on(\"load error\", _callback2 = function callback(evt) {\n            script.remove();\n            _callback2 = null;\n\n            if (evt) {\n              complete(evt.type === \"error\" ? 404 : 200, evt.type);\n            }\n          }); // Use native DOM manipulation to avoid our domManip AJAX trickery\n\n          document.head.appendChild(script[0]);\n        },\n        abort: function abort() {\n          if (_callback2) {\n            _callback2();\n          }\n        }\n      };\n    }\n  });\n  var oldCallbacks = [],\n      rjsonp = /(=)\\?(?=&|$)|\\?\\?/; // Default jsonp settings\n\n  jQuery.ajaxSetup({\n    jsonp: \"callback\",\n    jsonpCallback: function jsonpCallback() {\n      var callback = oldCallbacks.pop() || jQuery.expando + \"_\" + nonce.guid++;\n      this[callback] = true;\n      return callback;\n    }\n  }); // Detect, normalize options and install callbacks for jsonp requests\n\n  jQuery.ajaxPrefilter(\"json jsonp\", function (s, originalSettings, jqXHR) {\n    var callbackName,\n        overwritten,\n        responseContainer,\n        jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? \"url\" : typeof s.data === \"string\" && (s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") === 0 && rjsonp.test(s.data) && \"data\"); // Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\n    if (jsonProp || s.dataTypes[0] === \"jsonp\") {\n      // Get callback name, remembering preexisting value associated with it\n      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data\n\n      if (jsonProp) {\n        s[jsonProp] = s[jsonProp].replace(rjsonp, \"$1\" + callbackName);\n      } else if (s.jsonp !== false) {\n        s.url += (rquery.test(s.url) ? \"&\" : \"?\") + s.jsonp + \"=\" + callbackName;\n      } // Use data converter to retrieve json after script execution\n\n\n      s.converters[\"script json\"] = function () {\n        if (!responseContainer) {\n          jQuery.error(callbackName + \" was not called\");\n        }\n\n        return responseContainer[0];\n      }; // Force json dataType\n\n\n      s.dataTypes[0] = \"json\"; // Install callback\n\n      overwritten = window[callbackName];\n\n      window[callbackName] = function () {\n        responseContainer = arguments;\n      }; // Clean-up function (fires after converters)\n\n\n      jqXHR.always(function () {\n        // If previous value didn't exist - remove it\n        if (overwritten === undefined) {\n          jQuery(window).removeProp(callbackName); // Otherwise restore preexisting value\n        } else {\n          window[callbackName] = overwritten;\n        } // Save back as free\n\n\n        if (s[callbackName]) {\n          // Make sure that re-using the options doesn't screw things around\n          s.jsonpCallback = originalSettings.jsonpCallback; // Save the callback name for future use\n\n          oldCallbacks.push(callbackName);\n        } // Call if it was a function and we have a response\n\n\n        if (responseContainer && isFunction(overwritten)) {\n          overwritten(responseContainer[0]);\n        }\n\n        responseContainer = overwritten = undefined;\n      }); // Delegate to script\n\n      return \"script\";\n    }\n  }); // Support: Safari 8 only\n  // In Safari 8 documents created via document.implementation.createHTMLDocument\n  // collapse sibling forms: the second one becomes a child of the first one.\n  // Because of that, this security measure has to be disabled in Safari 8.\n  // https://bugs.webkit.org/show_bug.cgi?id=137337\n\n  support.createHTMLDocument = function () {\n    var body = document.implementation.createHTMLDocument(\"\").body;\n    body.innerHTML = \"<form></form><form></form>\";\n    return body.childNodes.length === 2;\n  }(); // Argument \"data\" should be string of html\n  // context (optional): If specified, the fragment will be created in this context,\n  // defaults to document\n  // keepScripts (optional): If true, will include scripts passed in the html string\n\n\n  jQuery.parseHTML = function (data, context, keepScripts) {\n    if (typeof data !== \"string\") {\n      return [];\n    }\n\n    if (typeof context === \"boolean\") {\n      keepScripts = context;\n      context = false;\n    }\n\n    var base, parsed, scripts;\n\n    if (!context) {\n      // Stop scripts or inline event handlers from being executed immediately\n      // by using document.implementation\n      if (support.createHTMLDocument) {\n        context = document.implementation.createHTMLDocument(\"\"); // Set the base href for the created document\n        // so any parsed elements with URLs\n        // are based on the document's URL (gh-2965)\n\n        base = context.createElement(\"base\");\n        base.href = document.location.href;\n        context.head.appendChild(base);\n      } else {\n        context = document;\n      }\n    }\n\n    parsed = rsingleTag.exec(data);\n    scripts = !keepScripts && []; // Single tag\n\n    if (parsed) {\n      return [context.createElement(parsed[1])];\n    }\n\n    parsed = buildFragment([data], context, scripts);\n\n    if (scripts && scripts.length) {\n      jQuery(scripts).remove();\n    }\n\n    return jQuery.merge([], parsed.childNodes);\n  };\n  /**\n   * Load a url into a page\n   */\n\n\n  jQuery.fn.load = function (url, params, callback) {\n    var selector,\n        type,\n        response,\n        self = this,\n        off = url.indexOf(\" \");\n\n    if (off > -1) {\n      selector = stripAndCollapse(url.slice(off));\n      url = url.slice(0, off);\n    } // If it's a function\n\n\n    if (isFunction(params)) {\n      // We assume that it's the callback\n      callback = params;\n      params = undefined; // Otherwise, build a param string\n    } else if (params && _typeof(params) === \"object\") {\n      type = \"POST\";\n    } // If we have elements to modify, make the request\n\n\n    if (self.length > 0) {\n      jQuery.ajax({\n        url: url,\n        // If \"type\" variable is undefined, then \"GET\" method will be used.\n        // Make value of this field explicit since\n        // user can override it through ajaxSetup method\n        type: type || \"GET\",\n        dataType: \"html\",\n        data: params\n      }).done(function (responseText) {\n        // Save response for use in complete callback\n        response = arguments;\n        self.html(selector ? // If a selector was specified, locate the right elements in a dummy div\n        // Exclude scripts to avoid IE 'Permission Denied' errors\n        jQuery(\"<div>\").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result\n        responseText); // If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n        // but they are ignored because response was set above.\n        // If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n      }).always(callback && function (jqXHR, status) {\n        self.each(function () {\n          callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);\n        });\n      });\n    }\n\n    return this;\n  };\n\n  jQuery.expr.pseudos.animated = function (elem) {\n    return jQuery.grep(jQuery.timers, function (fn) {\n      return elem === fn.elem;\n    }).length;\n  };\n\n  jQuery.offset = {\n    setOffset: function setOffset(elem, options, i) {\n      var curPosition,\n          curLeft,\n          curCSSTop,\n          curTop,\n          curOffset,\n          curCSSLeft,\n          calculatePosition,\n          position = jQuery.css(elem, \"position\"),\n          curElem = jQuery(elem),\n          props = {}; // Set position first, in-case top/left are set even on static elem\n\n      if (position === \"static\") {\n        elem.style.position = \"relative\";\n      }\n\n      curOffset = curElem.offset();\n      curCSSTop = jQuery.css(elem, \"top\");\n      curCSSLeft = jQuery.css(elem, \"left\");\n      calculatePosition = (position === \"absolute\" || position === \"fixed\") && (curCSSTop + curCSSLeft).indexOf(\"auto\") > -1; // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n\n      if (calculatePosition) {\n        curPosition = curElem.position();\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (isFunction(options)) {\n        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n        options = options.call(elem, i, jQuery.extend({}, curOffset));\n      }\n\n      if (options.top != null) {\n        props.top = options.top - curOffset.top + curTop;\n      }\n\n      if (options.left != null) {\n        props.left = options.left - curOffset.left + curLeft;\n      }\n\n      if (\"using\" in options) {\n        options.using.call(elem, props);\n      } else {\n        curElem.css(props);\n      }\n    }\n  };\n  jQuery.fn.extend({\n    // offset() relates an element's border box to the document origin\n    offset: function offset(options) {\n      // Preserve chaining for setter\n      if (arguments.length) {\n        return options === undefined ? this : this.each(function (i) {\n          jQuery.offset.setOffset(this, options, i);\n        });\n      }\n\n      var rect,\n          win,\n          elem = this[0];\n\n      if (!elem) {\n        return;\n      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n      // Support: IE <=11 only\n      // Running getBoundingClientRect on a\n      // disconnected node in IE throws an error\n\n\n      if (!elem.getClientRects().length) {\n        return {\n          top: 0,\n          left: 0\n        };\n      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\n\n      rect = elem.getBoundingClientRect();\n      win = elem.ownerDocument.defaultView;\n      return {\n        top: rect.top + win.pageYOffset,\n        left: rect.left + win.pageXOffset\n      };\n    },\n    // position() relates an element's margin box to its offset parent's padding box\n    // This corresponds to the behavior of CSS absolute positioning\n    position: function position() {\n      if (!this[0]) {\n        return;\n      }\n\n      var offsetParent,\n          offset,\n          doc,\n          elem = this[0],\n          parentOffset = {\n        top: 0,\n        left: 0\n      }; // position:fixed elements are offset from the viewport, which itself always has zero offset\n\n      if (jQuery.css(elem, \"position\") === \"fixed\") {\n        // Assume position:fixed implies availability of getBoundingClientRect\n        offset = elem.getBoundingClientRect();\n      } else {\n        offset = this.offset(); // Account for the *real* offset parent, which can be the document or its root element\n        // when a statically positioned element is identified\n\n        doc = elem.ownerDocument;\n        offsetParent = elem.offsetParent || doc.documentElement;\n\n        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, \"position\") === \"static\") {\n          offsetParent = offsetParent.parentNode;\n        }\n\n        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {\n          // Incorporate borders into its offset, since they are outside its content origin\n          parentOffset = jQuery(offsetParent).offset();\n          parentOffset.top += jQuery.css(offsetParent, \"borderTopWidth\", true);\n          parentOffset.left += jQuery.css(offsetParent, \"borderLeftWidth\", true);\n        }\n      } // Subtract parent offsets and element margins\n\n\n      return {\n        top: offset.top - parentOffset.top - jQuery.css(elem, \"marginTop\", true),\n        left: offset.left - parentOffset.left - jQuery.css(elem, \"marginLeft\", true)\n      };\n    },\n    // This method will return documentElement in the following cases:\n    // 1) For the element inside the iframe without offsetParent, this method will return\n    //    documentElement of the parent window\n    // 2) For the hidden or detached element\n    // 3) For body or html element, i.e. in case of the html node - it will return itself\n    //\n    // but those exceptions were never presented as a real life use-cases\n    // and might be considered as more preferable results.\n    //\n    // This logic, however, is not guaranteed and can change at any point in the future\n    offsetParent: function offsetParent() {\n      return this.map(function () {\n        var offsetParent = this.offsetParent;\n\n        while (offsetParent && jQuery.css(offsetParent, \"position\") === \"static\") {\n          offsetParent = offsetParent.offsetParent;\n        }\n\n        return offsetParent || documentElement;\n      });\n    }\n  }); // Create scrollLeft and scrollTop methods\n\n  jQuery.each({\n    scrollLeft: \"pageXOffset\",\n    scrollTop: \"pageYOffset\"\n  }, function (method, prop) {\n    var top = \"pageYOffset\" === prop;\n\n    jQuery.fn[method] = function (val) {\n      return access(this, function (elem, method, val) {\n        // Coalesce documents and windows\n        var win;\n\n        if (isWindow(elem)) {\n          win = elem;\n        } else if (elem.nodeType === 9) {\n          win = elem.defaultView;\n        }\n\n        if (val === undefined) {\n          return win ? win[prop] : elem[method];\n        }\n\n        if (win) {\n          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);\n        } else {\n          elem[method] = val;\n        }\n      }, method, val, arguments.length);\n    };\n  }); // Support: Safari <=7 - 9.1, Chrome <=37 - 49\n  // Add the top/left cssHooks using jQuery.fn.position\n  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n  // getComputedStyle returns percent when specified for top/left/bottom/right;\n  // rather than make the css module depend on the offset module, just check for it here\n\n  jQuery.each([\"top\", \"left\"], function (_i, prop) {\n    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {\n      if (computed) {\n        computed = curCSS(elem, prop); // If curCSS returns percentage, fallback to offset\n\n        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + \"px\" : computed;\n      }\n    });\n  }); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\n\n  jQuery.each({\n    Height: \"height\",\n    Width: \"width\"\n  }, function (name, type) {\n    jQuery.each({\n      padding: \"inner\" + name,\n      content: type,\n      \"\": \"outer\" + name\n    }, function (defaultExtra, funcName) {\n      // Margin is only for outerHeight, outerWidth\n      jQuery.fn[funcName] = function (margin, value) {\n        var chainable = arguments.length && (defaultExtra || typeof margin !== \"boolean\"),\n            extra = defaultExtra || (margin === true || value === true ? \"margin\" : \"border\");\n        return access(this, function (elem, type, value) {\n          var doc;\n\n          if (isWindow(elem)) {\n            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n            return funcName.indexOf(\"outer\") === 0 ? elem[\"inner\" + name] : elem.document.documentElement[\"client\" + name];\n          } // Get document width or height\n\n\n          if (elem.nodeType === 9) {\n            doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n            // whichever is greatest\n\n            return Math.max(elem.body[\"scroll\" + name], doc[\"scroll\" + name], elem.body[\"offset\" + name], doc[\"offset\" + name], doc[\"client\" + name]);\n          }\n\n          return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat\n          jQuery.css(elem, type, extra) : // Set width or height on the element\n          jQuery.style(elem, type, value, extra);\n        }, type, chainable ? margin : undefined, chainable);\n      };\n    });\n  });\n  jQuery.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (_i, type) {\n    jQuery.fn[type] = function (fn) {\n      return this.on(type, fn);\n    };\n  });\n  jQuery.fn.extend({\n    bind: function bind(types, data, fn) {\n      return this.on(types, null, data, fn);\n    },\n    unbind: function unbind(types, fn) {\n      return this.off(types, null, fn);\n    },\n    delegate: function delegate(selector, types, data, fn) {\n      return this.on(types, selector, data, fn);\n    },\n    undelegate: function undelegate(selector, types, fn) {\n      // ( namespace ) or ( selector, types [, fn] )\n      return arguments.length === 1 ? this.off(selector, \"**\") : this.off(types, selector || \"**\", fn);\n    },\n    hover: function hover(fnOver, fnOut) {\n      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\n    }\n  });\n  jQuery.each((\"blur focus focusin focusout resize scroll click dblclick \" + \"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" + \"change select submit keydown keypress keyup contextmenu\").split(\" \"), function (_i, name) {\n    // Handle event binding\n    jQuery.fn[name] = function (data, fn) {\n      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n    };\n  }); // Support: Android <=4.0 only\n  // Make sure we trim BOM and NBSP\n\n  var rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g; // Bind a function to a context, optionally partially applying any\n  // arguments.\n  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n  // However, it is not slated for removal any time soon\n\n  jQuery.proxy = function (fn, context) {\n    var tmp, args, proxy;\n\n    if (typeof context === \"string\") {\n      tmp = fn[context];\n      context = fn;\n      fn = tmp;\n    } // Quick check to determine if target is callable, in the spec\n    // this throws a TypeError, but we will just return undefined.\n\n\n    if (!isFunction(fn)) {\n      return undefined;\n    } // Simulated bind\n\n\n    args = _slice.call(arguments, 2);\n\n    proxy = function proxy() {\n      return fn.apply(context || this, args.concat(_slice.call(arguments)));\n    }; // Set the guid of unique handler to the same of original handler, so it can be removed\n\n\n    proxy.guid = fn.guid = fn.guid || jQuery.guid++;\n    return proxy;\n  };\n\n  jQuery.holdReady = function (hold) {\n    if (hold) {\n      jQuery.readyWait++;\n    } else {\n      jQuery.ready(true);\n    }\n  };\n\n  jQuery.isArray = Array.isArray;\n  jQuery.parseJSON = JSON.parse;\n  jQuery.nodeName = nodeName;\n  jQuery.isFunction = isFunction;\n  jQuery.isWindow = isWindow;\n  jQuery.camelCase = camelCase;\n  jQuery.type = toType;\n  jQuery.now = Date.now;\n\n  jQuery.isNumeric = function (obj) {\n    // As of jQuery 3.0, isNumeric is limited to\n    // strings and numbers (primitives or objects)\n    // that can be coerced to finite numbers (gh-2662)\n    var type = jQuery.type(obj);\n    return (type === \"number\" || type === \"string\") && // parseFloat NaNs numeric-cast false positives (\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    !isNaN(obj - parseFloat(obj));\n  };\n\n  jQuery.trim = function (text) {\n    return text == null ? \"\" : (text + \"\").replace(rtrim, \"\");\n  }; // Register as a named AMD module, since jQuery can be concatenated with other\n  // files that may use define, but not via a proper concatenation script that\n  // understands anonymous AMD modules. A named AMD is safest and most robust\n  // way to register. Lowercase jquery is used because AMD module names are\n  // derived from file names, and jQuery is normally delivered in a lowercase\n  // file name. Do this after creating the global so that if an AMD module wants\n  // to call noConflict to hide this version of jQuery, it will work.\n  // Note that for maximum portability, libraries that are not jQuery should\n  // declare themselves as anonymous modules, and avoid setting a global if an\n  // AMD loader is present. jQuery is a special case. For more information, see\n  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\n\n  if (typeof define === \"function\" && define.amd) {\n    define(\"jquery\", [], function () {\n      return jQuery;\n    });\n  }\n\n  var // Map over jQuery in case of overwrite\n  _jQuery = window.jQuery,\n      // Map over the $ in case of overwrite\n  _$ = window.$;\n\n  jQuery.noConflict = function (deep) {\n    if (window.$ === jQuery) {\n      window.$ = _$;\n    }\n\n    if (deep && window.jQuery === jQuery) {\n      window.jQuery = _jQuery;\n    }\n\n    return jQuery;\n  }; // Expose jQuery and $ identifiers, even in AMD\n  // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n  // and CommonJS for browser emulators (#13566)\n\n\n  if (typeof noGlobal === \"undefined\") {\n    window.jQuery = window.$ = jQuery;\n  }\n\n  return jQuery;\n});\n\n},{}],15:[function(require,module,exports){\n(function (global){(function (){\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * SimpleBar.js - v5.3.5\n * Scrollbars, simpler.\n * https://grsmto.github.io/simplebar/\n *\n * Made by Adrien Denat from a fork by Jonathan Nicol\n * Under MIT License\n */\n!function (t, e) {\n  \"object\" == (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) && \"undefined\" != typeof module ? module.exports = e() : \"function\" == typeof define && define.amd ? define(e) : (t = t || self).SimpleBar = e();\n}(void 0, function () {\n  \"use strict\";\n\n  var t = \"undefined\" != typeof globalThis ? globalThis : \"undefined\" != typeof window ? window : \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : {};\n\n  function e(t, e) {\n    return t(e = {\n      exports: {}\n    }, e.exports), e.exports;\n  }\n\n  var r,\n      i,\n      n,\n      o = \"object\",\n      s = function s(t) {\n    return t && t.Math == Math && t;\n  },\n      a = s((typeof globalThis === \"undefined\" ? \"undefined\" : _typeof(globalThis)) == o && globalThis) || s((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) == o && window) || s((typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) == o && self) || s(_typeof(t) == o && t) || Function(\"return this\")(),\n      c = function c(t) {\n    try {\n      return !!t();\n    } catch (t) {\n      return !0;\n    }\n  },\n      l = !c(function () {\n    return 7 != Object.defineProperty({}, \"a\", {\n      get: function get() {\n        return 7;\n      }\n    }).a;\n  }),\n      u = {}.propertyIsEnumerable,\n      f = Object.getOwnPropertyDescriptor,\n      h = {\n    f: f && !u.call({\n      1: 2\n    }, 1) ? function (t) {\n      var e = f(this, t);\n      return !!e && e.enumerable;\n    } : u\n  },\n      d = function d(t, e) {\n    return {\n      enumerable: !(1 & t),\n      configurable: !(2 & t),\n      writable: !(4 & t),\n      value: e\n    };\n  },\n      p = {}.toString,\n      v = function v(t) {\n    return p.call(t).slice(8, -1);\n  },\n      g = \"\".split,\n      b = c(function () {\n    return !Object(\"z\").propertyIsEnumerable(0);\n  }) ? function (t) {\n    return \"String\" == v(t) ? g.call(t, \"\") : Object(t);\n  } : Object,\n      y = function y(t) {\n    if (null == t) throw TypeError(\"Can't call method on \" + t);\n    return t;\n  },\n      m = function m(t) {\n    return b(y(t));\n  },\n      x = function x(t) {\n    return \"object\" == _typeof(t) ? null !== t : \"function\" == typeof t;\n  },\n      E = function E(t, e) {\n    if (!x(t)) return t;\n    var r, i;\n    if (e && \"function\" == typeof (r = t.toString) && !x(i = r.call(t))) return i;\n    if (\"function\" == typeof (r = t.valueOf) && !x(i = r.call(t))) return i;\n    if (!e && \"function\" == typeof (r = t.toString) && !x(i = r.call(t))) return i;\n    throw TypeError(\"Can't convert object to primitive value\");\n  },\n      w = {}.hasOwnProperty,\n      S = function S(t, e) {\n    return w.call(t, e);\n  },\n      O = a.document,\n      k = x(O) && x(O.createElement),\n      A = function A(t) {\n    return k ? O.createElement(t) : {};\n  },\n      T = !l && !c(function () {\n    return 7 != Object.defineProperty(A(\"div\"), \"a\", {\n      get: function get() {\n        return 7;\n      }\n    }).a;\n  }),\n      L = Object.getOwnPropertyDescriptor,\n      z = {\n    f: l ? L : function (t, e) {\n      if (t = m(t), e = E(e, !0), T) try {\n        return L(t, e);\n      } catch (t) {}\n      if (S(t, e)) return d(!h.f.call(t, e), t[e]);\n    }\n  },\n      R = function R(t) {\n    if (!x(t)) throw TypeError(String(t) + \" is not an object\");\n    return t;\n  },\n      _ = Object.defineProperty,\n      M = {\n    f: l ? _ : function (t, e, r) {\n      if (R(t), e = E(e, !0), R(r), T) try {\n        return _(t, e, r);\n      } catch (t) {}\n      if (\"get\" in r || \"set\" in r) throw TypeError(\"Accessors not supported\");\n      return \"value\" in r && (t[e] = r.value), t;\n    }\n  },\n      C = l ? function (t, e, r) {\n    return M.f(t, e, d(1, r));\n  } : function (t, e, r) {\n    return t[e] = r, t;\n  },\n      j = function j(t, e) {\n    try {\n      C(a, t, e);\n    } catch (r) {\n      a[t] = e;\n    }\n\n    return e;\n  },\n      W = e(function (t) {\n    var e = a[\"__core-js_shared__\"] || j(\"__core-js_shared__\", {});\n    (t.exports = function (t, r) {\n      return e[t] || (e[t] = void 0 !== r ? r : {});\n    })(\"versions\", []).push({\n      version: \"3.2.1\",\n      mode: \"global\",\n      copyright: \"© 2019 Denis Pushkarev (zloirock.ru)\"\n    });\n  }),\n      N = W(\"native-function-to-string\", Function.toString),\n      I = a.WeakMap,\n      B = \"function\" == typeof I && /native code/.test(N.call(I)),\n      D = 0,\n      P = Math.random(),\n      F = function F(t) {\n    return \"Symbol(\" + String(void 0 === t ? \"\" : t) + \")_\" + (++D + P).toString(36);\n  },\n      V = W(\"keys\"),\n      X = function X(t) {\n    return V[t] || (V[t] = F(t));\n  },\n      H = {},\n      q = a.WeakMap;\n\n  if (B) {\n    var $ = new q(),\n        Y = $.get,\n        G = $.has,\n        U = $.set;\n    r = function r(t, e) {\n      return U.call($, t, e), e;\n    }, i = function i(t) {\n      return Y.call($, t) || {};\n    }, n = function n(t) {\n      return G.call($, t);\n    };\n  } else {\n    var Q = X(\"state\");\n    H[Q] = !0, r = function r(t, e) {\n      return C(t, Q, e), e;\n    }, i = function i(t) {\n      return S(t, Q) ? t[Q] : {};\n    }, n = function n(t) {\n      return S(t, Q);\n    };\n  }\n\n  var K = {\n    set: r,\n    get: i,\n    has: n,\n    enforce: function enforce(t) {\n      return n(t) ? i(t) : r(t, {});\n    },\n    getterFor: function getterFor(t) {\n      return function (e) {\n        var r;\n        if (!x(e) || (r = i(e)).type !== t) throw TypeError(\"Incompatible receiver, \" + t + \" required\");\n        return r;\n      };\n    }\n  },\n      J = e(function (t) {\n    var e = K.get,\n        r = K.enforce,\n        i = String(N).split(\"toString\");\n    W(\"inspectSource\", function (t) {\n      return N.call(t);\n    }), (t.exports = function (t, e, n, o) {\n      var s = !!o && !!o.unsafe,\n          c = !!o && !!o.enumerable,\n          l = !!o && !!o.noTargetGet;\n      \"function\" == typeof n && (\"string\" != typeof e || S(n, \"name\") || C(n, \"name\", e), r(n).source = i.join(\"string\" == typeof e ? e : \"\")), t !== a ? (s ? !l && t[e] && (c = !0) : delete t[e], c ? t[e] = n : C(t, e, n)) : c ? t[e] = n : j(e, n);\n    })(Function.prototype, \"toString\", function () {\n      return \"function\" == typeof this && e(this).source || N.call(this);\n    });\n  }),\n      Z = a,\n      tt = function tt(t) {\n    return \"function\" == typeof t ? t : void 0;\n  },\n      et = function et(t, e) {\n    return arguments.length < 2 ? tt(Z[t]) || tt(a[t]) : Z[t] && Z[t][e] || a[t] && a[t][e];\n  },\n      rt = Math.ceil,\n      it = Math.floor,\n      nt = function nt(t) {\n    return isNaN(t = +t) ? 0 : (t > 0 ? it : rt)(t);\n  },\n      ot = Math.min,\n      st = function st(t) {\n    return t > 0 ? ot(nt(t), 9007199254740991) : 0;\n  },\n      at = Math.max,\n      ct = Math.min,\n      lt = function lt(t) {\n    return function (e, r, i) {\n      var n,\n          o = m(e),\n          s = st(o.length),\n          a = function (t, e) {\n        var r = nt(t);\n        return r < 0 ? at(r + e, 0) : ct(r, e);\n      }(i, s);\n\n      if (t && r != r) {\n        for (; s > a;) {\n          if ((n = o[a++]) != n) return !0;\n        }\n      } else for (; s > a; a++) {\n        if ((t || a in o) && o[a] === r) return t || a || 0;\n      }\n\n      return !t && -1;\n    };\n  },\n      ut = {\n    includes: lt(!0),\n    indexOf: lt(!1)\n  }.indexOf,\n      ft = function ft(t, e) {\n    var r,\n        i = m(t),\n        n = 0,\n        o = [];\n\n    for (r in i) {\n      !S(H, r) && S(i, r) && o.push(r);\n    }\n\n    for (; e.length > n;) {\n      S(i, r = e[n++]) && (~ut(o, r) || o.push(r));\n    }\n\n    return o;\n  },\n      ht = [\"constructor\", \"hasOwnProperty\", \"isPrototypeOf\", \"propertyIsEnumerable\", \"toLocaleString\", \"toString\", \"valueOf\"],\n      dt = ht.concat(\"length\", \"prototype\"),\n      pt = {\n    f: Object.getOwnPropertyNames || function (t) {\n      return ft(t, dt);\n    }\n  },\n      vt = {\n    f: Object.getOwnPropertySymbols\n  },\n      gt = et(\"Reflect\", \"ownKeys\") || function (t) {\n    var e = pt.f(R(t)),\n        r = vt.f;\n    return r ? e.concat(r(t)) : e;\n  },\n      bt = function bt(t, e) {\n    for (var r = gt(e), i = M.f, n = z.f, o = 0; o < r.length; o++) {\n      var s = r[o];\n      S(t, s) || i(t, s, n(e, s));\n    }\n  },\n      yt = /#|\\.prototype\\./,\n      mt = function mt(t, e) {\n    var r = Et[xt(t)];\n    return r == St || r != wt && (\"function\" == typeof e ? c(e) : !!e);\n  },\n      xt = mt.normalize = function (t) {\n    return String(t).replace(yt, \".\").toLowerCase();\n  },\n      Et = mt.data = {},\n      wt = mt.NATIVE = \"N\",\n      St = mt.POLYFILL = \"P\",\n      Ot = mt,\n      kt = z.f,\n      At = function At(t, e) {\n    var r,\n        i,\n        n,\n        o,\n        s,\n        c = t.target,\n        l = t.global,\n        u = t.stat;\n    if (r = l ? a : u ? a[c] || j(c, {}) : (a[c] || {}).prototype) for (i in e) {\n      if (o = e[i], n = t.noTargetGet ? (s = kt(r, i)) && s.value : r[i], !Ot(l ? i : c + (u ? \".\" : \"#\") + i, t.forced) && void 0 !== n) {\n        if (_typeof(o) == _typeof(n)) continue;\n        bt(o, n);\n      }\n\n      (t.sham || n && n.sham) && C(o, \"sham\", !0), J(r, i, o, t);\n    }\n  },\n      Tt = function Tt(t) {\n    if (\"function\" != typeof t) throw TypeError(String(t) + \" is not a function\");\n    return t;\n  },\n      Lt = function Lt(t, e, r) {\n    if (Tt(t), void 0 === e) return t;\n\n    switch (r) {\n      case 0:\n        return function () {\n          return t.call(e);\n        };\n\n      case 1:\n        return function (r) {\n          return t.call(e, r);\n        };\n\n      case 2:\n        return function (r, i) {\n          return t.call(e, r, i);\n        };\n\n      case 3:\n        return function (r, i, n) {\n          return t.call(e, r, i, n);\n        };\n    }\n\n    return function () {\n      return t.apply(e, arguments);\n    };\n  },\n      zt = function zt(t) {\n    return Object(y(t));\n  },\n      Rt = Array.isArray || function (t) {\n    return \"Array\" == v(t);\n  },\n      _t = !!Object.getOwnPropertySymbols && !c(function () {\n    return !String(Symbol());\n  }),\n      Mt = a.Symbol,\n      Ct = W(\"wks\"),\n      jt = function jt(t) {\n    return Ct[t] || (Ct[t] = _t && Mt[t] || (_t ? Mt : F)(\"Symbol.\" + t));\n  },\n      Wt = jt(\"species\"),\n      Nt = function Nt(t, e) {\n    var r;\n    return Rt(t) && (\"function\" != typeof (r = t.constructor) || r !== Array && !Rt(r.prototype) ? x(r) && null === (r = r[Wt]) && (r = void 0) : r = void 0), new (void 0 === r ? Array : r)(0 === e ? 0 : e);\n  },\n      It = [].push,\n      Bt = function Bt(t) {\n    var e = 1 == t,\n        r = 2 == t,\n        i = 3 == t,\n        n = 4 == t,\n        o = 6 == t,\n        s = 5 == t || o;\n    return function (a, c, l, u) {\n      for (var f, h, d = zt(a), p = b(d), v = Lt(c, l, 3), g = st(p.length), y = 0, m = u || Nt, x = e ? m(a, g) : r ? m(a, 0) : void 0; g > y; y++) {\n        if ((s || y in p) && (h = v(f = p[y], y, d), t)) if (e) x[y] = h;else if (h) switch (t) {\n          case 3:\n            return !0;\n\n          case 5:\n            return f;\n\n          case 6:\n            return y;\n\n          case 2:\n            It.call(x, f);\n        } else if (n) return !1;\n      }\n\n      return o ? -1 : i || n ? n : x;\n    };\n  },\n      Dt = {\n    forEach: Bt(0),\n    map: Bt(1),\n    filter: Bt(2),\n    some: Bt(3),\n    every: Bt(4),\n    find: Bt(5),\n    findIndex: Bt(6)\n  },\n      Pt = function Pt(t, e) {\n    var r = [][t];\n    return !r || !c(function () {\n      r.call(null, e || function () {\n        throw 1;\n      }, 1);\n    });\n  },\n      Ft = Dt.forEach,\n      Vt = Pt(\"forEach\") ? function (t) {\n    return Ft(this, t, arguments.length > 1 ? arguments[1] : void 0);\n  } : [].forEach;\n\n  At({\n    target: \"Array\",\n    proto: !0,\n    forced: [].forEach != Vt\n  }, {\n    forEach: Vt\n  });\n  var Xt = {\n    CSSRuleList: 0,\n    CSSStyleDeclaration: 0,\n    CSSValueList: 0,\n    ClientRectList: 0,\n    DOMRectList: 0,\n    DOMStringList: 0,\n    DOMTokenList: 1,\n    DataTransferItemList: 0,\n    FileList: 0,\n    HTMLAllCollection: 0,\n    HTMLCollection: 0,\n    HTMLFormElement: 0,\n    HTMLSelectElement: 0,\n    MediaList: 0,\n    MimeTypeArray: 0,\n    NamedNodeMap: 0,\n    NodeList: 1,\n    PaintRequestList: 0,\n    Plugin: 0,\n    PluginArray: 0,\n    SVGLengthList: 0,\n    SVGNumberList: 0,\n    SVGPathSegList: 0,\n    SVGPointList: 0,\n    SVGStringList: 0,\n    SVGTransformList: 0,\n    SourceBufferList: 0,\n    StyleSheetList: 0,\n    TextTrackCueList: 0,\n    TextTrackList: 0,\n    TouchList: 0\n  };\n\n  for (var Ht in Xt) {\n    var qt = a[Ht],\n        $t = qt && qt.prototype;\n    if ($t && $t.forEach !== Vt) try {\n      C($t, \"forEach\", Vt);\n    } catch (t) {\n      $t.forEach = Vt;\n    }\n  }\n\n  var Yt = !(\"undefined\" == typeof window || !window.document || !window.document.createElement),\n      Gt = jt(\"species\"),\n      Ut = Dt.filter;\n  At({\n    target: \"Array\",\n    proto: !0,\n    forced: !function (t) {\n      return !c(function () {\n        var e = [];\n        return (e.constructor = {})[Gt] = function () {\n          return {\n            foo: 1\n          };\n        }, 1 !== e[t](Boolean).foo;\n      });\n    }(\"filter\")\n  }, {\n    filter: function filter(t) {\n      return Ut(this, t, arguments.length > 1 ? arguments[1] : void 0);\n    }\n  });\n\n  var Qt = Object.keys || function (t) {\n    return ft(t, ht);\n  },\n      Kt = l ? Object.defineProperties : function (t, e) {\n    R(t);\n\n    for (var r, i = Qt(e), n = i.length, o = 0; n > o;) {\n      M.f(t, r = i[o++], e[r]);\n    }\n\n    return t;\n  },\n      Jt = et(\"document\", \"documentElement\"),\n      Zt = X(\"IE_PROTO\"),\n      te = function te() {},\n      _ee = function ee() {\n    var t,\n        e = A(\"iframe\"),\n        r = ht.length;\n\n    for (e.style.display = \"none\", Jt.appendChild(e), e.src = String(\"javascript:\"), (t = e.contentWindow.document).open(), t.write(\"<script>document.F=Object<\\/script>\"), t.close(), _ee = t.F; r--;) {\n      delete _ee.prototype[ht[r]];\n    }\n\n    return _ee();\n  },\n      re = Object.create || function (t, e) {\n    var r;\n    return null !== t ? (te.prototype = R(t), r = new te(), te.prototype = null, r[Zt] = t) : r = _ee(), void 0 === e ? r : Kt(r, e);\n  };\n\n  H[Zt] = !0;\n  var ie = jt(\"unscopables\"),\n      ne = Array.prototype;\n  null == ne[ie] && C(ne, ie, re(null));\n\n  var oe,\n      se,\n      ae,\n      ce = function ce(t) {\n    ne[ie][t] = !0;\n  },\n      le = {},\n      ue = !c(function () {\n    function t() {}\n\n    return t.prototype.constructor = null, Object.getPrototypeOf(new t()) !== t.prototype;\n  }),\n      fe = X(\"IE_PROTO\"),\n      he = Object.prototype,\n      de = ue ? Object.getPrototypeOf : function (t) {\n    return t = zt(t), S(t, fe) ? t[fe] : \"function\" == typeof t.constructor && t instanceof t.constructor ? t.constructor.prototype : t instanceof Object ? he : null;\n  },\n      pe = jt(\"iterator\"),\n      ve = !1;\n\n  [].keys && (\"next\" in (ae = [].keys()) ? (se = de(de(ae))) !== Object.prototype && (oe = se) : ve = !0), null == oe && (oe = {}), S(oe, pe) || C(oe, pe, function () {\n    return this;\n  });\n\n  var ge = {\n    IteratorPrototype: oe,\n    BUGGY_SAFARI_ITERATORS: ve\n  },\n      be = M.f,\n      ye = jt(\"toStringTag\"),\n      me = function me(t, e, r) {\n    t && !S(t = r ? t : t.prototype, ye) && be(t, ye, {\n      configurable: !0,\n      value: e\n    });\n  },\n      xe = ge.IteratorPrototype,\n      Ee = function Ee() {\n    return this;\n  },\n      we = Object.setPrototypeOf || (\"__proto__\" in {} ? function () {\n    var t,\n        e = !1,\n        r = {};\n\n    try {\n      (t = Object.getOwnPropertyDescriptor(Object.prototype, \"__proto__\").set).call(r, []), e = r instanceof Array;\n    } catch (t) {}\n\n    return function (r, i) {\n      return R(r), function (t) {\n        if (!x(t) && null !== t) throw TypeError(\"Can't set \" + String(t) + \" as a prototype\");\n      }(i), e ? t.call(r, i) : r.__proto__ = i, r;\n    };\n  }() : void 0),\n      Se = ge.IteratorPrototype,\n      Oe = ge.BUGGY_SAFARI_ITERATORS,\n      ke = jt(\"iterator\"),\n      Ae = function Ae() {\n    return this;\n  },\n      Te = function Te(t, e, r, i, n, o, s) {\n    !function (t, e, r) {\n      var i = e + \" Iterator\";\n      t.prototype = re(xe, {\n        next: d(1, r)\n      }), me(t, i, !1), le[i] = Ee;\n    }(r, e, i);\n\n    var a,\n        c,\n        l,\n        u = function u(t) {\n      if (t === n && g) return g;\n      if (!Oe && t in p) return p[t];\n\n      switch (t) {\n        case \"keys\":\n        case \"values\":\n        case \"entries\":\n          return function () {\n            return new r(this, t);\n          };\n      }\n\n      return function () {\n        return new r(this);\n      };\n    },\n        f = e + \" Iterator\",\n        h = !1,\n        p = t.prototype,\n        v = p[ke] || p[\"@@iterator\"] || n && p[n],\n        g = !Oe && v || u(n),\n        b = \"Array\" == e && p.entries || v;\n\n    if (b && (a = de(b.call(new t())), Se !== Object.prototype && a.next && (de(a) !== Se && (we ? we(a, Se) : \"function\" != typeof a[ke] && C(a, ke, Ae)), me(a, f, !0))), \"values\" == n && v && \"values\" !== v.name && (h = !0, g = function g() {\n      return v.call(this);\n    }), p[ke] !== g && C(p, ke, g), le[e] = g, n) if (c = {\n      values: u(\"values\"),\n      keys: o ? g : u(\"keys\"),\n      entries: u(\"entries\")\n    }, s) for (l in c) {\n      !Oe && !h && l in p || J(p, l, c[l]);\n    } else At({\n      target: e,\n      proto: !0,\n      forced: Oe || h\n    }, c);\n    return c;\n  },\n      Le = K.set,\n      ze = K.getterFor(\"Array Iterator\"),\n      Re = Te(Array, \"Array\", function (t, e) {\n    Le(this, {\n      type: \"Array Iterator\",\n      target: m(t),\n      index: 0,\n      kind: e\n    });\n  }, function () {\n    var t = ze(this),\n        e = t.target,\n        r = t.kind,\n        i = t.index++;\n    return !e || i >= e.length ? (t.target = void 0, {\n      value: void 0,\n      done: !0\n    }) : \"keys\" == r ? {\n      value: i,\n      done: !1\n    } : \"values\" == r ? {\n      value: e[i],\n      done: !1\n    } : {\n      value: [i, e[i]],\n      done: !1\n    };\n  }, \"values\");\n\n  le.Arguments = le.Array, ce(\"keys\"), ce(\"values\"), ce(\"entries\");\n  var _e = Object.assign,\n      Me = !_e || c(function () {\n    var t = {},\n        e = {},\n        r = Symbol();\n    return t[r] = 7, \"abcdefghijklmnopqrst\".split(\"\").forEach(function (t) {\n      e[t] = t;\n    }), 7 != _e({}, t)[r] || \"abcdefghijklmnopqrst\" != Qt(_e({}, e)).join(\"\");\n  }) ? function (t, e) {\n    for (var r = zt(t), i = arguments.length, n = 1, o = vt.f, s = h.f; i > n;) {\n      for (var a, c = b(arguments[n++]), u = o ? Qt(c).concat(o(c)) : Qt(c), f = u.length, d = 0; f > d;) {\n        a = u[d++], l && !s.call(c, a) || (r[a] = c[a]);\n      }\n    }\n\n    return r;\n  } : _e;\n  At({\n    target: \"Object\",\n    stat: !0,\n    forced: Object.assign !== Me\n  }, {\n    assign: Me\n  });\n\n  var Ce = jt(\"toStringTag\"),\n      je = \"Arguments\" == v(function () {\n    return arguments;\n  }()),\n      We = function We(t) {\n    var e, r, i;\n    return void 0 === t ? \"Undefined\" : null === t ? \"Null\" : \"string\" == typeof (r = function (t, e) {\n      try {\n        return t[e];\n      } catch (t) {}\n    }(e = Object(t), Ce)) ? r : je ? v(e) : \"Object\" == (i = v(e)) && \"function\" == typeof e.callee ? \"Arguments\" : i;\n  },\n      Ne = {};\n\n  Ne[jt(\"toStringTag\")] = \"z\";\n  var Ie = \"[object z]\" !== String(Ne) ? function () {\n    return \"[object \" + We(this) + \"]\";\n  } : Ne.toString,\n      Be = Object.prototype;\n  Ie !== Be.toString && J(Be, \"toString\", Ie, {\n    unsafe: !0\n  });\n\n  var De = \"\\t\\n\\x0B\\f\\r \\xA0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF\",\n      Pe = \"[\" + De + \"]\",\n      Fe = RegExp(\"^\" + Pe + Pe + \"*\"),\n      Ve = RegExp(Pe + Pe + \"*$\"),\n      Xe = function Xe(t) {\n    return function (e) {\n      var r = String(y(e));\n      return 1 & t && (r = r.replace(Fe, \"\")), 2 & t && (r = r.replace(Ve, \"\")), r;\n    };\n  },\n      He = {\n    start: Xe(1),\n    end: Xe(2),\n    trim: Xe(3)\n  }.trim,\n      qe = a.parseInt,\n      $e = /^[+-]?0[Xx]/,\n      Ye = 8 !== qe(De + \"08\") || 22 !== qe(De + \"0x16\") ? function (t, e) {\n    var r = He(String(t));\n    return qe(r, e >>> 0 || ($e.test(r) ? 16 : 10));\n  } : qe;\n\n  At({\n    global: !0,\n    forced: parseInt != Ye\n  }, {\n    parseInt: Ye\n  });\n\n  var Ge = function Ge(t) {\n    return function (e, r) {\n      var i,\n          n,\n          o = String(y(e)),\n          s = nt(r),\n          a = o.length;\n      return s < 0 || s >= a ? t ? \"\" : void 0 : (i = o.charCodeAt(s)) < 55296 || i > 56319 || s + 1 === a || (n = o.charCodeAt(s + 1)) < 56320 || n > 57343 ? t ? o.charAt(s) : i : t ? o.slice(s, s + 2) : n - 56320 + (i - 55296 << 10) + 65536;\n    };\n  },\n      Ue = {\n    codeAt: Ge(!1),\n    charAt: Ge(!0)\n  },\n      Qe = Ue.charAt,\n      Ke = K.set,\n      Je = K.getterFor(\"String Iterator\");\n\n  Te(String, \"String\", function (t) {\n    Ke(this, {\n      type: \"String Iterator\",\n      string: String(t),\n      index: 0\n    });\n  }, function () {\n    var t,\n        e = Je(this),\n        r = e.string,\n        i = e.index;\n    return i >= r.length ? {\n      value: void 0,\n      done: !0\n    } : (t = Qe(r, i), e.index += t.length, {\n      value: t,\n      done: !1\n    });\n  });\n\n  var Ze = function Ze(t, e, r) {\n    for (var i in e) {\n      J(t, i, e[i], r);\n    }\n\n    return t;\n  },\n      tr = !c(function () {\n    return Object.isExtensible(Object.preventExtensions({}));\n  }),\n      er = e(function (t) {\n    var e = M.f,\n        r = F(\"meta\"),\n        i = 0,\n        n = Object.isExtensible || function () {\n      return !0;\n    },\n        o = function o(t) {\n      e(t, r, {\n        value: {\n          objectID: \"O\" + ++i,\n          weakData: {}\n        }\n      });\n    },\n        s = t.exports = {\n      REQUIRED: !1,\n      fastKey: function fastKey(t, e) {\n        if (!x(t)) return \"symbol\" == _typeof(t) ? t : (\"string\" == typeof t ? \"S\" : \"P\") + t;\n\n        if (!S(t, r)) {\n          if (!n(t)) return \"F\";\n          if (!e) return \"E\";\n          o(t);\n        }\n\n        return t[r].objectID;\n      },\n      getWeakData: function getWeakData(t, e) {\n        if (!S(t, r)) {\n          if (!n(t)) return !0;\n          if (!e) return !1;\n          o(t);\n        }\n\n        return t[r].weakData;\n      },\n      onFreeze: function onFreeze(t) {\n        return tr && s.REQUIRED && n(t) && !S(t, r) && o(t), t;\n      }\n    };\n\n    H[r] = !0;\n  }),\n      rr = (er.REQUIRED, er.fastKey, er.getWeakData, er.onFreeze, jt(\"iterator\")),\n      ir = Array.prototype,\n      nr = jt(\"iterator\"),\n      or = function or(t, e, r, i) {\n    try {\n      return i ? e(R(r)[0], r[1]) : e(r);\n    } catch (e) {\n      var n = t[\"return\"];\n      throw void 0 !== n && R(n.call(t)), e;\n    }\n  },\n      sr = e(function (t) {\n    var e = function e(t, _e2) {\n      this.stopped = t, this.result = _e2;\n    };\n\n    (t.exports = function (t, r, i, n, o) {\n      var s,\n          a,\n          c,\n          l,\n          u,\n          f,\n          h,\n          d = Lt(r, i, n ? 2 : 1);\n      if (o) s = t;else {\n        if (\"function\" != typeof (a = function (t) {\n          if (null != t) return t[nr] || t[\"@@iterator\"] || le[We(t)];\n        }(t))) throw TypeError(\"Target is not iterable\");\n\n        if (void 0 !== (h = a) && (le.Array === h || ir[rr] === h)) {\n          for (c = 0, l = st(t.length); l > c; c++) {\n            if ((u = n ? d(R(f = t[c])[0], f[1]) : d(t[c])) && u instanceof e) return u;\n          }\n\n          return new e(!1);\n        }\n\n        s = a.call(t);\n      }\n\n      for (; !(f = s.next()).done;) {\n        if ((u = or(s, d, f.value, n)) && u instanceof e) return u;\n      }\n\n      return new e(!1);\n    }).stop = function (t) {\n      return new e(!0, t);\n    };\n  }),\n      ar = function ar(t, e, r) {\n    if (!(t instanceof e)) throw TypeError(\"Incorrect \" + (r ? r + \" \" : \"\") + \"invocation\");\n    return t;\n  },\n      cr = jt(\"iterator\"),\n      lr = !1;\n\n  try {\n    var ur = 0,\n        fr = {\n      next: function next() {\n        return {\n          done: !!ur++\n        };\n      },\n      \"return\": function _return() {\n        lr = !0;\n      }\n    };\n    fr[cr] = function () {\n      return this;\n    }, Array.from(fr, function () {\n      throw 2;\n    });\n  } catch (t) {}\n\n  var hr = function hr(t, e, r, i, n) {\n    var o = a[t],\n        s = o && o.prototype,\n        l = o,\n        u = i ? \"set\" : \"add\",\n        f = {},\n        h = function h(t) {\n      var e = s[t];\n      J(s, t, \"add\" == t ? function (t) {\n        return e.call(this, 0 === t ? 0 : t), this;\n      } : \"delete\" == t ? function (t) {\n        return !(n && !x(t)) && e.call(this, 0 === t ? 0 : t);\n      } : \"get\" == t ? function (t) {\n        return n && !x(t) ? void 0 : e.call(this, 0 === t ? 0 : t);\n      } : \"has\" == t ? function (t) {\n        return !(n && !x(t)) && e.call(this, 0 === t ? 0 : t);\n      } : function (t, r) {\n        return e.call(this, 0 === t ? 0 : t, r), this;\n      });\n    };\n\n    if (Ot(t, \"function\" != typeof o || !(n || s.forEach && !c(function () {\n      new o().entries().next();\n    })))) l = r.getConstructor(e, t, i, u), er.REQUIRED = !0;else if (Ot(t, !0)) {\n      var d = new l(),\n          p = d[u](n ? {} : -0, 1) != d,\n          v = c(function () {\n        d.has(1);\n      }),\n          g = function (t, e) {\n        if (!e && !lr) return !1;\n        var r = !1;\n\n        try {\n          var i = {};\n          i[cr] = function () {\n            return {\n              next: function next() {\n                return {\n                  done: r = !0\n                };\n              }\n            };\n          }, t(i);\n        } catch (t) {}\n\n        return r;\n      }(function (t) {\n        new o(t);\n      }),\n          b = !n && c(function () {\n        for (var t = new o(), e = 5; e--;) {\n          t[u](e, e);\n        }\n\n        return !t.has(-0);\n      });\n\n      g || ((l = e(function (e, r) {\n        ar(e, l, t);\n\n        var n = function (t, e, r) {\n          var i, n;\n          return we && \"function\" == typeof (i = e.constructor) && i !== r && x(n = i.prototype) && n !== r.prototype && we(t, n), t;\n        }(new o(), e, l);\n\n        return null != r && sr(r, n[u], n, i), n;\n      })).prototype = s, s.constructor = l), (v || b) && (h(\"delete\"), h(\"has\"), i && h(\"get\")), (b || p) && h(u), n && s.clear && delete s.clear;\n    }\n    return f[t] = l, At({\n      global: !0,\n      forced: l != o\n    }, f), me(l, t), n || r.setStrong(l, t, i), l;\n  },\n      dr = er.getWeakData,\n      pr = K.set,\n      vr = K.getterFor,\n      gr = Dt.find,\n      br = Dt.findIndex,\n      yr = 0,\n      mr = function mr(t) {\n    return t.frozen || (t.frozen = new xr());\n  },\n      xr = function xr() {\n    this.entries = [];\n  },\n      Er = function Er(t, e) {\n    return gr(t.entries, function (t) {\n      return t[0] === e;\n    });\n  };\n\n  xr.prototype = {\n    get: function get(t) {\n      var e = Er(this, t);\n      if (e) return e[1];\n    },\n    has: function has(t) {\n      return !!Er(this, t);\n    },\n    set: function set(t, e) {\n      var r = Er(this, t);\n      r ? r[1] = e : this.entries.push([t, e]);\n    },\n    \"delete\": function _delete(t) {\n      var e = br(this.entries, function (e) {\n        return e[0] === t;\n      });\n      return ~e && this.entries.splice(e, 1), !!~e;\n    }\n  };\n  var wr = {\n    getConstructor: function getConstructor(t, e, r, i) {\n      var n = t(function (t, o) {\n        ar(t, n, e), pr(t, {\n          type: e,\n          id: yr++,\n          frozen: void 0\n        }), null != o && sr(o, t[i], t, r);\n      }),\n          o = vr(e),\n          s = function s(t, e, r) {\n        var i = o(t),\n            n = dr(R(e), !0);\n        return !0 === n ? mr(i).set(e, r) : n[i.id] = r, t;\n      };\n\n      return Ze(n.prototype, {\n        \"delete\": function _delete(t) {\n          var e = o(this);\n          if (!x(t)) return !1;\n          var r = dr(t);\n          return !0 === r ? mr(e)[\"delete\"](t) : r && S(r, e.id) && delete r[e.id];\n        },\n        has: function has(t) {\n          var e = o(this);\n          if (!x(t)) return !1;\n          var r = dr(t);\n          return !0 === r ? mr(e).has(t) : r && S(r, e.id);\n        }\n      }), Ze(n.prototype, r ? {\n        get: function get(t) {\n          var e = o(this);\n\n          if (x(t)) {\n            var r = dr(t);\n            return !0 === r ? mr(e).get(t) : r ? r[e.id] : void 0;\n          }\n        },\n        set: function set(t, e) {\n          return s(this, t, e);\n        }\n      } : {\n        add: function add(t) {\n          return s(this, t, !0);\n        }\n      }), n;\n    }\n  },\n      Sr = (e(function (t) {\n    var e,\n        r = K.enforce,\n        i = !a.ActiveXObject && \"ActiveXObject\" in a,\n        n = Object.isExtensible,\n        o = function o(t) {\n      return function () {\n        return t(this, arguments.length ? arguments[0] : void 0);\n      };\n    },\n        s = t.exports = hr(\"WeakMap\", o, wr, !0, !0);\n\n    if (B && i) {\n      e = wr.getConstructor(o, \"WeakMap\", !0), er.REQUIRED = !0;\n      var c = s.prototype,\n          l = c[\"delete\"],\n          u = c.has,\n          f = c.get,\n          h = c.set;\n      Ze(c, {\n        \"delete\": function _delete(t) {\n          if (x(t) && !n(t)) {\n            var i = r(this);\n            return i.frozen || (i.frozen = new e()), l.call(this, t) || i.frozen[\"delete\"](t);\n          }\n\n          return l.call(this, t);\n        },\n        has: function has(t) {\n          if (x(t) && !n(t)) {\n            var i = r(this);\n            return i.frozen || (i.frozen = new e()), u.call(this, t) || i.frozen.has(t);\n          }\n\n          return u.call(this, t);\n        },\n        get: function get(t) {\n          if (x(t) && !n(t)) {\n            var i = r(this);\n            return i.frozen || (i.frozen = new e()), u.call(this, t) ? f.call(this, t) : i.frozen.get(t);\n          }\n\n          return f.call(this, t);\n        },\n        set: function set(t, i) {\n          if (x(t) && !n(t)) {\n            var o = r(this);\n            o.frozen || (o.frozen = new e()), u.call(this, t) ? h.call(this, t, i) : o.frozen.set(t, i);\n          } else h.call(this, t, i);\n\n          return this;\n        }\n      });\n    }\n  }), jt(\"iterator\")),\n      Or = jt(\"toStringTag\"),\n      kr = Re.values;\n\n  for (var Ar in Xt) {\n    var Tr = a[Ar],\n        Lr = Tr && Tr.prototype;\n\n    if (Lr) {\n      if (Lr[Sr] !== kr) try {\n        C(Lr, Sr, kr);\n      } catch (t) {\n        Lr[Sr] = kr;\n      }\n      if (Lr[Or] || C(Lr, Or, Ar), Xt[Ar]) for (var zr in Re) {\n        if (Lr[zr] !== Re[zr]) try {\n          C(Lr, zr, Re[zr]);\n        } catch (t) {\n          Lr[zr] = Re[zr];\n        }\n      }\n    }\n  }\n\n  var Rr = \"Expected a function\",\n      _r = NaN,\n      Mr = \"[object Symbol]\",\n      Cr = /^\\s+|\\s+$/g,\n      jr = /^[-+]0x[0-9a-f]+$/i,\n      Wr = /^0b[01]+$/i,\n      Nr = /^0o[0-7]+$/i,\n      Ir = parseInt,\n      Br = \"object\" == _typeof(t) && t && t.Object === Object && t,\n      Dr = \"object\" == (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self && self.Object === Object && self,\n      Pr = Br || Dr || Function(\"return this\")(),\n      Fr = Object.prototype.toString,\n      Vr = Math.max,\n      Xr = Math.min,\n      Hr = function Hr() {\n    return Pr.Date.now();\n  };\n\n  function qr(t, e, r) {\n    var i,\n        n,\n        o,\n        s,\n        a,\n        c,\n        l = 0,\n        u = !1,\n        f = !1,\n        h = !0;\n    if (\"function\" != typeof t) throw new TypeError(Rr);\n\n    function d(e) {\n      var r = i,\n          o = n;\n      return i = n = void 0, l = e, s = t.apply(o, r);\n    }\n\n    function p(t) {\n      var r = t - c;\n      return void 0 === c || r >= e || r < 0 || f && t - l >= o;\n    }\n\n    function v() {\n      var t = Hr();\n      if (p(t)) return g(t);\n      a = setTimeout(v, function (t) {\n        var r = e - (t - c);\n        return f ? Xr(r, o - (t - l)) : r;\n      }(t));\n    }\n\n    function g(t) {\n      return a = void 0, h && i ? d(t) : (i = n = void 0, s);\n    }\n\n    function b() {\n      var t = Hr(),\n          r = p(t);\n\n      if (i = arguments, n = this, c = t, r) {\n        if (void 0 === a) return function (t) {\n          return l = t, a = setTimeout(v, e), u ? d(t) : s;\n        }(c);\n        if (f) return a = setTimeout(v, e), d(c);\n      }\n\n      return void 0 === a && (a = setTimeout(v, e)), s;\n    }\n\n    return e = Yr(e) || 0, $r(r) && (u = !!r.leading, o = (f = \"maxWait\" in r) ? Vr(Yr(r.maxWait) || 0, e) : o, h = \"trailing\" in r ? !!r.trailing : h), b.cancel = function () {\n      void 0 !== a && clearTimeout(a), l = 0, i = c = n = a = void 0;\n    }, b.flush = function () {\n      return void 0 === a ? s : g(Hr());\n    }, b;\n  }\n\n  function $r(t) {\n    var e = _typeof(t);\n\n    return !!t && (\"object\" == e || \"function\" == e);\n  }\n\n  function Yr(t) {\n    if (\"number\" == typeof t) return t;\n    if (function (t) {\n      return \"symbol\" == _typeof(t) || function (t) {\n        return !!t && \"object\" == _typeof(t);\n      }(t) && Fr.call(t) == Mr;\n    }(t)) return _r;\n\n    if ($r(t)) {\n      var e = \"function\" == typeof t.valueOf ? t.valueOf() : t;\n      t = $r(e) ? e + \"\" : e;\n    }\n\n    if (\"string\" != typeof t) return 0 === t ? t : +t;\n    t = t.replace(Cr, \"\");\n    var r = Wr.test(t);\n    return r || Nr.test(t) ? Ir(t.slice(2), r ? 2 : 8) : jr.test(t) ? _r : +t;\n  }\n\n  var Gr = function Gr(t, e, r) {\n    var i = !0,\n        n = !0;\n    if (\"function\" != typeof t) throw new TypeError(Rr);\n    return $r(r) && (i = \"leading\" in r ? !!r.leading : i, n = \"trailing\" in r ? !!r.trailing : n), qr(t, e, {\n      leading: i,\n      maxWait: e,\n      trailing: n\n    });\n  },\n      Ur = \"Expected a function\",\n      Qr = NaN,\n      Kr = \"[object Symbol]\",\n      Jr = /^\\s+|\\s+$/g,\n      Zr = /^[-+]0x[0-9a-f]+$/i,\n      ti = /^0b[01]+$/i,\n      ei = /^0o[0-7]+$/i,\n      ri = parseInt,\n      ii = \"object\" == _typeof(t) && t && t.Object === Object && t,\n      ni = \"object\" == (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self && self.Object === Object && self,\n      oi = ii || ni || Function(\"return this\")(),\n      si = Object.prototype.toString,\n      ai = Math.max,\n      ci = Math.min,\n      li = function li() {\n    return oi.Date.now();\n  };\n\n  function ui(t) {\n    var e = _typeof(t);\n\n    return !!t && (\"object\" == e || \"function\" == e);\n  }\n\n  function fi(t) {\n    if (\"number\" == typeof t) return t;\n    if (function (t) {\n      return \"symbol\" == _typeof(t) || function (t) {\n        return !!t && \"object\" == _typeof(t);\n      }(t) && si.call(t) == Kr;\n    }(t)) return Qr;\n\n    if (ui(t)) {\n      var e = \"function\" == typeof t.valueOf ? t.valueOf() : t;\n      t = ui(e) ? e + \"\" : e;\n    }\n\n    if (\"string\" != typeof t) return 0 === t ? t : +t;\n    t = t.replace(Jr, \"\");\n    var r = ti.test(t);\n    return r || ei.test(t) ? ri(t.slice(2), r ? 2 : 8) : Zr.test(t) ? Qr : +t;\n  }\n\n  var hi = function hi(t, e, r) {\n    var i,\n        n,\n        o,\n        s,\n        a,\n        c,\n        l = 0,\n        u = !1,\n        f = !1,\n        h = !0;\n    if (\"function\" != typeof t) throw new TypeError(Ur);\n\n    function d(e) {\n      var r = i,\n          o = n;\n      return i = n = void 0, l = e, s = t.apply(o, r);\n    }\n\n    function p(t) {\n      var r = t - c;\n      return void 0 === c || r >= e || r < 0 || f && t - l >= o;\n    }\n\n    function v() {\n      var t = li();\n      if (p(t)) return g(t);\n      a = setTimeout(v, function (t) {\n        var r = e - (t - c);\n        return f ? ci(r, o - (t - l)) : r;\n      }(t));\n    }\n\n    function g(t) {\n      return a = void 0, h && i ? d(t) : (i = n = void 0, s);\n    }\n\n    function b() {\n      var t = li(),\n          r = p(t);\n\n      if (i = arguments, n = this, c = t, r) {\n        if (void 0 === a) return function (t) {\n          return l = t, a = setTimeout(v, e), u ? d(t) : s;\n        }(c);\n        if (f) return a = setTimeout(v, e), d(c);\n      }\n\n      return void 0 === a && (a = setTimeout(v, e)), s;\n    }\n\n    return e = fi(e) || 0, ui(r) && (u = !!r.leading, o = (f = \"maxWait\" in r) ? ai(fi(r.maxWait) || 0, e) : o, h = \"trailing\" in r ? !!r.trailing : h), b.cancel = function () {\n      void 0 !== a && clearTimeout(a), l = 0, i = c = n = a = void 0;\n    }, b.flush = function () {\n      return void 0 === a ? s : g(li());\n    }, b;\n  },\n      di = \"Expected a function\",\n      pi = \"__lodash_hash_undefined__\",\n      vi = \"[object Function]\",\n      gi = \"[object GeneratorFunction]\",\n      bi = /^\\[object .+?Constructor\\]$/,\n      yi = \"object\" == _typeof(t) && t && t.Object === Object && t,\n      mi = \"object\" == (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self && self.Object === Object && self,\n      xi = yi || mi || Function(\"return this\")();\n\n  var Ei = Array.prototype,\n      wi = Function.prototype,\n      Si = Object.prototype,\n      Oi = xi[\"__core-js_shared__\"],\n      ki = function () {\n    var t = /[^.]+$/.exec(Oi && Oi.keys && Oi.keys.IE_PROTO || \"\");\n    return t ? \"Symbol(src)_1.\" + t : \"\";\n  }(),\n      Ai = wi.toString,\n      Ti = Si.hasOwnProperty,\n      Li = Si.toString,\n      zi = RegExp(\"^\" + Ai.call(Ti).replace(/[\\\\^$.*+?()[\\]{}|]/g, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\"),\n      Ri = Ei.splice,\n      _i = Di(xi, \"Map\"),\n      Mi = Di(Object, \"create\");\n\n  function Ci(t) {\n    var e = -1,\n        r = t ? t.length : 0;\n\n    for (this.clear(); ++e < r;) {\n      var i = t[e];\n      this.set(i[0], i[1]);\n    }\n  }\n\n  function ji(t) {\n    var e = -1,\n        r = t ? t.length : 0;\n\n    for (this.clear(); ++e < r;) {\n      var i = t[e];\n      this.set(i[0], i[1]);\n    }\n  }\n\n  function Wi(t) {\n    var e = -1,\n        r = t ? t.length : 0;\n\n    for (this.clear(); ++e < r;) {\n      var i = t[e];\n      this.set(i[0], i[1]);\n    }\n  }\n\n  function Ni(t, e) {\n    for (var r, i, n = t.length; n--;) {\n      if ((r = t[n][0]) === (i = e) || r != r && i != i) return n;\n    }\n\n    return -1;\n  }\n\n  function Ii(t) {\n    return !(!Fi(t) || (e = t, ki && ki in e)) && (function (t) {\n      var e = Fi(t) ? Li.call(t) : \"\";\n      return e == vi || e == gi;\n    }(t) || function (t) {\n      var e = !1;\n      if (null != t && \"function\" != typeof t.toString) try {\n        e = !!(t + \"\");\n      } catch (t) {}\n      return e;\n    }(t) ? zi : bi).test(function (t) {\n      if (null != t) {\n        try {\n          return Ai.call(t);\n        } catch (t) {}\n\n        try {\n          return t + \"\";\n        } catch (t) {}\n      }\n\n      return \"\";\n    }(t));\n    var e;\n  }\n\n  function Bi(t, e) {\n    var r,\n        i,\n        n = t.__data__;\n    return (\"string\" == (i = _typeof(r = e)) || \"number\" == i || \"symbol\" == i || \"boolean\" == i ? \"__proto__\" !== r : null === r) ? n[\"string\" == typeof e ? \"string\" : \"hash\"] : n.map;\n  }\n\n  function Di(t, e) {\n    var r = function (t, e) {\n      return null == t ? void 0 : t[e];\n    }(t, e);\n\n    return Ii(r) ? r : void 0;\n  }\n\n  function Pi(t, e) {\n    if (\"function\" != typeof t || e && \"function\" != typeof e) throw new TypeError(di);\n\n    var r = function r() {\n      var i = arguments,\n          n = e ? e.apply(this, i) : i[0],\n          o = r.cache;\n      if (o.has(n)) return o.get(n);\n      var s = t.apply(this, i);\n      return r.cache = o.set(n, s), s;\n    };\n\n    return r.cache = new (Pi.Cache || Wi)(), r;\n  }\n\n  function Fi(t) {\n    var e = _typeof(t);\n\n    return !!t && (\"object\" == e || \"function\" == e);\n  }\n\n  Ci.prototype.clear = function () {\n    this.__data__ = Mi ? Mi(null) : {};\n  }, Ci.prototype[\"delete\"] = function (t) {\n    return this.has(t) && delete this.__data__[t];\n  }, Ci.prototype.get = function (t) {\n    var e = this.__data__;\n\n    if (Mi) {\n      var r = e[t];\n      return r === pi ? void 0 : r;\n    }\n\n    return Ti.call(e, t) ? e[t] : void 0;\n  }, Ci.prototype.has = function (t) {\n    var e = this.__data__;\n    return Mi ? void 0 !== e[t] : Ti.call(e, t);\n  }, Ci.prototype.set = function (t, e) {\n    return this.__data__[t] = Mi && void 0 === e ? pi : e, this;\n  }, ji.prototype.clear = function () {\n    this.__data__ = [];\n  }, ji.prototype[\"delete\"] = function (t) {\n    var e = this.__data__,\n        r = Ni(e, t);\n    return !(r < 0) && (r == e.length - 1 ? e.pop() : Ri.call(e, r, 1), !0);\n  }, ji.prototype.get = function (t) {\n    var e = this.__data__,\n        r = Ni(e, t);\n    return r < 0 ? void 0 : e[r][1];\n  }, ji.prototype.has = function (t) {\n    return Ni(this.__data__, t) > -1;\n  }, ji.prototype.set = function (t, e) {\n    var r = this.__data__,\n        i = Ni(r, t);\n    return i < 0 ? r.push([t, e]) : r[i][1] = e, this;\n  }, Wi.prototype.clear = function () {\n    this.__data__ = {\n      hash: new Ci(),\n      map: new (_i || ji)(),\n      string: new Ci()\n    };\n  }, Wi.prototype[\"delete\"] = function (t) {\n    return Bi(this, t)[\"delete\"](t);\n  }, Wi.prototype.get = function (t) {\n    return Bi(this, t).get(t);\n  }, Wi.prototype.has = function (t) {\n    return Bi(this, t).has(t);\n  }, Wi.prototype.set = function (t, e) {\n    return Bi(this, t).set(t, e), this;\n  }, Pi.Cache = Wi;\n  var Vi,\n      Xi = Pi,\n      Hi = [],\n      qi = \"ResizeObserver loop completed with undelivered notifications.\";\n  !function (t) {\n    t.BORDER_BOX = \"border-box\", t.CONTENT_BOX = \"content-box\", t.DEVICE_PIXEL_CONTENT_BOX = \"device-pixel-content-box\";\n  }(Vi || (Vi = {}));\n\n  var $i,\n      Yi = function Yi(t) {\n    return Object.freeze(t);\n  },\n      Gi = function Gi(t, e) {\n    this.inlineSize = t, this.blockSize = e, Yi(this);\n  },\n      Ui = function () {\n    function t(t, e, r, i) {\n      return this.x = t, this.y = e, this.width = r, this.height = i, this.top = this.y, this.left = this.x, this.bottom = this.top + this.height, this.right = this.left + this.width, Yi(this);\n    }\n\n    return t.prototype.toJSON = function () {\n      var t = this;\n      return {\n        x: t.x,\n        y: t.y,\n        top: t.top,\n        right: t.right,\n        bottom: t.bottom,\n        left: t.left,\n        width: t.width,\n        height: t.height\n      };\n    }, t.fromRect = function (e) {\n      return new t(e.x, e.y, e.width, e.height);\n    }, t;\n  }(),\n      Qi = function Qi(t) {\n    return t instanceof SVGElement && \"getBBox\" in t;\n  },\n      Ki = function Ki(t) {\n    if (Qi(t)) {\n      var e = t.getBBox(),\n          r = e.width,\n          i = e.height;\n      return !r && !i;\n    }\n\n    var n = t,\n        o = n.offsetWidth,\n        s = n.offsetHeight;\n    return !(o || s || t.getClientRects().length);\n  },\n      Ji = function Ji(t) {\n    var e, r;\n    if (t instanceof Element) return !0;\n    var i = null === (r = null === (e = t) || void 0 === e ? void 0 : e.ownerDocument) || void 0 === r ? void 0 : r.defaultView;\n    return !!(i && t instanceof i.Element);\n  },\n      Zi = \"undefined\" != typeof window ? window : {},\n      tn = new WeakMap(),\n      en = /auto|scroll/,\n      rn = /^tb|vertical/,\n      nn = /msie|trident/i.test(Zi.navigator && Zi.navigator.userAgent),\n      on = function on(t) {\n    return parseFloat(t || \"0\");\n  },\n      sn = function sn(t, e, r) {\n    return void 0 === t && (t = 0), void 0 === e && (e = 0), void 0 === r && (r = !1), new Gi((r ? e : t) || 0, (r ? t : e) || 0);\n  },\n      an = Yi({\n    devicePixelContentBoxSize: sn(),\n    borderBoxSize: sn(),\n    contentBoxSize: sn(),\n    contentRect: new Ui(0, 0, 0, 0)\n  }),\n      cn = function cn(t, e) {\n    if (void 0 === e && (e = !1), tn.has(t) && !e) return tn.get(t);\n    if (Ki(t)) return tn.set(t, an), an;\n    var r = getComputedStyle(t),\n        i = Qi(t) && t.ownerSVGElement && t.getBBox(),\n        n = !nn && \"border-box\" === r.boxSizing,\n        o = rn.test(r.writingMode || \"\"),\n        s = !i && en.test(r.overflowY || \"\"),\n        a = !i && en.test(r.overflowX || \"\"),\n        c = i ? 0 : on(r.paddingTop),\n        l = i ? 0 : on(r.paddingRight),\n        u = i ? 0 : on(r.paddingBottom),\n        f = i ? 0 : on(r.paddingLeft),\n        h = i ? 0 : on(r.borderTopWidth),\n        d = i ? 0 : on(r.borderRightWidth),\n        p = i ? 0 : on(r.borderBottomWidth),\n        v = f + l,\n        g = c + u,\n        b = (i ? 0 : on(r.borderLeftWidth)) + d,\n        y = h + p,\n        m = a ? t.offsetHeight - y - t.clientHeight : 0,\n        x = s ? t.offsetWidth - b - t.clientWidth : 0,\n        E = n ? v + b : 0,\n        w = n ? g + y : 0,\n        S = i ? i.width : on(r.width) - E - x,\n        O = i ? i.height : on(r.height) - w - m,\n        k = S + v + x + b,\n        A = O + g + m + y,\n        T = Yi({\n      devicePixelContentBoxSize: sn(Math.round(S * devicePixelRatio), Math.round(O * devicePixelRatio), o),\n      borderBoxSize: sn(k, A, o),\n      contentBoxSize: sn(S, O, o),\n      contentRect: new Ui(f, c, S, O)\n    });\n    return tn.set(t, T), T;\n  },\n      ln = function ln(t, e, r) {\n    var i = cn(t, r),\n        n = i.borderBoxSize,\n        o = i.contentBoxSize,\n        s = i.devicePixelContentBoxSize;\n\n    switch (e) {\n      case Vi.DEVICE_PIXEL_CONTENT_BOX:\n        return s;\n\n      case Vi.BORDER_BOX:\n        return n;\n\n      default:\n        return o;\n    }\n  },\n      un = function un(t) {\n    var e = cn(t);\n    this.target = t, this.contentRect = e.contentRect, this.borderBoxSize = Yi([e.borderBoxSize]), this.contentBoxSize = Yi([e.contentBoxSize]), this.devicePixelContentBoxSize = Yi([e.devicePixelContentBoxSize]);\n  },\n      fn = function fn(t) {\n    if (Ki(t)) return 1 / 0;\n\n    for (var e = 0, r = t.parentNode; r;) {\n      e += 1, r = r.parentNode;\n    }\n\n    return e;\n  },\n      hn = function hn() {\n    var t = 1 / 0,\n        e = [];\n    Hi.forEach(function (r) {\n      if (0 !== r.activeTargets.length) {\n        var i = [];\n        r.activeTargets.forEach(function (e) {\n          var r = new un(e.target),\n              n = fn(e.target);\n          i.push(r), e.lastReportedSize = ln(e.target, e.observedBox), n < t && (t = n);\n        }), e.push(function () {\n          r.callback.call(r.observer, i, r.observer);\n        }), r.activeTargets.splice(0, r.activeTargets.length);\n      }\n    });\n\n    for (var r = 0, i = e; r < i.length; r++) {\n      (0, i[r])();\n    }\n\n    return t;\n  },\n      dn = function dn(t) {\n    Hi.forEach(function (e) {\n      e.activeTargets.splice(0, e.activeTargets.length), e.skippedTargets.splice(0, e.skippedTargets.length), e.observationTargets.forEach(function (r) {\n        r.isActive() && (fn(r.target) > t ? e.activeTargets.push(r) : e.skippedTargets.push(r));\n      });\n    });\n  },\n      pn = function pn() {\n    var t,\n        e = 0;\n\n    for (dn(e); Hi.some(function (t) {\n      return t.activeTargets.length > 0;\n    });) {\n      e = hn(), dn(e);\n    }\n\n    return Hi.some(function (t) {\n      return t.skippedTargets.length > 0;\n    }) && (\"function\" == typeof ErrorEvent ? t = new ErrorEvent(\"error\", {\n      message: qi\n    }) : ((t = document.createEvent(\"Event\")).initEvent(\"error\", !1, !1), t.message = qi), window.dispatchEvent(t)), e > 0;\n  },\n      vn = [],\n      gn = function gn(t) {\n    if (!$i) {\n      var e = 0,\n          r = document.createTextNode(\"\");\n      new MutationObserver(function () {\n        return vn.splice(0).forEach(function (t) {\n          return t();\n        });\n      }).observe(r, {\n        characterData: !0\n      }), $i = function $i() {\n        r.textContent = \"\" + (e ? e-- : e++);\n      };\n    }\n\n    vn.push(t), $i();\n  },\n      bn = 0,\n      yn = {\n    attributes: !0,\n    characterData: !0,\n    childList: !0,\n    subtree: !0\n  },\n      mn = [\"resize\", \"load\", \"transitionend\", \"animationend\", \"animationstart\", \"animationiteration\", \"keyup\", \"keydown\", \"mouseup\", \"mousedown\", \"mouseover\", \"mouseout\", \"blur\", \"focus\"],\n      xn = function xn(t) {\n    return void 0 === t && (t = 0), Date.now() + t;\n  },\n      En = !1,\n      wn = new (function () {\n    function t() {\n      var t = this;\n      this.stopped = !0, this.listener = function () {\n        return t.schedule();\n      };\n    }\n\n    return t.prototype.run = function (t) {\n      var e = this;\n\n      if (void 0 === t && (t = 250), !En) {\n        En = !0;\n        var r,\n            i = xn(t);\n        r = function r() {\n          var r = !1;\n\n          try {\n            r = pn();\n          } finally {\n            if (En = !1, t = i - xn(), !bn) return;\n            r ? e.run(1e3) : t > 0 ? e.run(t) : e.start();\n          }\n        }, gn(function () {\n          requestAnimationFrame(r);\n        });\n      }\n    }, t.prototype.schedule = function () {\n      this.stop(), this.run();\n    }, t.prototype.observe = function () {\n      var t = this,\n          e = function e() {\n        return t.observer && t.observer.observe(document.body, yn);\n      };\n\n      document.body ? e() : Zi.addEventListener(\"DOMContentLoaded\", e);\n    }, t.prototype.start = function () {\n      var t = this;\n      this.stopped && (this.stopped = !1, this.observer = new MutationObserver(this.listener), this.observe(), mn.forEach(function (e) {\n        return Zi.addEventListener(e, t.listener, !0);\n      }));\n    }, t.prototype.stop = function () {\n      var t = this;\n      this.stopped || (this.observer && this.observer.disconnect(), mn.forEach(function (e) {\n        return Zi.removeEventListener(e, t.listener, !0);\n      }), this.stopped = !0);\n    }, t;\n  }())(),\n      Sn = function Sn(t) {\n    !bn && t > 0 && wn.start(), !(bn += t) && wn.stop();\n  },\n      On = function () {\n    function t(t, e) {\n      this.target = t, this.observedBox = e || Vi.CONTENT_BOX, this.lastReportedSize = {\n        inlineSize: 0,\n        blockSize: 0\n      };\n    }\n\n    return t.prototype.isActive = function () {\n      var t,\n          e = ln(this.target, this.observedBox, !0);\n      return t = this.target, Qi(t) || function (t) {\n        switch (t.tagName) {\n          case \"INPUT\":\n            if (\"image\" !== t.type) break;\n\n          case \"VIDEO\":\n          case \"AUDIO\":\n          case \"EMBED\":\n          case \"OBJECT\":\n          case \"CANVAS\":\n          case \"IFRAME\":\n          case \"IMG\":\n            return !0;\n        }\n\n        return !1;\n      }(t) || \"inline\" !== getComputedStyle(t).display || (this.lastReportedSize = e), this.lastReportedSize.inlineSize !== e.inlineSize || this.lastReportedSize.blockSize !== e.blockSize;\n    }, t;\n  }(),\n      kn = function kn(t, e) {\n    this.activeTargets = [], this.skippedTargets = [], this.observationTargets = [], this.observer = t, this.callback = e;\n  },\n      An = new WeakMap(),\n      Tn = function Tn(t, e) {\n    for (var r = 0; r < t.length; r += 1) {\n      if (t[r].target === e) return r;\n    }\n\n    return -1;\n  },\n      Ln = function () {\n    function t() {}\n\n    return t.connect = function (t, e) {\n      var r = new kn(t, e);\n      An.set(t, r);\n    }, t.observe = function (t, e, r) {\n      var i = An.get(t),\n          n = 0 === i.observationTargets.length;\n      Tn(i.observationTargets, e) < 0 && (n && Hi.push(i), i.observationTargets.push(new On(e, r && r.box)), Sn(1), wn.schedule());\n    }, t.unobserve = function (t, e) {\n      var r = An.get(t),\n          i = Tn(r.observationTargets, e),\n          n = 1 === r.observationTargets.length;\n      i >= 0 && (n && Hi.splice(Hi.indexOf(r), 1), r.observationTargets.splice(i, 1), Sn(-1));\n    }, t.disconnect = function (t) {\n      var e = this,\n          r = An.get(t);\n      r.observationTargets.slice().forEach(function (r) {\n        return e.unobserve(t, r.target);\n      }), r.activeTargets.splice(0, r.activeTargets.length);\n    }, t;\n  }(),\n      zn = function () {\n    function t(t) {\n      if (0 === arguments.length) throw new TypeError(\"Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.\");\n      if (\"function\" != typeof t) throw new TypeError(\"Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.\");\n      Ln.connect(this, t);\n    }\n\n    return t.prototype.observe = function (t, e) {\n      if (0 === arguments.length) throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n      if (!Ji(t)) throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n      Ln.observe(this, t, e);\n    }, t.prototype.unobserve = function (t) {\n      if (0 === arguments.length) throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n      if (!Ji(t)) throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n      Ln.unobserve(this, t);\n    }, t.prototype.disconnect = function () {\n      Ln.disconnect(this);\n    }, t.toString = function () {\n      return \"function ResizeObserver () { [polyfill code] }\";\n    }, t;\n  }(),\n      Rn = function Rn(t) {\n    return function (e, r, i, n) {\n      Tt(r);\n      var o = zt(e),\n          s = b(o),\n          a = st(o.length),\n          c = t ? a - 1 : 0,\n          l = t ? -1 : 1;\n      if (i < 2) for (;;) {\n        if (c in s) {\n          n = s[c], c += l;\n          break;\n        }\n\n        if (c += l, t ? c < 0 : a <= c) throw TypeError(\"Reduce of empty array with no initial value\");\n      }\n\n      for (; t ? c >= 0 : a > c; c += l) {\n        c in s && (n = r(n, s[c], c, o));\n      }\n\n      return n;\n    };\n  },\n      _n = {\n    left: Rn(!1),\n    right: Rn(!0)\n  }.left;\n\n  At({\n    target: \"Array\",\n    proto: !0,\n    forced: Pt(\"reduce\")\n  }, {\n    reduce: function reduce(t) {\n      return _n(this, t, arguments.length, arguments.length > 1 ? arguments[1] : void 0);\n    }\n  });\n  var Mn = M.f,\n      Cn = Function.prototype,\n      jn = Cn.toString,\n      Wn = /^\\s*function ([^ (]*)/;\n  !l || \"name\" in Cn || Mn(Cn, \"name\", {\n    configurable: !0,\n    get: function get() {\n      try {\n        return jn.call(this).match(Wn)[1];\n      } catch (t) {\n        return \"\";\n      }\n    }\n  });\n\n  var Nn,\n      In,\n      Bn = function Bn() {\n    var t = R(this),\n        e = \"\";\n    return t.global && (e += \"g\"), t.ignoreCase && (e += \"i\"), t.multiline && (e += \"m\"), t.dotAll && (e += \"s\"), t.unicode && (e += \"u\"), t.sticky && (e += \"y\"), e;\n  },\n      Dn = RegExp.prototype.exec,\n      Pn = String.prototype.replace,\n      Fn = Dn,\n      Vn = (Nn = /a/, In = /b*/g, Dn.call(Nn, \"a\"), Dn.call(In, \"a\"), 0 !== Nn.lastIndex || 0 !== In.lastIndex),\n      Xn = void 0 !== /()??/.exec(\"\")[1];\n\n  (Vn || Xn) && (Fn = function Fn(t) {\n    var e,\n        r,\n        i,\n        n,\n        o = this;\n    return Xn && (r = new RegExp(\"^\" + o.source + \"$(?!\\\\s)\", Bn.call(o))), Vn && (e = o.lastIndex), i = Dn.call(o, t), Vn && i && (o.lastIndex = o.global ? i.index + i[0].length : e), Xn && i && i.length > 1 && Pn.call(i[0], r, function () {\n      for (n = 1; n < arguments.length - 2; n++) {\n        void 0 === arguments[n] && (i[n] = void 0);\n      }\n    }), i;\n  });\n  var Hn = Fn;\n  At({\n    target: \"RegExp\",\n    proto: !0,\n    forced: /./.exec !== Hn\n  }, {\n    exec: Hn\n  });\n\n  var qn = jt(\"species\"),\n      $n = !c(function () {\n    var t = /./;\n    return t.exec = function () {\n      var t = [];\n      return t.groups = {\n        a: \"7\"\n      }, t;\n    }, \"7\" !== \"\".replace(t, \"$<a>\");\n  }),\n      Yn = !c(function () {\n    var t = /(?:)/,\n        e = t.exec;\n\n    t.exec = function () {\n      return e.apply(this, arguments);\n    };\n\n    var r = \"ab\".split(t);\n    return 2 !== r.length || \"a\" !== r[0] || \"b\" !== r[1];\n  }),\n      Gn = function Gn(t, e, r, i) {\n    var n = jt(t),\n        o = !c(function () {\n      var e = {};\n      return e[n] = function () {\n        return 7;\n      }, 7 != \"\"[t](e);\n    }),\n        s = o && !c(function () {\n      var e = !1,\n          r = /a/;\n      return r.exec = function () {\n        return e = !0, null;\n      }, \"split\" === t && (r.constructor = {}, r.constructor[qn] = function () {\n        return r;\n      }), r[n](\"\"), !e;\n    });\n\n    if (!o || !s || \"replace\" === t && !$n || \"split\" === t && !Yn) {\n      var a = /./[n],\n          l = r(n, \"\"[t], function (t, e, r, i, n) {\n        return e.exec === Hn ? o && !n ? {\n          done: !0,\n          value: a.call(e, r, i)\n        } : {\n          done: !0,\n          value: t.call(r, e, i)\n        } : {\n          done: !1\n        };\n      }),\n          u = l[0],\n          f = l[1];\n      J(String.prototype, t, u), J(RegExp.prototype, n, 2 == e ? function (t, e) {\n        return f.call(t, this, e);\n      } : function (t) {\n        return f.call(t, this);\n      }), i && C(RegExp.prototype[n], \"sham\", !0);\n    }\n  },\n      Un = Ue.charAt,\n      Qn = function Qn(t, e, r) {\n    return e + (r ? Un(t, e).length : 1);\n  },\n      Kn = function Kn(t, e) {\n    var r = t.exec;\n\n    if (\"function\" == typeof r) {\n      var i = r.call(t, e);\n      if (\"object\" != _typeof(i)) throw TypeError(\"RegExp exec method returned something other than an Object or null\");\n      return i;\n    }\n\n    if (\"RegExp\" !== v(t)) throw TypeError(\"RegExp#exec called on incompatible receiver\");\n    return Hn.call(t, e);\n  };\n\n  Gn(\"match\", 1, function (t, e, r) {\n    return [function (e) {\n      var r = y(this),\n          i = null == e ? void 0 : e[t];\n      return void 0 !== i ? i.call(e, r) : new RegExp(e)[t](String(r));\n    }, function (t) {\n      var i = r(e, t, this);\n      if (i.done) return i.value;\n      var n = R(t),\n          o = String(this);\n      if (!n.global) return Kn(n, o);\n      var s = n.unicode;\n      n.lastIndex = 0;\n\n      for (var a, c = [], l = 0; null !== (a = Kn(n, o));) {\n        var u = String(a[0]);\n        c[l] = u, \"\" === u && (n.lastIndex = Qn(o, st(n.lastIndex), s)), l++;\n      }\n\n      return 0 === l ? null : c;\n    }];\n  });\n  var Jn = Math.max,\n      Zn = Math.min,\n      to = Math.floor,\n      eo = /\\$([$&'`]|\\d\\d?|<[^>]*>)/g,\n      ro = /\\$([$&'`]|\\d\\d?)/g;\n  Gn(\"replace\", 2, function (t, e, r) {\n    return [function (r, i) {\n      var n = y(this),\n          o = null == r ? void 0 : r[t];\n      return void 0 !== o ? o.call(r, n, i) : e.call(String(n), r, i);\n    }, function (t, n) {\n      var o = r(e, t, this, n);\n      if (o.done) return o.value;\n      var s = R(t),\n          a = String(this),\n          c = \"function\" == typeof n;\n      c || (n = String(n));\n      var l = s.global;\n\n      if (l) {\n        var u = s.unicode;\n        s.lastIndex = 0;\n      }\n\n      for (var f = [];;) {\n        var h = Kn(s, a);\n        if (null === h) break;\n        if (f.push(h), !l) break;\n        \"\" === String(h[0]) && (s.lastIndex = Qn(a, st(s.lastIndex), u));\n      }\n\n      for (var d, p = \"\", v = 0, g = 0; g < f.length; g++) {\n        h = f[g];\n\n        for (var b = String(h[0]), y = Jn(Zn(nt(h.index), a.length), 0), m = [], x = 1; x < h.length; x++) {\n          m.push(void 0 === (d = h[x]) ? d : String(d));\n        }\n\n        var E = h.groups;\n\n        if (c) {\n          var w = [b].concat(m, y, a);\n          void 0 !== E && w.push(E);\n          var S = String(n.apply(void 0, w));\n        } else S = i(b, a, y, m, E, n);\n\n        y >= v && (p += a.slice(v, y) + S, v = y + b.length);\n      }\n\n      return p + a.slice(v);\n    }];\n\n    function i(t, r, i, n, o, s) {\n      var a = i + t.length,\n          c = n.length,\n          l = ro;\n      return void 0 !== o && (o = zt(o), l = eo), e.call(s, l, function (e, s) {\n        var l;\n\n        switch (s.charAt(0)) {\n          case \"$\":\n            return \"$\";\n\n          case \"&\":\n            return t;\n\n          case \"`\":\n            return r.slice(0, i);\n\n          case \"'\":\n            return r.slice(a);\n\n          case \"<\":\n            l = o[s.slice(1, -1)];\n            break;\n\n          default:\n            var u = +s;\n            if (0 === u) return e;\n\n            if (u > c) {\n              var f = to(u / 10);\n              return 0 === f ? e : f <= c ? void 0 === n[f - 1] ? s.charAt(1) : n[f - 1] + s.charAt(1) : e;\n            }\n\n            l = n[u - 1];\n        }\n\n        return void 0 === l ? \"\" : l;\n      });\n    }\n  });\n\n  var io = function io(t) {\n    return Array.prototype.reduce.call(t, function (t, e) {\n      var r = e.name.match(/data-simplebar-(.+)/);\n\n      if (r) {\n        var i = r[1].replace(/\\W+(.)/g, function (t, e) {\n          return e.toUpperCase();\n        });\n\n        switch (e.value) {\n          case \"true\":\n            t[i] = !0;\n            break;\n\n          case \"false\":\n            t[i] = !1;\n            break;\n\n          case void 0:\n            t[i] = !0;\n            break;\n\n          default:\n            t[i] = e.value;\n        }\n      }\n\n      return t;\n    }, {});\n  };\n\n  function no(t) {\n    return t && t.ownerDocument && t.ownerDocument.defaultView ? t.ownerDocument.defaultView : window;\n  }\n\n  function oo(t) {\n    return t && t.ownerDocument ? t.ownerDocument : document;\n  }\n\n  var so = null,\n      ao = null;\n\n  function co(t) {\n    if (null === so) {\n      var e = oo(t);\n      if (void 0 === e) return so = 0;\n      var r = e.body,\n          i = e.createElement(\"div\");\n      i.classList.add(\"simplebar-hide-scrollbar\"), r.appendChild(i);\n      var n = i.getBoundingClientRect().right;\n      r.removeChild(i), so = n;\n    }\n\n    return so;\n  }\n\n  Yt && window.addEventListener(\"resize\", function () {\n    ao !== window.devicePixelRatio && (ao = window.devicePixelRatio, so = null);\n  });\n\n  var lo = function () {\n    function t(e, r) {\n      var i = this;\n      this.onScroll = function () {\n        var t = no(i.el);\n        i.scrollXTicking || (t.requestAnimationFrame(i.scrollX), i.scrollXTicking = !0), i.scrollYTicking || (t.requestAnimationFrame(i.scrollY), i.scrollYTicking = !0);\n      }, this.scrollX = function () {\n        i.axis.x.isOverflowing && (i.showScrollbar(\"x\"), i.positionScrollbar(\"x\")), i.scrollXTicking = !1;\n      }, this.scrollY = function () {\n        i.axis.y.isOverflowing && (i.showScrollbar(\"y\"), i.positionScrollbar(\"y\")), i.scrollYTicking = !1;\n      }, this.onMouseEnter = function () {\n        i.showScrollbar(\"x\"), i.showScrollbar(\"y\");\n      }, this.onMouseMove = function (t) {\n        i.mouseX = t.clientX, i.mouseY = t.clientY, (i.axis.x.isOverflowing || i.axis.x.forceVisible) && i.onMouseMoveForAxis(\"x\"), (i.axis.y.isOverflowing || i.axis.y.forceVisible) && i.onMouseMoveForAxis(\"y\");\n      }, this.onMouseLeave = function () {\n        i.onMouseMove.cancel(), (i.axis.x.isOverflowing || i.axis.x.forceVisible) && i.onMouseLeaveForAxis(\"x\"), (i.axis.y.isOverflowing || i.axis.y.forceVisible) && i.onMouseLeaveForAxis(\"y\"), i.mouseX = -1, i.mouseY = -1;\n      }, this.onWindowResize = function () {\n        i.scrollbarWidth = i.getScrollbarWidth(), i.hideNativeScrollbar();\n      }, this.hideScrollbars = function () {\n        i.axis.x.track.rect = i.axis.x.track.el.getBoundingClientRect(), i.axis.y.track.rect = i.axis.y.track.el.getBoundingClientRect(), i.isWithinBounds(i.axis.y.track.rect) || (i.axis.y.scrollbar.el.classList.remove(i.classNames.visible), i.axis.y.isVisible = !1), i.isWithinBounds(i.axis.x.track.rect) || (i.axis.x.scrollbar.el.classList.remove(i.classNames.visible), i.axis.x.isVisible = !1);\n      }, this.onPointerEvent = function (t) {\n        var e, r;\n        i.axis.x.track.rect = i.axis.x.track.el.getBoundingClientRect(), i.axis.y.track.rect = i.axis.y.track.el.getBoundingClientRect(), (i.axis.x.isOverflowing || i.axis.x.forceVisible) && (e = i.isWithinBounds(i.axis.x.track.rect)), (i.axis.y.isOverflowing || i.axis.y.forceVisible) && (r = i.isWithinBounds(i.axis.y.track.rect)), (e || r) && (t.preventDefault(), t.stopPropagation(), \"mousedown\" === t.type && (e && (i.axis.x.scrollbar.rect = i.axis.x.scrollbar.el.getBoundingClientRect(), i.isWithinBounds(i.axis.x.scrollbar.rect) ? i.onDragStart(t, \"x\") : i.onTrackClick(t, \"x\")), r && (i.axis.y.scrollbar.rect = i.axis.y.scrollbar.el.getBoundingClientRect(), i.isWithinBounds(i.axis.y.scrollbar.rect) ? i.onDragStart(t, \"y\") : i.onTrackClick(t, \"y\"))));\n      }, this.drag = function (e) {\n        var r = i.axis[i.draggedAxis].track,\n            n = r.rect[i.axis[i.draggedAxis].sizeAttr],\n            o = i.axis[i.draggedAxis].scrollbar,\n            s = i.contentWrapperEl[i.axis[i.draggedAxis].scrollSizeAttr],\n            a = parseInt(i.elStyles[i.axis[i.draggedAxis].sizeAttr], 10);\n        e.preventDefault(), e.stopPropagation();\n        var c = ((\"y\" === i.draggedAxis ? e.pageY : e.pageX) - r.rect[i.axis[i.draggedAxis].offsetAttr] - i.axis[i.draggedAxis].dragOffset) / (n - o.size) * (s - a);\n        \"x\" === i.draggedAxis && (c = i.isRtl && t.getRtlHelpers().isRtlScrollbarInverted ? c - (n + o.size) : c, c = i.isRtl && t.getRtlHelpers().isRtlScrollingInverted ? -c : c), i.contentWrapperEl[i.axis[i.draggedAxis].scrollOffsetAttr] = c;\n      }, this.onEndDrag = function (t) {\n        var e = oo(i.el),\n            r = no(i.el);\n        t.preventDefault(), t.stopPropagation(), i.el.classList.remove(i.classNames.dragging), e.removeEventListener(\"mousemove\", i.drag, !0), e.removeEventListener(\"mouseup\", i.onEndDrag, !0), i.removePreventClickId = r.setTimeout(function () {\n          e.removeEventListener(\"click\", i.preventClick, !0), e.removeEventListener(\"dblclick\", i.preventClick, !0), i.removePreventClickId = null;\n        });\n      }, this.preventClick = function (t) {\n        t.preventDefault(), t.stopPropagation();\n      }, this.el = e, this.minScrollbarWidth = 20, this.options = Object.assign({}, t.defaultOptions, {}, r), this.classNames = Object.assign({}, t.defaultOptions.classNames, {}, this.options.classNames), this.axis = {\n        x: {\n          scrollOffsetAttr: \"scrollLeft\",\n          sizeAttr: \"width\",\n          scrollSizeAttr: \"scrollWidth\",\n          offsetSizeAttr: \"offsetWidth\",\n          offsetAttr: \"left\",\n          overflowAttr: \"overflowX\",\n          dragOffset: 0,\n          isOverflowing: !0,\n          isVisible: !1,\n          forceVisible: !1,\n          track: {},\n          scrollbar: {}\n        },\n        y: {\n          scrollOffsetAttr: \"scrollTop\",\n          sizeAttr: \"height\",\n          scrollSizeAttr: \"scrollHeight\",\n          offsetSizeAttr: \"offsetHeight\",\n          offsetAttr: \"top\",\n          overflowAttr: \"overflowY\",\n          dragOffset: 0,\n          isOverflowing: !0,\n          isVisible: !1,\n          forceVisible: !1,\n          track: {},\n          scrollbar: {}\n        }\n      }, this.removePreventClickId = null, t.instances.has(this.el) || (this.recalculate = Gr(this.recalculate.bind(this), 64), this.onMouseMove = Gr(this.onMouseMove.bind(this), 64), this.hideScrollbars = hi(this.hideScrollbars.bind(this), this.options.timeout), this.onWindowResize = hi(this.onWindowResize.bind(this), 64, {\n        leading: !0\n      }), t.getRtlHelpers = Xi(t.getRtlHelpers), this.init());\n    }\n\n    t.getRtlHelpers = function () {\n      var e = document.createElement(\"div\");\n      e.innerHTML = '<div class=\"hs-dummy-scrollbar-size\"><div style=\"height: 200%; width: 200%; margin: 10px 0;\"></div></div>';\n      var r = e.firstElementChild;\n      document.body.appendChild(r);\n      var i = r.firstElementChild;\n      r.scrollLeft = 0;\n      var n = t.getOffset(r),\n          o = t.getOffset(i);\n      r.scrollLeft = 999;\n      var s = t.getOffset(i);\n      return {\n        isRtlScrollingInverted: n.left !== o.left && o.left - s.left != 0,\n        isRtlScrollbarInverted: n.left !== o.left\n      };\n    }, t.getOffset = function (t) {\n      var e = t.getBoundingClientRect(),\n          r = oo(t),\n          i = no(t);\n      return {\n        top: e.top + (i.pageYOffset || r.documentElement.scrollTop),\n        left: e.left + (i.pageXOffset || r.documentElement.scrollLeft)\n      };\n    };\n    var e = t.prototype;\n    return e.init = function () {\n      t.instances.set(this.el, this), Yt && (this.initDOM(), this.scrollbarWidth = this.getScrollbarWidth(), this.recalculate(), this.initListeners());\n    }, e.initDOM = function () {\n      var t = this;\n      if (Array.prototype.filter.call(this.el.children, function (e) {\n        return e.classList.contains(t.classNames.wrapper);\n      }).length) this.wrapperEl = this.el.querySelector(\".\" + this.classNames.wrapper), this.contentWrapperEl = this.options.scrollableNode || this.el.querySelector(\".\" + this.classNames.contentWrapper), this.contentEl = this.options.contentNode || this.el.querySelector(\".\" + this.classNames.contentEl), this.offsetEl = this.el.querySelector(\".\" + this.classNames.offset), this.maskEl = this.el.querySelector(\".\" + this.classNames.mask), this.placeholderEl = this.findChild(this.wrapperEl, \".\" + this.classNames.placeholder), this.heightAutoObserverWrapperEl = this.el.querySelector(\".\" + this.classNames.heightAutoObserverWrapperEl), this.heightAutoObserverEl = this.el.querySelector(\".\" + this.classNames.heightAutoObserverEl), this.axis.x.track.el = this.findChild(this.el, \".\" + this.classNames.track + \".\" + this.classNames.horizontal), this.axis.y.track.el = this.findChild(this.el, \".\" + this.classNames.track + \".\" + this.classNames.vertical);else {\n        for (this.wrapperEl = document.createElement(\"div\"), this.contentWrapperEl = document.createElement(\"div\"), this.offsetEl = document.createElement(\"div\"), this.maskEl = document.createElement(\"div\"), this.contentEl = document.createElement(\"div\"), this.placeholderEl = document.createElement(\"div\"), this.heightAutoObserverWrapperEl = document.createElement(\"div\"), this.heightAutoObserverEl = document.createElement(\"div\"), this.wrapperEl.classList.add(this.classNames.wrapper), this.contentWrapperEl.classList.add(this.classNames.contentWrapper), this.offsetEl.classList.add(this.classNames.offset), this.maskEl.classList.add(this.classNames.mask), this.contentEl.classList.add(this.classNames.contentEl), this.placeholderEl.classList.add(this.classNames.placeholder), this.heightAutoObserverWrapperEl.classList.add(this.classNames.heightAutoObserverWrapperEl), this.heightAutoObserverEl.classList.add(this.classNames.heightAutoObserverEl); this.el.firstChild;) {\n          this.contentEl.appendChild(this.el.firstChild);\n        }\n\n        this.contentWrapperEl.appendChild(this.contentEl), this.offsetEl.appendChild(this.contentWrapperEl), this.maskEl.appendChild(this.offsetEl), this.heightAutoObserverWrapperEl.appendChild(this.heightAutoObserverEl), this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl), this.wrapperEl.appendChild(this.maskEl), this.wrapperEl.appendChild(this.placeholderEl), this.el.appendChild(this.wrapperEl);\n      }\n\n      if (!this.axis.x.track.el || !this.axis.y.track.el) {\n        var e = document.createElement(\"div\"),\n            r = document.createElement(\"div\");\n        e.classList.add(this.classNames.track), r.classList.add(this.classNames.scrollbar), e.appendChild(r), this.axis.x.track.el = e.cloneNode(!0), this.axis.x.track.el.classList.add(this.classNames.horizontal), this.axis.y.track.el = e.cloneNode(!0), this.axis.y.track.el.classList.add(this.classNames.vertical), this.el.appendChild(this.axis.x.track.el), this.el.appendChild(this.axis.y.track.el);\n      }\n\n      this.axis.x.scrollbar.el = this.axis.x.track.el.querySelector(\".\" + this.classNames.scrollbar), this.axis.y.scrollbar.el = this.axis.y.track.el.querySelector(\".\" + this.classNames.scrollbar), this.options.autoHide || (this.axis.x.scrollbar.el.classList.add(this.classNames.visible), this.axis.y.scrollbar.el.classList.add(this.classNames.visible)), this.el.setAttribute(\"data-simplebar\", \"init\");\n    }, e.initListeners = function () {\n      var t = this,\n          e = no(this.el);\n      this.options.autoHide && this.el.addEventListener(\"mouseenter\", this.onMouseEnter), [\"mousedown\", \"click\", \"dblclick\"].forEach(function (e) {\n        t.el.addEventListener(e, t.onPointerEvent, !0);\n      }), [\"touchstart\", \"touchend\", \"touchmove\"].forEach(function (e) {\n        t.el.addEventListener(e, t.onPointerEvent, {\n          capture: !0,\n          passive: !0\n        });\n      }), this.el.addEventListener(\"mousemove\", this.onMouseMove), this.el.addEventListener(\"mouseleave\", this.onMouseLeave), this.contentWrapperEl.addEventListener(\"scroll\", this.onScroll), e.addEventListener(\"resize\", this.onWindowResize);\n      var r = !1,\n          i = e.ResizeObserver || zn;\n      this.resizeObserver = new i(function () {\n        r && t.recalculate();\n      }), this.resizeObserver.observe(this.el), this.resizeObserver.observe(this.contentEl), e.requestAnimationFrame(function () {\n        r = !0;\n      }), this.mutationObserver = new e.MutationObserver(this.recalculate), this.mutationObserver.observe(this.contentEl, {\n        childList: !0,\n        subtree: !0,\n        characterData: !0\n      });\n    }, e.recalculate = function () {\n      var t = no(this.el);\n      this.elStyles = t.getComputedStyle(this.el), this.isRtl = \"rtl\" === this.elStyles.direction;\n      var e = this.heightAutoObserverEl.offsetHeight <= 1,\n          r = this.heightAutoObserverEl.offsetWidth <= 1,\n          i = this.contentEl.offsetWidth,\n          n = this.contentWrapperEl.offsetWidth,\n          o = this.elStyles.overflowX,\n          s = this.elStyles.overflowY;\n      this.contentEl.style.padding = this.elStyles.paddingTop + \" \" + this.elStyles.paddingRight + \" \" + this.elStyles.paddingBottom + \" \" + this.elStyles.paddingLeft, this.wrapperEl.style.margin = \"-\" + this.elStyles.paddingTop + \" -\" + this.elStyles.paddingRight + \" -\" + this.elStyles.paddingBottom + \" -\" + this.elStyles.paddingLeft;\n      var a = this.contentEl.scrollHeight,\n          c = this.contentEl.scrollWidth;\n      this.contentWrapperEl.style.height = e ? \"auto\" : \"100%\", this.placeholderEl.style.width = r ? i + \"px\" : \"auto\", this.placeholderEl.style.height = a + \"px\";\n      var l = this.contentWrapperEl.offsetHeight;\n      this.axis.x.isOverflowing = c > i, this.axis.y.isOverflowing = a > l, this.axis.x.isOverflowing = \"hidden\" !== o && this.axis.x.isOverflowing, this.axis.y.isOverflowing = \"hidden\" !== s && this.axis.y.isOverflowing, this.axis.x.forceVisible = \"x\" === this.options.forceVisible || !0 === this.options.forceVisible, this.axis.y.forceVisible = \"y\" === this.options.forceVisible || !0 === this.options.forceVisible, this.hideNativeScrollbar();\n      var u = this.axis.x.isOverflowing ? this.scrollbarWidth : 0,\n          f = this.axis.y.isOverflowing ? this.scrollbarWidth : 0;\n      this.axis.x.isOverflowing = this.axis.x.isOverflowing && c > n - f, this.axis.y.isOverflowing = this.axis.y.isOverflowing && a > l - u, this.axis.x.scrollbar.size = this.getScrollbarSize(\"x\"), this.axis.y.scrollbar.size = this.getScrollbarSize(\"y\"), this.axis.x.scrollbar.el.style.width = this.axis.x.scrollbar.size + \"px\", this.axis.y.scrollbar.el.style.height = this.axis.y.scrollbar.size + \"px\", this.positionScrollbar(\"x\"), this.positionScrollbar(\"y\"), this.toggleTrackVisibility(\"x\"), this.toggleTrackVisibility(\"y\");\n    }, e.getScrollbarSize = function (t) {\n      if (void 0 === t && (t = \"y\"), !this.axis[t].isOverflowing) return 0;\n      var e,\n          r = this.contentEl[this.axis[t].scrollSizeAttr],\n          i = this.axis[t].track.el[this.axis[t].offsetSizeAttr],\n          n = i / r;\n      return e = Math.max(~~(n * i), this.options.scrollbarMinSize), this.options.scrollbarMaxSize && (e = Math.min(e, this.options.scrollbarMaxSize)), e;\n    }, e.positionScrollbar = function (e) {\n      if (void 0 === e && (e = \"y\"), this.axis[e].isOverflowing) {\n        var r = this.contentWrapperEl[this.axis[e].scrollSizeAttr],\n            i = this.axis[e].track.el[this.axis[e].offsetSizeAttr],\n            n = parseInt(this.elStyles[this.axis[e].sizeAttr], 10),\n            o = this.axis[e].scrollbar,\n            s = this.contentWrapperEl[this.axis[e].scrollOffsetAttr],\n            a = (s = \"x\" === e && this.isRtl && t.getRtlHelpers().isRtlScrollingInverted ? -s : s) / (r - n),\n            c = ~~((i - o.size) * a);\n        c = \"x\" === e && this.isRtl && t.getRtlHelpers().isRtlScrollbarInverted ? c + (i - o.size) : c, o.el.style.transform = \"x\" === e ? \"translate3d(\" + c + \"px, 0, 0)\" : \"translate3d(0, \" + c + \"px, 0)\";\n      }\n    }, e.toggleTrackVisibility = function (t) {\n      void 0 === t && (t = \"y\");\n      var e = this.axis[t].track.el,\n          r = this.axis[t].scrollbar.el;\n      this.axis[t].isOverflowing || this.axis[t].forceVisible ? (e.style.visibility = \"visible\", this.contentWrapperEl.style[this.axis[t].overflowAttr] = \"scroll\") : (e.style.visibility = \"hidden\", this.contentWrapperEl.style[this.axis[t].overflowAttr] = \"hidden\"), this.axis[t].isOverflowing ? r.style.display = \"block\" : r.style.display = \"none\";\n    }, e.hideNativeScrollbar = function () {\n      this.offsetEl.style[this.isRtl ? \"left\" : \"right\"] = this.axis.y.isOverflowing || this.axis.y.forceVisible ? \"-\" + this.scrollbarWidth + \"px\" : 0, this.offsetEl.style.bottom = this.axis.x.isOverflowing || this.axis.x.forceVisible ? \"-\" + this.scrollbarWidth + \"px\" : 0;\n    }, e.onMouseMoveForAxis = function (t) {\n      void 0 === t && (t = \"y\"), this.axis[t].track.rect = this.axis[t].track.el.getBoundingClientRect(), this.axis[t].scrollbar.rect = this.axis[t].scrollbar.el.getBoundingClientRect(), this.isWithinBounds(this.axis[t].scrollbar.rect) ? this.axis[t].scrollbar.el.classList.add(this.classNames.hover) : this.axis[t].scrollbar.el.classList.remove(this.classNames.hover), this.isWithinBounds(this.axis[t].track.rect) ? (this.showScrollbar(t), this.axis[t].track.el.classList.add(this.classNames.hover)) : this.axis[t].track.el.classList.remove(this.classNames.hover);\n    }, e.onMouseLeaveForAxis = function (t) {\n      void 0 === t && (t = \"y\"), this.axis[t].track.el.classList.remove(this.classNames.hover), this.axis[t].scrollbar.el.classList.remove(this.classNames.hover);\n    }, e.showScrollbar = function (t) {\n      void 0 === t && (t = \"y\");\n      var e = this.axis[t].scrollbar.el;\n      this.axis[t].isVisible || (e.classList.add(this.classNames.visible), this.axis[t].isVisible = !0), this.options.autoHide && this.hideScrollbars();\n    }, e.onDragStart = function (t, e) {\n      void 0 === e && (e = \"y\");\n      var r = oo(this.el),\n          i = no(this.el),\n          n = this.axis[e].scrollbar,\n          o = \"y\" === e ? t.pageY : t.pageX;\n      this.axis[e].dragOffset = o - n.rect[this.axis[e].offsetAttr], this.draggedAxis = e, this.el.classList.add(this.classNames.dragging), r.addEventListener(\"mousemove\", this.drag, !0), r.addEventListener(\"mouseup\", this.onEndDrag, !0), null === this.removePreventClickId ? (r.addEventListener(\"click\", this.preventClick, !0), r.addEventListener(\"dblclick\", this.preventClick, !0)) : (i.clearTimeout(this.removePreventClickId), this.removePreventClickId = null);\n    }, e.onTrackClick = function (t, e) {\n      var r = this;\n\n      if (void 0 === e && (e = \"y\"), this.options.clickOnTrack) {\n        var i = no(this.el);\n        this.axis[e].scrollbar.rect = this.axis[e].scrollbar.el.getBoundingClientRect();\n        var n = this.axis[e].scrollbar.rect[this.axis[e].offsetAttr],\n            o = parseInt(this.elStyles[this.axis[e].sizeAttr], 10),\n            s = this.contentWrapperEl[this.axis[e].scrollOffsetAttr],\n            a = (\"y\" === e ? this.mouseY - n : this.mouseX - n) < 0 ? -1 : 1,\n            c = -1 === a ? s - o : s + o;\n        !function t() {\n          var n, o;\n          -1 === a ? s > c && (s -= r.options.clickOnTrackSpeed, r.contentWrapperEl.scrollTo(((n = {})[r.axis[e].offsetAttr] = s, n)), i.requestAnimationFrame(t)) : s < c && (s += r.options.clickOnTrackSpeed, r.contentWrapperEl.scrollTo(((o = {})[r.axis[e].offsetAttr] = s, o)), i.requestAnimationFrame(t));\n        }();\n      }\n    }, e.getContentElement = function () {\n      return this.contentEl;\n    }, e.getScrollElement = function () {\n      return this.contentWrapperEl;\n    }, e.getScrollbarWidth = function () {\n      try {\n        return \"none\" === getComputedStyle(this.contentWrapperEl, \"::-webkit-scrollbar\").display || \"scrollbarWidth\" in document.documentElement.style || \"-ms-overflow-style\" in document.documentElement.style ? 0 : co(this.el);\n      } catch (t) {\n        return co(this.el);\n      }\n    }, e.removeListeners = function () {\n      var t = this,\n          e = no(this.el);\n      this.options.autoHide && this.el.removeEventListener(\"mouseenter\", this.onMouseEnter), [\"mousedown\", \"click\", \"dblclick\"].forEach(function (e) {\n        t.el.removeEventListener(e, t.onPointerEvent, !0);\n      }), [\"touchstart\", \"touchend\", \"touchmove\"].forEach(function (e) {\n        t.el.removeEventListener(e, t.onPointerEvent, {\n          capture: !0,\n          passive: !0\n        });\n      }), this.el.removeEventListener(\"mousemove\", this.onMouseMove), this.el.removeEventListener(\"mouseleave\", this.onMouseLeave), this.contentWrapperEl && this.contentWrapperEl.removeEventListener(\"scroll\", this.onScroll), e.removeEventListener(\"resize\", this.onWindowResize), this.mutationObserver && this.mutationObserver.disconnect(), this.resizeObserver && this.resizeObserver.disconnect(), this.recalculate.cancel(), this.onMouseMove.cancel(), this.hideScrollbars.cancel(), this.onWindowResize.cancel();\n    }, e.unMount = function () {\n      this.removeListeners(), t.instances[\"delete\"](this.el);\n    }, e.isWithinBounds = function (t) {\n      return this.mouseX >= t.left && this.mouseX <= t.left + t.width && this.mouseY >= t.top && this.mouseY <= t.top + t.height;\n    }, e.findChild = function (t, e) {\n      var r = t.matches || t.webkitMatchesSelector || t.mozMatchesSelector || t.msMatchesSelector;\n      return Array.prototype.filter.call(t.children, function (t) {\n        return r.call(t, e);\n      })[0];\n    }, t;\n  }();\n\n  return lo.defaultOptions = {\n    autoHide: !0,\n    forceVisible: !1,\n    clickOnTrack: !0,\n    clickOnTrackSpeed: 40,\n    classNames: {\n      contentEl: \"simplebar-content\",\n      contentWrapper: \"simplebar-content-wrapper\",\n      offset: \"simplebar-offset\",\n      mask: \"simplebar-mask\",\n      wrapper: \"simplebar-wrapper\",\n      placeholder: \"simplebar-placeholder\",\n      scrollbar: \"simplebar-scrollbar\",\n      track: \"simplebar-track\",\n      heightAutoObserverWrapperEl: \"simplebar-height-auto-observer-wrapper\",\n      heightAutoObserverEl: \"simplebar-height-auto-observer\",\n      visible: \"simplebar-visible\",\n      horizontal: \"simplebar-horizontal\",\n      vertical: \"simplebar-vertical\",\n      hover: \"simplebar-hover\",\n      dragging: \"simplebar-dragging\"\n    },\n    scrollbarMinSize: 25,\n    scrollbarMaxSize: 0,\n    timeout: 1e3\n  }, lo.instances = new WeakMap(), lo.initDOMLoadedElements = function () {\n    document.removeEventListener(\"DOMContentLoaded\", this.initDOMLoadedElements), window.removeEventListener(\"load\", this.initDOMLoadedElements), Array.prototype.forEach.call(document.querySelectorAll(\"[data-simplebar]\"), function (t) {\n      \"init\" === t.getAttribute(\"data-simplebar\") || lo.instances.has(t) || new lo(t, io(t.attributes));\n    });\n  }, lo.removeObserver = function () {\n    this.globalObserver.disconnect();\n  }, lo.initHtmlApi = function () {\n    this.initDOMLoadedElements = this.initDOMLoadedElements.bind(this), \"undefined\" != typeof MutationObserver && (this.globalObserver = new MutationObserver(lo.handleMutations), this.globalObserver.observe(document, {\n      childList: !0,\n      subtree: !0\n    })), \"complete\" === document.readyState || \"loading\" !== document.readyState && !document.documentElement.doScroll ? window.setTimeout(this.initDOMLoadedElements) : (document.addEventListener(\"DOMContentLoaded\", this.initDOMLoadedElements), window.addEventListener(\"load\", this.initDOMLoadedElements));\n  }, lo.handleMutations = function (t) {\n    t.forEach(function (t) {\n      Array.prototype.forEach.call(t.addedNodes, function (t) {\n        1 === t.nodeType && (t.hasAttribute(\"data-simplebar\") ? !lo.instances.has(t) && document.documentElement.contains(t) && new lo(t, io(t.attributes)) : Array.prototype.forEach.call(t.querySelectorAll(\"[data-simplebar]\"), function (t) {\n          \"init\" !== t.getAttribute(\"data-simplebar\") && !lo.instances.has(t) && document.documentElement.contains(t) && new lo(t, io(t.attributes));\n        }));\n      }), Array.prototype.forEach.call(t.removedNodes, function (t) {\n        1 === t.nodeType && (\"init\" === t.getAttribute(\"data-simplebar\") ? lo.instances.has(t) && !document.documentElement.contains(t) && lo.instances.get(t).unMount() : Array.prototype.forEach.call(t.querySelectorAll('[data-simplebar=\"init\"]'), function (t) {\n          lo.instances.has(t) && !document.documentElement.contains(t) && lo.instances.get(t).unMount();\n        }));\n      });\n    });\n  }, lo.getOptions = io, Yt && lo.initHtmlApi(), lo;\n});\n\n}).call(this)}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}]},{},[9])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJqcy9jdXN0b20vYW9zLmpzIiwianMvY3VzdG9tL2Jvb3RzdHJhcC5jdXN0b20uanMiLCJqcy9jdXN0b20vY2hvaWNlcy5qcyIsImpzL2N1c3RvbS9qcXVlcnkuZ2xvYmFsLmpzIiwianMvY3VzdG9tL21vZGVfc3dpdGNoZXIuanMiLCJqcy9jdXN0b20vcGFnZS1zaWRlYmFyLmpzIiwianMvY3VzdG9tL3ByZWxvYWRlci5qcyIsImpzL2N1c3RvbS92YWxpZGF0aW9uLmpzIiwianMvdGhlbWUuanMiLCJub2RlX21vZHVsZXMvYW9zL2Rpc3QvYW9zLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9zcmMvdXRpbC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvc3JjL2RvbS9ldmVudC1oYW5kbGVyLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9zcmMvZG9tL2RhdGEuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL3NyYy9iYXNlLWNvbXBvbmVudC5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvc3JjL3V0aWwvY29tcG9uZW50LWZ1bmN0aW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvc3JjL2FsZXJ0LmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9zcmMvYnV0dG9uLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9zcmMvZG9tL21hbmlwdWxhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9zcmMvZG9tL3NlbGVjdG9yLWVuZ2luZS5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvc3JjL2Nhcm91c2VsLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9zcmMvY29sbGFwc2UuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZW51bXMuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldE5vZGVOYW1lLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3cuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2luc3RhbmNlT2YuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2FwcGx5U3R5bGVzLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvY29udGFpbnMuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldENvbXB1dGVkU3R5bGUuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2lzVGFibGVFbGVtZW50LmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFBhcmVudE5vZGUuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvbWF0aC5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy93aXRoaW4uanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0RnJlc2hTaWRlT2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21lcmdlUGFkZGluZ09iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9leHBhbmRUb0hhc2hNYXAuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2Fycm93LmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldFZhcmlhdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvd1Njcm9sbC5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0V2luZG93U2Nyb2xsQmFyWC5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Vmlld3BvcnRSZWN0LmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXREb2N1bWVudFJlY3QuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2lzU2Nyb2xsUGFyZW50LmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRTY3JvbGxQYXJlbnQuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2xpc3RTY3JvbGxQYXJlbnRzLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3JlY3RUb0NsaWVudFJlY3QuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldENsaXBwaW5nUmVjdC5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlT2Zmc2V0cy5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9kZXRlY3RPdmVyZmxvdy5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvZmxpcC5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvaGlkZS5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvb2Zmc2V0LmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEFsdEF4aXMuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL3ByZXZlbnRPdmVyZmxvdy5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0SFRNTEVsZW1lbnRTY3JvbGwuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldE5vZGVTY3JvbGwuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldENvbXBvc2l0ZVJlY3QuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvb3JkZXJNb2RpZmllcnMuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZGVib3VuY2UuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvbWVyZ2VCeU5hbWUuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvY3JlYXRlUG9wcGVyLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3BvcHBlci1saXRlLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3BvcHBlci5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvc3JjL2Ryb3Bkb3duLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9zcmMvdXRpbC9zY3JvbGxiYXIuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL3NyYy91dGlsL2JhY2tkcm9wLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9zcmMvdXRpbC9mb2N1c3RyYXAuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL3NyYy9tb2RhbC5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvc3JjL29mZmNhbnZhcy5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvc3JjL3V0aWwvc2FuaXRpemVyLmpzIiwibm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9qcy9zcmMvdG9vbHRpcC5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvc3JjL3BvcG92ZXIuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL3NyYy9zY3JvbGxzcHkuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL3NyYy90YWIuanMiLCJub2RlX21vZHVsZXMvYm9vdHN0cmFwL2pzL3NyYy90b2FzdC5qcyIsIm5vZGVfbW9kdWxlcy9ib290c3RyYXAvanMvaW5kZXgudW1kLmpzIiwibm9kZV9tb2R1bGVzL2Nob2ljZXMuanMvcHVibGljL2Fzc2V0cy9zY3JpcHRzL2Nob2ljZXMuanMiLCJub2RlX21vZHVsZXMvY291bnR1cC5qcy9kaXN0L2NvdW50VXAubWluLmpzIiwibm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIm5vZGVfbW9kdWxlcy9zaW1wbGViYXIvZGlzdC9zaW1wbGViYXIubWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNFQTs7QUFGQTtBQUNBLElBQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFELENBQW5COztBQUdBLEdBQUcsQ0FBQyxJQUFKLENBQVM7QUFDUCxFQUFBLFVBQVUsRUFBRSxNQURMO0FBRVAsRUFBQSxRQUFRLEVBQUUsR0FGSDtBQUdQLEVBQUEsS0FBSyxFQUFFLEVBSEE7QUFJUCxFQUFBLE1BQU0sRUFBRSxFQUpEO0FBS1AsRUFBQSxJQUFJLEVBQUU7QUFMQyxDQUFUOztBQU9BLFNBQVMsT0FBVCxDQUFpQixFQUFqQixFQUFxQjtBQUNuQixNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBSCxDQUFXLEVBQVgs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Q0FBYSxHQUFiLENBQWlCLENBQWpCLEtBQXFCLENBQUMsUUFBUSxDQUFDLGVBQVQsQ0FBeUIsUUFBekIsQ0FBa0MsQ0FBbEMsQ0FBdEIsSUFBNEQsRUFBRSxDQUFDLFNBQUgsQ0FBYSxHQUFiLENBQWlCLENBQWpCLEVBQW9CLE9BQXBCLEVBQXRHLEdBQW9JLEtBQUssQ0FBQyxTQUFOLENBQWdCLE9BQWhCLENBQXdCLElBQXhCLENBQTZCLENBQUMsQ0FBQyxnQkFBRixDQUFtQix5QkFBbkIsQ0FBN0IsRUFBNEUsVUFBUyxDQUFULEVBQVc7QUFBQyxVQUFBLEVBQUUsQ0FBQyxTQUFILENBQWEsR0FBYixDQUFpQixDQUFqQixLQUFxQixDQUFDLFFBQVEsQ0FBQyxlQUFULENBQXlCLFFBQXpCLENBQWtDLENBQWxDLENBQXRCLElBQTRELEVBQUUsQ0FBQyxTQUFILENBQWEsR0FBYixDQUFpQixDQUFqQixFQUFvQixPQUFwQixFQUE1RDtBQUEwRixTQUFsTCxDQUFySjtBQUEyVSxPQUFwWSxDQUExWjtBQUFpeUIsS0FBeHpCO0FBQTJ6QixHQUFyOEUsRUFBczhFLEVBQUUsQ0FBQyxVQUFILEdBQWMsRUFBcDlFLEVBQXU5RSxFQUFFLElBQUUsRUFBRSxDQUFDLFdBQUgsRUFBMzlFLEVBQTQrRSxFQUFuL0U7QUFBcy9FLENBQTFxeUQsQ0FBRCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIi8vQW9zIGFuaW1hdGlvbiArIENvdW50dXAgb24gYW9zLWluaXRcclxuY29uc3QgQU9TID0gcmVxdWlyZSgnYW9zJyk7XHJcbmltcG9ydCB7IENvdW50VXAgfSBmcm9tICdjb3VudHVwLmpzJztcclxuXHJcbkFPUy5pbml0KHtcclxuICBzdGFydEV2ZW50OiAnbG9hZCcsXHJcbiAgZHVyYXRpb246IDc1MCxcclxuICBkZWxheTogNTAsXHJcbiAgb2Zmc2V0OiA2MCxcclxuICBvbmNlOiB0cnVlXHJcbn0pO1xyXG5mdW5jdGlvbiBjb3VudEl0KGVsKSB7XHJcbiAgY29uc3QgTnVtID0gZWwuZGF0YXNldC50byA/ICtlbC5kYXRhc2V0LnRvIDogbnVsbCxcclxuICAgIG4gPSBlbC5kYXRhc2V0LmNvdW50dXAgPyBKU09OLnBhcnNlKGVsLmRhdGFzZXQuY291bnR1cCkgOiB7fTtcclxuICBuZXcgQ291bnRVcChlbCwgTnVtLCBuKS5zdGFydCgpXHJcbn07XHJcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1jb3VudHVwXVwiKS5mb3JFYWNoKGVsID0+IHsgXCJjb3VudHVwOmluXCIgIT09IGVsLmdldEF0dHJpYnV0ZShcImRhdGEtYW9zLWlkXCIpICYmIGNvdW50SXQoZWwpIH0pLFxyXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJhb3M6aW46Y291bnR1cDppblwiLCAoZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAoXHJcbiAgICAgIGVsLmRldGFpbCBpbnN0YW5jZW9mIEVsZW1lbnQgPyBbZWwuZGV0YWlsXSA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5hb3MtYW5pbWF0ZVtkYXRhLWFvcy1pZD1cImNvdW50dXA6aW5cIl0nKSkuZm9yRWFjaChlbCA9PiB7IGNvdW50SXQoZWwpIH0pXHJcbiAgfSkpO1xyXG5cclxuLy9QcmljaW5nIGNvdW50dXBcclxuICBjb25zdCBwcmljZUNvdW50VXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1hcy10b2dnbGU9XCJwcmljZVwiXScpO1xyXG4gIHByaWNlQ291bnRVcC5mb3JFYWNoKChlbCkgPT4ge1xyXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoZWwpID0+IHtcclxuICAgICAgY29uc3QgdCA9IGVsLnRhcmdldCxcclxuICAgICAgICBuID0gdC5jaGVja2VkLFxyXG4gICAgICAgIG8gPSB0LmRhdGFzZXQuYXNUYXJnZXQ7XHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwobykuZm9yRWFjaCgoZWwpID0+IHtcclxuICAgICAgICBjb25zdCB0ID0gZWwuZGF0YXNldC5hc0FubnVhbCxcclxuICAgICAgICAgIG8gPSBlbC5kYXRhc2V0LmFzTW9udGhseSxcclxuICAgICAgICAgIGEgPSBlbC5kYXRhc2V0Lm9wdGlvbnMgPyBKU09OLnBhcnNlKGVsLmRhdGFzZXQub3B0aW9ucykgOiB7fTtcclxuICAgICAgICAoYS5zdGFydFZhbCA9IG4gPyB0IDogbyksIChhLmR1cmF0aW9uID0gYS5kdXJhdGlvbiA/IGEuZHVyYXRpb24gOiAxKTtcclxuICAgICAgICAobiA/IG5ldyBDb3VudFVwKGVsLCBvLCBhKSA6IG5ldyBDb3VudFVwKGVsLCB0LCBhKSkuc3RhcnQoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuICBcclxuXHJcblxyXG4gIC8vUHJvZ3Jlc3NCYXIgYW5pbWF0aW9uXHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wcm9ncmVzcy1iYXJcIikuZm9yRWFjaChlbCA9PiB7IFwicHJvZ3Jlc3M6aW5cIiAhPT0gZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1hb3MtaWRcIikgfSlcclxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiYW9zOmluOnByb2dyZXNzOmluXCIsIChmdW5jdGlvbiAoZWwpIHtcclxuICAgICggZWwuZGV0YWlsIGluc3RhbmNlb2YgRWxlbWVudCA/IFtlbC5kZXRhaWxdIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFvcy1hbmltYXRlW2RhdGEtYW9zLWlkPVwicHJvZ3Jlc3M6aW5cIl0nKSkuZm9yRWFjaChlbCA9PiB7IFxyXG4gIGVsLnN0eWxlLndpZHRoPSBlbC5nZXRBdHRyaWJ1dGUoWydhcmlhLXZhbHVlbm93J10pICsgJyUnO1xyXG4gICAgICBlbC5zdHlsZS50cmFuc2l0aW9uRGVsYXk9XCIuNHNcIjtcclxuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uPVwiLjZzXCI7XHJcbiAgICB9KVxyXG4gIH0pKTsiLCJjb25zdCBib290c3RyYXAgPSByZXF1aXJlKCdib290c3RyYXAvZGlzdC9qcy9ib290c3RyYXAuYnVuZGxlJyk7XHJcbnZhciB0b2FzdEVsTGlzdCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRvYXN0JykpXHJcbnZhciB0b2FzdExpc3QgPSB0b2FzdEVsTGlzdC5tYXAoZnVuY3Rpb24gKHRvYXN0RWwpIHtcclxuICAgIHJldHVybiBuZXcgYm9vdHN0cmFwLlRvYXN0KHRvYXN0RWwpXHJcbn0pXHJcbnZhciB0b29sdGlwVHJpZ2dlckxpc3QgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWJzLXRvZ2dsZT1cInRvb2x0aXBcIl0nKSlcclxudmFyIHRvb2x0aXBMaXN0ID0gdG9vbHRpcFRyaWdnZXJMaXN0Lm1hcChmdW5jdGlvbiAodG9vbHRpcFRyaWdnZXJFbCkge1xyXG4gIHJldHVybiBuZXcgYm9vdHN0cmFwLlRvb2x0aXAodG9vbHRpcFRyaWdnZXJFbClcclxufSlcclxudmFyIHBvcG92ZXJUcmlnZ2VyTGlzdCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtYnMtdG9nZ2xlPVwicG9wb3ZlclwiXScpKVxyXG52YXIgcG9wb3Zlckxpc3QgPSBwb3BvdmVyVHJpZ2dlckxpc3QubWFwKGZ1bmN0aW9uIChwb3BvdmVyVHJpZ2dlckVsKSB7XHJcbiAgcmV0dXJuIG5ldyBib290c3RyYXAuUG9wb3Zlcihwb3BvdmVyVHJpZ2dlckVsKVxyXG59KVxyXG5cclxuXHJcbi8vY29sbGFwc2UgZm9yIHNpZGViYXJcclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5jb2xsYXBzZS1ncm91cCAuY29sbGFwc2VcIikuZm9yRWFjaCgoZT0+e2NvbnN0IHQ9bmV3IGJvb3RzdHJhcC5Db2xsYXBzZShlLHt0b2dnbGU6ITF9KTtcclxuICAgICAgICAgICAgZS5hZGRFdmVudExpc3RlbmVyKFwic2hvdy5icy5jb2xsYXBzZVwiLChhPT57YS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICBlLnBhcmVudEVsZW1lbnQuY2xvc2VzdChcIi5jb2xsYXBzZVwiKS5xdWVyeVNlbGVjdG9yQWxsKFwiLmNvbGxhcHNlXCIpLmZvckVhY2goKGU9Pntjb25zdCBhPWJvb3RzdHJhcC5Db2xsYXBzZS5nZXRJbnN0YW5jZShlKTtcclxuICAgICAgICAgICAgICAgIGEhPT10JiZhLmhpZGUoKX0pKX0pKSxlLmFkZEV2ZW50TGlzdGVuZXIoXCJoaWRlLmJzLmNvbGxhcHNlXCIsKHQ9Pnt0LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgIGUucXVlcnlTZWxlY3RvckFsbChcIi5jb2xsYXBzZVwiKS5mb3JFYWNoKChlPT57Ym9vdHN0cmFwLkNvbGxhcHNlLmdldEluc3RhbmNlKGUpLmhpZGUoKX0pKVxyXG4gICAgICAgICAgICAgIH0pKX0pKTsiLCJjb25zdCBjaG9pY2VzID0gcmVxdWlyZSAoJ2Nob2ljZXMuanMnKTtcclxudmFyIGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLWNob2ljZXNdXCIpO1xyXG5lbC5mb3JFYWNoKGUgPT57XHJcbiAgICBjb25zdCB0ID0ge1xyXG4gICAgICAgIC4uLmUuZGF0YXNldC5jaG9pY2VzID8gSlNPTi5wYXJzZShlLmRhdGFzZXQuY2hvaWNlcykgOiB7fSwgLi4ue1xyXG4gICAgICAgICAgICBjbGFzc05hbWVzOiB7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXJJbm5lcjogZS5jbGFzc05hbWUsXHJcbiAgICAgICAgICAgICAgICBpbnB1dDogXCJmb3JtLWNvbnRyb2xcIixcclxuICAgICAgICAgICAgICAgIGlucHV0Q2xvbmVkOiBcImZvcm0tY29udHJvbC14c1wiLFxyXG4gICAgICAgICAgICAgICAgbGlzdERyb3Bkb3duOiBcImRyb3Bkb3duLW1lbnVcIixcclxuICAgICAgICAgICAgICAgIGl0ZW1DaG9pY2U6IFwiZHJvcGRvd24taXRlbVwiLFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlU3RhdGU6IFwic2hvd1wiLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRTdGF0ZTogXCJhY3RpdmVcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbmV3IGNob2ljZXMoZSx0KX1cclxuICAgICk7IiwiLy8ganF1ZXJ5LWdsb2JhbC5qc1xyXG5pbXBvcnQganF1ZXJ5IGZyb20gJ2pxdWVyeSc7XHJcbndpbmRvdy5qUXVlcnkgPSBqcXVlcnk7XHJcbndpbmRvdy4kID0ganF1ZXJ5OyIsIi8vXHJcbi8vTW9kZSBzd2l0Y2hlciBqcXVlcnlcclxuLy9cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICQoXCIubW9kZV9kYXJrXCIgKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAkKFwiI3N3aXRjaFRoZW1lU3R5bGVcIikuYXR0cihcImhyZWZcIiwgXCJhc3NldHMvY3NzL3N0eWxlLmRhcmsubWluLmNzc1wiICk7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH0pO1xyXG4gICAgJChcIi5tb2RlX2xpZ2h0XCIgKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAkKFwiI3N3aXRjaFRoZW1lU3R5bGVcIikuYXR0cihcImhyZWZcIiwgXCJhc3NldHMvY3NzL3N0eWxlLm1pbi5jc3NcIiApO1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9KTtcclxuICAgICQoXCIuc3dpdGNoX21vZGVzIGFcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbihlKXtcclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICQodGhpcykucGFyZW50KCkucGFyZW50KCkuZmluZChcImFcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICB9KVxyXG4gIH0pKCk7IiwiLy9zaWRlYmFyIGxheW91dCBzdHlsZVxyXG4kKFwiLnNpZGViYXItdHJpZ2dlclwiKS5vbihcImNsaWNrXCIsZnVuY3Rpb24gKCkge1xyXG4gICAgJCgnYm9keScpLnRvZ2dsZUNsYXNzKFwicGFnZS1zaWRlYmFyLW1pbmlcIik7XHJcbiAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKFwiYWN0aXZlXCIpXHJcbiAgfSk7XHJcbiAgXHJcbiAgJChcIi5zaWRlYmFyLXRyaWdnZXItbGctZG93blwiKS5vbihcImNsaWNrXCIsZnVuY3Rpb24gKCkge1xyXG4gICAgJCgnYm9keScpLmFkZENsYXNzKFwicGFnZS1zaWRlYmFyLWluXCIpO1xyXG4gIH0pO1xyXG4gICQoXCIuc2lkZWJhci1jbG9zZSBhXCIpLm9uKFwiY2xpY2tcIixmdW5jdGlvbiAoKSB7XHJcbiAgICBpZigkKCdib2R5JykuaGFzQ2xhc3MoJ3BhZ2Utc2lkZWJhci1pbicpKXtcclxuICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdwYWdlLXNpZGViYXItaW4nKVxyXG4gICB9XHJcbiAgfSk7XHJcbiAgJCh3aW5kb3cpLm9uKFwicmVzaXplXCIsZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPiA5OTIpIHtcclxuICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdwYWdlLXNpZGViYXItaW4nKVxyXG4gICAgfVxyXG4gIH0pXHJcblxyXG4iLCIkKHdpbmRvdykub24oXCJsb2FkXCIsZnVuY3Rpb24oKSB7XHJcblx0JChcIi5sb2FkZXJcIikuZGVsYXkoNTAwKS5mYWRlT3V0KFwic2xvd1wiKTtcclxufSkiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnXHJcbiAgXHJcbiAgICAvLyBGZXRjaCBhbGwgdGhlIGZvcm1zIHdlIHdhbnQgdG8gYXBwbHkgY3VzdG9tIEJvb3RzdHJhcCB2YWxpZGF0aW9uIHN0eWxlcyB0b1xyXG4gICAgdmFyIGZvcm1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm5lZWRzLXZhbGlkYXRpb24nKVxyXG4gIFxyXG4gICAgLy8gTG9vcCBvdmVyIHRoZW0gYW5kIHByZXZlbnQgc3VibWlzc2lvblxyXG4gICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZm9ybXMpXHJcbiAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChmb3JtKSB7XHJcbiAgICAgICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgIGlmICghZm9ybS5jaGVja1ZhbGlkaXR5KCkpIHtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxyXG4gICAgICAgICAgfVxyXG4gIFxyXG4gICAgICAgICAgZm9ybS5jbGFzc0xpc3QuYWRkKCd3YXMtdmFsaWRhdGVkJylcclxuICAgICAgICB9LCBmYWxzZSlcclxuICAgICAgfSlcclxuICB9KSgpIiwiaW1wb3J0ICcuL2N1c3RvbS9qcXVlcnkuZ2xvYmFsJztcclxuaW1wb3J0ICcuL2N1c3RvbS9tb2RlX3N3aXRjaGVyJztcclxuaW1wb3J0ICcuL2N1c3RvbS9wcmVsb2FkZXInO1xyXG5pbXBvcnQgJy4vY3VzdG9tL2Jvb3RzdHJhcC5jdXN0b20nO1xyXG5pbXBvcnQgJy4vY3VzdG9tL3BhZ2Utc2lkZWJhcic7XHJcbmltcG9ydCAnLi9jdXN0b20vdmFsaWRhdGlvbic7XHJcbmltcG9ydCAnLi9jdXN0b20vYW9zJztcclxuaW1wb3J0ICcuL2N1c3RvbS9jaG9pY2VzJztcclxuaW1wb3J0ICdzaW1wbGViYXInOyIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKHQpOmUuQU9TPXQoKX0odGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBlPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6e30sdD1cIkV4cGVjdGVkIGEgZnVuY3Rpb25cIixuPU5hTixvPVwiW29iamVjdCBTeW1ib2xdXCIsaT0vXlxccyt8XFxzKyQvZyxhPS9eWy0rXTB4WzAtOWEtZl0rJC9pLHI9L14wYlswMV0rJC9pLGM9L14wb1swLTddKyQvaSxzPXBhcnNlSW50LHU9XCJvYmplY3RcIj09dHlwZW9mIGUmJmUmJmUuT2JqZWN0PT09T2JqZWN0JiZlLGQ9XCJvYmplY3RcIj09dHlwZW9mIHNlbGYmJnNlbGYmJnNlbGYuT2JqZWN0PT09T2JqZWN0JiZzZWxmLGw9dXx8ZHx8RnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpLGY9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxtPU1hdGgubWF4LHA9TWF0aC5taW4sYj1mdW5jdGlvbigpe3JldHVybiBsLkRhdGUubm93KCl9O2Z1bmN0aW9uIHYoZSxuLG8pe3ZhciBpLGEscixjLHMsdSxkPTAsbD0hMSxmPSExLHY9ITA7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKHQpO2Z1bmN0aW9uIHkodCl7dmFyIG49aSxvPWE7cmV0dXJuIGk9YT12b2lkIDAsZD10LGM9ZS5hcHBseShvLG4pfWZ1bmN0aW9uIGgoZSl7dmFyIHQ9ZS11O3JldHVybiB2b2lkIDA9PT11fHx0Pj1ufHx0PDB8fGYmJmUtZD49cn1mdW5jdGlvbiBrKCl7dmFyIGU9YigpO2lmKGgoZSkpcmV0dXJuIHgoZSk7cz1zZXRUaW1lb3V0KGssZnVuY3Rpb24oZSl7dmFyIHQ9bi0oZS11KTtyZXR1cm4gZj9wKHQsci0oZS1kKSk6dH0oZSkpfWZ1bmN0aW9uIHgoZSl7cmV0dXJuIHM9dm9pZCAwLHYmJmk/eShlKTooaT1hPXZvaWQgMCxjKX1mdW5jdGlvbiBPKCl7dmFyIGU9YigpLHQ9aChlKTtpZihpPWFyZ3VtZW50cyxhPXRoaXMsdT1lLHQpe2lmKHZvaWQgMD09PXMpcmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBkPWUscz1zZXRUaW1lb3V0KGssbiksbD95KGUpOmN9KHUpO2lmKGYpcmV0dXJuIHM9c2V0VGltZW91dChrLG4pLHkodSl9cmV0dXJuIHZvaWQgMD09PXMmJihzPXNldFRpbWVvdXQoayxuKSksY31yZXR1cm4gbj13KG4pfHwwLGcobykmJihsPSEhby5sZWFkaW5nLHI9KGY9XCJtYXhXYWl0XCJpbiBvKT9tKHcoby5tYXhXYWl0KXx8MCxuKTpyLHY9XCJ0cmFpbGluZ1wiaW4gbz8hIW8udHJhaWxpbmc6diksTy5jYW5jZWw9ZnVuY3Rpb24oKXt2b2lkIDAhPT1zJiZjbGVhclRpbWVvdXQocyksZD0wLGk9dT1hPXM9dm9pZCAwfSxPLmZsdXNoPWZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMD09PXM/Yzp4KGIoKSl9LE99ZnVuY3Rpb24gZyhlKXt2YXIgdD10eXBlb2YgZTtyZXR1cm4hIWUmJihcIm9iamVjdFwiPT10fHxcImZ1bmN0aW9uXCI9PXQpfWZ1bmN0aW9uIHcoZSl7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpcmV0dXJuIGU7aWYoZnVuY3Rpb24oZSl7cmV0dXJuXCJzeW1ib2xcIj09dHlwZW9mIGV8fGZ1bmN0aW9uKGUpe3JldHVybiEhZSYmXCJvYmplY3RcIj09dHlwZW9mIGV9KGUpJiZmLmNhbGwoZSk9PW99KGUpKXJldHVybiBuO2lmKGcoZSkpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIGUudmFsdWVPZj9lLnZhbHVlT2YoKTplO2U9Zyh0KT90K1wiXCI6dH1pZihcInN0cmluZ1wiIT10eXBlb2YgZSlyZXR1cm4gMD09PWU/ZTorZTtlPWUucmVwbGFjZShpLFwiXCIpO3ZhciB1PXIudGVzdChlKTtyZXR1cm4gdXx8Yy50ZXN0KGUpP3MoZS5zbGljZSgyKSx1PzI6OCk6YS50ZXN0KGUpP246K2V9dmFyIHk9ZnVuY3Rpb24oZSxuLG8pe3ZhciBpPSEwLGE9ITA7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKHQpO3JldHVybiBnKG8pJiYoaT1cImxlYWRpbmdcImluIG8/ISFvLmxlYWRpbmc6aSxhPVwidHJhaWxpbmdcImluIG8/ISFvLnRyYWlsaW5nOmEpLHYoZSxuLHtsZWFkaW5nOmksbWF4V2FpdDpuLHRyYWlsaW5nOmF9KX0saD1cIkV4cGVjdGVkIGEgZnVuY3Rpb25cIixrPU5hTix4PVwiW29iamVjdCBTeW1ib2xdXCIsTz0vXlxccyt8XFxzKyQvZyxqPS9eWy0rXTB4WzAtOWEtZl0rJC9pLEU9L14wYlswMV0rJC9pLE49L14wb1swLTddKyQvaSx6PXBhcnNlSW50LEM9XCJvYmplY3RcIj09dHlwZW9mIGUmJmUmJmUuT2JqZWN0PT09T2JqZWN0JiZlLEE9XCJvYmplY3RcIj09dHlwZW9mIHNlbGYmJnNlbGYmJnNlbGYuT2JqZWN0PT09T2JqZWN0JiZzZWxmLHE9Q3x8QXx8RnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpLEw9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxUPU1hdGgubWF4LE09TWF0aC5taW4sUz1mdW5jdGlvbigpe3JldHVybiBxLkRhdGUubm93KCl9O2Z1bmN0aW9uIEQoZSl7dmFyIHQ9dHlwZW9mIGU7cmV0dXJuISFlJiYoXCJvYmplY3RcIj09dHx8XCJmdW5jdGlvblwiPT10KX1mdW5jdGlvbiBIKGUpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXJldHVybiBlO2lmKGZ1bmN0aW9uKGUpe3JldHVyblwic3ltYm9sXCI9PXR5cGVvZiBlfHxmdW5jdGlvbihlKXtyZXR1cm4hIWUmJlwib2JqZWN0XCI9PXR5cGVvZiBlfShlKSYmTC5jYWxsKGUpPT14fShlKSlyZXR1cm4gaztpZihEKGUpKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnZhbHVlT2Y/ZS52YWx1ZU9mKCk6ZTtlPUQodCk/dCtcIlwiOnR9aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpcmV0dXJuIDA9PT1lP2U6K2U7ZT1lLnJlcGxhY2UoTyxcIlwiKTt2YXIgbj1FLnRlc3QoZSk7cmV0dXJuIG58fE4udGVzdChlKT96KGUuc2xpY2UoMiksbj8yOjgpOmoudGVzdChlKT9rOitlfXZhciAkPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbyxpLGEscixjLHMsdT0wLGQ9ITEsbD0hMSxmPSEwO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihoKTtmdW5jdGlvbiBtKHQpe3ZhciBuPW8sYT1pO3JldHVybiBvPWk9dm9pZCAwLHU9dCxyPWUuYXBwbHkoYSxuKX1mdW5jdGlvbiBwKGUpe3ZhciBuPWUtcztyZXR1cm4gdm9pZCAwPT09c3x8bj49dHx8bjwwfHxsJiZlLXU+PWF9ZnVuY3Rpb24gYigpe3ZhciBlPVMoKTtpZihwKGUpKXJldHVybiB2KGUpO2M9c2V0VGltZW91dChiLGZ1bmN0aW9uKGUpe3ZhciBuPXQtKGUtcyk7cmV0dXJuIGw/TShuLGEtKGUtdSkpOm59KGUpKX1mdW5jdGlvbiB2KGUpe3JldHVybiBjPXZvaWQgMCxmJiZvP20oZSk6KG89aT12b2lkIDAscil9ZnVuY3Rpb24gZygpe3ZhciBlPVMoKSxuPXAoZSk7aWYobz1hcmd1bWVudHMsaT10aGlzLHM9ZSxuKXtpZih2b2lkIDA9PT1jKXJldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gdT1lLGM9c2V0VGltZW91dChiLHQpLGQ/bShlKTpyfShzKTtpZihsKXJldHVybiBjPXNldFRpbWVvdXQoYix0KSxtKHMpfXJldHVybiB2b2lkIDA9PT1jJiYoYz1zZXRUaW1lb3V0KGIsdCkpLHJ9cmV0dXJuIHQ9SCh0KXx8MCxEKG4pJiYoZD0hIW4ubGVhZGluZyxhPShsPVwibWF4V2FpdFwiaW4gbik/VChIKG4ubWF4V2FpdCl8fDAsdCk6YSxmPVwidHJhaWxpbmdcImluIG4/ISFuLnRyYWlsaW5nOmYpLGcuY2FuY2VsPWZ1bmN0aW9uKCl7dm9pZCAwIT09YyYmY2xlYXJUaW1lb3V0KGMpLHU9MCxvPXM9aT1jPXZvaWQgMH0sZy5mbHVzaD1mdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT1jP3I6dihTKCkpfSxnfSxXPWZ1bmN0aW9uKCl7fTtmdW5jdGlvbiBQKGUpe2UmJmUuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlLmFkZGVkTm9kZXMpLG49QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZS5yZW1vdmVkTm9kZXMpO2lmKGZ1bmN0aW9uIGUodCl7dmFyIG49dm9pZCAwLG89dm9pZCAwO2ZvcihuPTA7bjx0Lmxlbmd0aDtuKz0xKXtpZigobz10W25dKS5kYXRhc2V0JiZvLmRhdGFzZXQuYW9zKXJldHVybiEwO2lmKG8uY2hpbGRyZW4mJmUoby5jaGlsZHJlbikpcmV0dXJuITB9cmV0dXJuITF9KHQuY29uY2F0KG4pKSlyZXR1cm4gVygpfSl9ZnVuY3Rpb24gWSgpe3JldHVybiB3aW5kb3cuTXV0YXRpb25PYnNlcnZlcnx8d2luZG93LldlYktpdE11dGF0aW9uT2JzZXJ2ZXJ8fHdpbmRvdy5Nb3pNdXRhdGlvbk9ic2VydmVyfXZhciBfPXtpc1N1cHBvcnRlZDpmdW5jdGlvbigpe3JldHVybiEhWSgpfSxyZWFkeTpmdW5jdGlvbihlLHQpe3ZhciBuPXdpbmRvdy5kb2N1bWVudCxvPW5ldyhZKCkpKFApO1c9dCxvLm9ic2VydmUobi5kb2N1bWVudEVsZW1lbnQse2NoaWxkTGlzdDohMCxzdWJ0cmVlOiEwLHJlbW92ZWROb2RlczohMH0pfX0sQj1mdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9LEY9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciBvPXRbbl07by5lbnVtZXJhYmxlPW8uZW51bWVyYWJsZXx8ITEsby5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG8ua2V5LG8pfX1yZXR1cm4gZnVuY3Rpb24odCxuLG8pe3JldHVybiBuJiZlKHQucHJvdG90eXBlLG4pLG8mJmUodCxvKSx0fX0oKSxJPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciBuPWFyZ3VtZW50c1t0XTtmb3IodmFyIG8gaW4gbilPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixvKSYmKGVbb109bltvXSl9cmV0dXJuIGV9LEs9LyhhbmRyb2lkfGJiXFxkK3xtZWVnbykuK21vYmlsZXxhdmFudGdvfGJhZGFcXC98YmxhY2tiZXJyeXxibGF6ZXJ8Y29tcGFsfGVsYWluZXxmZW5uZWN8aGlwdG9wfGllbW9iaWxlfGlwKGhvbmV8b2QpfGlyaXN8a2luZGxlfGxnZSB8bWFlbW98bWlkcHxtbXB8bW9iaWxlLitmaXJlZm94fG5ldGZyb250fG9wZXJhIG0ob2J8aW4paXxwYWxtKCBvcyk/fHBob25lfHAoaXhpfHJlKVxcL3xwbHVja2VyfHBvY2tldHxwc3B8c2VyaWVzKDR8NikwfHN5bWJpYW58dHJlb3x1cFxcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIGNlfHhkYXx4aWluby9pLEc9LzEyMDd8NjMxMHw2NTkwfDNnc298NHRocHw1MFsxLTZdaXw3NzBzfDgwMnN8YSB3YXxhYmFjfGFjKGVyfG9vfHNcXC0pfGFpKGtvfHJuKXxhbChhdnxjYXxjbyl8YW1vaXxhbihleHxueXx5dyl8YXB0dXxhcihjaHxnbyl8YXModGV8dXMpfGF0dHd8YXUoZGl8XFwtbXxyIHxzICl8YXZhbnxiZShja3xsbHxucSl8YmkobGJ8cmQpfGJsKGFjfGF6KXxicihlfHYpd3xidW1ifGJ3XFwtKG58dSl8YzU1XFwvfGNhcGl8Y2N3YXxjZG1cXC18Y2VsbHxjaHRtfGNsZGN8Y21kXFwtfGNvKG1wfG5kKXxjcmF3fGRhKGl0fGxsfG5nKXxkYnRlfGRjXFwtc3xkZXZpfGRpY2F8ZG1vYnxkbyhjfHApb3xkcygxMnxcXC1kKXxlbCg0OXxhaSl8ZW0obDJ8dWwpfGVyKGljfGswKXxlc2w4fGV6KFs0LTddMHxvc3x3YXx6ZSl8ZmV0Y3xmbHkoXFwtfF8pfGcxIHV8ZzU2MHxnZW5lfGdmXFwtNXxnXFwtbW98Z28oXFwud3xvZCl8Z3IoYWR8dW4pfGhhaWV8aGNpdHxoZFxcLShtfHB8dCl8aGVpXFwtfGhpKHB0fHRhKXxocCggaXxpcCl8aHNcXC1jfGh0KGMoXFwtfCB8X3xhfGd8cHxzfHQpfHRwKXxodShhd3x0Yyl8aVxcLSgyMHxnb3xtYSl8aTIzMHxpYWMoIHxcXC18XFwvKXxpYnJvfGlkZWF8aWcwMXxpa29tfGltMWt8aW5ub3xpcGFxfGlyaXN8amEodHx2KWF8amJyb3xqZW11fGppZ3N8a2RkaXxrZWppfGtndCggfFxcLyl8a2xvbnxrcHQgfGt3Y1xcLXxreW8oY3xrKXxsZShub3x4aSl8bGcoIGd8XFwvKGt8bHx1KXw1MHw1NHxcXC1bYS13XSl8bGlid3xseW54fG0xXFwtd3xtM2dhfG01MFxcL3xtYSh0ZXx1aXx4byl8bWMoMDF8MjF8Y2EpfG1cXC1jcnxtZShyY3xyaSl8bWkobzh8b2F8dHMpfG1tZWZ8bW8oMDF8MDJ8Yml8ZGV8ZG98dChcXC18IHxvfHYpfHp6KXxtdCg1MHxwMXx2ICl8bXdicHxteXdhfG4xMFswLTJdfG4yMFsyLTNdfG4zMCgwfDIpfG41MCgwfDJ8NSl8bjcoMCgwfDEpfDEwKXxuZSgoY3xtKVxcLXxvbnx0Znx3Znx3Z3x3dCl8bm9rKDZ8aSl8bnpwaHxvMmltfG9wKHRpfHd2KXxvcmFufG93ZzF8cDgwMHxwYW4oYXxkfHQpfHBkeGd8cGcoMTN8XFwtKFsxLThdfGMpKXxwaGlsfHBpcmV8cGwoYXl8dWMpfHBuXFwtMnxwbyhja3xydHxzZSl8cHJveHxwc2lvfHB0XFwtZ3xxYVxcLWF8cWMoMDd8MTJ8MjF8MzJ8NjB8XFwtWzItN118aVxcLSl8cXRla3xyMzgwfHI2MDB8cmFrc3xyaW05fHJvKHZlfHpvKXxzNTVcXC98c2EoZ2V8bWF8bW18bXN8bnl8dmEpfHNjKDAxfGhcXC18b298cFxcLSl8c2RrXFwvfHNlKGMoXFwtfDB8MSl8NDd8bWN8bmR8cmkpfHNnaFxcLXxzaGFyfHNpZShcXC18bSl8c2tcXC0wfHNsKDQ1fGlkKXxzbShhbHxhcnxiM3xpdHx0NSl8c28oZnR8bnkpfHNwKDAxfGhcXC18dlxcLXx2ICl8c3koMDF8bWIpfHQyKDE4fDUwKXx0NigwMHwxMHwxOCl8dGEoZ3R8bGspfHRjbFxcLXx0ZGdcXC18dGVsKGl8bSl8dGltXFwtfHRcXC1tb3x0byhwbHxzaCl8dHMoNzB8bVxcLXxtM3xtNSl8dHhcXC05fHVwKFxcLmJ8ZzF8c2kpfHV0c3R8djQwMHx2NzUwfHZlcml8dmkocmd8dGUpfHZrKDQwfDVbMC0zXXxcXC12KXx2bTQwfHZvZGF8dnVsY3x2eCg1Mnw1M3w2MHw2MXw3MHw4MHw4MXw4M3w4NXw5OCl8dzNjKFxcLXwgKXx3ZWJjfHdoaXR8d2koZyB8bmN8bncpfHdtbGJ8d29udXx4NzAwfHlhc1xcLXx5b3VyfHpldG98enRlXFwtL2ksSj0vKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoNHw2KTB8c3ltYmlhbnx0cmVvfHVwXFwuKGJyb3dzZXJ8bGluayl8dm9kYWZvbmV8d2FwfHdpbmRvd3MgY2V8eGRhfHhpaW5vfGFuZHJvaWR8aXBhZHxwbGF5Ym9va3xzaWxrL2ksUT0vMTIwN3w2MzEwfDY1OTB8M2dzb3w0dGhwfDUwWzEtNl1pfDc3MHN8ODAyc3xhIHdhfGFiYWN8YWMoZXJ8b298c1xcLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXxcXC1tfHIgfHMgKXxhdmFufGJlKGNrfGxsfG5xKXxiaShsYnxyZCl8YmwoYWN8YXopfGJyKGV8dil3fGJ1bWJ8YndcXC0obnx1KXxjNTVcXC98Y2FwaXxjY3dhfGNkbVxcLXxjZWxsfGNodG18Y2xkY3xjbWRcXC18Y28obXB8bmQpfGNyYXd8ZGEoaXR8bGx8bmcpfGRidGV8ZGNcXC1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfFxcLWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseShcXC18Xyl8ZzEgdXxnNTYwfGdlbmV8Z2ZcXC01fGdcXC1tb3xnbyhcXC53fG9kKXxncihhZHx1bil8aGFpZXxoY2l0fGhkXFwtKG18cHx0KXxoZWlcXC18aGkocHR8dGEpfGhwKCBpfGlwKXxoc1xcLWN8aHQoYyhcXC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpXFwtKDIwfGdvfG1hKXxpMjMwfGlhYyggfFxcLXxcXC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XFwvKXxrbG9ufGtwdCB8a3djXFwtfGt5byhjfGspfGxlKG5vfHhpKXxsZyggZ3xcXC8oa3xsfHUpfDUwfDU0fFxcLVthLXddKXxsaWJ3fGx5bnh8bTFcXC13fG0zZ2F8bTUwXFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bVxcLWNyfG1lKHJjfHJpKXxtaShvOHxvYXx0cyl8bW1lZnxtbygwMXwwMnxiaXxkZXxkb3x0KFxcLXwgfG98dil8enopfG10KDUwfHAxfHYgKXxtd2JwfG15d2F8bjEwWzAtMl18bjIwWzItM118bjMwKDB8Mil8bjUwKDB8Mnw1KXxuNygwKDB8MSl8MTApfG5lKChjfG0pXFwtfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3xcXC0oWzEtOF18YykpfHBoaWx8cGlyZXxwbChheXx1Yyl8cG5cXC0yfHBvKGNrfHJ0fHNlKXxwcm94fHBzaW98cHRcXC1nfHFhXFwtYXxxYygwN3wxMnwyMXwzMnw2MHxcXC1bMi03XXxpXFwtKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVxcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aFxcLXxvb3xwXFwtKXxzZGtcXC98c2UoYyhcXC18MHwxKXw0N3xtY3xuZHxyaSl8c2doXFwtfHNoYXJ8c2llKFxcLXxtKXxza1xcLTB8c2woNDV8aWQpfHNtKGFsfGFyfGIzfGl0fHQ1KXxzbyhmdHxueSl8c3AoMDF8aFxcLXx2XFwtfHYgKXxzeSgwMXxtYil8dDIoMTh8NTApfHQ2KDAwfDEwfDE4KXx0YShndHxsayl8dGNsXFwtfHRkZ1xcLXx0ZWwoaXxtKXx0aW1cXC18dFxcLW1vfHRvKHBsfHNoKXx0cyg3MHxtXFwtfG0zfG01KXx0eFxcLTl8dXAoXFwuYnxnMXxzaSl8dXRzdHx2NDAwfHY3NTB8dmVyaXx2aShyZ3x0ZSl8dmsoNDB8NVswLTNdfFxcLXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoXFwtfCApfHdlYmN8d2hpdHx3aShnIHxuY3xudyl8d21sYnx3b251fHg3MDB8eWFzXFwtfHlvdXJ8emV0b3x6dGVcXC0vaTtmdW5jdGlvbiBSKCl7cmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnR8fG5hdmlnYXRvci52ZW5kb3J8fHdpbmRvdy5vcGVyYXx8XCJcIn12YXIgVT1uZXcoZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7Qih0aGlzLGUpfXJldHVybiBGKGUsW3trZXk6XCJwaG9uZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9UigpO3JldHVybiEoIUsudGVzdChlKSYmIUcudGVzdChlLnN1YnN0cigwLDQpKSl9fSx7a2V5OlwibW9iaWxlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1SKCk7cmV0dXJuISghSi50ZXN0KGUpJiYhUS50ZXN0KGUuc3Vic3RyKDAsNCkpKX19LHtrZXk6XCJ0YWJsZXRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1vYmlsZSgpJiYhdGhpcy5waG9uZSgpfX0se2tleTpcImllMTFcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVyblwiLW1zLXNjcm9sbC1saW1pdFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlJiZcIi1tcy1pbWUtYWxpZ25cImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZX19XSksZX0oKSksVj1mdW5jdGlvbihlLHQpe3ZhciBuPXZvaWQgMDtyZXR1cm4gVS5pZTExKCk/KG49ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJDdXN0b21FdmVudFwiKSkuaW5pdEN1c3RvbUV2ZW50KGUsITAsITAse2RldGFpbDp0fSk6bj1uZXcgQ3VzdG9tRXZlbnQoZSx7ZGV0YWlsOnR9KSxkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG4pfSxYPWZ1bmN0aW9uKGUpe3JldHVybiBlLmZvckVhY2goZnVuY3Rpb24oZSx0KXtyZXR1cm4gZnVuY3Rpb24oZSx0KXt2YXIgbj1lLm9wdGlvbnMsbz1lLnBvc2l0aW9uLGk9ZS5ub2RlLGE9KGUuZGF0YSxmdW5jdGlvbigpe2UuYW5pbWF0ZWQmJihmdW5jdGlvbihlLHQpe3QmJnQuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gZS5jbGFzc0xpc3QucmVtb3ZlKHQpfSl9KGksbi5hbmltYXRlZENsYXNzTmFtZXMpLFYoXCJhb3M6b3V0XCIsaSksZS5vcHRpb25zLmlkJiZWKFwiYW9zOmluOlwiK2Uub3B0aW9ucy5pZCxpKSxlLmFuaW1hdGVkPSExKX0pO24ubWlycm9yJiZ0Pj1vLm91dCYmIW4ub25jZT9hKCk6dD49by5pbj9lLmFuaW1hdGVkfHwoZnVuY3Rpb24oZSx0KXt0JiZ0LmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIGUuY2xhc3NMaXN0LmFkZCh0KX0pfShpLG4uYW5pbWF0ZWRDbGFzc05hbWVzKSxWKFwiYW9zOmluXCIsaSksZS5vcHRpb25zLmlkJiZWKFwiYW9zOmluOlwiK2Uub3B0aW9ucy5pZCxpKSxlLmFuaW1hdGVkPSEwKTplLmFuaW1hdGVkJiYhbi5vbmNlJiZhKCl9KGUsd2luZG93LnBhZ2VZT2Zmc2V0KX0pfSxaPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wLG49MDtlJiYhaXNOYU4oZS5vZmZzZXRMZWZ0KSYmIWlzTmFOKGUub2Zmc2V0VG9wKTspdCs9ZS5vZmZzZXRMZWZ0LShcIkJPRFlcIiE9ZS50YWdOYW1lP2Uuc2Nyb2xsTGVmdDowKSxuKz1lLm9mZnNldFRvcC0oXCJCT0RZXCIhPWUudGFnTmFtZT9lLnNjcm9sbFRvcDowKSxlPWUub2Zmc2V0UGFyZW50O3JldHVybnt0b3A6bixsZWZ0OnR9fSxlZT1mdW5jdGlvbihlLHQsbil7dmFyIG89ZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWFvcy1cIit0KTtpZih2b2lkIDAhPT1vKXtpZihcInRydWVcIj09PW8pcmV0dXJuITA7aWYoXCJmYWxzZVwiPT09bylyZXR1cm4hMX1yZXR1cm4gb3x8bn0sdGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5mb3JFYWNoKGZ1bmN0aW9uKGUsbil7dmFyIG89ZWUoZS5ub2RlLFwibWlycm9yXCIsdC5taXJyb3IpLGk9ZWUoZS5ub2RlLFwib25jZVwiLHQub25jZSksYT1lZShlLm5vZGUsXCJpZFwiKSxyPXQudXNlQ2xhc3NOYW1lcyYmZS5ub2RlLmdldEF0dHJpYnV0ZShcImRhdGEtYW9zXCIpLGM9W3QuYW5pbWF0ZWRDbGFzc05hbWVdLmNvbmNhdChyP3Iuc3BsaXQoXCIgXCIpOltdKS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGV9KTt0LmluaXRDbGFzc05hbWUmJmUubm9kZS5jbGFzc0xpc3QuYWRkKHQuaW5pdENsYXNzTmFtZSksZS5wb3NpdGlvbj17aW46ZnVuY3Rpb24oZSx0LG4pe3ZhciBvPXdpbmRvdy5pbm5lckhlaWdodCxpPWVlKGUsXCJhbmNob3JcIiksYT1lZShlLFwiYW5jaG9yLXBsYWNlbWVudFwiKSxyPU51bWJlcihlZShlLFwib2Zmc2V0XCIsYT8wOnQpKSxjPWF8fG4scz1lO2kmJmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoaSkmJihzPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoaSlbMF0pO3ZhciB1PVoocykudG9wLW87c3dpdGNoKGMpe2Nhc2VcInRvcC1ib3R0b21cIjpicmVhaztjYXNlXCJjZW50ZXItYm90dG9tXCI6dSs9cy5vZmZzZXRIZWlnaHQvMjticmVhaztjYXNlXCJib3R0b20tYm90dG9tXCI6dSs9cy5vZmZzZXRIZWlnaHQ7YnJlYWs7Y2FzZVwidG9wLWNlbnRlclwiOnUrPW8vMjticmVhaztjYXNlXCJjZW50ZXItY2VudGVyXCI6dSs9by8yK3Mub2Zmc2V0SGVpZ2h0LzI7YnJlYWs7Y2FzZVwiYm90dG9tLWNlbnRlclwiOnUrPW8vMitzLm9mZnNldEhlaWdodDticmVhaztjYXNlXCJ0b3AtdG9wXCI6dSs9bzticmVhaztjYXNlXCJib3R0b20tdG9wXCI6dSs9bytzLm9mZnNldEhlaWdodDticmVhaztjYXNlXCJjZW50ZXItdG9wXCI6dSs9bytzLm9mZnNldEhlaWdodC8yfXJldHVybiB1K3J9KGUubm9kZSx0Lm9mZnNldCx0LmFuY2hvclBsYWNlbWVudCksb3V0Om8mJmZ1bmN0aW9uKGUsdCl7d2luZG93LmlubmVySGVpZ2h0O3ZhciBuPWVlKGUsXCJhbmNob3JcIiksbz1lZShlLFwib2Zmc2V0XCIsdCksaT1lO3JldHVybiBuJiZkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKG4pJiYoaT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKG4pWzBdKSxaKGkpLnRvcCtpLm9mZnNldEhlaWdodC1vfShlLm5vZGUsdC5vZmZzZXQpfSxlLm9wdGlvbnM9e29uY2U6aSxtaXJyb3I6byxhbmltYXRlZENsYXNzTmFtZXM6YyxpZDphfX0pLGV9LG5lPWZ1bmN0aW9uKCl7dmFyIGU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLWFvc11cIik7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChlLGZ1bmN0aW9uKGUpe3JldHVybntub2RlOmV9fSl9LG9lPVtdLGllPSExLGFlPXtvZmZzZXQ6MTIwLGRlbGF5OjAsZWFzaW5nOlwiZWFzZVwiLGR1cmF0aW9uOjQwMCxkaXNhYmxlOiExLG9uY2U6ITEsbWlycm9yOiExLGFuY2hvclBsYWNlbWVudDpcInRvcC1ib3R0b21cIixzdGFydEV2ZW50OlwiRE9NQ29udGVudExvYWRlZFwiLGFuaW1hdGVkQ2xhc3NOYW1lOlwiYW9zLWFuaW1hdGVcIixpbml0Q2xhc3NOYW1lOlwiYW9zLWluaXRcIix1c2VDbGFzc05hbWVzOiExLGRpc2FibGVNdXRhdGlvbk9ic2VydmVyOiExLHRocm90dGxlRGVsYXk6OTksZGVib3VuY2VEZWxheTo1MH0scmU9ZnVuY3Rpb24oKXtyZXR1cm4gZG9jdW1lbnQuYWxsJiYhd2luZG93LmF0b2J9LGNlPWZ1bmN0aW9uKCl7YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0mJmFyZ3VtZW50c1swXSYmKGllPSEwKSxpZSYmKG9lPXRlKG9lLGFlKSxYKG9lKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLHkoZnVuY3Rpb24oKXtYKG9lLGFlLm9uY2UpfSxhZS50aHJvdHRsZURlbGF5KSkpfSxzZT1mdW5jdGlvbigpe2lmKG9lPW5lKCksZGUoYWUuZGlzYWJsZSl8fHJlKCkpcmV0dXJuIHVlKCk7Y2UoKX0sdWU9ZnVuY3Rpb24oKXtvZS5mb3JFYWNoKGZ1bmN0aW9uKGUsdCl7ZS5ub2RlLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtYW9zXCIpLGUubm9kZS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLWFvcy1lYXNpbmdcIiksZS5ub2RlLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtYW9zLWR1cmF0aW9uXCIpLGUubm9kZS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLWFvcy1kZWxheVwiKSxhZS5pbml0Q2xhc3NOYW1lJiZlLm5vZGUuY2xhc3NMaXN0LnJlbW92ZShhZS5pbml0Q2xhc3NOYW1lKSxhZS5hbmltYXRlZENsYXNzTmFtZSYmZS5ub2RlLmNsYXNzTGlzdC5yZW1vdmUoYWUuYW5pbWF0ZWRDbGFzc05hbWUpfSl9LGRlPWZ1bmN0aW9uKGUpe3JldHVybiEwPT09ZXx8XCJtb2JpbGVcIj09PWUmJlUubW9iaWxlKCl8fFwicGhvbmVcIj09PWUmJlUucGhvbmUoKXx8XCJ0YWJsZXRcIj09PWUmJlUudGFibGV0KCl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJiEwPT09ZSgpfTtyZXR1cm57aW5pdDpmdW5jdGlvbihlKXtyZXR1cm4gYWU9SShhZSxlKSxvZT1uZSgpLGFlLmRpc2FibGVNdXRhdGlvbk9ic2VydmVyfHxfLmlzU3VwcG9ydGVkKCl8fChjb25zb2xlLmluZm8oJ1xcbiAgICAgIGFvczogTXV0YXRpb25PYnNlcnZlciBpcyBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgYnJvd3NlcixcXG4gICAgICBjb2RlIG11dGF0aW9ucyBvYnNlcnZpbmcgaGFzIGJlZW4gZGlzYWJsZWQuXFxuICAgICAgWW91IG1heSBoYXZlIHRvIGNhbGwgXCJyZWZyZXNoSGFyZCgpXCIgYnkgeW91cnNlbGYuXFxuICAgICcpLGFlLmRpc2FibGVNdXRhdGlvbk9ic2VydmVyPSEwKSxhZS5kaXNhYmxlTXV0YXRpb25PYnNlcnZlcnx8Xy5yZWFkeShcIltkYXRhLWFvc11cIixzZSksZGUoYWUuZGlzYWJsZSl8fHJlKCk/dWUoKTooZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIikuc2V0QXR0cmlidXRlKFwiZGF0YS1hb3MtZWFzaW5nXCIsYWUuZWFzaW5nKSxkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWFvcy1kdXJhdGlvblwiLGFlLmR1cmF0aW9uKSxkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWFvcy1kZWxheVwiLGFlLmRlbGF5KSwtMT09PVtcIkRPTUNvbnRlbnRMb2FkZWRcIixcImxvYWRcIl0uaW5kZXhPZihhZS5zdGFydEV2ZW50KT9kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGFlLnN0YXJ0RXZlbnQsZnVuY3Rpb24oKXtjZSghMCl9KTp3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixmdW5jdGlvbigpe2NlKCEwKX0pLFwiRE9NQ29udGVudExvYWRlZFwiPT09YWUuc3RhcnRFdmVudCYmW1wiY29tcGxldGVcIixcImludGVyYWN0aXZlXCJdLmluZGV4T2YoZG9jdW1lbnQucmVhZHlTdGF0ZSk+LTEmJmNlKCEwKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCQoY2UsYWUuZGVib3VuY2VEZWxheSwhMCkpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib3JpZW50YXRpb25jaGFuZ2VcIiwkKGNlLGFlLmRlYm91bmNlRGVsYXksITApKSxvZSl9LHJlZnJlc2g6Y2UscmVmcmVzaEhhcmQ6c2V9fSk7XG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IHV0aWwvaW5kZXguanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBNQVhfVUlEID0gMTAwMDAwMFxuY29uc3QgTUlMTElTRUNPTkRTX01VTFRJUExJRVIgPSAxMDAwXG5jb25zdCBUUkFOU0lUSU9OX0VORCA9ICd0cmFuc2l0aW9uZW5kJ1xuXG4vLyBTaG91dG91dCBBbmd1c0Nyb2xsIChodHRwczovL2dvby5nbC9weHdRR3ApXG5jb25zdCB0b1R5cGUgPSBvYmogPT4ge1xuICBpZiAob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGAke29ian1gXG4gIH1cblxuICByZXR1cm4ge30udG9TdHJpbmcuY2FsbChvYmopLm1hdGNoKC9cXHMoW2Etel0rKS9pKVsxXS50b0xvd2VyQ2FzZSgpXG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFB1YmxpYyBVdGlsIEFwaVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBnZXRVSUQgPSBwcmVmaXggPT4ge1xuICBkbyB7XG4gICAgcHJlZml4ICs9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE1BWF9VSUQpXG4gIH0gd2hpbGUgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHByZWZpeCkpXG5cbiAgcmV0dXJuIHByZWZpeFxufVxuXG5jb25zdCBnZXRTZWxlY3RvciA9IGVsZW1lbnQgPT4ge1xuICBsZXQgc2VsZWN0b3IgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1icy10YXJnZXQnKVxuXG4gIGlmICghc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09ICcjJykge1xuICAgIGxldCBocmVmQXR0ciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdocmVmJylcblxuICAgIC8vIFRoZSBvbmx5IHZhbGlkIGNvbnRlbnQgdGhhdCBjb3VsZCBkb3VibGUgYXMgYSBzZWxlY3RvciBhcmUgSURzIG9yIGNsYXNzZXMsXG4gICAgLy8gc28gZXZlcnl0aGluZyBzdGFydGluZyB3aXRoIGAjYCBvciBgLmAuIElmIGEgXCJyZWFsXCIgVVJMIGlzIHVzZWQgYXMgdGhlIHNlbGVjdG9yLFxuICAgIC8vIGBkb2N1bWVudC5xdWVyeVNlbGVjdG9yYCB3aWxsIHJpZ2h0ZnVsbHkgY29tcGxhaW4gaXQgaXMgaW52YWxpZC5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8zMjI3M1xuICAgIGlmICghaHJlZkF0dHIgfHwgKCFocmVmQXR0ci5pbmNsdWRlcygnIycpICYmICFocmVmQXR0ci5zdGFydHNXaXRoKCcuJykpKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIC8vIEp1c3QgaW4gY2FzZSBzb21lIENNUyBwdXRzIG91dCBhIGZ1bGwgVVJMIHdpdGggdGhlIGFuY2hvciBhcHBlbmRlZFxuICAgIGlmIChocmVmQXR0ci5pbmNsdWRlcygnIycpICYmICFocmVmQXR0ci5zdGFydHNXaXRoKCcjJykpIHtcbiAgICAgIGhyZWZBdHRyID0gYCMke2hyZWZBdHRyLnNwbGl0KCcjJylbMV19YFxuICAgIH1cblxuICAgIHNlbGVjdG9yID0gaHJlZkF0dHIgJiYgaHJlZkF0dHIgIT09ICcjJyA/IGhyZWZBdHRyLnRyaW0oKSA6IG51bGxcbiAgfVxuXG4gIHJldHVybiBzZWxlY3RvclxufVxuXG5jb25zdCBnZXRTZWxlY3RvckZyb21FbGVtZW50ID0gZWxlbWVudCA9PiB7XG4gIGNvbnN0IHNlbGVjdG9yID0gZ2V0U2VsZWN0b3IoZWxlbWVudClcblxuICBpZiAoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgPyBzZWxlY3RvciA6IG51bGxcbiAgfVxuXG4gIHJldHVybiBudWxsXG59XG5cbmNvbnN0IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IgPSBlbGVtZW50ID0+IHtcbiAgY29uc3Qgc2VsZWN0b3IgPSBnZXRTZWxlY3RvcihlbGVtZW50KVxuXG4gIHJldHVybiBzZWxlY3RvciA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpIDogbnVsbFxufVxuXG5jb25zdCBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCA9IGVsZW1lbnQgPT4ge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gMFxuICB9XG5cbiAgLy8gR2V0IHRyYW5zaXRpb24tZHVyYXRpb24gb2YgdGhlIGVsZW1lbnRcbiAgbGV0IHsgdHJhbnNpdGlvbkR1cmF0aW9uLCB0cmFuc2l0aW9uRGVsYXkgfSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpXG5cbiAgY29uc3QgZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24gPSBOdW1iZXIucGFyc2VGbG9hdCh0cmFuc2l0aW9uRHVyYXRpb24pXG4gIGNvbnN0IGZsb2F0VHJhbnNpdGlvbkRlbGF5ID0gTnVtYmVyLnBhcnNlRmxvYXQodHJhbnNpdGlvbkRlbGF5KVxuXG4gIC8vIFJldHVybiAwIGlmIGVsZW1lbnQgb3IgdHJhbnNpdGlvbiBkdXJhdGlvbiBpcyBub3QgZm91bmRcbiAgaWYgKCFmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiAmJiAhZmxvYXRUcmFuc2l0aW9uRGVsYXkpIHtcbiAgICByZXR1cm4gMFxuICB9XG5cbiAgLy8gSWYgbXVsdGlwbGUgZHVyYXRpb25zIGFyZSBkZWZpbmVkLCB0YWtlIHRoZSBmaXJzdFxuICB0cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb24uc3BsaXQoJywnKVswXVxuICB0cmFuc2l0aW9uRGVsYXkgPSB0cmFuc2l0aW9uRGVsYXkuc3BsaXQoJywnKVswXVxuXG4gIHJldHVybiAoTnVtYmVyLnBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKSArIE51bWJlci5wYXJzZUZsb2F0KHRyYW5zaXRpb25EZWxheSkpICogTUlMTElTRUNPTkRTX01VTFRJUExJRVJcbn1cblxuY29uc3QgdHJpZ2dlclRyYW5zaXRpb25FbmQgPSBlbGVtZW50ID0+IHtcbiAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChUUkFOU0lUSU9OX0VORCkpXG59XG5cbmNvbnN0IGlzRWxlbWVudCA9IG9iaiA9PiB7XG4gIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBpZiAodHlwZW9mIG9iai5qcXVlcnkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgb2JqID0gb2JqWzBdXG4gIH1cblxuICByZXR1cm4gdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gJ3VuZGVmaW5lZCdcbn1cblxuY29uc3QgZ2V0RWxlbWVudCA9IG9iaiA9PiB7XG4gIGlmIChpc0VsZW1lbnQob2JqKSkgeyAvLyBpdCdzIGEgalF1ZXJ5IG9iamVjdCBvciBhIG5vZGUgZWxlbWVudFxuICAgIHJldHVybiBvYmouanF1ZXJ5ID8gb2JqWzBdIDogb2JqXG4gIH1cblxuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycgJiYgb2JqLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvYmopXG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuXG5jb25zdCB0eXBlQ2hlY2tDb25maWcgPSAoY29tcG9uZW50TmFtZSwgY29uZmlnLCBjb25maWdUeXBlcykgPT4ge1xuICBPYmplY3Qua2V5cyhjb25maWdUeXBlcykuZm9yRWFjaChwcm9wZXJ0eSA9PiB7XG4gICAgY29uc3QgZXhwZWN0ZWRUeXBlcyA9IGNvbmZpZ1R5cGVzW3Byb3BlcnR5XVxuICAgIGNvbnN0IHZhbHVlID0gY29uZmlnW3Byb3BlcnR5XVxuICAgIGNvbnN0IHZhbHVlVHlwZSA9IHZhbHVlICYmIGlzRWxlbWVudCh2YWx1ZSkgPyAnZWxlbWVudCcgOiB0b1R5cGUodmFsdWUpXG5cbiAgICBpZiAoIW5ldyBSZWdFeHAoZXhwZWN0ZWRUeXBlcykudGVzdCh2YWx1ZVR5cGUpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICBgJHtjb21wb25lbnROYW1lLnRvVXBwZXJDYXNlKCl9OiBPcHRpb24gXCIke3Byb3BlcnR5fVwiIHByb3ZpZGVkIHR5cGUgXCIke3ZhbHVlVHlwZX1cIiBidXQgZXhwZWN0ZWQgdHlwZSBcIiR7ZXhwZWN0ZWRUeXBlc31cIi5gXG4gICAgICApXG4gICAgfVxuICB9KVxufVxuXG5jb25zdCBpc1Zpc2libGUgPSBlbGVtZW50ID0+IHtcbiAgaWYgKCFpc0VsZW1lbnQoZWxlbWVudCkgfHwgZWxlbWVudC5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZSgndmlzaWJpbGl0eScpID09PSAndmlzaWJsZSdcbn1cblxuY29uc3QgaXNEaXNhYmxlZCA9IGVsZW1lbnQgPT4ge1xuICBpZiAoIWVsZW1lbnQgfHwgZWxlbWVudC5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGlmICh0eXBlb2YgZWxlbWVudC5kaXNhYmxlZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZWxlbWVudC5kaXNhYmxlZFxuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkaXNhYmxlZCcpICE9PSAnZmFsc2UnXG59XG5cbmNvbnN0IGZpbmRTaGFkb3dSb290ID0gZWxlbWVudCA9PiB7XG4gIGlmICghZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmF0dGFjaFNoYWRvdykge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvLyBDYW4gZmluZCB0aGUgc2hhZG93IHJvb3Qgb3RoZXJ3aXNlIGl0J2xsIHJldHVybiB0aGUgZG9jdW1lbnRcbiAgaWYgKHR5cGVvZiBlbGVtZW50LmdldFJvb3ROb2RlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc3Qgcm9vdCA9IGVsZW1lbnQuZ2V0Um9vdE5vZGUoKVxuICAgIHJldHVybiByb290IGluc3RhbmNlb2YgU2hhZG93Um9vdCA/IHJvb3QgOiBudWxsXG4gIH1cblxuICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QpIHtcbiAgICByZXR1cm4gZWxlbWVudFxuICB9XG5cbiAgLy8gd2hlbiB3ZSBkb24ndCBmaW5kIGEgc2hhZG93IHJvb3RcbiAgaWYgKCFlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIGZpbmRTaGFkb3dSb290KGVsZW1lbnQucGFyZW50Tm9kZSlcbn1cblxuY29uc3Qgbm9vcCA9ICgpID0+IHt9XG5cbi8qKlxuICogVHJpY2sgdG8gcmVzdGFydCBhbiBlbGVtZW50J3MgYW5pbWF0aW9uXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB2b2lkXG4gKlxuICogQHNlZSBodHRwczovL3d3dy5jaGFyaXN0aGVvLmlvL2Jsb2cvMjAyMS8wMi9yZXN0YXJ0LWEtY3NzLWFuaW1hdGlvbi13aXRoLWphdmFzY3JpcHQvI3Jlc3RhcnRpbmctYS1jc3MtYW5pbWF0aW9uXG4gKi9cbmNvbnN0IHJlZmxvdyA9IGVsZW1lbnQgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gIGVsZW1lbnQub2Zmc2V0SGVpZ2h0XG59XG5cbmNvbnN0IGdldGpRdWVyeSA9ICgpID0+IHtcbiAgY29uc3QgeyBqUXVlcnkgfSA9IHdpbmRvd1xuXG4gIGlmIChqUXVlcnkgJiYgIWRvY3VtZW50LmJvZHkuaGFzQXR0cmlidXRlKCdkYXRhLWJzLW5vLWpxdWVyeScpKSB7XG4gICAgcmV0dXJuIGpRdWVyeVxuICB9XG5cbiAgcmV0dXJuIG51bGxcbn1cblxuY29uc3QgRE9NQ29udGVudExvYWRlZENhbGxiYWNrcyA9IFtdXG5cbmNvbnN0IG9uRE9NQ29udGVudExvYWRlZCA9IGNhbGxiYWNrID0+IHtcbiAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgIC8vIGFkZCBsaXN0ZW5lciBvbiB0aGUgZmlyc3QgY2FsbCB3aGVuIHRoZSBkb2N1bWVudCBpcyBpbiBsb2FkaW5nIHN0YXRlXG4gICAgaWYgKCFET01Db250ZW50TG9hZGVkQ2FsbGJhY2tzLmxlbmd0aCkge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgICAgICAgRE9NQ29udGVudExvYWRlZENhbGxiYWNrcy5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKCkpXG4gICAgICB9KVxuICAgIH1cblxuICAgIERPTUNvbnRlbnRMb2FkZWRDYWxsYmFja3MucHVzaChjYWxsYmFjaylcbiAgfSBlbHNlIHtcbiAgICBjYWxsYmFjaygpXG4gIH1cbn1cblxuY29uc3QgaXNSVEwgPSAoKSA9PiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZGlyID09PSAncnRsJ1xuXG5jb25zdCBkZWZpbmVKUXVlcnlQbHVnaW4gPSBwbHVnaW4gPT4ge1xuICBvbkRPTUNvbnRlbnRMb2FkZWQoKCkgPT4ge1xuICAgIGNvbnN0ICQgPSBnZXRqUXVlcnkoKVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICgkKSB7XG4gICAgICBjb25zdCBuYW1lID0gcGx1Z2luLk5BTUVcbiAgICAgIGNvbnN0IEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bbmFtZV1cbiAgICAgICQuZm5bbmFtZV0gPSBwbHVnaW4ualF1ZXJ5SW50ZXJmYWNlXG4gICAgICAkLmZuW25hbWVdLkNvbnN0cnVjdG9yID0gcGx1Z2luXG4gICAgICAkLmZuW25hbWVdLm5vQ29uZmxpY3QgPSAoKSA9PiB7XG4gICAgICAgICQuZm5bbmFtZV0gPSBKUVVFUllfTk9fQ09ORkxJQ1RcbiAgICAgICAgcmV0dXJuIHBsdWdpbi5qUXVlcnlJbnRlcmZhY2VcbiAgICAgIH1cbiAgICB9XG4gIH0pXG59XG5cbmNvbnN0IGV4ZWN1dGUgPSBjYWxsYmFjayA9PiB7XG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjaygpXG4gIH1cbn1cblxuY29uc3QgZXhlY3V0ZUFmdGVyVHJhbnNpdGlvbiA9IChjYWxsYmFjaywgdHJhbnNpdGlvbkVsZW1lbnQsIHdhaXRGb3JUcmFuc2l0aW9uID0gdHJ1ZSkgPT4ge1xuICBpZiAoIXdhaXRGb3JUcmFuc2l0aW9uKSB7XG4gICAgZXhlY3V0ZShjYWxsYmFjaylcbiAgICByZXR1cm5cbiAgfVxuXG4gIGNvbnN0IGR1cmF0aW9uUGFkZGluZyA9IDVcbiAgY29uc3QgZW11bGF0ZWREdXJhdGlvbiA9IGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRyYW5zaXRpb25FbGVtZW50KSArIGR1cmF0aW9uUGFkZGluZ1xuXG4gIGxldCBjYWxsZWQgPSBmYWxzZVxuXG4gIGNvbnN0IGhhbmRsZXIgPSAoeyB0YXJnZXQgfSkgPT4ge1xuICAgIGlmICh0YXJnZXQgIT09IHRyYW5zaXRpb25FbGVtZW50KSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjYWxsZWQgPSB0cnVlXG4gICAgdHJhbnNpdGlvbkVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihUUkFOU0lUSU9OX0VORCwgaGFuZGxlcilcbiAgICBleGVjdXRlKGNhbGxiYWNrKVxuICB9XG5cbiAgdHJhbnNpdGlvbkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihUUkFOU0lUSU9OX0VORCwgaGFuZGxlcilcbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIHRyaWdnZXJUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25FbGVtZW50KVxuICAgIH1cbiAgfSwgZW11bGF0ZWREdXJhdGlvbilcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHByZXZpb3VzL25leHQgZWxlbWVudCBvZiBhIGxpc3QuXG4gKlxuICogQHBhcmFtIHthcnJheX0gbGlzdCAgICBUaGUgbGlzdCBvZiBlbGVtZW50c1xuICogQHBhcmFtIGFjdGl2ZUVsZW1lbnQgICBUaGUgYWN0aXZlIGVsZW1lbnRcbiAqIEBwYXJhbSBzaG91bGRHZXROZXh0ICAgQ2hvb3NlIHRvIGdldCBuZXh0IG9yIHByZXZpb3VzIGVsZW1lbnRcbiAqIEBwYXJhbSBpc0N5Y2xlQWxsb3dlZFxuICogQHJldHVybiB7RWxlbWVudHxlbGVtfSBUaGUgcHJvcGVyIGVsZW1lbnRcbiAqL1xuY29uc3QgZ2V0TmV4dEFjdGl2ZUVsZW1lbnQgPSAobGlzdCwgYWN0aXZlRWxlbWVudCwgc2hvdWxkR2V0TmV4dCwgaXNDeWNsZUFsbG93ZWQpID0+IHtcbiAgbGV0IGluZGV4ID0gbGlzdC5pbmRleE9mKGFjdGl2ZUVsZW1lbnQpXG5cbiAgLy8gaWYgdGhlIGVsZW1lbnQgZG9lcyBub3QgZXhpc3QgaW4gdGhlIGxpc3QgcmV0dXJuIGFuIGVsZW1lbnQgZGVwZW5kaW5nIG9uIHRoZSBkaXJlY3Rpb24gYW5kIGlmIGN5Y2xlIGlzIGFsbG93ZWRcbiAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgIHJldHVybiBsaXN0WyFzaG91bGRHZXROZXh0ICYmIGlzQ3ljbGVBbGxvd2VkID8gbGlzdC5sZW5ndGggLSAxIDogMF1cbiAgfVxuXG4gIGNvbnN0IGxpc3RMZW5ndGggPSBsaXN0Lmxlbmd0aFxuXG4gIGluZGV4ICs9IHNob3VsZEdldE5leHQgPyAxIDogLTFcblxuICBpZiAoaXNDeWNsZUFsbG93ZWQpIHtcbiAgICBpbmRleCA9IChpbmRleCArIGxpc3RMZW5ndGgpICUgbGlzdExlbmd0aFxuICB9XG5cbiAgcmV0dXJuIGxpc3RbTWF0aC5tYXgoMCwgTWF0aC5taW4oaW5kZXgsIGxpc3RMZW5ndGggLSAxKSldXG59XG5cbmV4cG9ydCB7XG4gIGdldEVsZW1lbnQsXG4gIGdldFVJRCxcbiAgZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCxcbiAgZ2V0RWxlbWVudEZyb21TZWxlY3RvcixcbiAgZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQsXG4gIHRyaWdnZXJUcmFuc2l0aW9uRW5kLFxuICBpc0VsZW1lbnQsXG4gIHR5cGVDaGVja0NvbmZpZyxcbiAgaXNWaXNpYmxlLFxuICBpc0Rpc2FibGVkLFxuICBmaW5kU2hhZG93Um9vdCxcbiAgbm9vcCxcbiAgZ2V0TmV4dEFjdGl2ZUVsZW1lbnQsXG4gIHJlZmxvdyxcbiAgZ2V0alF1ZXJ5LFxuICBvbkRPTUNvbnRlbnRMb2FkZWQsXG4gIGlzUlRMLFxuICBkZWZpbmVKUXVlcnlQbHVnaW4sXG4gIGV4ZWN1dGUsXG4gIGV4ZWN1dGVBZnRlclRyYW5zaXRpb25cbn1cbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogZG9tL2V2ZW50LWhhbmRsZXIuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgeyBnZXRqUXVlcnkgfSBmcm9tICcuLi91dGlsL2luZGV4J1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBuYW1lc3BhY2VSZWdleCA9IC9bXi5dKig/PVxcLi4qKVxcLnwuKi9cbmNvbnN0IHN0cmlwTmFtZVJlZ2V4ID0gL1xcLi4qL1xuY29uc3Qgc3RyaXBVaWRSZWdleCA9IC86OlxcZCskL1xuY29uc3QgZXZlbnRSZWdpc3RyeSA9IHt9IC8vIEV2ZW50cyBzdG9yYWdlXG5sZXQgdWlkRXZlbnQgPSAxXG5jb25zdCBjdXN0b21FdmVudHMgPSB7XG4gIG1vdXNlZW50ZXI6ICdtb3VzZW92ZXInLFxuICBtb3VzZWxlYXZlOiAnbW91c2VvdXQnXG59XG5jb25zdCBjdXN0b21FdmVudHNSZWdleCA9IC9eKG1vdXNlZW50ZXJ8bW91c2VsZWF2ZSkvaVxuY29uc3QgbmF0aXZlRXZlbnRzID0gbmV3IFNldChbXG4gICdjbGljaycsXG4gICdkYmxjbGljaycsXG4gICdtb3VzZXVwJyxcbiAgJ21vdXNlZG93bicsXG4gICdjb250ZXh0bWVudScsXG4gICdtb3VzZXdoZWVsJyxcbiAgJ0RPTU1vdXNlU2Nyb2xsJyxcbiAgJ21vdXNlb3ZlcicsXG4gICdtb3VzZW91dCcsXG4gICdtb3VzZW1vdmUnLFxuICAnc2VsZWN0c3RhcnQnLFxuICAnc2VsZWN0ZW5kJyxcbiAgJ2tleWRvd24nLFxuICAna2V5cHJlc3MnLFxuICAna2V5dXAnLFxuICAnb3JpZW50YXRpb25jaGFuZ2UnLFxuICAndG91Y2hzdGFydCcsXG4gICd0b3VjaG1vdmUnLFxuICAndG91Y2hlbmQnLFxuICAndG91Y2hjYW5jZWwnLFxuICAncG9pbnRlcmRvd24nLFxuICAncG9pbnRlcm1vdmUnLFxuICAncG9pbnRlcnVwJyxcbiAgJ3BvaW50ZXJsZWF2ZScsXG4gICdwb2ludGVyY2FuY2VsJyxcbiAgJ2dlc3R1cmVzdGFydCcsXG4gICdnZXN0dXJlY2hhbmdlJyxcbiAgJ2dlc3R1cmVlbmQnLFxuICAnZm9jdXMnLFxuICAnYmx1cicsXG4gICdjaGFuZ2UnLFxuICAncmVzZXQnLFxuICAnc2VsZWN0JyxcbiAgJ3N1Ym1pdCcsXG4gICdmb2N1c2luJyxcbiAgJ2ZvY3Vzb3V0JyxcbiAgJ2xvYWQnLFxuICAndW5sb2FkJyxcbiAgJ2JlZm9yZXVubG9hZCcsXG4gICdyZXNpemUnLFxuICAnbW92ZScsXG4gICdET01Db250ZW50TG9hZGVkJyxcbiAgJ3JlYWR5c3RhdGVjaGFuZ2UnLFxuICAnZXJyb3InLFxuICAnYWJvcnQnLFxuICAnc2Nyb2xsJ1xuXSlcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFByaXZhdGUgbWV0aG9kc1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuZnVuY3Rpb24gZ2V0VWlkRXZlbnQoZWxlbWVudCwgdWlkKSB7XG4gIHJldHVybiAodWlkICYmIGAke3VpZH06OiR7dWlkRXZlbnQrK31gKSB8fCBlbGVtZW50LnVpZEV2ZW50IHx8IHVpZEV2ZW50Kytcbn1cblxuZnVuY3Rpb24gZ2V0RXZlbnQoZWxlbWVudCkge1xuICBjb25zdCB1aWQgPSBnZXRVaWRFdmVudChlbGVtZW50KVxuXG4gIGVsZW1lbnQudWlkRXZlbnQgPSB1aWRcbiAgZXZlbnRSZWdpc3RyeVt1aWRdID0gZXZlbnRSZWdpc3RyeVt1aWRdIHx8IHt9XG5cbiAgcmV0dXJuIGV2ZW50UmVnaXN0cnlbdWlkXVxufVxuXG5mdW5jdGlvbiBib290c3RyYXBIYW5kbGVyKGVsZW1lbnQsIGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBoYW5kbGVyKGV2ZW50KSB7XG4gICAgZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSBlbGVtZW50XG5cbiAgICBpZiAoaGFuZGxlci5vbmVPZmYpIHtcbiAgICAgIEV2ZW50SGFuZGxlci5vZmYoZWxlbWVudCwgZXZlbnQudHlwZSwgZm4pXG4gICAgfVxuXG4gICAgcmV0dXJuIGZuLmFwcGx5KGVsZW1lbnQsIFtldmVudF0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYm9vdHN0cmFwRGVsZWdhdGlvbkhhbmRsZXIoZWxlbWVudCwgc2VsZWN0b3IsIGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBoYW5kbGVyKGV2ZW50KSB7XG4gICAgY29uc3QgZG9tRWxlbWVudHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpXG5cbiAgICBmb3IgKGxldCB7IHRhcmdldCB9ID0gZXZlbnQ7IHRhcmdldCAmJiB0YXJnZXQgIT09IHRoaXM7IHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlKSB7XG4gICAgICBmb3IgKGxldCBpID0gZG9tRWxlbWVudHMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgIGlmIChkb21FbGVtZW50c1tpXSA9PT0gdGFyZ2V0KSB7XG4gICAgICAgICAgZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0YXJnZXRcblxuICAgICAgICAgIGlmIChoYW5kbGVyLm9uZU9mZikge1xuICAgICAgICAgICAgRXZlbnRIYW5kbGVyLm9mZihlbGVtZW50LCBldmVudC50eXBlLCBzZWxlY3RvciwgZm4pXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRhcmdldCwgW2V2ZW50XSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRvIHBsZWFzZSBFU0xpbnRcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRIYW5kbGVyKGV2ZW50cywgaGFuZGxlciwgZGVsZWdhdGlvblNlbGVjdG9yID0gbnVsbCkge1xuICBjb25zdCB1aWRFdmVudExpc3QgPSBPYmplY3Qua2V5cyhldmVudHMpXG5cbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHVpZEV2ZW50TGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNvbnN0IGV2ZW50ID0gZXZlbnRzW3VpZEV2ZW50TGlzdFtpXV1cblxuICAgIGlmIChldmVudC5vcmlnaW5hbEhhbmRsZXIgPT09IGhhbmRsZXIgJiYgZXZlbnQuZGVsZWdhdGlvblNlbGVjdG9yID09PSBkZWxlZ2F0aW9uU2VsZWN0b3IpIHtcbiAgICAgIHJldHVybiBldmVudFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhcmFtcyhvcmlnaW5hbFR5cGVFdmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZuKSB7XG4gIGNvbnN0IGRlbGVnYXRpb24gPSB0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZydcbiAgY29uc3Qgb3JpZ2luYWxIYW5kbGVyID0gZGVsZWdhdGlvbiA/IGRlbGVnYXRpb25GbiA6IGhhbmRsZXJcblxuICBsZXQgdHlwZUV2ZW50ID0gZ2V0VHlwZUV2ZW50KG9yaWdpbmFsVHlwZUV2ZW50KVxuICBjb25zdCBpc05hdGl2ZSA9IG5hdGl2ZUV2ZW50cy5oYXModHlwZUV2ZW50KVxuXG4gIGlmICghaXNOYXRpdmUpIHtcbiAgICB0eXBlRXZlbnQgPSBvcmlnaW5hbFR5cGVFdmVudFxuICB9XG5cbiAgcmV0dXJuIFtkZWxlZ2F0aW9uLCBvcmlnaW5hbEhhbmRsZXIsIHR5cGVFdmVudF1cbn1cblxuZnVuY3Rpb24gYWRkSGFuZGxlcihlbGVtZW50LCBvcmlnaW5hbFR5cGVFdmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZuLCBvbmVPZmYpIHtcbiAgaWYgKHR5cGVvZiBvcmlnaW5hbFR5cGVFdmVudCAhPT0gJ3N0cmluZycgfHwgIWVsZW1lbnQpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmICghaGFuZGxlcikge1xuICAgIGhhbmRsZXIgPSBkZWxlZ2F0aW9uRm5cbiAgICBkZWxlZ2F0aW9uRm4gPSBudWxsXG4gIH1cblxuICAvLyBpbiBjYXNlIG9mIG1vdXNlZW50ZXIgb3IgbW91c2VsZWF2ZSB3cmFwIHRoZSBoYW5kbGVyIHdpdGhpbiBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGZvciBpdHMgRE9NIHBvc2l0aW9uXG4gIC8vIHRoaXMgcHJldmVudHMgdGhlIGhhbmRsZXIgZnJvbSBiZWluZyBkaXNwYXRjaGVkIHRoZSBzYW1lIHdheSBhcyBtb3VzZW92ZXIgb3IgbW91c2VvdXQgZG9lc1xuICBpZiAoY3VzdG9tRXZlbnRzUmVnZXgudGVzdChvcmlnaW5hbFR5cGVFdmVudCkpIHtcbiAgICBjb25zdCB3cmFwRm4gPSBmbiA9PiB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICghZXZlbnQucmVsYXRlZFRhcmdldCB8fCAoZXZlbnQucmVsYXRlZFRhcmdldCAhPT0gZXZlbnQuZGVsZWdhdGVUYXJnZXQgJiYgIWV2ZW50LmRlbGVnYXRlVGFyZ2V0LmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpKSkge1xuICAgICAgICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIGV2ZW50KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRlbGVnYXRpb25Gbikge1xuICAgICAgZGVsZWdhdGlvbkZuID0gd3JhcEZuKGRlbGVnYXRpb25GbilcbiAgICB9IGVsc2Uge1xuICAgICAgaGFuZGxlciA9IHdyYXBGbihoYW5kbGVyKVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IFtkZWxlZ2F0aW9uLCBvcmlnaW5hbEhhbmRsZXIsIHR5cGVFdmVudF0gPSBub3JtYWxpemVQYXJhbXMob3JpZ2luYWxUeXBlRXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25GbilcbiAgY29uc3QgZXZlbnRzID0gZ2V0RXZlbnQoZWxlbWVudClcbiAgY29uc3QgaGFuZGxlcnMgPSBldmVudHNbdHlwZUV2ZW50XSB8fCAoZXZlbnRzW3R5cGVFdmVudF0gPSB7fSlcbiAgY29uc3QgcHJldmlvdXNGbiA9IGZpbmRIYW5kbGVyKGhhbmRsZXJzLCBvcmlnaW5hbEhhbmRsZXIsIGRlbGVnYXRpb24gPyBoYW5kbGVyIDogbnVsbClcblxuICBpZiAocHJldmlvdXNGbikge1xuICAgIHByZXZpb3VzRm4ub25lT2ZmID0gcHJldmlvdXNGbi5vbmVPZmYgJiYgb25lT2ZmXG5cbiAgICByZXR1cm5cbiAgfVxuXG4gIGNvbnN0IHVpZCA9IGdldFVpZEV2ZW50KG9yaWdpbmFsSGFuZGxlciwgb3JpZ2luYWxUeXBlRXZlbnQucmVwbGFjZShuYW1lc3BhY2VSZWdleCwgJycpKVxuICBjb25zdCBmbiA9IGRlbGVnYXRpb24gP1xuICAgIGJvb3RzdHJhcERlbGVnYXRpb25IYW5kbGVyKGVsZW1lbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25GbikgOlxuICAgIGJvb3RzdHJhcEhhbmRsZXIoZWxlbWVudCwgaGFuZGxlcilcblxuICBmbi5kZWxlZ2F0aW9uU2VsZWN0b3IgPSBkZWxlZ2F0aW9uID8gaGFuZGxlciA6IG51bGxcbiAgZm4ub3JpZ2luYWxIYW5kbGVyID0gb3JpZ2luYWxIYW5kbGVyXG4gIGZuLm9uZU9mZiA9IG9uZU9mZlxuICBmbi51aWRFdmVudCA9IHVpZFxuICBoYW5kbGVyc1t1aWRdID0gZm5cblxuICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZUV2ZW50LCBmbiwgZGVsZWdhdGlvbilcbn1cblxuZnVuY3Rpb24gcmVtb3ZlSGFuZGxlcihlbGVtZW50LCBldmVudHMsIHR5cGVFdmVudCwgaGFuZGxlciwgZGVsZWdhdGlvblNlbGVjdG9yKSB7XG4gIGNvbnN0IGZuID0gZmluZEhhbmRsZXIoZXZlbnRzW3R5cGVFdmVudF0sIGhhbmRsZXIsIGRlbGVnYXRpb25TZWxlY3RvcilcblxuICBpZiAoIWZuKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZUV2ZW50LCBmbiwgQm9vbGVhbihkZWxlZ2F0aW9uU2VsZWN0b3IpKVxuICBkZWxldGUgZXZlbnRzW3R5cGVFdmVudF1bZm4udWlkRXZlbnRdXG59XG5cbmZ1bmN0aW9uIHJlbW92ZU5hbWVzcGFjZWRIYW5kbGVycyhlbGVtZW50LCBldmVudHMsIHR5cGVFdmVudCwgbmFtZXNwYWNlKSB7XG4gIGNvbnN0IHN0b3JlRWxlbWVudEV2ZW50ID0gZXZlbnRzW3R5cGVFdmVudF0gfHwge31cblxuICBPYmplY3Qua2V5cyhzdG9yZUVsZW1lbnRFdmVudCkuZm9yRWFjaChoYW5kbGVyS2V5ID0+IHtcbiAgICBpZiAoaGFuZGxlcktleS5pbmNsdWRlcyhuYW1lc3BhY2UpKSB7XG4gICAgICBjb25zdCBldmVudCA9IHN0b3JlRWxlbWVudEV2ZW50W2hhbmRsZXJLZXldXG5cbiAgICAgIHJlbW92ZUhhbmRsZXIoZWxlbWVudCwgZXZlbnRzLCB0eXBlRXZlbnQsIGV2ZW50Lm9yaWdpbmFsSGFuZGxlciwgZXZlbnQuZGVsZWdhdGlvblNlbGVjdG9yKVxuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZUV2ZW50KGV2ZW50KSB7XG4gIC8vIGFsbG93IHRvIGdldCB0aGUgbmF0aXZlIGV2ZW50cyBmcm9tIG5hbWVzcGFjZWQgZXZlbnRzICgnY2xpY2suYnMuYnV0dG9uJyAtLT4gJ2NsaWNrJylcbiAgZXZlbnQgPSBldmVudC5yZXBsYWNlKHN0cmlwTmFtZVJlZ2V4LCAnJylcbiAgcmV0dXJuIGN1c3RvbUV2ZW50c1tldmVudF0gfHwgZXZlbnRcbn1cblxuY29uc3QgRXZlbnRIYW5kbGVyID0ge1xuICBvbihlbGVtZW50LCBldmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZuKSB7XG4gICAgYWRkSGFuZGxlcihlbGVtZW50LCBldmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZuLCBmYWxzZSlcbiAgfSxcblxuICBvbmUoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25Gbikge1xuICAgIGFkZEhhbmRsZXIoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25GbiwgdHJ1ZSlcbiAgfSxcblxuICBvZmYoZWxlbWVudCwgb3JpZ2luYWxUeXBlRXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25Gbikge1xuICAgIGlmICh0eXBlb2Ygb3JpZ2luYWxUeXBlRXZlbnQgIT09ICdzdHJpbmcnIHx8ICFlbGVtZW50KSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBbZGVsZWdhdGlvbiwgb3JpZ2luYWxIYW5kbGVyLCB0eXBlRXZlbnRdID0gbm9ybWFsaXplUGFyYW1zKG9yaWdpbmFsVHlwZUV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRm4pXG4gICAgY29uc3QgaW5OYW1lc3BhY2UgPSB0eXBlRXZlbnQgIT09IG9yaWdpbmFsVHlwZUV2ZW50XG4gICAgY29uc3QgZXZlbnRzID0gZ2V0RXZlbnQoZWxlbWVudClcbiAgICBjb25zdCBpc05hbWVzcGFjZSA9IG9yaWdpbmFsVHlwZUV2ZW50LnN0YXJ0c1dpdGgoJy4nKVxuXG4gICAgaWYgKHR5cGVvZiBvcmlnaW5hbEhhbmRsZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBTaW1wbGVzdCBjYXNlOiBoYW5kbGVyIGlzIHBhc3NlZCwgcmVtb3ZlIHRoYXQgbGlzdGVuZXIgT05MWS5cbiAgICAgIGlmICghZXZlbnRzIHx8ICFldmVudHNbdHlwZUV2ZW50XSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgcmVtb3ZlSGFuZGxlcihlbGVtZW50LCBldmVudHMsIHR5cGVFdmVudCwgb3JpZ2luYWxIYW5kbGVyLCBkZWxlZ2F0aW9uID8gaGFuZGxlciA6IG51bGwpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoaXNOYW1lc3BhY2UpIHtcbiAgICAgIE9iamVjdC5rZXlzKGV2ZW50cykuZm9yRWFjaChlbGVtZW50RXZlbnQgPT4ge1xuICAgICAgICByZW1vdmVOYW1lc3BhY2VkSGFuZGxlcnMoZWxlbWVudCwgZXZlbnRzLCBlbGVtZW50RXZlbnQsIG9yaWdpbmFsVHlwZUV2ZW50LnNsaWNlKDEpKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBzdG9yZUVsZW1lbnRFdmVudCA9IGV2ZW50c1t0eXBlRXZlbnRdIHx8IHt9XG4gICAgT2JqZWN0LmtleXMoc3RvcmVFbGVtZW50RXZlbnQpLmZvckVhY2goa2V5SGFuZGxlcnMgPT4ge1xuICAgICAgY29uc3QgaGFuZGxlcktleSA9IGtleUhhbmRsZXJzLnJlcGxhY2Uoc3RyaXBVaWRSZWdleCwgJycpXG5cbiAgICAgIGlmICghaW5OYW1lc3BhY2UgfHwgb3JpZ2luYWxUeXBlRXZlbnQuaW5jbHVkZXMoaGFuZGxlcktleSkpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBzdG9yZUVsZW1lbnRFdmVudFtrZXlIYW5kbGVyc11cblxuICAgICAgICByZW1vdmVIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cywgdHlwZUV2ZW50LCBldmVudC5vcmlnaW5hbEhhbmRsZXIsIGV2ZW50LmRlbGVnYXRpb25TZWxlY3RvcilcbiAgICAgIH1cbiAgICB9KVxuICB9LFxuXG4gIHRyaWdnZXIoZWxlbWVudCwgZXZlbnQsIGFyZ3MpIHtcbiAgICBpZiAodHlwZW9mIGV2ZW50ICE9PSAnc3RyaW5nJyB8fCAhZWxlbWVudCkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBjb25zdCAkID0gZ2V0alF1ZXJ5KClcbiAgICBjb25zdCB0eXBlRXZlbnQgPSBnZXRUeXBlRXZlbnQoZXZlbnQpXG4gICAgY29uc3QgaW5OYW1lc3BhY2UgPSBldmVudCAhPT0gdHlwZUV2ZW50XG4gICAgY29uc3QgaXNOYXRpdmUgPSBuYXRpdmVFdmVudHMuaGFzKHR5cGVFdmVudClcblxuICAgIGxldCBqUXVlcnlFdmVudFxuICAgIGxldCBidWJibGVzID0gdHJ1ZVxuICAgIGxldCBuYXRpdmVEaXNwYXRjaCA9IHRydWVcbiAgICBsZXQgZGVmYXVsdFByZXZlbnRlZCA9IGZhbHNlXG4gICAgbGV0IGV2dCA9IG51bGxcblxuICAgIGlmIChpbk5hbWVzcGFjZSAmJiAkKSB7XG4gICAgICBqUXVlcnlFdmVudCA9ICQuRXZlbnQoZXZlbnQsIGFyZ3MpXG5cbiAgICAgICQoZWxlbWVudCkudHJpZ2dlcihqUXVlcnlFdmVudClcbiAgICAgIGJ1YmJsZXMgPSAhalF1ZXJ5RXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKVxuICAgICAgbmF0aXZlRGlzcGF0Y2ggPSAhalF1ZXJ5RXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKVxuICAgICAgZGVmYXVsdFByZXZlbnRlZCA9IGpRdWVyeUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpXG4gICAgfVxuXG4gICAgaWYgKGlzTmF0aXZlKSB7XG4gICAgICBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpXG4gICAgICBldnQuaW5pdEV2ZW50KHR5cGVFdmVudCwgYnViYmxlcywgdHJ1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgZXZ0ID0gbmV3IEN1c3RvbUV2ZW50KGV2ZW50LCB7XG4gICAgICAgIGJ1YmJsZXMsXG4gICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8gbWVyZ2UgY3VzdG9tIGluZm9ybWF0aW9uIGluIG91ciBldmVudFxuICAgIGlmICh0eXBlb2YgYXJncyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIE9iamVjdC5rZXlzKGFyZ3MpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV2dCwga2V5LCB7XG4gICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3Nba2V5XVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKGRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgfVxuXG4gICAgaWYgKG5hdGl2ZURpc3BhdGNoKSB7XG4gICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZ0KVxuICAgIH1cblxuICAgIGlmIChldnQuZGVmYXVsdFByZXZlbnRlZCAmJiB0eXBlb2YgalF1ZXJ5RXZlbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBqUXVlcnlFdmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgfVxuXG4gICAgcmV0dXJuIGV2dFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEV2ZW50SGFuZGxlclxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4xLjMpOiBkb20vZGF0YS5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IGVsZW1lbnRNYXAgPSBuZXcgTWFwKClcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzZXQoZWxlbWVudCwga2V5LCBpbnN0YW5jZSkge1xuICAgIGlmICghZWxlbWVudE1hcC5oYXMoZWxlbWVudCkpIHtcbiAgICAgIGVsZW1lbnRNYXAuc2V0KGVsZW1lbnQsIG5ldyBNYXAoKSlcbiAgICB9XG5cbiAgICBjb25zdCBpbnN0YW5jZU1hcCA9IGVsZW1lbnRNYXAuZ2V0KGVsZW1lbnQpXG5cbiAgICAvLyBtYWtlIGl0IGNsZWFyIHdlIG9ubHkgd2FudCBvbmUgaW5zdGFuY2UgcGVyIGVsZW1lbnRcbiAgICAvLyBjYW4gYmUgcmVtb3ZlZCBsYXRlciB3aGVuIG11bHRpcGxlIGtleS9pbnN0YW5jZXMgYXJlIGZpbmUgdG8gYmUgdXNlZFxuICAgIGlmICghaW5zdGFuY2VNYXAuaGFzKGtleSkgJiYgaW5zdGFuY2VNYXAuc2l6ZSAhPT0gMCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEJvb3RzdHJhcCBkb2Vzbid0IGFsbG93IG1vcmUgdGhhbiBvbmUgaW5zdGFuY2UgcGVyIGVsZW1lbnQuIEJvdW5kIGluc3RhbmNlOiAke0FycmF5LmZyb20oaW5zdGFuY2VNYXAua2V5cygpKVswXX0uYClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGluc3RhbmNlTWFwLnNldChrZXksIGluc3RhbmNlKVxuICB9LFxuXG4gIGdldChlbGVtZW50LCBrZXkpIHtcbiAgICBpZiAoZWxlbWVudE1hcC5oYXMoZWxlbWVudCkpIHtcbiAgICAgIHJldHVybiBlbGVtZW50TWFwLmdldChlbGVtZW50KS5nZXQoa2V5KSB8fCBudWxsXG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGxcbiAgfSxcblxuICByZW1vdmUoZWxlbWVudCwga2V5KSB7XG4gICAgaWYgKCFlbGVtZW50TWFwLmhhcyhlbGVtZW50KSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgaW5zdGFuY2VNYXAgPSBlbGVtZW50TWFwLmdldChlbGVtZW50KVxuXG4gICAgaW5zdGFuY2VNYXAuZGVsZXRlKGtleSlcblxuICAgIC8vIGZyZWUgdXAgZWxlbWVudCByZWZlcmVuY2VzIGlmIHRoZXJlIGFyZSBubyBpbnN0YW5jZXMgbGVmdCBmb3IgYW4gZWxlbWVudFxuICAgIGlmIChpbnN0YW5jZU1hcC5zaXplID09PSAwKSB7XG4gICAgICBlbGVtZW50TWFwLmRlbGV0ZShlbGVtZW50KVxuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4xLjMpOiBiYXNlLWNvbXBvbmVudC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCBEYXRhIGZyb20gJy4vZG9tL2RhdGEnXG5pbXBvcnQge1xuICBleGVjdXRlQWZ0ZXJUcmFuc2l0aW9uLFxuICBnZXRFbGVtZW50XG59IGZyb20gJy4vdXRpbC9pbmRleCdcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi9kb20vZXZlbnQtaGFuZGxlcidcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgVkVSU0lPTiA9ICc1LjEuMydcblxuY2xhc3MgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50ID0gZ2V0RWxlbWVudChlbGVtZW50KVxuXG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudFxuICAgIERhdGEuc2V0KHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVksIHRoaXMpXG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIERhdGEucmVtb3ZlKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVkpXG4gICAgRXZlbnRIYW5kbGVyLm9mZih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkVWRU5UX0tFWSlcblxuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpLmZvckVhY2gocHJvcGVydHlOYW1lID0+IHtcbiAgICAgIHRoaXNbcHJvcGVydHlOYW1lXSA9IG51bGxcbiAgICB9KVxuICB9XG5cbiAgX3F1ZXVlQ2FsbGJhY2soY2FsbGJhY2ssIGVsZW1lbnQsIGlzQW5pbWF0ZWQgPSB0cnVlKSB7XG4gICAgZXhlY3V0ZUFmdGVyVHJhbnNpdGlvbihjYWxsYmFjaywgZWxlbWVudCwgaXNBbmltYXRlZClcbiAgfVxuXG4gIC8qKiBTdGF0aWMgKi9cblxuICBzdGF0aWMgZ2V0SW5zdGFuY2UoZWxlbWVudCkge1xuICAgIHJldHVybiBEYXRhLmdldChnZXRFbGVtZW50KGVsZW1lbnQpLCB0aGlzLkRBVEFfS0VZKVxuICB9XG5cbiAgc3RhdGljIGdldE9yQ3JlYXRlSW5zdGFuY2UoZWxlbWVudCwgY29uZmlnID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJbnN0YW5jZShlbGVtZW50KSB8fCBuZXcgdGhpcyhlbGVtZW50LCB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IG51bGwpXG4gIH1cblxuICBzdGF0aWMgZ2V0IFZFUlNJT04oKSB7XG4gICAgcmV0dXJuIFZFUlNJT05cbiAgfVxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBoYXZlIHRvIGltcGxlbWVudCB0aGUgc3RhdGljIG1ldGhvZCBcIk5BTUVcIiwgZm9yIGVhY2ggY29tcG9uZW50IScpXG4gIH1cblxuICBzdGF0aWMgZ2V0IERBVEFfS0VZKCkge1xuICAgIHJldHVybiBgYnMuJHt0aGlzLk5BTUV9YFxuICB9XG5cbiAgc3RhdGljIGdldCBFVkVOVF9LRVkoKSB7XG4gICAgcmV0dXJuIGAuJHt0aGlzLkRBVEFfS0VZfWBcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCYXNlQ29tcG9uZW50XG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IHV0aWwvY29tcG9uZW50LWZ1bmN0aW9ucy5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi4vZG9tL2V2ZW50LWhhbmRsZXInXG5pbXBvcnQgeyBnZXRFbGVtZW50RnJvbVNlbGVjdG9yLCBpc0Rpc2FibGVkIH0gZnJvbSAnLi9pbmRleCdcblxuY29uc3QgZW5hYmxlRGlzbWlzc1RyaWdnZXIgPSAoY29tcG9uZW50LCBtZXRob2QgPSAnaGlkZScpID0+IHtcbiAgY29uc3QgY2xpY2tFdmVudCA9IGBjbGljay5kaXNtaXNzJHtjb21wb25lbnQuRVZFTlRfS0VZfWBcbiAgY29uc3QgbmFtZSA9IGNvbXBvbmVudC5OQU1FXG5cbiAgRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBjbGlja0V2ZW50LCBgW2RhdGEtYnMtZGlzbWlzcz1cIiR7bmFtZX1cIl1gLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoWydBJywgJ0FSRUEnXS5pbmNsdWRlcyh0aGlzLnRhZ05hbWUpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgfVxuXG4gICAgaWYgKGlzRGlzYWJsZWQodGhpcykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHRhcmdldCA9IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IodGhpcykgfHwgdGhpcy5jbG9zZXN0KGAuJHtuYW1lfWApXG4gICAgY29uc3QgaW5zdGFuY2UgPSBjb21wb25lbnQuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0YXJnZXQpXG5cbiAgICAvLyBNZXRob2QgYXJndW1lbnQgaXMgbGVmdCwgZm9yIEFsZXJ0IGFuZCBvbmx5LCBhcyBpdCBkb2Vzbid0IGltcGxlbWVudCB0aGUgJ2hpZGUnIG1ldGhvZFxuICAgIGluc3RhbmNlW21ldGhvZF0oKVxuICB9KVxufVxuXG5leHBvcnQge1xuICBlbmFibGVEaXNtaXNzVHJpZ2dlclxufVxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4xLjMpOiBhbGVydC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCB7IGRlZmluZUpRdWVyeVBsdWdpbiB9IGZyb20gJy4vdXRpbC9pbmRleCdcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi9kb20vZXZlbnQtaGFuZGxlcidcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gJy4vYmFzZS1jb21wb25lbnQnXG5pbXBvcnQgeyBlbmFibGVEaXNtaXNzVHJpZ2dlciB9IGZyb20gJy4vdXRpbC9jb21wb25lbnQtZnVuY3Rpb25zJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FID0gJ2FsZXJ0J1xuY29uc3QgREFUQV9LRVkgPSAnYnMuYWxlcnQnXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YFxuXG5jb25zdCBFVkVOVF9DTE9TRSA9IGBjbG9zZSR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0NMT1NFRCA9IGBjbG9zZWQke0VWRU5UX0tFWX1gXG5jb25zdCBDTEFTU19OQU1FX0ZBREUgPSAnZmFkZSdcbmNvbnN0IENMQVNTX05BTUVfU0hPVyA9ICdzaG93J1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgQWxlcnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgLy8gR2V0dGVyc1xuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRVxuICB9XG5cbiAgLy8gUHVibGljXG5cbiAgY2xvc2UoKSB7XG4gICAgY29uc3QgY2xvc2VFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0NMT1NFKVxuXG4gICAgaWYgKGNsb3NlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVylcblxuICAgIGNvbnN0IGlzQW5pbWF0ZWQgPSB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0ZBREUpXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB0aGlzLl9kZXN0cm95RWxlbWVudCgpLCB0aGlzLl9lbGVtZW50LCBpc0FuaW1hdGVkKVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuICBfZGVzdHJveUVsZW1lbnQoKSB7XG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKVxuICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0NMT1NFRClcbiAgICB0aGlzLmRpc3Bvc2UoKVxuICB9XG5cbiAgLy8gU3RhdGljXG5cbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBBbGVydC5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpXG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGFbY29uZmlnXSA9PT0gdW5kZWZpbmVkIHx8IGNvbmZpZy5zdGFydHNXaXRoKCdfJykgfHwgY29uZmlnID09PSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYClcbiAgICAgIH1cblxuICAgICAgZGF0YVtjb25maWddKHRoaXMpXG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmVuYWJsZURpc21pc3NUcmlnZ2VyKEFsZXJ0LCAnY2xvc2UnKVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGFkZCAuQWxlcnQgdG8galF1ZXJ5IG9ubHkgaWYgalF1ZXJ5IGlzIHByZXNlbnRcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oQWxlcnQpXG5cbmV4cG9ydCBkZWZhdWx0IEFsZXJ0XG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IGJ1dHRvbi5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCB7IGRlZmluZUpRdWVyeVBsdWdpbiB9IGZyb20gJy4vdXRpbC9pbmRleCdcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi9kb20vZXZlbnQtaGFuZGxlcidcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gJy4vYmFzZS1jb21wb25lbnQnXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUgPSAnYnV0dG9uJ1xuY29uc3QgREFUQV9LRVkgPSAnYnMuYnV0dG9uJ1xuY29uc3QgRVZFTlRfS0VZID0gYC4ke0RBVEFfS0VZfWBcbmNvbnN0IERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknXG5cbmNvbnN0IENMQVNTX05BTUVfQUNUSVZFID0gJ2FjdGl2ZSdcblxuY29uc3QgU0VMRUNUT1JfREFUQV9UT0dHTEUgPSAnW2RhdGEtYnMtdG9nZ2xlPVwiYnV0dG9uXCJdJ1xuXG5jb25zdCBFVkVOVF9DTElDS19EQVRBX0FQSSA9IGBjbGljayR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIEJ1dHRvbiBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICAvLyBHZXR0ZXJzXG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcblxuICB0b2dnbGUoKSB7XG4gICAgLy8gVG9nZ2xlIGNsYXNzIGFuZCBzeW5jIHRoZSBgYXJpYS1wcmVzc2VkYCBhdHRyaWJ1dGUgd2l0aCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBgLnRvZ2dsZSgpYCBtZXRob2RcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKENMQVNTX05BTUVfQUNUSVZFKSlcbiAgfVxuXG4gIC8vIFN0YXRpY1xuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gQnV0dG9uLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcylcblxuICAgICAgaWYgKGNvbmZpZyA9PT0gJ3RvZ2dsZScpIHtcbiAgICAgICAgZGF0YVtjb25maWddKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9DTElDS19EQVRBX0FQSSwgU0VMRUNUT1JfREFUQV9UT0dHTEUsIGV2ZW50ID0+IHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuXG4gIGNvbnN0IGJ1dHRvbiA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KFNFTEVDVE9SX0RBVEFfVE9HR0xFKVxuICBjb25zdCBkYXRhID0gQnV0dG9uLmdldE9yQ3JlYXRlSW5zdGFuY2UoYnV0dG9uKVxuXG4gIGRhdGEudG9nZ2xlKClcbn0pXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogYWRkIC5CdXR0b24gdG8galF1ZXJ5IG9ubHkgaWYgalF1ZXJ5IGlzIHByZXNlbnRcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oQnV0dG9uKVxuXG5leHBvcnQgZGVmYXVsdCBCdXR0b25cbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogZG9tL21hbmlwdWxhdG9yLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplRGF0YSh2YWwpIHtcbiAgaWYgKHZhbCA9PT0gJ3RydWUnKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGlmICh2YWwgPT09ICdmYWxzZScpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGlmICh2YWwgPT09IE51bWJlcih2YWwpLnRvU3RyaW5nKCkpIHtcbiAgICByZXR1cm4gTnVtYmVyKHZhbClcbiAgfVxuXG4gIGlmICh2YWwgPT09ICcnIHx8IHZhbCA9PT0gJ251bGwnKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplRGF0YUtleShrZXkpIHtcbiAgcmV0dXJuIGtleS5yZXBsYWNlKC9bQS1aXS9nLCBjaHIgPT4gYC0ke2Noci50b0xvd2VyQ2FzZSgpfWApXG59XG5cbmNvbnN0IE1hbmlwdWxhdG9yID0ge1xuICBzZXREYXRhQXR0cmlidXRlKGVsZW1lbnQsIGtleSwgdmFsdWUpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShgZGF0YS1icy0ke25vcm1hbGl6ZURhdGFLZXkoa2V5KX1gLCB2YWx1ZSlcbiAgfSxcblxuICByZW1vdmVEYXRhQXR0cmlidXRlKGVsZW1lbnQsIGtleSkge1xuICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGBkYXRhLWJzLSR7bm9ybWFsaXplRGF0YUtleShrZXkpfWApXG4gIH0sXG5cbiAgZ2V0RGF0YUF0dHJpYnV0ZXMoZWxlbWVudCkge1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuIHt9XG4gICAgfVxuXG4gICAgY29uc3QgYXR0cmlidXRlcyA9IHt9XG5cbiAgICBPYmplY3Qua2V5cyhlbGVtZW50LmRhdGFzZXQpXG4gICAgICAuZmlsdGVyKGtleSA9PiBrZXkuc3RhcnRzV2l0aCgnYnMnKSlcbiAgICAgIC5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGxldCBwdXJlS2V5ID0ga2V5LnJlcGxhY2UoL15icy8sICcnKVxuICAgICAgICBwdXJlS2V5ID0gcHVyZUtleS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHB1cmVLZXkuc2xpY2UoMSwgcHVyZUtleS5sZW5ndGgpXG4gICAgICAgIGF0dHJpYnV0ZXNbcHVyZUtleV0gPSBub3JtYWxpemVEYXRhKGVsZW1lbnQuZGF0YXNldFtrZXldKVxuICAgICAgfSlcblxuICAgIHJldHVybiBhdHRyaWJ1dGVzXG4gIH0sXG5cbiAgZ2V0RGF0YUF0dHJpYnV0ZShlbGVtZW50LCBrZXkpIHtcbiAgICByZXR1cm4gbm9ybWFsaXplRGF0YShlbGVtZW50LmdldEF0dHJpYnV0ZShgZGF0YS1icy0ke25vcm1hbGl6ZURhdGFLZXkoa2V5KX1gKSlcbiAgfSxcblxuICBvZmZzZXQoZWxlbWVudCkge1xuICAgIGNvbnN0IHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG5cbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiByZWN0LnRvcCArIHdpbmRvdy5wYWdlWU9mZnNldCxcbiAgICAgIGxlZnQ6IHJlY3QubGVmdCArIHdpbmRvdy5wYWdlWE9mZnNldFxuICAgIH1cbiAgfSxcblxuICBwb3NpdGlvbihlbGVtZW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogZWxlbWVudC5vZmZzZXRUb3AsXG4gICAgICBsZWZ0OiBlbGVtZW50Lm9mZnNldExlZnRcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWFuaXB1bGF0b3JcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogZG9tL3NlbGVjdG9yLWVuZ2luZS5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCB7IGlzRGlzYWJsZWQsIGlzVmlzaWJsZSB9IGZyb20gJy4uL3V0aWwvaW5kZXgnXG5cbmNvbnN0IE5PREVfVEVYVCA9IDNcblxuY29uc3QgU2VsZWN0b3JFbmdpbmUgPSB7XG4gIGZpbmQoc2VsZWN0b3IsIGVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICByZXR1cm4gW10uY29uY2F0KC4uLkVsZW1lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3JBbGwuY2FsbChlbGVtZW50LCBzZWxlY3RvcikpXG4gIH0sXG5cbiAgZmluZE9uZShzZWxlY3RvciwgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgIHJldHVybiBFbGVtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yLmNhbGwoZWxlbWVudCwgc2VsZWN0b3IpXG4gIH0sXG5cbiAgY2hpbGRyZW4oZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW10uY29uY2F0KC4uLmVsZW1lbnQuY2hpbGRyZW4pXG4gICAgICAuZmlsdGVyKGNoaWxkID0+IGNoaWxkLm1hdGNoZXMoc2VsZWN0b3IpKVxuICB9LFxuXG4gIHBhcmVudHMoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICBjb25zdCBwYXJlbnRzID0gW11cblxuICAgIGxldCBhbmNlc3RvciA9IGVsZW1lbnQucGFyZW50Tm9kZVxuXG4gICAgd2hpbGUgKGFuY2VzdG9yICYmIGFuY2VzdG9yLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJiBhbmNlc3Rvci5ub2RlVHlwZSAhPT0gTk9ERV9URVhUKSB7XG4gICAgICBpZiAoYW5jZXN0b3IubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgICAgcGFyZW50cy5wdXNoKGFuY2VzdG9yKVxuICAgICAgfVxuXG4gICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudE5vZGVcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyZW50c1xuICB9LFxuXG4gIHByZXYoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICBsZXQgcHJldmlvdXMgPSBlbGVtZW50LnByZXZpb3VzRWxlbWVudFNpYmxpbmdcblxuICAgIHdoaWxlIChwcmV2aW91cykge1xuICAgICAgaWYgKHByZXZpb3VzLm1hdGNoZXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiBbcHJldmlvdXNdXG4gICAgICB9XG5cbiAgICAgIHByZXZpb3VzID0gcHJldmlvdXMucHJldmlvdXNFbGVtZW50U2libGluZ1xuICAgIH1cblxuICAgIHJldHVybiBbXVxuICB9LFxuXG4gIG5leHQoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICBsZXQgbmV4dCA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nXG5cbiAgICB3aGlsZSAobmV4dCkge1xuICAgICAgaWYgKG5leHQubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIFtuZXh0XVxuICAgICAgfVxuXG4gICAgICBuZXh0ID0gbmV4dC5uZXh0RWxlbWVudFNpYmxpbmdcbiAgICB9XG5cbiAgICByZXR1cm4gW11cbiAgfSxcblxuICBmb2N1c2FibGVDaGlsZHJlbihlbGVtZW50KSB7XG4gICAgY29uc3QgZm9jdXNhYmxlcyA9IFtcbiAgICAgICdhJyxcbiAgICAgICdidXR0b24nLFxuICAgICAgJ2lucHV0JyxcbiAgICAgICd0ZXh0YXJlYScsXG4gICAgICAnc2VsZWN0JyxcbiAgICAgICdkZXRhaWxzJyxcbiAgICAgICdbdGFiaW5kZXhdJyxcbiAgICAgICdbY29udGVudGVkaXRhYmxlPVwidHJ1ZVwiXSdcbiAgICBdLm1hcChzZWxlY3RvciA9PiBgJHtzZWxlY3Rvcn06bm90KFt0YWJpbmRleF49XCItXCJdKWApLmpvaW4oJywgJylcblxuICAgIHJldHVybiB0aGlzLmZpbmQoZm9jdXNhYmxlcywgZWxlbWVudCkuZmlsdGVyKGVsID0+ICFpc0Rpc2FibGVkKGVsKSAmJiBpc1Zpc2libGUoZWwpKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlbGVjdG9yRW5naW5lXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IGNhcm91c2VsLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IHtcbiAgZGVmaW5lSlF1ZXJ5UGx1Z2luLFxuICBnZXRFbGVtZW50RnJvbVNlbGVjdG9yLFxuICBpc1JUTCxcbiAgaXNWaXNpYmxlLFxuICBnZXROZXh0QWN0aXZlRWxlbWVudCxcbiAgcmVmbG93LFxuICB0cmlnZ2VyVHJhbnNpdGlvbkVuZCxcbiAgdHlwZUNoZWNrQ29uZmlnXG59IGZyb20gJy4vdXRpbC9pbmRleCdcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi9kb20vZXZlbnQtaGFuZGxlcidcbmltcG9ydCBNYW5pcHVsYXRvciBmcm9tICcuL2RvbS9tYW5pcHVsYXRvcidcbmltcG9ydCBTZWxlY3RvckVuZ2luZSBmcm9tICcuL2RvbS9zZWxlY3Rvci1lbmdpbmUnXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuL2Jhc2UtY29tcG9uZW50J1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FID0gJ2Nhcm91c2VsJ1xuY29uc3QgREFUQV9LRVkgPSAnYnMuY2Fyb3VzZWwnXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSdcblxuY29uc3QgQVJST1dfTEVGVF9LRVkgPSAnQXJyb3dMZWZ0J1xuY29uc3QgQVJST1dfUklHSFRfS0VZID0gJ0Fycm93UmlnaHQnXG5jb25zdCBUT1VDSEVWRU5UX0NPTVBBVF9XQUlUID0gNTAwIC8vIFRpbWUgZm9yIG1vdXNlIGNvbXBhdCBldmVudHMgdG8gZmlyZSBhZnRlciB0b3VjaFxuY29uc3QgU1dJUEVfVEhSRVNIT0xEID0gNDBcblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgaW50ZXJ2YWw6IDUwMDAsXG4gIGtleWJvYXJkOiB0cnVlLFxuICBzbGlkZTogZmFsc2UsXG4gIHBhdXNlOiAnaG92ZXInLFxuICB3cmFwOiB0cnVlLFxuICB0b3VjaDogdHJ1ZVxufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgaW50ZXJ2YWw6ICcobnVtYmVyfGJvb2xlYW4pJyxcbiAga2V5Ym9hcmQ6ICdib29sZWFuJyxcbiAgc2xpZGU6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAgcGF1c2U6ICcoc3RyaW5nfGJvb2xlYW4pJyxcbiAgd3JhcDogJ2Jvb2xlYW4nLFxuICB0b3VjaDogJ2Jvb2xlYW4nXG59XG5cbmNvbnN0IE9SREVSX05FWFQgPSAnbmV4dCdcbmNvbnN0IE9SREVSX1BSRVYgPSAncHJldidcbmNvbnN0IERJUkVDVElPTl9MRUZUID0gJ2xlZnQnXG5jb25zdCBESVJFQ1RJT05fUklHSFQgPSAncmlnaHQnXG5cbmNvbnN0IEtFWV9UT19ESVJFQ1RJT04gPSB7XG4gIFtBUlJPV19MRUZUX0tFWV06IERJUkVDVElPTl9SSUdIVCxcbiAgW0FSUk9XX1JJR0hUX0tFWV06IERJUkVDVElPTl9MRUZUXG59XG5cbmNvbnN0IEVWRU5UX1NMSURFID0gYHNsaWRlJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfU0xJRCA9IGBzbGlkJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfS0VZRE9XTiA9IGBrZXlkb3duJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfTU9VU0VFTlRFUiA9IGBtb3VzZWVudGVyJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfTU9VU0VMRUFWRSA9IGBtb3VzZWxlYXZlJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfVE9VQ0hTVEFSVCA9IGB0b3VjaHN0YXJ0JHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfVE9VQ0hNT1ZFID0gYHRvdWNobW92ZSR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX1RPVUNIRU5EID0gYHRvdWNoZW5kJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfUE9JTlRFUkRPV04gPSBgcG9pbnRlcmRvd24ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9QT0lOVEVSVVAgPSBgcG9pbnRlcnVwJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfRFJBR19TVEFSVCA9IGBkcmFnc3RhcnQke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9MT0FEX0RBVEFfQVBJID0gYGxvYWQke0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5jb25zdCBFVkVOVF9DTElDS19EQVRBX0FQSSA9IGBjbGljayR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcblxuY29uc3QgQ0xBU1NfTkFNRV9DQVJPVVNFTCA9ICdjYXJvdXNlbCdcbmNvbnN0IENMQVNTX05BTUVfQUNUSVZFID0gJ2FjdGl2ZSdcbmNvbnN0IENMQVNTX05BTUVfU0xJREUgPSAnc2xpZGUnXG5jb25zdCBDTEFTU19OQU1FX0VORCA9ICdjYXJvdXNlbC1pdGVtLWVuZCdcbmNvbnN0IENMQVNTX05BTUVfU1RBUlQgPSAnY2Fyb3VzZWwtaXRlbS1zdGFydCdcbmNvbnN0IENMQVNTX05BTUVfTkVYVCA9ICdjYXJvdXNlbC1pdGVtLW5leHQnXG5jb25zdCBDTEFTU19OQU1FX1BSRVYgPSAnY2Fyb3VzZWwtaXRlbS1wcmV2J1xuY29uc3QgQ0xBU1NfTkFNRV9QT0lOVEVSX0VWRU5UID0gJ3BvaW50ZXItZXZlbnQnXG5cbmNvbnN0IFNFTEVDVE9SX0FDVElWRSA9ICcuYWN0aXZlJ1xuY29uc3QgU0VMRUNUT1JfQUNUSVZFX0lURU0gPSAnLmFjdGl2ZS5jYXJvdXNlbC1pdGVtJ1xuY29uc3QgU0VMRUNUT1JfSVRFTSA9ICcuY2Fyb3VzZWwtaXRlbSdcbmNvbnN0IFNFTEVDVE9SX0lURU1fSU1HID0gJy5jYXJvdXNlbC1pdGVtIGltZydcbmNvbnN0IFNFTEVDVE9SX05FWFRfUFJFViA9ICcuY2Fyb3VzZWwtaXRlbS1uZXh0LCAuY2Fyb3VzZWwtaXRlbS1wcmV2J1xuY29uc3QgU0VMRUNUT1JfSU5ESUNBVE9SUyA9ICcuY2Fyb3VzZWwtaW5kaWNhdG9ycydcbmNvbnN0IFNFTEVDVE9SX0lORElDQVRPUiA9ICdbZGF0YS1icy10YXJnZXRdJ1xuY29uc3QgU0VMRUNUT1JfREFUQV9TTElERSA9ICdbZGF0YS1icy1zbGlkZV0sIFtkYXRhLWJzLXNsaWRlLXRvXSdcbmNvbnN0IFNFTEVDVE9SX0RBVEFfUklERSA9ICdbZGF0YS1icy1yaWRlPVwiY2Fyb3VzZWxcIl0nXG5cbmNvbnN0IFBPSU5URVJfVFlQRV9UT1VDSCA9ICd0b3VjaCdcbmNvbnN0IFBPSU5URVJfVFlQRV9QRU4gPSAncGVuJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbmNsYXNzIENhcm91c2VsIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKGVsZW1lbnQpXG5cbiAgICB0aGlzLl9pdGVtcyA9IG51bGxcbiAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGxcbiAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbnVsbFxuICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2VcbiAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZVxuICAgIHRoaXMudG91Y2hUaW1lb3V0ID0gbnVsbFxuICAgIHRoaXMudG91Y2hTdGFydFggPSAwXG4gICAgdGhpcy50b3VjaERlbHRhWCA9IDBcblxuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpXG4gICAgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0lORElDQVRPUlMsIHRoaXMuX2VsZW1lbnQpXG4gICAgdGhpcy5fdG91Y2hTdXBwb3J0ZWQgPSAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfHwgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMFxuICAgIHRoaXMuX3BvaW50ZXJFdmVudCA9IEJvb2xlYW4od2luZG93LlBvaW50ZXJFdmVudClcblxuICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKClcbiAgfVxuXG4gIC8vIEdldHRlcnNcblxuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRcbiAgfVxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRVxuICB9XG5cbiAgLy8gUHVibGljXG5cbiAgbmV4dCgpIHtcbiAgICB0aGlzLl9zbGlkZShPUkRFUl9ORVhUKVxuICB9XG5cbiAgbmV4dFdoZW5WaXNpYmxlKCkge1xuICAgIC8vIERvbid0IGNhbGwgbmV4dCB3aGVuIHRoZSBwYWdlIGlzbid0IHZpc2libGVcbiAgICAvLyBvciB0aGUgY2Fyb3VzZWwgb3IgaXRzIHBhcmVudCBpc24ndCB2aXNpYmxlXG4gICAgaWYgKCFkb2N1bWVudC5oaWRkZW4gJiYgaXNWaXNpYmxlKHRoaXMuX2VsZW1lbnQpKSB7XG4gICAgICB0aGlzLm5leHQoKVxuICAgIH1cbiAgfVxuXG4gIHByZXYoKSB7XG4gICAgdGhpcy5fc2xpZGUoT1JERVJfUFJFVilcbiAgfVxuXG4gIHBhdXNlKGV2ZW50KSB7XG4gICAgaWYgKCFldmVudCkge1xuICAgICAgdGhpcy5faXNQYXVzZWQgPSB0cnVlXG4gICAgfVxuXG4gICAgaWYgKFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfTkVYVF9QUkVWLCB0aGlzLl9lbGVtZW50KSkge1xuICAgICAgdHJpZ2dlclRyYW5zaXRpb25FbmQodGhpcy5fZWxlbWVudClcbiAgICAgIHRoaXMuY3ljbGUodHJ1ZSlcbiAgICB9XG5cbiAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKVxuICAgIHRoaXMuX2ludGVydmFsID0gbnVsbFxuICB9XG5cbiAgY3ljbGUoZXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50KSB7XG4gICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2ludGVydmFsKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKVxuICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZyAmJiB0aGlzLl9jb25maWcuaW50ZXJ2YWwgJiYgIXRoaXMuX2lzUGF1c2VkKSB7XG4gICAgICB0aGlzLl91cGRhdGVJbnRlcnZhbCgpXG5cbiAgICAgIHRoaXMuX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoXG4gICAgICAgIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPyB0aGlzLm5leHRXaGVuVmlzaWJsZSA6IHRoaXMubmV4dCkuYmluZCh0aGlzKSxcbiAgICAgICAgdGhpcy5fY29uZmlnLmludGVydmFsXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgdG8oaW5kZXgpIHtcbiAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9BQ1RJVkVfSVRFTSwgdGhpcy5fZWxlbWVudClcbiAgICBjb25zdCBhY3RpdmVJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleCh0aGlzLl9hY3RpdmVFbGVtZW50KVxuXG4gICAgaWYgKGluZGV4ID4gdGhpcy5faXRlbXMubGVuZ3RoIC0gMSB8fCBpbmRleCA8IDApIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICh0aGlzLl9pc1NsaWRpbmcpIHtcbiAgICAgIEV2ZW50SGFuZGxlci5vbmUodGhpcy5fZWxlbWVudCwgRVZFTlRfU0xJRCwgKCkgPT4gdGhpcy50byhpbmRleCkpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoYWN0aXZlSW5kZXggPT09IGluZGV4KSB7XG4gICAgICB0aGlzLnBhdXNlKClcbiAgICAgIHRoaXMuY3ljbGUoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3Qgb3JkZXIgPSBpbmRleCA+IGFjdGl2ZUluZGV4ID9cbiAgICAgIE9SREVSX05FWFQgOlxuICAgICAgT1JERVJfUFJFVlxuXG4gICAgdGhpcy5fc2xpZGUob3JkZXIsIHRoaXMuX2l0ZW1zW2luZGV4XSlcbiAgfVxuXG4gIC8vIFByaXZhdGVcblxuICBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IHtcbiAgICAgIC4uLkRlZmF1bHQsXG4gICAgICAuLi5NYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KSxcbiAgICAgIC4uLih0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IHt9KVxuICAgIH1cbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSlcbiAgICByZXR1cm4gY29uZmlnXG4gIH1cblxuICBfaGFuZGxlU3dpcGUoKSB7XG4gICAgY29uc3QgYWJzRGVsdGF4ID0gTWF0aC5hYnModGhpcy50b3VjaERlbHRhWClcblxuICAgIGlmIChhYnNEZWx0YXggPD0gU1dJUEVfVEhSRVNIT0xEKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBkaXJlY3Rpb24gPSBhYnNEZWx0YXggLyB0aGlzLnRvdWNoRGVsdGFYXG5cbiAgICB0aGlzLnRvdWNoRGVsdGFYID0gMFxuXG4gICAgaWYgKCFkaXJlY3Rpb24pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX3NsaWRlKGRpcmVjdGlvbiA+IDAgPyBESVJFQ1RJT05fUklHSFQgOiBESVJFQ1RJT05fTEVGVClcbiAgfVxuXG4gIF9hZGRFdmVudExpc3RlbmVycygpIHtcbiAgICBpZiAodGhpcy5fY29uZmlnLmtleWJvYXJkKSB7XG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfS0VZRE9XTiwgZXZlbnQgPT4gdGhpcy5fa2V5ZG93bihldmVudCkpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5wYXVzZSA9PT0gJ2hvdmVyJykge1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX01PVVNFRU5URVIsIGV2ZW50ID0+IHRoaXMucGF1c2UoZXZlbnQpKVxuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX01PVVNFTEVBVkUsIGV2ZW50ID0+IHRoaXMuY3ljbGUoZXZlbnQpKVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9jb25maWcudG91Y2ggJiYgdGhpcy5fdG91Y2hTdXBwb3J0ZWQpIHtcbiAgICAgIHRoaXMuX2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMoKVxuICAgIH1cbiAgfVxuXG4gIF9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIGNvbnN0IGhhc1BvaW50ZXJQZW5Ub3VjaCA9IGV2ZW50ID0+IHtcbiAgICAgIHJldHVybiB0aGlzLl9wb2ludGVyRXZlbnQgJiZcbiAgICAgICAgKGV2ZW50LnBvaW50ZXJUeXBlID09PSBQT0lOVEVSX1RZUEVfUEVOIHx8IGV2ZW50LnBvaW50ZXJUeXBlID09PSBQT0lOVEVSX1RZUEVfVE9VQ0gpXG4gICAgfVxuXG4gICAgY29uc3Qgc3RhcnQgPSBldmVudCA9PiB7XG4gICAgICBpZiAoaGFzUG9pbnRlclBlblRvdWNoKGV2ZW50KSkge1xuICAgICAgICB0aGlzLnRvdWNoU3RhcnRYID0gZXZlbnQuY2xpZW50WFxuICAgICAgfSBlbHNlIGlmICghdGhpcy5fcG9pbnRlckV2ZW50KSB7XG4gICAgICAgIHRoaXMudG91Y2hTdGFydFggPSBldmVudC50b3VjaGVzWzBdLmNsaWVudFhcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBtb3ZlID0gZXZlbnQgPT4ge1xuICAgICAgLy8gZW5zdXJlIHN3aXBpbmcgd2l0aCBvbmUgdG91Y2ggYW5kIG5vdCBwaW5jaGluZ1xuICAgICAgdGhpcy50b3VjaERlbHRhWCA9IGV2ZW50LnRvdWNoZXMgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggPiAxID9cbiAgICAgICAgMCA6XG4gICAgICAgIGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WCAtIHRoaXMudG91Y2hTdGFydFhcbiAgICB9XG5cbiAgICBjb25zdCBlbmQgPSBldmVudCA9PiB7XG4gICAgICBpZiAoaGFzUG9pbnRlclBlblRvdWNoKGV2ZW50KSkge1xuICAgICAgICB0aGlzLnRvdWNoRGVsdGFYID0gZXZlbnQuY2xpZW50WCAtIHRoaXMudG91Y2hTdGFydFhcbiAgICAgIH1cblxuICAgICAgdGhpcy5faGFuZGxlU3dpcGUoKVxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5wYXVzZSA9PT0gJ2hvdmVyJykge1xuICAgICAgICAvLyBJZiBpdCdzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2UsIG1vdXNlZW50ZXIvbGVhdmUgYXJlIGZpcmVkIGFzXG4gICAgICAgIC8vIHBhcnQgb2YgdGhlIG1vdXNlIGNvbXBhdGliaWxpdHkgZXZlbnRzIG9uIGZpcnN0IHRhcCAtIHRoZSBjYXJvdXNlbFxuICAgICAgICAvLyB3b3VsZCBzdG9wIGN5Y2xpbmcgdW50aWwgdXNlciB0YXBwZWQgb3V0IG9mIGl0O1xuICAgICAgICAvLyBoZXJlLCB3ZSBsaXN0ZW4gZm9yIHRvdWNoZW5kLCBleHBsaWNpdGx5IHBhdXNlIHRoZSBjYXJvdXNlbFxuICAgICAgICAvLyAoYXMgaWYgaXQncyB0aGUgc2Vjb25kIHRpbWUgd2UgdGFwIG9uIGl0LCBtb3VzZWVudGVyIGNvbXBhdCBldmVudFxuICAgICAgICAvLyBpcyBOT1QgZmlyZWQpIGFuZCBhZnRlciBhIHRpbWVvdXQgKHRvIGFsbG93IGZvciBtb3VzZSBjb21wYXRpYmlsaXR5XG4gICAgICAgIC8vIGV2ZW50cyB0byBmaXJlKSB3ZSBleHBsaWNpdGx5IHJlc3RhcnQgY3ljbGluZ1xuXG4gICAgICAgIHRoaXMucGF1c2UoKVxuICAgICAgICBpZiAodGhpcy50b3VjaFRpbWVvdXQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50b3VjaFRpbWVvdXQpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRvdWNoVGltZW91dCA9IHNldFRpbWVvdXQoZXZlbnQgPT4gdGhpcy5jeWNsZShldmVudCksIFRPVUNIRVZFTlRfQ09NUEFUX1dBSVQgKyB0aGlzLl9jb25maWcuaW50ZXJ2YWwpXG4gICAgICB9XG4gICAgfVxuXG4gICAgU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9JVEVNX0lNRywgdGhpcy5fZWxlbWVudCkuZm9yRWFjaChpdGVtSW1nID0+IHtcbiAgICAgIEV2ZW50SGFuZGxlci5vbihpdGVtSW1nLCBFVkVOVF9EUkFHX1NUQVJULCBldmVudCA9PiBldmVudC5wcmV2ZW50RGVmYXVsdCgpKVxuICAgIH0pXG5cbiAgICBpZiAodGhpcy5fcG9pbnRlckV2ZW50KSB7XG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfUE9JTlRFUkRPV04sIGV2ZW50ID0+IHN0YXJ0KGV2ZW50KSlcbiAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9QT0lOVEVSVVAsIGV2ZW50ID0+IGVuZChldmVudCkpXG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1BPSU5URVJfRVZFTlQpXG4gICAgfSBlbHNlIHtcbiAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9UT1VDSFNUQVJULCBldmVudCA9PiBzdGFydChldmVudCkpXG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfVE9VQ0hNT1ZFLCBldmVudCA9PiBtb3ZlKGV2ZW50KSlcbiAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9UT1VDSEVORCwgZXZlbnQgPT4gZW5kKGV2ZW50KSlcbiAgICB9XG4gIH1cblxuICBfa2V5ZG93bihldmVudCkge1xuICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgZGlyZWN0aW9uID0gS0VZX1RPX0RJUkVDVElPTltldmVudC5rZXldXG4gICAgaWYgKGRpcmVjdGlvbikge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgdGhpcy5fc2xpZGUoZGlyZWN0aW9uKVxuICAgIH1cbiAgfVxuXG4gIF9nZXRJdGVtSW5kZXgoZWxlbWVudCkge1xuICAgIHRoaXMuX2l0ZW1zID0gZWxlbWVudCAmJiBlbGVtZW50LnBhcmVudE5vZGUgP1xuICAgICAgU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9JVEVNLCBlbGVtZW50LnBhcmVudE5vZGUpIDpcbiAgICAgIFtdXG5cbiAgICByZXR1cm4gdGhpcy5faXRlbXMuaW5kZXhPZihlbGVtZW50KVxuICB9XG5cbiAgX2dldEl0ZW1CeU9yZGVyKG9yZGVyLCBhY3RpdmVFbGVtZW50KSB7XG4gICAgY29uc3QgaXNOZXh0ID0gb3JkZXIgPT09IE9SREVSX05FWFRcbiAgICByZXR1cm4gZ2V0TmV4dEFjdGl2ZUVsZW1lbnQodGhpcy5faXRlbXMsIGFjdGl2ZUVsZW1lbnQsIGlzTmV4dCwgdGhpcy5fY29uZmlnLndyYXApXG4gIH1cblxuICBfdHJpZ2dlclNsaWRlRXZlbnQocmVsYXRlZFRhcmdldCwgZXZlbnREaXJlY3Rpb25OYW1lKSB7XG4gICAgY29uc3QgdGFyZ2V0SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgocmVsYXRlZFRhcmdldClcbiAgICBjb25zdCBmcm9tSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9BQ1RJVkVfSVRFTSwgdGhpcy5fZWxlbWVudCkpXG5cbiAgICByZXR1cm4gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0xJREUsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQsXG4gICAgICBkaXJlY3Rpb246IGV2ZW50RGlyZWN0aW9uTmFtZSxcbiAgICAgIGZyb206IGZyb21JbmRleCxcbiAgICAgIHRvOiB0YXJnZXRJbmRleFxuICAgIH0pXG4gIH1cblxuICBfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChlbGVtZW50KSB7XG4gICAgaWYgKHRoaXMuX2luZGljYXRvcnNFbGVtZW50KSB7XG4gICAgICBjb25zdCBhY3RpdmVJbmRpY2F0b3IgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0FDVElWRSwgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpXG5cbiAgICAgIGFjdGl2ZUluZGljYXRvci5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQUNUSVZFKVxuICAgICAgYWN0aXZlSW5kaWNhdG9yLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1jdXJyZW50JylcblxuICAgICAgY29uc3QgaW5kaWNhdG9ycyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfSU5ESUNBVE9SLCB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudClcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRpY2F0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChOdW1iZXIucGFyc2VJbnQoaW5kaWNhdG9yc1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtc2xpZGUtdG8nKSwgMTApID09PSB0aGlzLl9nZXRJdGVtSW5kZXgoZWxlbWVudCkpIHtcbiAgICAgICAgICBpbmRpY2F0b3JzW2ldLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUpXG4gICAgICAgICAgaW5kaWNhdG9yc1tpXS5zZXRBdHRyaWJ1dGUoJ2FyaWEtY3VycmVudCcsICd0cnVlJylcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX3VwZGF0ZUludGVydmFsKCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9hY3RpdmVFbGVtZW50IHx8IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfQUNUSVZFX0lURU0sIHRoaXMuX2VsZW1lbnQpXG5cbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGVsZW1lbnRJbnRlcnZhbCA9IE51bWJlci5wYXJzZUludChlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1icy1pbnRlcnZhbCcpLCAxMClcblxuICAgIGlmIChlbGVtZW50SW50ZXJ2YWwpIHtcbiAgICAgIHRoaXMuX2NvbmZpZy5kZWZhdWx0SW50ZXJ2YWwgPSB0aGlzLl9jb25maWcuZGVmYXVsdEludGVydmFsIHx8IHRoaXMuX2NvbmZpZy5pbnRlcnZhbFxuICAgICAgdGhpcy5fY29uZmlnLmludGVydmFsID0gZWxlbWVudEludGVydmFsXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2NvbmZpZy5pbnRlcnZhbCA9IHRoaXMuX2NvbmZpZy5kZWZhdWx0SW50ZXJ2YWwgfHwgdGhpcy5fY29uZmlnLmludGVydmFsXG4gICAgfVxuICB9XG5cbiAgX3NsaWRlKGRpcmVjdGlvbk9yT3JkZXIsIGVsZW1lbnQpIHtcbiAgICBjb25zdCBvcmRlciA9IHRoaXMuX2RpcmVjdGlvblRvT3JkZXIoZGlyZWN0aW9uT3JPcmRlcilcbiAgICBjb25zdCBhY3RpdmVFbGVtZW50ID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9BQ1RJVkVfSVRFTSwgdGhpcy5fZWxlbWVudClcbiAgICBjb25zdCBhY3RpdmVFbGVtZW50SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoYWN0aXZlRWxlbWVudClcbiAgICBjb25zdCBuZXh0RWxlbWVudCA9IGVsZW1lbnQgfHwgdGhpcy5fZ2V0SXRlbUJ5T3JkZXIob3JkZXIsIGFjdGl2ZUVsZW1lbnQpXG5cbiAgICBjb25zdCBuZXh0RWxlbWVudEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KG5leHRFbGVtZW50KVxuICAgIGNvbnN0IGlzQ3ljbGluZyA9IEJvb2xlYW4odGhpcy5faW50ZXJ2YWwpXG5cbiAgICBjb25zdCBpc05leHQgPSBvcmRlciA9PT0gT1JERVJfTkVYVFxuICAgIGNvbnN0IGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gaXNOZXh0ID8gQ0xBU1NfTkFNRV9TVEFSVCA6IENMQVNTX05BTUVfRU5EXG4gICAgY29uc3Qgb3JkZXJDbGFzc05hbWUgPSBpc05leHQgPyBDTEFTU19OQU1FX05FWFQgOiBDTEFTU19OQU1FX1BSRVZcbiAgICBjb25zdCBldmVudERpcmVjdGlvbk5hbWUgPSB0aGlzLl9vcmRlclRvRGlyZWN0aW9uKG9yZGVyKVxuXG4gICAgaWYgKG5leHRFbGVtZW50ICYmIG5leHRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0FDVElWRSkpIHtcbiAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBzbGlkZUV2ZW50ID0gdGhpcy5fdHJpZ2dlclNsaWRlRXZlbnQobmV4dEVsZW1lbnQsIGV2ZW50RGlyZWN0aW9uTmFtZSlcbiAgICBpZiAoc2xpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoIWFjdGl2ZUVsZW1lbnQgfHwgIW5leHRFbGVtZW50KSB7XG4gICAgICAvLyBTb21lIHdlaXJkbmVzcyBpcyBoYXBwZW5pbmcsIHNvIHdlIGJhaWxcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2lzU2xpZGluZyA9IHRydWVcblxuICAgIGlmIChpc0N5Y2xpbmcpIHtcbiAgICAgIHRoaXMucGF1c2UoKVxuICAgIH1cblxuICAgIHRoaXMuX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQobmV4dEVsZW1lbnQpXG4gICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG5leHRFbGVtZW50XG5cbiAgICBjb25zdCB0cmlnZ2VyU2xpZEV2ZW50ID0gKCkgPT4ge1xuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0xJRCwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBuZXh0RWxlbWVudCxcbiAgICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG4gICAgICAgIGZyb206IGFjdGl2ZUVsZW1lbnRJbmRleCxcbiAgICAgICAgdG86IG5leHRFbGVtZW50SW5kZXhcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0xJREUpKSB7XG4gICAgICBuZXh0RWxlbWVudC5jbGFzc0xpc3QuYWRkKG9yZGVyQ2xhc3NOYW1lKVxuXG4gICAgICByZWZsb3cobmV4dEVsZW1lbnQpXG5cbiAgICAgIGFjdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChkaXJlY3Rpb25hbENsYXNzTmFtZSlcbiAgICAgIG5leHRFbGVtZW50LmNsYXNzTGlzdC5hZGQoZGlyZWN0aW9uYWxDbGFzc05hbWUpXG5cbiAgICAgIGNvbnN0IGNvbXBsZXRlQ2FsbEJhY2sgPSAoKSA9PiB7XG4gICAgICAgIG5leHRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoZGlyZWN0aW9uYWxDbGFzc05hbWUsIG9yZGVyQ2xhc3NOYW1lKVxuICAgICAgICBuZXh0RWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFKVxuXG4gICAgICAgIGFjdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0FDVElWRSwgb3JkZXJDbGFzc05hbWUsIGRpcmVjdGlvbmFsQ2xhc3NOYW1lKVxuXG4gICAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlXG5cbiAgICAgICAgc2V0VGltZW91dCh0cmlnZ2VyU2xpZEV2ZW50LCAwKVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlQ2FsbEJhY2ssIGFjdGl2ZUVsZW1lbnQsIHRydWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0FDVElWRSlcbiAgICAgIG5leHRFbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUpXG5cbiAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlXG4gICAgICB0cmlnZ2VyU2xpZEV2ZW50KClcbiAgICB9XG5cbiAgICBpZiAoaXNDeWNsaW5nKSB7XG4gICAgICB0aGlzLmN5Y2xlKClcbiAgICB9XG4gIH1cblxuICBfZGlyZWN0aW9uVG9PcmRlcihkaXJlY3Rpb24pIHtcbiAgICBpZiAoIVtESVJFQ1RJT05fUklHSFQsIERJUkVDVElPTl9MRUZUXS5pbmNsdWRlcyhkaXJlY3Rpb24pKSB7XG4gICAgICByZXR1cm4gZGlyZWN0aW9uXG4gICAgfVxuXG4gICAgaWYgKGlzUlRMKCkpIHtcbiAgICAgIHJldHVybiBkaXJlY3Rpb24gPT09IERJUkVDVElPTl9MRUZUID8gT1JERVJfUFJFViA6IE9SREVSX05FWFRcbiAgICB9XG5cbiAgICByZXR1cm4gZGlyZWN0aW9uID09PSBESVJFQ1RJT05fTEVGVCA/IE9SREVSX05FWFQgOiBPUkRFUl9QUkVWXG4gIH1cblxuICBfb3JkZXJUb0RpcmVjdGlvbihvcmRlcikge1xuICAgIGlmICghW09SREVSX05FWFQsIE9SREVSX1BSRVZdLmluY2x1ZGVzKG9yZGVyKSkge1xuICAgICAgcmV0dXJuIG9yZGVyXG4gICAgfVxuXG4gICAgaWYgKGlzUlRMKCkpIHtcbiAgICAgIHJldHVybiBvcmRlciA9PT0gT1JERVJfUFJFViA/IERJUkVDVElPTl9MRUZUIDogRElSRUNUSU9OX1JJR0hUXG4gICAgfVxuXG4gICAgcmV0dXJuIG9yZGVyID09PSBPUkRFUl9QUkVWID8gRElSRUNUSU9OX1JJR0hUIDogRElSRUNUSU9OX0xFRlRcbiAgfVxuXG4gIC8vIFN0YXRpY1xuXG4gIHN0YXRpYyBjYXJvdXNlbEludGVyZmFjZShlbGVtZW50LCBjb25maWcpIHtcbiAgICBjb25zdCBkYXRhID0gQ2Fyb3VzZWwuZ2V0T3JDcmVhdGVJbnN0YW5jZShlbGVtZW50LCBjb25maWcpXG5cbiAgICBsZXQgeyBfY29uZmlnIH0gPSBkYXRhXG4gICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnKSB7XG4gICAgICBfY29uZmlnID0ge1xuICAgICAgICAuLi5fY29uZmlnLFxuICAgICAgICAuLi5jb25maWdcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBhY3Rpb24gPSB0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJyA/IGNvbmZpZyA6IF9jb25maWcuc2xpZGVcblxuICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnbnVtYmVyJykge1xuICAgICAgZGF0YS50byhjb25maWcpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKHR5cGVvZiBkYXRhW2FjdGlvbl0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7YWN0aW9ufVwiYClcbiAgICAgIH1cblxuICAgICAgZGF0YVthY3Rpb25dKClcbiAgICB9IGVsc2UgaWYgKF9jb25maWcuaW50ZXJ2YWwgJiYgX2NvbmZpZy5yaWRlKSB7XG4gICAgICBkYXRhLnBhdXNlKClcbiAgICAgIGRhdGEuY3ljbGUoKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBDYXJvdXNlbC5jYXJvdXNlbEludGVyZmFjZSh0aGlzLCBjb25maWcpXG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBkYXRhQXBpQ2xpY2tIYW5kbGVyKGV2ZW50KSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZ2V0RWxlbWVudEZyb21TZWxlY3Rvcih0aGlzKVxuXG4gICAgaWYgKCF0YXJnZXQgfHwgIXRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9DQVJPVVNFTCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgIC4uLk1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGVzKHRhcmdldCksXG4gICAgICAuLi5NYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlcyh0aGlzKVxuICAgIH1cbiAgICBjb25zdCBzbGlkZUluZGV4ID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtc2xpZGUtdG8nKVxuXG4gICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgIGNvbmZpZy5pbnRlcnZhbCA9IGZhbHNlXG4gICAgfVxuXG4gICAgQ2Fyb3VzZWwuY2Fyb3VzZWxJbnRlcmZhY2UodGFyZ2V0LCBjb25maWcpXG5cbiAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgQ2Fyb3VzZWwuZ2V0SW5zdGFuY2UodGFyZ2V0KS50byhzbGlkZUluZGV4KVxuICAgIH1cblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgfVxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEksIFNFTEVDVE9SX0RBVEFfU0xJREUsIENhcm91c2VsLmRhdGFBcGlDbGlja0hhbmRsZXIpXG5cbkV2ZW50SGFuZGxlci5vbih3aW5kb3csIEVWRU5UX0xPQURfREFUQV9BUEksICgpID0+IHtcbiAgY29uc3QgY2Fyb3VzZWxzID0gU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9EQVRBX1JJREUpXG5cbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNhcm91c2Vscy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIENhcm91c2VsLmNhcm91c2VsSW50ZXJmYWNlKGNhcm91c2Vsc1tpXSwgQ2Fyb3VzZWwuZ2V0SW5zdGFuY2UoY2Fyb3VzZWxzW2ldKSlcbiAgfVxufSlcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBhZGQgLkNhcm91c2VsIHRvIGpRdWVyeSBvbmx5IGlmIGpRdWVyeSBpcyBwcmVzZW50XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKENhcm91c2VsKVxuXG5leHBvcnQgZGVmYXVsdCBDYXJvdXNlbFxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4xLjMpOiBjb2xsYXBzZS5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCB7XG4gIGRlZmluZUpRdWVyeVBsdWdpbixcbiAgZ2V0RWxlbWVudCxcbiAgZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCxcbiAgZ2V0RWxlbWVudEZyb21TZWxlY3RvcixcbiAgcmVmbG93LFxuICB0eXBlQ2hlY2tDb25maWdcbn0gZnJvbSAnLi91dGlsL2luZGV4J1xuaW1wb3J0IERhdGEgZnJvbSAnLi9kb20vZGF0YSdcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi9kb20vZXZlbnQtaGFuZGxlcidcbmltcG9ydCBNYW5pcHVsYXRvciBmcm9tICcuL2RvbS9tYW5pcHVsYXRvcidcbmltcG9ydCBTZWxlY3RvckVuZ2luZSBmcm9tICcuL2RvbS9zZWxlY3Rvci1lbmdpbmUnXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuL2Jhc2UtY29tcG9uZW50J1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FID0gJ2NvbGxhcHNlJ1xuY29uc3QgREFUQV9LRVkgPSAnYnMuY29sbGFwc2UnXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSdcblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgdG9nZ2xlOiB0cnVlLFxuICBwYXJlbnQ6IG51bGxcbn1cblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIHRvZ2dsZTogJ2Jvb2xlYW4nLFxuICBwYXJlbnQ6ICcobnVsbHxlbGVtZW50KSdcbn1cblxuY29uc3QgRVZFTlRfU0hPVyA9IGBzaG93JHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfU0hPV04gPSBgc2hvd24ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9ISURFID0gYGhpZGUke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9ISURERU4gPSBgaGlkZGVuJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkgPSBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5cbmNvbnN0IENMQVNTX05BTUVfU0hPVyA9ICdzaG93J1xuY29uc3QgQ0xBU1NfTkFNRV9DT0xMQVBTRSA9ICdjb2xsYXBzZSdcbmNvbnN0IENMQVNTX05BTUVfQ09MTEFQU0lORyA9ICdjb2xsYXBzaW5nJ1xuY29uc3QgQ0xBU1NfTkFNRV9DT0xMQVBTRUQgPSAnY29sbGFwc2VkJ1xuY29uc3QgQ0xBU1NfTkFNRV9ERUVQRVJfQ0hJTERSRU4gPSBgOnNjb3BlIC4ke0NMQVNTX05BTUVfQ09MTEFQU0V9IC4ke0NMQVNTX05BTUVfQ09MTEFQU0V9YFxuY29uc3QgQ0xBU1NfTkFNRV9IT1JJWk9OVEFMID0gJ2NvbGxhcHNlLWhvcml6b250YWwnXG5cbmNvbnN0IFdJRFRIID0gJ3dpZHRoJ1xuY29uc3QgSEVJR0hUID0gJ2hlaWdodCdcblxuY29uc3QgU0VMRUNUT1JfQUNUSVZFUyA9ICcuY29sbGFwc2Uuc2hvdywgLmNvbGxhcHNlLmNvbGxhcHNpbmcnXG5jb25zdCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSA9ICdbZGF0YS1icy10b2dnbGU9XCJjb2xsYXBzZVwiXSdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIENvbGxhcHNlIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKGVsZW1lbnQpXG5cbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZVxuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpXG4gICAgdGhpcy5fdHJpZ2dlckFycmF5ID0gW11cblxuICAgIGNvbnN0IHRvZ2dsZUxpc3QgPSBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0RBVEFfVE9HR0xFKVxuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRvZ2dsZUxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGVsZW0gPSB0b2dnbGVMaXN0W2ldXG4gICAgICBjb25zdCBzZWxlY3RvciA9IGdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbSlcbiAgICAgIGNvbnN0IGZpbHRlckVsZW1lbnQgPSBTZWxlY3RvckVuZ2luZS5maW5kKHNlbGVjdG9yKVxuICAgICAgICAuZmlsdGVyKGZvdW5kRWxlbSA9PiBmb3VuZEVsZW0gPT09IHRoaXMuX2VsZW1lbnQpXG5cbiAgICAgIGlmIChzZWxlY3RvciAhPT0gbnVsbCAmJiBmaWx0ZXJFbGVtZW50Lmxlbmd0aCkge1xuICAgICAgICB0aGlzLl9zZWxlY3RvciA9IHNlbGVjdG9yXG4gICAgICAgIHRoaXMuX3RyaWdnZXJBcnJheS5wdXNoKGVsZW0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5faW5pdGlhbGl6ZUNoaWxkcmVuKClcblxuICAgIGlmICghdGhpcy5fY29uZmlnLnBhcmVudCkge1xuICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX3RyaWdnZXJBcnJheSwgdGhpcy5faXNTaG93bigpKVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9jb25maWcudG9nZ2xlKSB7XG4gICAgICB0aGlzLnRvZ2dsZSgpXG4gICAgfVxuICB9XG5cbiAgLy8gR2V0dGVyc1xuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFxuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcblxuICB0b2dnbGUoKSB7XG4gICAgaWYgKHRoaXMuX2lzU2hvd24oKSkge1xuICAgICAgdGhpcy5oaWRlKClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zaG93KClcbiAgICB9XG4gIH1cblxuICBzaG93KCkge1xuICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgdGhpcy5faXNTaG93bigpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgYWN0aXZlcyA9IFtdXG4gICAgbGV0IGFjdGl2ZXNEYXRhXG5cbiAgICBpZiAodGhpcy5fY29uZmlnLnBhcmVudCkge1xuICAgICAgY29uc3QgY2hpbGRyZW4gPSBTZWxlY3RvckVuZ2luZS5maW5kKENMQVNTX05BTUVfREVFUEVSX0NISUxEUkVOLCB0aGlzLl9jb25maWcucGFyZW50KVxuICAgICAgYWN0aXZlcyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfQUNUSVZFUywgdGhpcy5fY29uZmlnLnBhcmVudCkuZmlsdGVyKGVsZW0gPT4gIWNoaWxkcmVuLmluY2x1ZGVzKGVsZW0pKSAvLyByZW1vdmUgY2hpbGRyZW4gaWYgZ3JlYXRlciBkZXB0aFxuICAgIH1cblxuICAgIGNvbnN0IGNvbnRhaW5lciA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUodGhpcy5fc2VsZWN0b3IpXG4gICAgaWYgKGFjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICBjb25zdCB0ZW1wQWN0aXZlRGF0YSA9IGFjdGl2ZXMuZmluZChlbGVtID0+IGNvbnRhaW5lciAhPT0gZWxlbSlcbiAgICAgIGFjdGl2ZXNEYXRhID0gdGVtcEFjdGl2ZURhdGEgPyBDb2xsYXBzZS5nZXRJbnN0YW5jZSh0ZW1wQWN0aXZlRGF0YSkgOiBudWxsXG5cbiAgICAgIGlmIChhY3RpdmVzRGF0YSAmJiBhY3RpdmVzRGF0YS5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHN0YXJ0RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XKVxuICAgIGlmIChzdGFydEV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGFjdGl2ZXMuZm9yRWFjaChlbGVtQWN0aXZlID0+IHtcbiAgICAgIGlmIChjb250YWluZXIgIT09IGVsZW1BY3RpdmUpIHtcbiAgICAgICAgQ29sbGFwc2UuZ2V0T3JDcmVhdGVJbnN0YW5jZShlbGVtQWN0aXZlLCB7IHRvZ2dsZTogZmFsc2UgfSkuaGlkZSgpXG4gICAgICB9XG5cbiAgICAgIGlmICghYWN0aXZlc0RhdGEpIHtcbiAgICAgICAgRGF0YS5zZXQoZWxlbUFjdGl2ZSwgREFUQV9LRVksIG51bGwpXG4gICAgICB9XG4gICAgfSlcblxuICAgIGNvbnN0IGRpbWVuc2lvbiA9IHRoaXMuX2dldERpbWVuc2lvbigpXG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9DT0xMQVBTRSlcbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9DT0xMQVBTSU5HKVxuXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gMFxuXG4gICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX3RyaWdnZXJBcnJheSwgdHJ1ZSlcbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSB0cnVlXG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlXG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0NPTExBUFNJTkcpXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9DT0xMQVBTRSwgQ0xBU1NfTkFNRV9TSE9XKVxuXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAnJ1xuXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XTilcbiAgICB9XG5cbiAgICBjb25zdCBjYXBpdGFsaXplZERpbWVuc2lvbiA9IGRpbWVuc2lvblswXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKDEpXG4gICAgY29uc3Qgc2Nyb2xsU2l6ZSA9IGBzY3JvbGwke2NhcGl0YWxpemVkRGltZW5zaW9ufWBcblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIHRoaXMuX2VsZW1lbnQsIHRydWUpXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gYCR7dGhpcy5fZWxlbWVudFtzY3JvbGxTaXplXX1weGBcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fCAhdGhpcy5faXNTaG93bigpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBzdGFydEV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElERSlcbiAgICBpZiAoc3RhcnRFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKVxuXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gYCR7dGhpcy5fZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtkaW1lbnNpb25dfXB4YFxuXG4gICAgcmVmbG93KHRoaXMuX2VsZW1lbnQpXG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9DT0xMQVBTSU5HKVxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0NPTExBUFNFLCBDTEFTU19OQU1FX1NIT1cpXG5cbiAgICBjb25zdCB0cmlnZ2VyQXJyYXlMZW5ndGggPSB0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmlnZ2VyQXJyYXlMZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgdHJpZ2dlciA9IHRoaXMuX3RyaWdnZXJBcnJheVtpXVxuICAgICAgY29uc3QgZWxlbSA9IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IodHJpZ2dlcilcblxuICAgICAgaWYgKGVsZW0gJiYgIXRoaXMuX2lzU2hvd24oZWxlbSkpIHtcbiAgICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKFt0cmlnZ2VyXSwgZmFsc2UpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZVxuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZVxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQ09MTEFQU0lORylcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0NPTExBUFNFKVxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElEREVOKVxuICAgIH1cblxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnXG5cbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCB0aGlzLl9lbGVtZW50LCB0cnVlKVxuICB9XG5cbiAgX2lzU2hvd24oZWxlbWVudCA9IHRoaXMuX2VsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnID0ge1xuICAgICAgLi4uRGVmYXVsdCxcbiAgICAgIC4uLk1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpLFxuICAgICAgLi4uY29uZmlnXG4gICAgfVxuICAgIGNvbmZpZy50b2dnbGUgPSBCb29sZWFuKGNvbmZpZy50b2dnbGUpIC8vIENvZXJjZSBzdHJpbmcgdmFsdWVzXG4gICAgY29uZmlnLnBhcmVudCA9IGdldEVsZW1lbnQoY29uZmlnLnBhcmVudClcbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSlcbiAgICByZXR1cm4gY29uZmlnXG4gIH1cblxuICBfZ2V0RGltZW5zaW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0hPUklaT05UQUwpID8gV0lEVEggOiBIRUlHSFRcbiAgfVxuXG4gIF9pbml0aWFsaXplQ2hpbGRyZW4oKSB7XG4gICAgaWYgKCF0aGlzLl9jb25maWcucGFyZW50KSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBjaGlsZHJlbiA9IFNlbGVjdG9yRW5naW5lLmZpbmQoQ0xBU1NfTkFNRV9ERUVQRVJfQ0hJTERSRU4sIHRoaXMuX2NvbmZpZy5wYXJlbnQpXG4gICAgU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9EQVRBX1RPR0dMRSwgdGhpcy5fY29uZmlnLnBhcmVudCkuZmlsdGVyKGVsZW0gPT4gIWNoaWxkcmVuLmluY2x1ZGVzKGVsZW0pKVxuICAgICAgLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkID0gZ2V0RWxlbWVudEZyb21TZWxlY3RvcihlbGVtZW50KVxuXG4gICAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhbZWxlbWVudF0sIHRoaXMuX2lzU2hvd24oc2VsZWN0ZWQpKVxuICAgICAgICB9XG4gICAgICB9KVxuICB9XG5cbiAgX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0cmlnZ2VyQXJyYXksIGlzT3Blbikge1xuICAgIGlmICghdHJpZ2dlckFycmF5Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdHJpZ2dlckFycmF5LmZvckVhY2goZWxlbSA9PiB7XG4gICAgICBpZiAoaXNPcGVuKSB7XG4gICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0NPTExBUFNFRClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0NPTExBUFNFRClcbiAgICAgIH1cblxuICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pXG4gICAgfSlcbiAgfVxuXG4gIC8vIFN0YXRpY1xuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBfY29uZmlnID0ge31cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJyAmJiAvc2hvd3xoaWRlLy50ZXN0KGNvbmZpZykpIHtcbiAgICAgICAgX2NvbmZpZy50b2dnbGUgPSBmYWxzZVxuICAgICAgfVxuXG4gICAgICBjb25zdCBkYXRhID0gQ29sbGFwc2UuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBfY29uZmlnKVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVtjb25maWddKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9DTElDS19EQVRBX0FQSSwgU0VMRUNUT1JfREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAvLyBwcmV2ZW50RGVmYXVsdCBvbmx5IGZvciA8YT4gZWxlbWVudHMgKHdoaWNoIGNoYW5nZSB0aGUgVVJMKSBub3QgaW5zaWRlIHRoZSBjb2xsYXBzaWJsZSBlbGVtZW50XG4gIGlmIChldmVudC50YXJnZXQudGFnTmFtZSA9PT0gJ0EnIHx8IChldmVudC5kZWxlZ2F0ZVRhcmdldCAmJiBldmVudC5kZWxlZ2F0ZVRhcmdldC50YWdOYW1lID09PSAnQScpKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICB9XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSBnZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpXG4gIGNvbnN0IHNlbGVjdG9yRWxlbWVudHMgPSBTZWxlY3RvckVuZ2luZS5maW5kKHNlbGVjdG9yKVxuXG4gIHNlbGVjdG9yRWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICBDb2xsYXBzZS5nZXRPckNyZWF0ZUluc3RhbmNlKGVsZW1lbnQsIHsgdG9nZ2xlOiBmYWxzZSB9KS50b2dnbGUoKVxuICB9KVxufSlcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBhZGQgLkNvbGxhcHNlIHRvIGpRdWVyeSBvbmx5IGlmIGpRdWVyeSBpcyBwcmVzZW50XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKENvbGxhcHNlKVxuXG5leHBvcnQgZGVmYXVsdCBDb2xsYXBzZVxuIiwiZXhwb3J0IHZhciB0b3AgPSAndG9wJztcbmV4cG9ydCB2YXIgYm90dG9tID0gJ2JvdHRvbSc7XG5leHBvcnQgdmFyIHJpZ2h0ID0gJ3JpZ2h0JztcbmV4cG9ydCB2YXIgbGVmdCA9ICdsZWZ0JztcbmV4cG9ydCB2YXIgYXV0byA9ICdhdXRvJztcbmV4cG9ydCB2YXIgYmFzZVBsYWNlbWVudHMgPSBbdG9wLCBib3R0b20sIHJpZ2h0LCBsZWZ0XTtcbmV4cG9ydCB2YXIgc3RhcnQgPSAnc3RhcnQnO1xuZXhwb3J0IHZhciBlbmQgPSAnZW5kJztcbmV4cG9ydCB2YXIgY2xpcHBpbmdQYXJlbnRzID0gJ2NsaXBwaW5nUGFyZW50cyc7XG5leHBvcnQgdmFyIHZpZXdwb3J0ID0gJ3ZpZXdwb3J0JztcbmV4cG9ydCB2YXIgcG9wcGVyID0gJ3BvcHBlcic7XG5leHBvcnQgdmFyIHJlZmVyZW5jZSA9ICdyZWZlcmVuY2UnO1xuZXhwb3J0IHZhciB2YXJpYXRpb25QbGFjZW1lbnRzID0gLyojX19QVVJFX18qL2Jhc2VQbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIGFjYy5jb25jYXQoW3BsYWNlbWVudCArIFwiLVwiICsgc3RhcnQsIHBsYWNlbWVudCArIFwiLVwiICsgZW5kXSk7XG59LCBbXSk7XG5leHBvcnQgdmFyIHBsYWNlbWVudHMgPSAvKiNfX1BVUkVfXyovW10uY29uY2F0KGJhc2VQbGFjZW1lbnRzLCBbYXV0b10pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIGFjYy5jb25jYXQoW3BsYWNlbWVudCwgcGxhY2VtZW50ICsgXCItXCIgKyBzdGFydCwgcGxhY2VtZW50ICsgXCItXCIgKyBlbmRdKTtcbn0sIFtdKTsgLy8gbW9kaWZpZXJzIHRoYXQgbmVlZCB0byByZWFkIHRoZSBET01cblxuZXhwb3J0IHZhciBiZWZvcmVSZWFkID0gJ2JlZm9yZVJlYWQnO1xuZXhwb3J0IHZhciByZWFkID0gJ3JlYWQnO1xuZXhwb3J0IHZhciBhZnRlclJlYWQgPSAnYWZ0ZXJSZWFkJzsgLy8gcHVyZS1sb2dpYyBtb2RpZmllcnNcblxuZXhwb3J0IHZhciBiZWZvcmVNYWluID0gJ2JlZm9yZU1haW4nO1xuZXhwb3J0IHZhciBtYWluID0gJ21haW4nO1xuZXhwb3J0IHZhciBhZnRlck1haW4gPSAnYWZ0ZXJNYWluJzsgLy8gbW9kaWZpZXIgd2l0aCB0aGUgcHVycG9zZSB0byB3cml0ZSB0byB0aGUgRE9NIChvciB3cml0ZSBpbnRvIGEgZnJhbWV3b3JrIHN0YXRlKVxuXG5leHBvcnQgdmFyIGJlZm9yZVdyaXRlID0gJ2JlZm9yZVdyaXRlJztcbmV4cG9ydCB2YXIgd3JpdGUgPSAnd3JpdGUnO1xuZXhwb3J0IHZhciBhZnRlcldyaXRlID0gJ2FmdGVyV3JpdGUnO1xuZXhwb3J0IHZhciBtb2RpZmllclBoYXNlcyA9IFtiZWZvcmVSZWFkLCByZWFkLCBhZnRlclJlYWQsIGJlZm9yZU1haW4sIG1haW4sIGFmdGVyTWFpbiwgYmVmb3JlV3JpdGUsIHdyaXRlLCBhZnRlcldyaXRlXTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROb2RlTmFtZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50ID8gKGVsZW1lbnQubm9kZU5hbWUgfHwgJycpLnRvTG93ZXJDYXNlKCkgOiBudWxsO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvdyhub2RlKSB7XG4gIGlmIChub2RlID09IG51bGwpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgaWYgKG5vZGUudG9TdHJpbmcoKSAhPT0gJ1tvYmplY3QgV2luZG93XScpIHtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93IDogd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcblxuZnVuY3Rpb24gaXNFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuRWxlbWVudDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBpc0hUTUxFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuSFRNTEVsZW1lbnQ7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGlzU2hhZG93Um9vdChub2RlKSB7XG4gIC8vIElFIDExIGhhcyBubyBTaGFkb3dSb290XG4gIGlmICh0eXBlb2YgU2hhZG93Um9vdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5TaGFkb3dSb290O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIFNoYWRvd1Jvb3Q7XG59XG5cbmV4cG9ydCB7IGlzRWxlbWVudCwgaXNIVE1MRWxlbWVudCwgaXNTaGFkb3dSb290IH07IiwiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjsgLy8gVGhpcyBtb2RpZmllciB0YWtlcyB0aGUgc3R5bGVzIHByZXBhcmVkIGJ5IHRoZSBgY29tcHV0ZVN0eWxlc2AgbW9kaWZpZXJcbi8vIGFuZCBhcHBsaWVzIHRoZW0gdG8gdGhlIEhUTUxFbGVtZW50cyBzdWNoIGFzIHBvcHBlciBhbmQgYXJyb3dcblxuZnVuY3Rpb24gYXBwbHlTdHlsZXMoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlO1xuICBPYmplY3Qua2V5cyhzdGF0ZS5lbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBzdHlsZSA9IHN0YXRlLnN0eWxlc1tuYW1lXSB8fCB7fTtcbiAgICB2YXIgYXR0cmlidXRlcyA9IHN0YXRlLmF0dHJpYnV0ZXNbbmFtZV0gfHwge307XG4gICAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1tuYW1lXTsgLy8gYXJyb3cgaXMgb3B0aW9uYWwgKyB2aXJ0dWFsIGVsZW1lbnRzXG5cbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBGbG93IGRvZXNuJ3Qgc3VwcG9ydCB0byBleHRlbmQgdGhpcyBwcm9wZXJ0eSwgYnV0IGl0J3MgdGhlIG1vc3RcbiAgICAvLyBlZmZlY3RpdmUgd2F5IHRvIGFwcGx5IHN0eWxlcyB0byBhbiBIVE1MRWxlbWVudFxuICAgIC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuXG5cbiAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW25hbWVdO1xuXG4gICAgICBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUgPT09IHRydWUgPyAnJyA6IHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZTtcbiAgdmFyIGluaXRpYWxTdHlsZXMgPSB7XG4gICAgcG9wcGVyOiB7XG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGxlZnQ6ICcwJyxcbiAgICAgIHRvcDogJzAnLFxuICAgICAgbWFyZ2luOiAnMCdcbiAgICB9LFxuICAgIGFycm93OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgIH0sXG4gICAgcmVmZXJlbmNlOiB7fVxuICB9O1xuICBPYmplY3QuYXNzaWduKHN0YXRlLmVsZW1lbnRzLnBvcHBlci5zdHlsZSwgaW5pdGlhbFN0eWxlcy5wb3BwZXIpO1xuICBzdGF0ZS5zdHlsZXMgPSBpbml0aWFsU3R5bGVzO1xuXG4gIGlmIChzdGF0ZS5lbGVtZW50cy5hcnJvdykge1xuICAgIE9iamVjdC5hc3NpZ24oc3RhdGUuZWxlbWVudHMuYXJyb3cuc3R5bGUsIGluaXRpYWxTdHlsZXMuYXJyb3cpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBPYmplY3Qua2V5cyhzdGF0ZS5lbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1tuYW1lXTtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gc3RhdGUuYXR0cmlidXRlc1tuYW1lXSB8fCB7fTtcbiAgICAgIHZhciBzdHlsZVByb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhzdGF0ZS5zdHlsZXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBzdGF0ZS5zdHlsZXNbbmFtZV0gOiBpbml0aWFsU3R5bGVzW25hbWVdKTsgLy8gU2V0IGFsbCB2YWx1ZXMgdG8gYW4gZW1wdHkgc3RyaW5nIHRvIHVuc2V0IHRoZW1cblxuICAgICAgdmFyIHN0eWxlID0gc3R5bGVQcm9wZXJ0aWVzLnJlZHVjZShmdW5jdGlvbiAoc3R5bGUsIHByb3BlcnR5KSB7XG4gICAgICAgIHN0eWxlW3Byb3BlcnR5XSA9ICcnO1xuICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgICB9LCB7fSk7IC8vIGFycm93IGlzIG9wdGlvbmFsICsgdmlydHVhbCBlbGVtZW50c1xuXG4gICAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSk7XG4gICAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnYXBwbHlTdHlsZXMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3dyaXRlJyxcbiAgZm46IGFwcGx5U3R5bGVzLFxuICBlZmZlY3Q6IGVmZmVjdCxcbiAgcmVxdWlyZXM6IFsnY29tcHV0ZVN0eWxlcyddXG59OyIsImltcG9ydCB7IGF1dG8gfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbn0iLCIvLyBpbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSAnLi9pbnN0YW5jZU9mJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50LCAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW51c2VkLWltcG9ydHMvbm8tdW51c2VkLXZhcnNcbmluY2x1ZGVTY2FsZSkge1xuICBpZiAoaW5jbHVkZVNjYWxlID09PSB2b2lkIDApIHtcbiAgICBpbmNsdWRlU2NhbGUgPSBmYWxzZTtcbiAgfVxuXG4gIHZhciByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHNjYWxlWCA9IDE7XG4gIHZhciBzY2FsZVkgPSAxOyAvLyBGSVhNRTpcbiAgLy8gYG9mZnNldFdpZHRoYCByZXR1cm5zIGFuIGludGVnZXIgd2hpbGUgYGdldEJvdW5kaW5nQ2xpZW50UmVjdGBcbiAgLy8gcmV0dXJucyBhIGZsb2F0LiBUaGlzIHJlc3VsdHMgaW4gYHNjYWxlWGAgb3IgYHNjYWxlWWAgYmVpbmdcbiAgLy8gbm9uLTEgd2hlbiBpdCBzaG91bGQgYmUgZm9yIGVsZW1lbnRzIHRoYXQgYXJlbid0IGEgZnVsbCBwaXhlbCBpblxuICAvLyB3aWR0aCBvciBoZWlnaHQuXG4gIC8vIGlmIChpc0hUTUxFbGVtZW50KGVsZW1lbnQpICYmIGluY2x1ZGVTY2FsZSkge1xuICAvLyAgIGNvbnN0IG9mZnNldEhlaWdodCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAvLyAgIGNvbnN0IG9mZnNldFdpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgLy8gICAvLyBEbyBub3QgYXR0ZW1wdCB0byBkaXZpZGUgYnkgMCwgb3RoZXJ3aXNlIHdlIGdldCBgSW5maW5pdHlgIGFzIHNjYWxlXG4gIC8vICAgLy8gRmFsbGJhY2sgdG8gMSBpbiBjYXNlIGJvdGggdmFsdWVzIGFyZSBgMGBcbiAgLy8gICBpZiAob2Zmc2V0V2lkdGggPiAwKSB7XG4gIC8vICAgICBzY2FsZVggPSByZWN0LndpZHRoIC8gb2Zmc2V0V2lkdGggfHwgMTtcbiAgLy8gICB9XG4gIC8vICAgaWYgKG9mZnNldEhlaWdodCA+IDApIHtcbiAgLy8gICAgIHNjYWxlWSA9IHJlY3QuaGVpZ2h0IC8gb2Zmc2V0SGVpZ2h0IHx8IDE7XG4gIC8vICAgfVxuICAvLyB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogcmVjdC53aWR0aCAvIHNjYWxlWCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0IC8gc2NhbGVZLFxuICAgIHRvcDogcmVjdC50b3AgLyBzY2FsZVksXG4gICAgcmlnaHQ6IHJlY3QucmlnaHQgLyBzY2FsZVgsXG4gICAgYm90dG9tOiByZWN0LmJvdHRvbSAvIHNjYWxlWSxcbiAgICBsZWZ0OiByZWN0LmxlZnQgLyBzY2FsZVgsXG4gICAgeDogcmVjdC5sZWZ0IC8gc2NhbGVYLFxuICAgIHk6IHJlY3QudG9wIC8gc2NhbGVZXG4gIH07XG59IiwiaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjsgLy8gUmV0dXJucyB0aGUgbGF5b3V0IHJlY3Qgb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byBpdHMgb2Zmc2V0UGFyZW50LiBMYXlvdXRcbi8vIG1lYW5zIGl0IGRvZXNuJ3QgdGFrZSBpbnRvIGFjY291bnQgdHJhbnNmb3Jtcy5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0TGF5b3V0UmVjdChlbGVtZW50KSB7XG4gIHZhciBjbGllbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpOyAvLyBVc2UgdGhlIGNsaWVudFJlY3Qgc2l6ZXMgaWYgaXQncyBub3QgYmVlbiB0cmFuc2Zvcm1lZC5cbiAgLy8gRml4ZXMgaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy8xMjIzXG5cbiAgdmFyIHdpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgdmFyIGhlaWdodCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXG4gIGlmIChNYXRoLmFicyhjbGllbnRSZWN0LndpZHRoIC0gd2lkdGgpIDw9IDEpIHtcbiAgICB3aWR0aCA9IGNsaWVudFJlY3Qud2lkdGg7XG4gIH1cblxuICBpZiAoTWF0aC5hYnMoY2xpZW50UmVjdC5oZWlnaHQgLSBoZWlnaHQpIDw9IDEpIHtcbiAgICBoZWlnaHQgPSBjbGllbnRSZWN0LmhlaWdodDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgeDogZWxlbWVudC5vZmZzZXRMZWZ0LFxuICAgIHk6IGVsZW1lbnQub2Zmc2V0VG9wLFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9O1xufSIsImltcG9ydCB7IGlzU2hhZG93Um9vdCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnRhaW5zKHBhcmVudCwgY2hpbGQpIHtcbiAgdmFyIHJvb3ROb2RlID0gY2hpbGQuZ2V0Um9vdE5vZGUgJiYgY2hpbGQuZ2V0Um9vdE5vZGUoKTsgLy8gRmlyc3QsIGF0dGVtcHQgd2l0aCBmYXN0ZXIgbmF0aXZlIG1ldGhvZFxuXG4gIGlmIChwYXJlbnQuY29udGFpbnMoY2hpbGQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gdGhlbiBmYWxsYmFjayB0byBjdXN0b20gaW1wbGVtZW50YXRpb24gd2l0aCBTaGFkb3cgRE9NIHN1cHBvcnRcbiAgZWxzZSBpZiAocm9vdE5vZGUgJiYgaXNTaGFkb3dSb290KHJvb3ROb2RlKSkge1xuICAgICAgdmFyIG5leHQgPSBjaGlsZDtcblxuICAgICAgZG8ge1xuICAgICAgICBpZiAobmV4dCAmJiBwYXJlbnQuaXNTYW1lTm9kZShuZXh0KSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXTogbmVlZCBhIGJldHRlciB3YXkgdG8gaGFuZGxlIHRoaXMuLi5cblxuXG4gICAgICAgIG5leHQgPSBuZXh0LnBhcmVudE5vZGUgfHwgbmV4dC5ob3N0O1xuICAgICAgfSB3aGlsZSAobmV4dCk7XG4gICAgfSAvLyBHaXZlIHVwLCB0aGUgcmVzdWx0IGlzIGZhbHNlXG5cblxuICByZXR1cm4gZmFsc2U7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkge1xuICByZXR1cm4gZ2V0V2luZG93KGVsZW1lbnQpLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG59IiwiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1RhYmxlRWxlbWVudChlbGVtZW50KSB7XG4gIHJldHVybiBbJ3RhYmxlJywgJ3RkJywgJ3RoJ10uaW5kZXhPZihnZXROb2RlTmFtZShlbGVtZW50KSkgPj0gMDtcbn0iLCJpbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkge1xuICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBhc3N1bWUgYm9keSBpcyBhbHdheXMgYXZhaWxhYmxlXG4gIHJldHVybiAoKGlzRWxlbWVudChlbGVtZW50KSA/IGVsZW1lbnQub3duZXJEb2N1bWVudCA6IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICBlbGVtZW50LmRvY3VtZW50KSB8fCB3aW5kb3cuZG9jdW1lbnQpLmRvY3VtZW50RWxlbWVudDtcbn0iLCJpbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgeyBpc1NoYWRvd1Jvb3QgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGdldE5vZGVOYW1lKGVsZW1lbnQpID09PSAnaHRtbCcpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiAoLy8gdGhpcyBpcyBhIHF1aWNrZXIgKGJ1dCBsZXNzIHR5cGUgc2FmZSkgd2F5IHRvIHNhdmUgcXVpdGUgc29tZSBieXRlcyBmcm9tIHRoZSBidW5kbGVcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dXG4gICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgZWxlbWVudC5hc3NpZ25lZFNsb3QgfHwgLy8gc3RlcCBpbnRvIHRoZSBzaGFkb3cgRE9NIG9mIHRoZSBwYXJlbnQgb2YgYSBzbG90dGVkIG5vZGVcbiAgICBlbGVtZW50LnBhcmVudE5vZGUgfHwgKCAvLyBET00gRWxlbWVudCBkZXRlY3RlZFxuICAgIGlzU2hhZG93Um9vdChlbGVtZW50KSA/IGVsZW1lbnQuaG9zdCA6IG51bGwpIHx8IC8vIFNoYWRvd1Jvb3QgZGV0ZWN0ZWRcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXTogSFRNTEVsZW1lbnQgaXMgYSBOb2RlXG4gICAgZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpIC8vIGZhbGxiYWNrXG5cbiAgKTtcbn0iLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGlzVGFibGVFbGVtZW50IGZyb20gXCIuL2lzVGFibGVFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5cbmZ1bmN0aW9uIGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy84MzdcbiAgZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0UGFyZW50O1xufSAvLyBgLm9mZnNldFBhcmVudGAgcmVwb3J0cyBgbnVsbGAgZm9yIGZpeGVkIGVsZW1lbnRzLCB3aGlsZSBhYnNvbHV0ZSBlbGVtZW50c1xuLy8gcmV0dXJuIHRoZSBjb250YWluaW5nIGJsb2NrXG5cblxuZnVuY3Rpb24gZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHtcbiAgdmFyIGlzRmlyZWZveCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdmaXJlZm94JykgIT09IC0xO1xuICB2YXIgaXNJRSA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpICE9PSAtMTtcblxuICBpZiAoaXNJRSAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgLy8gSW4gSUUgOSwgMTAgYW5kIDExIGZpeGVkIGVsZW1lbnRzIGNvbnRhaW5pbmcgYmxvY2sgaXMgYWx3YXlzIGVzdGFibGlzaGVkIGJ5IHRoZSB2aWV3cG9ydFxuICAgIHZhciBlbGVtZW50Q3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcblxuICAgIGlmIChlbGVtZW50Q3NzLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICB2YXIgY3VycmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGVsZW1lbnQpO1xuXG4gIHdoaWxlIChpc0hUTUxFbGVtZW50KGN1cnJlbnROb2RlKSAmJiBbJ2h0bWwnLCAnYm9keSddLmluZGV4T2YoZ2V0Tm9kZU5hbWUoY3VycmVudE5vZGUpKSA8IDApIHtcbiAgICB2YXIgY3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShjdXJyZW50Tm9kZSk7IC8vIFRoaXMgaXMgbm9uLWV4aGF1c3RpdmUgYnV0IGNvdmVycyB0aGUgbW9zdCBjb21tb24gQ1NTIHByb3BlcnRpZXMgdGhhdFxuICAgIC8vIGNyZWF0ZSBhIGNvbnRhaW5pbmcgYmxvY2suXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0NvbnRhaW5pbmdfYmxvY2sjaWRlbnRpZnlpbmdfdGhlX2NvbnRhaW5pbmdfYmxvY2tcblxuICAgIGlmIChjc3MudHJhbnNmb3JtICE9PSAnbm9uZScgfHwgY3NzLnBlcnNwZWN0aXZlICE9PSAnbm9uZScgfHwgY3NzLmNvbnRhaW4gPT09ICdwYWludCcgfHwgWyd0cmFuc2Zvcm0nLCAncGVyc3BlY3RpdmUnXS5pbmRleE9mKGNzcy53aWxsQ2hhbmdlKSAhPT0gLTEgfHwgaXNGaXJlZm94ICYmIGNzcy53aWxsQ2hhbmdlID09PSAnZmlsdGVyJyB8fCBpc0ZpcmVmb3ggJiYgY3NzLmZpbHRlciAmJiBjc3MuZmlsdGVyICE9PSAnbm9uZScpIHtcbiAgICAgIHJldHVybiBjdXJyZW50Tm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufSAvLyBHZXRzIHRoZSBjbG9zZXN0IGFuY2VzdG9yIHBvc2l0aW9uZWQgZWxlbWVudC4gSGFuZGxlcyBzb21lIGVkZ2UgY2FzZXMsXG4vLyBzdWNoIGFzIHRhYmxlIGFuY2VzdG9ycyBhbmQgY3Jvc3MgYnJvd3NlciBidWdzLlxuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQpO1xuXG4gIHdoaWxlIChvZmZzZXRQYXJlbnQgJiYgaXNUYWJsZUVsZW1lbnQob2Zmc2V0UGFyZW50KSAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSB7XG4gICAgb2Zmc2V0UGFyZW50ID0gZ2V0VHJ1ZU9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgaWYgKG9mZnNldFBhcmVudCAmJiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSA9PT0gJ2h0bWwnIHx8IGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09ICdib2R5JyAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSkge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB8fCB3aW5kb3c7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpID49IDAgPyAneCcgOiAneSc7XG59IiwiZXhwb3J0IHZhciBtYXggPSBNYXRoLm1heDtcbmV4cG9ydCB2YXIgbWluID0gTWF0aC5taW47XG5leHBvcnQgdmFyIHJvdW5kID0gTWF0aC5yb3VuZDsiLCJpbXBvcnQgeyBtYXggYXMgbWF0aE1heCwgbWluIGFzIG1hdGhNaW4gfSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB3aXRoaW4obWluLCB2YWx1ZSwgbWF4KSB7XG4gIHJldHVybiBtYXRoTWF4KG1pbiwgbWF0aE1pbih2YWx1ZSwgbWF4KSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RnJlc2hTaWRlT2JqZWN0KCkge1xuICByZXR1cm4ge1xuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogMFxuICB9O1xufSIsImltcG9ydCBnZXRGcmVzaFNpZGVPYmplY3QgZnJvbSBcIi4vZ2V0RnJlc2hTaWRlT2JqZWN0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZVBhZGRpbmdPYmplY3QocGFkZGluZ09iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZ2V0RnJlc2hTaWRlT2JqZWN0KCksIHBhZGRpbmdPYmplY3QpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4cGFuZFRvSGFzaE1hcCh2YWx1ZSwga2V5cykge1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGhhc2hNYXAsIGtleSkge1xuICAgIGhhc2hNYXBba2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiBoYXNoTWFwO1xuICB9LCB7fSk7XG59IiwiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qc1wiO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gXCIuLi9kb20tdXRpbHMvY29udGFpbnMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHdpdGhpbiBmcm9tIFwiLi4vdXRpbHMvd2l0aGluLmpzXCI7XG5pbXBvcnQgbWVyZ2VQYWRkaW5nT2JqZWN0IGZyb20gXCIuLi91dGlscy9tZXJnZVBhZGRpbmdPYmplY3QuanNcIjtcbmltcG9ydCBleHBhbmRUb0hhc2hNYXAgZnJvbSBcIi4uL3V0aWxzL2V4cGFuZFRvSGFzaE1hcC5qc1wiO1xuaW1wb3J0IHsgbGVmdCwgcmlnaHQsIGJhc2VQbGFjZW1lbnRzLCB0b3AsIGJvdHRvbSB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciB0b1BhZGRpbmdPYmplY3QgPSBmdW5jdGlvbiB0b1BhZGRpbmdPYmplY3QocGFkZGluZywgc3RhdGUpIHtcbiAgcGFkZGluZyA9IHR5cGVvZiBwYWRkaW5nID09PSAnZnVuY3Rpb24nID8gcGFkZGluZyhPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5yZWN0cywge1xuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pKSA6IHBhZGRpbmc7XG4gIHJldHVybiBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpO1xufTtcblxuZnVuY3Rpb24gYXJyb3coX3JlZikge1xuICB2YXIgX3N0YXRlJG1vZGlmaWVyc0RhdGEkO1xuXG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciBheGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgaXNWZXJ0aWNhbCA9IFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwO1xuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBpZiAoIWFycm93RWxlbWVudCB8fCAhcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBwYWRkaW5nT2JqZWN0ID0gdG9QYWRkaW5nT2JqZWN0KG9wdGlvbnMucGFkZGluZywgc3RhdGUpO1xuICB2YXIgYXJyb3dSZWN0ID0gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpO1xuICB2YXIgbWluUHJvcCA9IGF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gIHZhciBtYXhQcm9wID0gYXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG4gIHZhciBlbmREaWZmID0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2xlbl0gKyBzdGF0ZS5yZWN0cy5yZWZlcmVuY2VbYXhpc10gLSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucG9wcGVyW2xlbl07XG4gIHZhciBzdGFydERpZmYgPSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdO1xuICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoYXJyb3dFbGVtZW50KTtcbiAgdmFyIGNsaWVudFNpemUgPSBhcnJvd09mZnNldFBhcmVudCA/IGF4aXMgPT09ICd5JyA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCB8fCAwIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggfHwgMCA6IDA7XG4gIHZhciBjZW50ZXJUb1JlZmVyZW5jZSA9IGVuZERpZmYgLyAyIC0gc3RhcnREaWZmIC8gMjsgLy8gTWFrZSBzdXJlIHRoZSBhcnJvdyBkb2Vzbid0IG92ZXJmbG93IHRoZSBwb3BwZXIgaWYgdGhlIGNlbnRlciBwb2ludCBpc1xuICAvLyBvdXRzaWRlIG9mIHRoZSBwb3BwZXIgYm91bmRzXG5cbiAgdmFyIG1pbiA9IHBhZGRpbmdPYmplY3RbbWluUHJvcF07XG4gIHZhciBtYXggPSBjbGllbnRTaXplIC0gYXJyb3dSZWN0W2xlbl0gLSBwYWRkaW5nT2JqZWN0W21heFByb3BdO1xuICB2YXIgY2VudGVyID0gY2xpZW50U2l6ZSAvIDIgLSBhcnJvd1JlY3RbbGVuXSAvIDIgKyBjZW50ZXJUb1JlZmVyZW5jZTtcbiAgdmFyIG9mZnNldCA9IHdpdGhpbihtaW4sIGNlbnRlciwgbWF4KTsgLy8gUHJldmVudHMgYnJlYWtpbmcgc3ludGF4IGhpZ2hsaWdodGluZy4uLlxuXG4gIHZhciBheGlzUHJvcCA9IGF4aXM7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSAoX3N0YXRlJG1vZGlmaWVyc0RhdGEkID0ge30sIF9zdGF0ZSRtb2RpZmllcnNEYXRhJFtheGlzUHJvcF0gPSBvZmZzZXQsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJC5jZW50ZXJPZmZzZXQgPSBvZmZzZXQgLSBjZW50ZXIsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJCk7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmMi5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkZWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudCxcbiAgICAgIGFycm93RWxlbWVudCA9IF9vcHRpb25zJGVsZW1lbnQgPT09IHZvaWQgMCA/ICdbZGF0YS1wb3BwZXItYXJyb3ddJyA6IF9vcHRpb25zJGVsZW1lbnQ7XG5cbiAgaWYgKGFycm93RWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIENTUyBzZWxlY3RvclxuXG5cbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGlmICghaXNIVE1MRWxlbWVudChhcnJvd0VsZW1lbnQpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImFycm93XCIgZWxlbWVudCBtdXN0IGJlIGFuIEhUTUxFbGVtZW50IChub3QgYW4gU1ZHRWxlbWVudCkuJywgJ1RvIHVzZSBhbiBTVkcgYXJyb3csIHdyYXAgaXQgaW4gYW4gSFRNTEVsZW1lbnQgdGhhdCB3aWxsIGJlIHVzZWQgYXMnLCAndGhlIGFycm93LiddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb250YWlucyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIsIGFycm93RWxlbWVudCkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImFycm93XCIgbW9kaWZpZXJcXCdzIGBlbGVtZW50YCBtdXN0IGJlIGEgY2hpbGQgb2YgdGhlIHBvcHBlcicsICdlbGVtZW50LiddLmpvaW4oJyAnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3RhdGUuZWxlbWVudHMuYXJyb3cgPSBhcnJvd0VsZW1lbnQ7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhcnJvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBhcnJvdyxcbiAgZWZmZWN0OiBlZmZlY3QsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXVxufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcbn0iLCJpbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20sIGVuZCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi4vdXRpbHMvZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxudmFyIHVuc2V0U2lkZXMgPSB7XG4gIHRvcDogJ2F1dG8nLFxuICByaWdodDogJ2F1dG8nLFxuICBib3R0b206ICdhdXRvJyxcbiAgbGVmdDogJ2F1dG8nXG59OyAvLyBSb3VuZCB0aGUgb2Zmc2V0cyB0byB0aGUgbmVhcmVzdCBzdWl0YWJsZSBzdWJwaXhlbCBiYXNlZCBvbiB0aGUgRFBSLlxuLy8gWm9vbWluZyBjYW4gY2hhbmdlIHRoZSBEUFIsIGJ1dCBpdCBzZWVtcyB0byByZXBvcnQgYSB2YWx1ZSB0aGF0IHdpbGxcbi8vIGNsZWFubHkgZGl2aWRlIHRoZSB2YWx1ZXMgaW50byB0aGUgYXBwcm9wcmlhdGUgc3VicGl4ZWxzLlxuXG5mdW5jdGlvbiByb3VuZE9mZnNldHNCeURQUihfcmVmKSB7XG4gIHZhciB4ID0gX3JlZi54LFxuICAgICAgeSA9IF9yZWYueTtcbiAgdmFyIHdpbiA9IHdpbmRvdztcbiAgdmFyIGRwciA9IHdpbi5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG4gIHJldHVybiB7XG4gICAgeDogcm91bmQocm91bmQoeCAqIGRwcikgLyBkcHIpIHx8IDAsXG4gICAgeTogcm91bmQocm91bmQoeSAqIGRwcikgLyBkcHIpIHx8IDBcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcFRvU3R5bGVzKF9yZWYyKSB7XG4gIHZhciBfT2JqZWN0JGFzc2lnbjI7XG5cbiAgdmFyIHBvcHBlciA9IF9yZWYyLnBvcHBlcixcbiAgICAgIHBvcHBlclJlY3QgPSBfcmVmMi5wb3BwZXJSZWN0LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZjIucGxhY2VtZW50LFxuICAgICAgdmFyaWF0aW9uID0gX3JlZjIudmFyaWF0aW9uLFxuICAgICAgb2Zmc2V0cyA9IF9yZWYyLm9mZnNldHMsXG4gICAgICBwb3NpdGlvbiA9IF9yZWYyLnBvc2l0aW9uLFxuICAgICAgZ3B1QWNjZWxlcmF0aW9uID0gX3JlZjIuZ3B1QWNjZWxlcmF0aW9uLFxuICAgICAgYWRhcHRpdmUgPSBfcmVmMi5hZGFwdGl2ZSxcbiAgICAgIHJvdW5kT2Zmc2V0cyA9IF9yZWYyLnJvdW5kT2Zmc2V0cztcblxuICB2YXIgX3JlZjMgPSByb3VuZE9mZnNldHMgPT09IHRydWUgPyByb3VuZE9mZnNldHNCeURQUihvZmZzZXRzKSA6IHR5cGVvZiByb3VuZE9mZnNldHMgPT09ICdmdW5jdGlvbicgPyByb3VuZE9mZnNldHMob2Zmc2V0cykgOiBvZmZzZXRzLFxuICAgICAgX3JlZjMkeCA9IF9yZWYzLngsXG4gICAgICB4ID0gX3JlZjMkeCA9PT0gdm9pZCAwID8gMCA6IF9yZWYzJHgsXG4gICAgICBfcmVmMyR5ID0gX3JlZjMueSxcbiAgICAgIHkgPSBfcmVmMyR5ID09PSB2b2lkIDAgPyAwIDogX3JlZjMkeTtcblxuICB2YXIgaGFzWCA9IG9mZnNldHMuaGFzT3duUHJvcGVydHkoJ3gnKTtcbiAgdmFyIGhhc1kgPSBvZmZzZXRzLmhhc093blByb3BlcnR5KCd5Jyk7XG4gIHZhciBzaWRlWCA9IGxlZnQ7XG4gIHZhciBzaWRlWSA9IHRvcDtcbiAgdmFyIHdpbiA9IHdpbmRvdztcblxuICBpZiAoYWRhcHRpdmUpIHtcbiAgICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KHBvcHBlcik7XG4gICAgdmFyIGhlaWdodFByb3AgPSAnY2xpZW50SGVpZ2h0JztcbiAgICB2YXIgd2lkdGhQcm9wID0gJ2NsaWVudFdpZHRoJztcblxuICAgIGlmIChvZmZzZXRQYXJlbnQgPT09IGdldFdpbmRvdyhwb3BwZXIpKSB7XG4gICAgICBvZmZzZXRQYXJlbnQgPSBnZXREb2N1bWVudEVsZW1lbnQocG9wcGVyKTtcblxuICAgICAgaWYgKGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiAhPT0gJ3N0YXRpYycgJiYgcG9zaXRpb24gPT09ICdhYnNvbHV0ZScpIHtcbiAgICAgICAgaGVpZ2h0UHJvcCA9ICdzY3JvbGxIZWlnaHQnO1xuICAgICAgICB3aWR0aFByb3AgPSAnc2Nyb2xsV2lkdGgnO1xuICAgICAgfVxuICAgIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FzdF06IGZvcmNlIHR5cGUgcmVmaW5lbWVudCwgd2UgY29tcGFyZSBvZmZzZXRQYXJlbnQgd2l0aCB3aW5kb3cgYWJvdmUsIGJ1dCBGbG93IGRvZXNuJ3QgZGV0ZWN0IGl0XG5cblxuICAgIG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudDtcblxuICAgIGlmIChwbGFjZW1lbnQgPT09IHRvcCB8fCAocGxhY2VtZW50ID09PSBsZWZ0IHx8IHBsYWNlbWVudCA9PT0gcmlnaHQpICYmIHZhcmlhdGlvbiA9PT0gZW5kKSB7XG4gICAgICBzaWRlWSA9IGJvdHRvbTsgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG5cbiAgICAgIHkgLT0gb2Zmc2V0UGFyZW50W2hlaWdodFByb3BdIC0gcG9wcGVyUmVjdC5oZWlnaHQ7XG4gICAgICB5ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSBsZWZ0IHx8IChwbGFjZW1lbnQgPT09IHRvcCB8fCBwbGFjZW1lbnQgPT09IGJvdHRvbSkgJiYgdmFyaWF0aW9uID09PSBlbmQpIHtcbiAgICAgIHNpZGVYID0gcmlnaHQ7IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuXG4gICAgICB4IC09IG9mZnNldFBhcmVudFt3aWR0aFByb3BdIC0gcG9wcGVyUmVjdC53aWR0aDtcbiAgICAgIHggKj0gZ3B1QWNjZWxlcmF0aW9uID8gMSA6IC0xO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb21tb25TdHlsZXMgPSBPYmplY3QuYXNzaWduKHtcbiAgICBwb3NpdGlvbjogcG9zaXRpb25cbiAgfSwgYWRhcHRpdmUgJiYgdW5zZXRTaWRlcyk7XG5cbiAgaWYgKGdwdUFjY2VsZXJhdGlvbikge1xuICAgIHZhciBfT2JqZWN0JGFzc2lnbjtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIChfT2JqZWN0JGFzc2lnbiA9IHt9LCBfT2JqZWN0JGFzc2lnbltzaWRlWV0gPSBoYXNZID8gJzAnIDogJycsIF9PYmplY3QkYXNzaWduW3NpZGVYXSA9IGhhc1ggPyAnMCcgOiAnJywgX09iamVjdCRhc3NpZ24udHJhbnNmb3JtID0gKHdpbi5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpIDw9IDEgPyBcInRyYW5zbGF0ZShcIiArIHggKyBcInB4LCBcIiArIHkgKyBcInB4KVwiIDogXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcInB4LCBcIiArIHkgKyBcInB4LCAwKVwiLCBfT2JqZWN0JGFzc2lnbikpO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywgKF9PYmplY3QkYXNzaWduMiA9IHt9LCBfT2JqZWN0JGFzc2lnbjJbc2lkZVldID0gaGFzWSA/IHkgKyBcInB4XCIgOiAnJywgX09iamVjdCRhc3NpZ24yW3NpZGVYXSA9IGhhc1ggPyB4ICsgXCJweFwiIDogJycsIF9PYmplY3QkYXNzaWduMi50cmFuc2Zvcm0gPSAnJywgX09iamVjdCRhc3NpZ24yKSk7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVTdHlsZXMoX3JlZjQpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjQuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjQub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJGdwdUFjY2VsZXJhdCA9IG9wdGlvbnMuZ3B1QWNjZWxlcmF0aW9uLFxuICAgICAgZ3B1QWNjZWxlcmF0aW9uID0gX29wdGlvbnMkZ3B1QWNjZWxlcmF0ID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkZ3B1QWNjZWxlcmF0LFxuICAgICAgX29wdGlvbnMkYWRhcHRpdmUgPSBvcHRpb25zLmFkYXB0aXZlLFxuICAgICAgYWRhcHRpdmUgPSBfb3B0aW9ucyRhZGFwdGl2ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGFkYXB0aXZlLFxuICAgICAgX29wdGlvbnMkcm91bmRPZmZzZXRzID0gb3B0aW9ucy5yb3VuZE9mZnNldHMsXG4gICAgICByb3VuZE9mZnNldHMgPSBfb3B0aW9ucyRyb3VuZE9mZnNldHMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRyb3VuZE9mZnNldHM7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHZhciB0cmFuc2l0aW9uUHJvcGVydHkgPSBnZXRDb21wdXRlZFN0eWxlKHN0YXRlLmVsZW1lbnRzLnBvcHBlcikudHJhbnNpdGlvblByb3BlcnR5IHx8ICcnO1xuXG4gICAgaWYgKGFkYXB0aXZlICYmIFsndHJhbnNmb3JtJywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLnNvbWUoZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICByZXR1cm4gdHJhbnNpdGlvblByb3BlcnR5LmluZGV4T2YocHJvcGVydHkpID49IDA7XG4gICAgfSkpIHtcbiAgICAgIGNvbnNvbGUud2FybihbJ1BvcHBlcjogRGV0ZWN0ZWQgQ1NTIHRyYW5zaXRpb25zIG9uIGF0IGxlYXN0IG9uZSBvZiB0aGUgZm9sbG93aW5nJywgJ0NTUyBwcm9wZXJ0aWVzOiBcInRyYW5zZm9ybVwiLCBcInRvcFwiLCBcInJpZ2h0XCIsIFwiYm90dG9tXCIsIFwibGVmdFwiLicsICdcXG5cXG4nLCAnRGlzYWJsZSB0aGUgXCJjb21wdXRlU3R5bGVzXCIgbW9kaWZpZXJcXCdzIGBhZGFwdGl2ZWAgb3B0aW9uIHRvIGFsbG93JywgJ2ZvciBzbW9vdGggdHJhbnNpdGlvbnMsIG9yIHJlbW92ZSB0aGVzZSBwcm9wZXJ0aWVzIGZyb20gdGhlIENTUycsICd0cmFuc2l0aW9uIGRlY2xhcmF0aW9uIG9uIHRoZSBwb3BwZXIgZWxlbWVudCBpZiBvbmx5IHRyYW5zaXRpb25pbmcnLCAnb3BhY2l0eSBvciBiYWNrZ3JvdW5kLWNvbG9yIGZvciBleGFtcGxlLicsICdcXG5cXG4nLCAnV2UgcmVjb21tZW5kIHVzaW5nIHRoZSBwb3BwZXIgZWxlbWVudCBhcyBhIHdyYXBwZXIgYXJvdW5kIGFuIGlubmVyJywgJ2VsZW1lbnQgdGhhdCBjYW4gaGF2ZSBhbnkgQ1NTIHByb3BlcnR5IHRyYW5zaXRpb25lZCBmb3IgYW5pbWF0aW9ucy4nXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb21tb25TdHlsZXMgPSB7XG4gICAgcGxhY2VtZW50OiBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCksXG4gICAgdmFyaWF0aW9uOiBnZXRWYXJpYXRpb24oc3RhdGUucGxhY2VtZW50KSxcbiAgICBwb3BwZXI6IHN0YXRlLmVsZW1lbnRzLnBvcHBlcixcbiAgICBwb3BwZXJSZWN0OiBzdGF0ZS5yZWN0cy5wb3BwZXIsXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiBncHVBY2NlbGVyYXRpb25cbiAgfTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLnBvcHBlciwgbWFwVG9TdHlsZXMoT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCB7XG4gICAgICBvZmZzZXRzOiBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMsXG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGFkYXB0aXZlOiBhZGFwdGl2ZSxcbiAgICAgIHJvdW5kT2Zmc2V0czogcm91bmRPZmZzZXRzXG4gICAgfSkpKTtcbiAgfVxuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLmFycm93ICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMuYXJyb3cgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5zdHlsZXMuYXJyb3csIG1hcFRvU3R5bGVzKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywge1xuICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYWRhcHRpdmU6IGZhbHNlLFxuICAgICAgcm91bmRPZmZzZXRzOiByb3VuZE9mZnNldHNcbiAgICB9KSkpO1xuICB9XG5cbiAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciwge1xuICAgICdkYXRhLXBvcHBlci1wbGFjZW1lbnQnOiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdjb21wdXRlU3R5bGVzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdiZWZvcmVXcml0ZScsXG4gIGZuOiBjb21wdXRlU3R5bGVzLFxuICBkYXRhOiB7fVxufTsiLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0V2luZG93LmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxudmFyIHBhc3NpdmUgPSB7XG4gIHBhc3NpdmU6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBpbnN0YW5jZSA9IF9yZWYuaW5zdGFuY2UsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkc2Nyb2xsID0gb3B0aW9ucy5zY3JvbGwsXG4gICAgICBzY3JvbGwgPSBfb3B0aW9ucyRzY3JvbGwgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRzY3JvbGwsXG4gICAgICBfb3B0aW9ucyRyZXNpemUgPSBvcHRpb25zLnJlc2l6ZSxcbiAgICAgIHJlc2l6ZSA9IF9vcHRpb25zJHJlc2l6ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHJlc2l6ZTtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIpO1xuICB2YXIgc2Nyb2xsUGFyZW50cyA9IFtdLmNvbmNhdChzdGF0ZS5zY3JvbGxQYXJlbnRzLnJlZmVyZW5jZSwgc3RhdGUuc2Nyb2xsUGFyZW50cy5wb3BwZXIpO1xuXG4gIGlmIChzY3JvbGwpIHtcbiAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgc2Nyb2xsUGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAocmVzaXplKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChzY3JvbGwpIHtcbiAgICAgIHNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAoc2Nyb2xsUGFyZW50KSB7XG4gICAgICAgIHNjcm9sbFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlc2l6ZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfVxuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnZXZlbnRMaXN0ZW5lcnMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3dyaXRlJyxcbiAgZm46IGZ1bmN0aW9uIGZuKCkge30sXG4gIGVmZmVjdDogZWZmZWN0LFxuICBkYXRhOiB7fVxufTsiLCJ2YXIgaGFzaCA9IHtcbiAgbGVmdDogJ3JpZ2h0JyxcbiAgcmlnaHQ6ICdsZWZ0JyxcbiAgYm90dG9tOiAndG9wJyxcbiAgdG9wOiAnYm90dG9tJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn0iLCJ2YXIgaGFzaCA9IHtcbiAgc3RhcnQ6ICdlbmQnLFxuICBlbmQ6ICdzdGFydCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9zdGFydHxlbmQvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbChub2RlKSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3cobm9kZSk7XG4gIHZhciBzY3JvbGxMZWZ0ID0gd2luLnBhZ2VYT2Zmc2V0O1xuICB2YXIgc2Nyb2xsVG9wID0gd2luLnBhZ2VZT2Zmc2V0O1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3BcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpIHtcbiAgLy8gSWYgPGh0bWw+IGhhcyBhIENTUyB3aWR0aCBncmVhdGVyIHRoYW4gdGhlIHZpZXdwb3J0LCB0aGVuIHRoaXMgd2lsbCBiZVxuICAvLyBpbmNvcnJlY3QgZm9yIFJUTC5cbiAgLy8gUG9wcGVyIDEgaXMgYnJva2VuIGluIHRoaXMgY2FzZSBhbmQgbmV2ZXIgaGFkIGEgYnVnIHJlcG9ydCBzbyBsZXQncyBhc3N1bWVcbiAgLy8gaXQncyBub3QgYW4gaXNzdWUuIEkgZG9uJ3QgdGhpbmsgYW55b25lIGV2ZXIgc3BlY2lmaWVzIHdpZHRoIG9uIDxodG1sPlxuICAvLyBhbnl3YXkuXG4gIC8vIEJyb3dzZXJzIHdoZXJlIHRoZSBsZWZ0IHNjcm9sbGJhciBkb2Vzbid0IGNhdXNlIGFuIGlzc3VlIHJlcG9ydCBgMGAgZm9yXG4gIC8vIHRoaXMgKGUuZy4gRWRnZSAyMDE5LCBJRTExLCBTYWZhcmkpXG4gIHJldHVybiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKS5sZWZ0ICsgZ2V0V2luZG93U2Nyb2xsKGVsZW1lbnQpLnNjcm9sbExlZnQ7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICB2YXIgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgdmFyIHZpc3VhbFZpZXdwb3J0ID0gd2luLnZpc3VhbFZpZXdwb3J0O1xuICB2YXIgd2lkdGggPSBodG1sLmNsaWVudFdpZHRoO1xuICB2YXIgaGVpZ2h0ID0gaHRtbC5jbGllbnRIZWlnaHQ7XG4gIHZhciB4ID0gMDtcbiAgdmFyIHkgPSAwOyAvLyBOQjogVGhpcyBpc24ndCBzdXBwb3J0ZWQgb24gaU9TIDw9IDEyLiBJZiB0aGUga2V5Ym9hcmQgaXMgb3BlbiwgdGhlIHBvcHBlclxuICAvLyBjYW4gYmUgb2JzY3VyZWQgdW5kZXJuZWF0aCBpdC5cbiAgLy8gQWxzbywgYGh0bWwuY2xpZW50SGVpZ2h0YCBhZGRzIHRoZSBib3R0b20gYmFyIGhlaWdodCBpbiBTYWZhcmkgaU9TLCBldmVuXG4gIC8vIGlmIGl0IGlzbid0IG9wZW4sIHNvIGlmIHRoaXMgaXNuJ3QgYXZhaWxhYmxlLCB0aGUgcG9wcGVyIHdpbGwgYmUgZGV0ZWN0ZWRcbiAgLy8gdG8gb3ZlcmZsb3cgdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuIHRvbyBlYXJseS5cblxuICBpZiAodmlzdWFsVmlld3BvcnQpIHtcbiAgICB3aWR0aCA9IHZpc3VhbFZpZXdwb3J0LndpZHRoO1xuICAgIGhlaWdodCA9IHZpc3VhbFZpZXdwb3J0LmhlaWdodDsgLy8gVXNlcyBMYXlvdXQgVmlld3BvcnQgKGxpa2UgQ2hyb21lOyBTYWZhcmkgZG9lcyBub3QgY3VycmVudGx5KVxuICAgIC8vIEluIENocm9tZSwgaXQgcmV0dXJucyBhIHZhbHVlIHZlcnkgY2xvc2UgdG8gMCAoKy8tKSBidXQgY29udGFpbnMgcm91bmRpbmdcbiAgICAvLyBlcnJvcnMgZHVlIHRvIGZsb2F0aW5nIHBvaW50IG51bWJlcnMsIHNvIHdlIG5lZWQgdG8gY2hlY2sgcHJlY2lzaW9uLlxuICAgIC8vIFNhZmFyaSByZXR1cm5zIGEgbnVtYmVyIDw9IDAsIHVzdWFsbHkgPCAtMSB3aGVuIHBpbmNoLXpvb21lZFxuICAgIC8vIEZlYXR1cmUgZGV0ZWN0aW9uIGZhaWxzIGluIG1vYmlsZSBlbXVsYXRpb24gbW9kZSBpbiBDaHJvbWUuXG4gICAgLy8gTWF0aC5hYnMod2luLmlubmVyV2lkdGggLyB2aXN1YWxWaWV3cG9ydC5zY2FsZSAtIHZpc3VhbFZpZXdwb3J0LndpZHRoKSA8XG4gICAgLy8gMC4wMDFcbiAgICAvLyBGYWxsYmFjayBoZXJlOiBcIk5vdCBTYWZhcmlcIiB1c2VyQWdlbnRcblxuICAgIGlmICghL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgeCA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldExlZnQ7XG4gICAgICB5ID0gdmlzdWFsVmlld3BvcnQub2Zmc2V0VG9wO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHg6IHggKyBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpLFxuICAgIHk6IHlcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjtcbmltcG9ydCB7IG1heCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7IC8vIEdldHMgdGhlIGVudGlyZSBzaXplIG9mIHRoZSBzY3JvbGxhYmxlIGRvY3VtZW50IGFyZWEsIGV2ZW4gZXh0ZW5kaW5nIG91dHNpZGVcbi8vIG9mIHRoZSBgPGh0bWw+YCBhbmQgYDxib2R5PmAgcmVjdCBib3VuZHMgaWYgaG9yaXpvbnRhbGx5IHNjcm9sbGFibGVcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RG9jdW1lbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIF9lbGVtZW50JG93bmVyRG9jdW1lbjtcblxuICB2YXIgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgdmFyIHdpblNjcm9sbCA9IGdldFdpbmRvd1Njcm9sbChlbGVtZW50KTtcbiAgdmFyIGJvZHkgPSAoX2VsZW1lbnQkb3duZXJEb2N1bWVuID0gZWxlbWVudC5vd25lckRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2VsZW1lbnQkb3duZXJEb2N1bWVuLmJvZHk7XG4gIHZhciB3aWR0aCA9IG1heChodG1sLnNjcm9sbFdpZHRoLCBodG1sLmNsaWVudFdpZHRoLCBib2R5ID8gYm9keS5zY3JvbGxXaWR0aCA6IDAsIGJvZHkgPyBib2R5LmNsaWVudFdpZHRoIDogMCk7XG4gIHZhciBoZWlnaHQgPSBtYXgoaHRtbC5zY3JvbGxIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0LCBib2R5ID8gYm9keS5zY3JvbGxIZWlnaHQgOiAwLCBib2R5ID8gYm9keS5jbGllbnRIZWlnaHQgOiAwKTtcbiAgdmFyIHggPSAtd2luU2Nyb2xsLnNjcm9sbExlZnQgKyBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpO1xuICB2YXIgeSA9IC13aW5TY3JvbGwuc2Nyb2xsVG9wO1xuXG4gIGlmIChnZXRDb21wdXRlZFN0eWxlKGJvZHkgfHwgaHRtbCkuZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgIHggKz0gbWF4KGh0bWwuY2xpZW50V2lkdGgsIGJvZHkgPyBib2R5LmNsaWVudFdpZHRoIDogMCkgLSB3aWR0aDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xufSIsImltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzU2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gRmlyZWZveCB3YW50cyB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuICB2YXIgX2dldENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvdyxcbiAgICAgIG92ZXJmbG93WCA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93WCxcbiAgICAgIG92ZXJmbG93WSA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93WTtcblxuICByZXR1cm4gL2F1dG98c2Nyb2xsfG92ZXJsYXl8aGlkZGVuLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKTtcbn0iLCJpbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgaXNTY3JvbGxQYXJlbnQgZnJvbSBcIi4vaXNTY3JvbGxQYXJlbnQuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChub2RlKSB7XG4gIGlmIChbJ2h0bWwnLCAnYm9keScsICcjZG9jdW1lbnQnXS5pbmRleE9mKGdldE5vZGVOYW1lKG5vZGUpKSA+PSAwKSB7XG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogYXNzdW1lIGJvZHkgaXMgYWx3YXlzIGF2YWlsYWJsZVxuICAgIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIGlmIChpc0hUTUxFbGVtZW50KG5vZGUpICYmIGlzU2Nyb2xsUGFyZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUobm9kZSkpO1xufSIsImltcG9ydCBnZXRTY3JvbGxQYXJlbnQgZnJvbSBcIi4vZ2V0U2Nyb2xsUGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7XG4vKlxuZ2l2ZW4gYSBET00gZWxlbWVudCwgcmV0dXJuIHRoZSBsaXN0IG9mIGFsbCBzY3JvbGwgcGFyZW50cywgdXAgdGhlIGxpc3Qgb2YgYW5jZXNvcnNcbnVudGlsIHdlIGdldCB0byB0aGUgdG9wIHdpbmRvdyBvYmplY3QuIFRoaXMgbGlzdCBpcyB3aGF0IHdlIGF0dGFjaCBzY3JvbGwgbGlzdGVuZXJzXG50bywgYmVjYXVzZSBpZiBhbnkgb2YgdGhlc2UgcGFyZW50IGVsZW1lbnRzIHNjcm9sbCwgd2UnbGwgbmVlZCB0byByZS1jYWxjdWxhdGUgdGhlXG5yZWZlcmVuY2UgZWxlbWVudCdzIHBvc2l0aW9uLlxuKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGlzdFNjcm9sbFBhcmVudHMoZWxlbWVudCwgbGlzdCkge1xuICB2YXIgX2VsZW1lbnQkb3duZXJEb2N1bWVuO1xuXG4gIGlmIChsaXN0ID09PSB2b2lkIDApIHtcbiAgICBsaXN0ID0gW107XG4gIH1cblxuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpO1xuICB2YXIgaXNCb2R5ID0gc2Nyb2xsUGFyZW50ID09PSAoKF9lbGVtZW50JG93bmVyRG9jdW1lbiA9IGVsZW1lbnQub3duZXJEb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lbGVtZW50JG93bmVyRG9jdW1lbi5ib2R5KTtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhzY3JvbGxQYXJlbnQpO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gW3dpbl0uY29uY2F0KHdpbi52aXN1YWxWaWV3cG9ydCB8fCBbXSwgaXNTY3JvbGxQYXJlbnQoc2Nyb2xsUGFyZW50KSA/IHNjcm9sbFBhcmVudCA6IFtdKSA6IHNjcm9sbFBhcmVudDtcbiAgdmFyIHVwZGF0ZWRMaXN0ID0gbGlzdC5jb25jYXQodGFyZ2V0KTtcbiAgcmV0dXJuIGlzQm9keSA/IHVwZGF0ZWRMaXN0IDogLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IGlzQm9keSB0ZWxscyB1cyB0YXJnZXQgd2lsbCBiZSBhbiBIVE1MRWxlbWVudCBoZXJlXG4gIHVwZGF0ZWRMaXN0LmNvbmNhdChsaXN0U2Nyb2xsUGFyZW50cyhnZXRQYXJlbnROb2RlKHRhcmdldCkpKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWN0VG9DbGllbnRSZWN0KHJlY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHJlY3QsIHtcbiAgICBsZWZ0OiByZWN0LngsXG4gICAgdG9wOiByZWN0LnksXG4gICAgcmlnaHQ6IHJlY3QueCArIHJlY3Qud2lkdGgsXG4gICAgYm90dG9tOiByZWN0LnkgKyByZWN0LmhlaWdodFxuICB9KTtcbn0iLCJpbXBvcnQgeyB2aWV3cG9ydCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldFZpZXdwb3J0UmVjdCBmcm9tIFwiLi9nZXRWaWV3cG9ydFJlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudFJlY3QgZnJvbSBcIi4vZ2V0RG9jdW1lbnRSZWN0LmpzXCI7XG5pbXBvcnQgbGlzdFNjcm9sbFBhcmVudHMgZnJvbSBcIi4vbGlzdFNjcm9sbFBhcmVudHMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4vZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IHsgaXNFbGVtZW50LCBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBjb250YWlucyBmcm9tIFwiLi9jb250YWlucy5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgcmVjdFRvQ2xpZW50UmVjdCBmcm9tIFwiLi4vdXRpbHMvcmVjdFRvQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IHsgbWF4LCBtaW4gfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpO1xuICByZWN0LnRvcCA9IHJlY3QudG9wICsgZWxlbWVudC5jbGllbnRUb3A7XG4gIHJlY3QubGVmdCA9IHJlY3QubGVmdCArIGVsZW1lbnQuY2xpZW50TGVmdDtcbiAgcmVjdC5ib3R0b20gPSByZWN0LnRvcCArIGVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICByZWN0LnJpZ2h0ID0gcmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcmVjdC53aWR0aCA9IGVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIHJlY3QuaGVpZ2h0ID0gZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHJlY3QueCA9IHJlY3QubGVmdDtcbiAgcmVjdC55ID0gcmVjdC50b3A7XG4gIHJldHVybiByZWN0O1xufVxuXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCkge1xuICByZXR1cm4gY2xpcHBpbmdQYXJlbnQgPT09IHZpZXdwb3J0ID8gcmVjdFRvQ2xpZW50UmVjdChnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCkpIDogaXNIVE1MRWxlbWVudChjbGlwcGluZ1BhcmVudCkgPyBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChjbGlwcGluZ1BhcmVudCkgOiByZWN0VG9DbGllbnRSZWN0KGdldERvY3VtZW50UmVjdChnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkpKTtcbn0gLy8gQSBcImNsaXBwaW5nIHBhcmVudFwiIGlzIGFuIG92ZXJmbG93YWJsZSBjb250YWluZXIgd2l0aCB0aGUgY2hhcmFjdGVyaXN0aWMgb2Zcbi8vIGNsaXBwaW5nIChvciBoaWRpbmcpIG92ZXJmbG93aW5nIGVsZW1lbnRzIHdpdGggYSBwb3NpdGlvbiBkaWZmZXJlbnQgZnJvbVxuLy8gYGluaXRpYWxgXG5cblxuZnVuY3Rpb24gZ2V0Q2xpcHBpbmdQYXJlbnRzKGVsZW1lbnQpIHtcbiAgdmFyIGNsaXBwaW5nUGFyZW50cyA9IGxpc3RTY3JvbGxQYXJlbnRzKGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xuICB2YXIgY2FuRXNjYXBlQ2xpcHBpbmcgPSBbJ2Fic29sdXRlJywgJ2ZpeGVkJ10uaW5kZXhPZihnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uKSA+PSAwO1xuICB2YXIgY2xpcHBlckVsZW1lbnQgPSBjYW5Fc2NhcGVDbGlwcGluZyAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpID8gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIDogZWxlbWVudDtcblxuICBpZiAoIWlzRWxlbWVudChjbGlwcGVyRWxlbWVudCkpIHtcbiAgICByZXR1cm4gW107XG4gIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzE0MTRcblxuXG4gIHJldHVybiBjbGlwcGluZ1BhcmVudHMuZmlsdGVyKGZ1bmN0aW9uIChjbGlwcGluZ1BhcmVudCkge1xuICAgIHJldHVybiBpc0VsZW1lbnQoY2xpcHBpbmdQYXJlbnQpICYmIGNvbnRhaW5zKGNsaXBwaW5nUGFyZW50LCBjbGlwcGVyRWxlbWVudCkgJiYgZ2V0Tm9kZU5hbWUoY2xpcHBpbmdQYXJlbnQpICE9PSAnYm9keSc7XG4gIH0pO1xufSAvLyBHZXRzIHRoZSBtYXhpbXVtIGFyZWEgdGhhdCB0aGUgZWxlbWVudCBpcyB2aXNpYmxlIGluIGR1ZSB0byBhbnkgbnVtYmVyIG9mXG4vLyBjbGlwcGluZyBwYXJlbnRzXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q2xpcHBpbmdSZWN0KGVsZW1lbnQsIGJvdW5kYXJ5LCByb290Qm91bmRhcnkpIHtcbiAgdmFyIG1haW5DbGlwcGluZ1BhcmVudHMgPSBib3VuZGFyeSA9PT0gJ2NsaXBwaW5nUGFyZW50cycgPyBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudCkgOiBbXS5jb25jYXQoYm91bmRhcnkpO1xuICB2YXIgY2xpcHBpbmdQYXJlbnRzID0gW10uY29uY2F0KG1haW5DbGlwcGluZ1BhcmVudHMsIFtyb290Qm91bmRhcnldKTtcbiAgdmFyIGZpcnN0Q2xpcHBpbmdQYXJlbnQgPSBjbGlwcGluZ1BhcmVudHNbMF07XG4gIHZhciBjbGlwcGluZ1JlY3QgPSBjbGlwcGluZ1BhcmVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2NSZWN0LCBjbGlwcGluZ1BhcmVudCkge1xuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgY2xpcHBpbmdQYXJlbnQpO1xuICAgIGFjY1JlY3QudG9wID0gbWF4KHJlY3QudG9wLCBhY2NSZWN0LnRvcCk7XG4gICAgYWNjUmVjdC5yaWdodCA9IG1pbihyZWN0LnJpZ2h0LCBhY2NSZWN0LnJpZ2h0KTtcbiAgICBhY2NSZWN0LmJvdHRvbSA9IG1pbihyZWN0LmJvdHRvbSwgYWNjUmVjdC5ib3R0b20pO1xuICAgIGFjY1JlY3QubGVmdCA9IG1heChyZWN0LmxlZnQsIGFjY1JlY3QubGVmdCk7XG4gICAgcmV0dXJuIGFjY1JlY3Q7XG4gIH0sIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGZpcnN0Q2xpcHBpbmdQYXJlbnQpKTtcbiAgY2xpcHBpbmdSZWN0LndpZHRoID0gY2xpcHBpbmdSZWN0LnJpZ2h0IC0gY2xpcHBpbmdSZWN0LmxlZnQ7XG4gIGNsaXBwaW5nUmVjdC5oZWlnaHQgPSBjbGlwcGluZ1JlY3QuYm90dG9tIC0gY2xpcHBpbmdSZWN0LnRvcDtcbiAgY2xpcHBpbmdSZWN0LnggPSBjbGlwcGluZ1JlY3QubGVmdDtcbiAgY2xpcHBpbmdSZWN0LnkgPSBjbGlwcGluZ1JlY3QudG9wO1xuICByZXR1cm4gY2xpcHBpbmdSZWN0O1xufSIsImltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4vZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IGZyb20gXCIuL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0LCBzdGFydCwgZW5kIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wdXRlT2Zmc2V0cyhfcmVmKSB7XG4gIHZhciByZWZlcmVuY2UgPSBfcmVmLnJlZmVyZW5jZSxcbiAgICAgIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQgPyBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgdmFyaWF0aW9uID0gcGxhY2VtZW50ID8gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgY29tbW9uWCA9IHJlZmVyZW5jZS54ICsgcmVmZXJlbmNlLndpZHRoIC8gMiAtIGVsZW1lbnQud2lkdGggLyAyO1xuICB2YXIgY29tbW9uWSA9IHJlZmVyZW5jZS55ICsgcmVmZXJlbmNlLmhlaWdodCAvIDIgLSBlbGVtZW50LmhlaWdodCAvIDI7XG4gIHZhciBvZmZzZXRzO1xuXG4gIHN3aXRjaCAoYmFzZVBsYWNlbWVudCkge1xuICAgIGNhc2UgdG9wOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgLSBlbGVtZW50LmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBib3R0b206XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiBjb21tb25YLFxuICAgICAgICB5OiByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcmlnaHQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBsZWZ0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggLSBlbGVtZW50LndpZHRoLFxuICAgICAgICB5OiBjb21tb25ZXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLngsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55XG4gICAgICB9O1xuICB9XG5cbiAgdmFyIG1haW5BeGlzID0gYmFzZVBsYWNlbWVudCA/IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KSA6IG51bGw7XG5cbiAgaWYgKG1haW5BeGlzICE9IG51bGwpIHtcbiAgICB2YXIgbGVuID0gbWFpbkF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICAgIHN3aXRjaCAodmFyaWF0aW9uKSB7XG4gICAgICBjYXNlIHN0YXJ0OlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IG9mZnNldHNbbWFpbkF4aXNdIC0gKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBlbmQ6XG4gICAgICAgIG9mZnNldHNbbWFpbkF4aXNdID0gb2Zmc2V0c1ttYWluQXhpc10gKyAocmVmZXJlbmNlW2xlbl0gLyAyIC0gZWxlbWVudFtsZW5dIC8gMik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvZmZzZXRzO1xufSIsImltcG9ydCBnZXRDbGlwcGluZ1JlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRDbGlwcGluZ1JlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBjb21wdXRlT2Zmc2V0cyBmcm9tIFwiLi9jb21wdXRlT2Zmc2V0cy5qc1wiO1xuaW1wb3J0IHJlY3RUb0NsaWVudFJlY3QgZnJvbSBcIi4vcmVjdFRvQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IHsgY2xpcHBpbmdQYXJlbnRzLCByZWZlcmVuY2UsIHBvcHBlciwgYm90dG9tLCB0b3AsIHJpZ2h0LCBiYXNlUGxhY2VtZW50cywgdmlld3BvcnQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gXCIuLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IG1lcmdlUGFkZGluZ09iamVjdCBmcm9tIFwiLi9tZXJnZVBhZGRpbmdPYmplY3QuanNcIjtcbmltcG9ydCBleHBhbmRUb0hhc2hNYXAgZnJvbSBcIi4vZXhwYW5kVG9IYXNoTWFwLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRwbGFjZW1lbnQgPSBfb3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfb3B0aW9ucyRwbGFjZW1lbnQgPT09IHZvaWQgMCA/IHN0YXRlLnBsYWNlbWVudCA6IF9vcHRpb25zJHBsYWNlbWVudCxcbiAgICAgIF9vcHRpb25zJGJvdW5kYXJ5ID0gX29wdGlvbnMuYm91bmRhcnksXG4gICAgICBib3VuZGFyeSA9IF9vcHRpb25zJGJvdW5kYXJ5ID09PSB2b2lkIDAgPyBjbGlwcGluZ1BhcmVudHMgOiBfb3B0aW9ucyRib3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zJHJvb3RCb3VuZGFyeSA9PT0gdm9pZCAwID8gdmlld3BvcnQgOiBfb3B0aW9ucyRyb290Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRlbGVtZW50Q29udGUgPSBfb3B0aW9ucy5lbGVtZW50Q29udGV4dCxcbiAgICAgIGVsZW1lbnRDb250ZXh0ID0gX29wdGlvbnMkZWxlbWVudENvbnRlID09PSB2b2lkIDAgPyBwb3BwZXIgOiBfb3B0aW9ucyRlbGVtZW50Q29udGUsXG4gICAgICBfb3B0aW9ucyRhbHRCb3VuZGFyeSA9IF9vcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBfb3B0aW9ucyRhbHRCb3VuZGFyeSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRhbHRCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJHBhZGRpbmcgPSBfb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgcGFkZGluZyA9IF9vcHRpb25zJHBhZGRpbmcgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRwYWRkaW5nO1xuICB2YXIgcGFkZGluZ09iamVjdCA9IG1lcmdlUGFkZGluZ09iamVjdCh0eXBlb2YgcGFkZGluZyAhPT0gJ251bWJlcicgPyBwYWRkaW5nIDogZXhwYW5kVG9IYXNoTWFwKHBhZGRpbmcsIGJhc2VQbGFjZW1lbnRzKSk7XG4gIHZhciBhbHRDb250ZXh0ID0gZWxlbWVudENvbnRleHQgPT09IHBvcHBlciA/IHJlZmVyZW5jZSA6IHBvcHBlcjtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbYWx0Qm91bmRhcnkgPyBhbHRDb250ZXh0IDogZWxlbWVudENvbnRleHRdO1xuICB2YXIgY2xpcHBpbmdDbGllbnRSZWN0ID0gZ2V0Q2xpcHBpbmdSZWN0KGlzRWxlbWVudChlbGVtZW50KSA/IGVsZW1lbnQgOiBlbGVtZW50LmNvbnRleHRFbGVtZW50IHx8IGdldERvY3VtZW50RWxlbWVudChzdGF0ZS5lbGVtZW50cy5wb3BwZXIpLCBib3VuZGFyeSwgcm9vdEJvdW5kYXJ5KTtcbiAgdmFyIHJlZmVyZW5jZUNsaWVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qoc3RhdGUuZWxlbWVudHMucmVmZXJlbmNlKTtcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBjb21wdXRlT2Zmc2V0cyh7XG4gICAgcmVmZXJlbmNlOiByZWZlcmVuY2VDbGllbnRSZWN0LFxuICAgIGVsZW1lbnQ6IHBvcHBlclJlY3QsXG4gICAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG4gICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgfSk7XG4gIHZhciBwb3BwZXJDbGllbnRSZWN0ID0gcmVjdFRvQ2xpZW50UmVjdChPYmplY3QuYXNzaWduKHt9LCBwb3BwZXJSZWN0LCBwb3BwZXJPZmZzZXRzKSk7XG4gIHZhciBlbGVtZW50Q2xpZW50UmVjdCA9IGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyBwb3BwZXJDbGllbnRSZWN0IDogcmVmZXJlbmNlQ2xpZW50UmVjdDsgLy8gcG9zaXRpdmUgPSBvdmVyZmxvd2luZyB0aGUgY2xpcHBpbmcgcmVjdFxuICAvLyAwIG9yIG5lZ2F0aXZlID0gd2l0aGluIHRoZSBjbGlwcGluZyByZWN0XG5cbiAgdmFyIG92ZXJmbG93T2Zmc2V0cyA9IHtcbiAgICB0b3A6IGNsaXBwaW5nQ2xpZW50UmVjdC50b3AgLSBlbGVtZW50Q2xpZW50UmVjdC50b3AgKyBwYWRkaW5nT2JqZWN0LnRvcCxcbiAgICBib3R0b206IGVsZW1lbnRDbGllbnRSZWN0LmJvdHRvbSAtIGNsaXBwaW5nQ2xpZW50UmVjdC5ib3R0b20gKyBwYWRkaW5nT2JqZWN0LmJvdHRvbSxcbiAgICBsZWZ0OiBjbGlwcGluZ0NsaWVudFJlY3QubGVmdCAtIGVsZW1lbnRDbGllbnRSZWN0LmxlZnQgKyBwYWRkaW5nT2JqZWN0LmxlZnQsXG4gICAgcmlnaHQ6IGVsZW1lbnRDbGllbnRSZWN0LnJpZ2h0IC0gY2xpcHBpbmdDbGllbnRSZWN0LnJpZ2h0ICsgcGFkZGluZ09iamVjdC5yaWdodFxuICB9O1xuICB2YXIgb2Zmc2V0RGF0YSA9IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0OyAvLyBPZmZzZXRzIGNhbiBiZSBhcHBsaWVkIG9ubHkgdG8gdGhlIHBvcHBlciBlbGVtZW50XG5cbiAgaWYgKGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgJiYgb2Zmc2V0RGF0YSkge1xuICAgIHZhciBvZmZzZXQgPSBvZmZzZXREYXRhW3BsYWNlbWVudF07XG4gICAgT2JqZWN0LmtleXMob3ZlcmZsb3dPZmZzZXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBtdWx0aXBseSA9IFtyaWdodCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/IDEgOiAtMTtcbiAgICAgIHZhciBheGlzID0gW3RvcCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/ICd5JyA6ICd4JztcbiAgICAgIG92ZXJmbG93T2Zmc2V0c1trZXldICs9IG9mZnNldFtheGlzXSAqIG11bHRpcGx5O1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG92ZXJmbG93T2Zmc2V0cztcbn0iLCJpbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IHsgdmFyaWF0aW9uUGxhY2VtZW50cywgYmFzZVBsYWNlbWVudHMsIHBsYWNlbWVudHMgYXMgYWxsUGxhY2VtZW50cyB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wdXRlQXV0b1BsYWNlbWVudChzdGF0ZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBsYWNlbWVudCA9IF9vcHRpb25zLnBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5ID0gX29wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBfb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nID0gX29wdGlvbnMucGFkZGluZyxcbiAgICAgIGZsaXBWYXJpYXRpb25zID0gX29wdGlvbnMuZmxpcFZhcmlhdGlvbnMsXG4gICAgICBfb3B0aW9ucyRhbGxvd2VkQXV0b1AgPSBfb3B0aW9ucy5hbGxvd2VkQXV0b1BsYWNlbWVudHMsXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHMgPSBfb3B0aW9ucyRhbGxvd2VkQXV0b1AgPT09IHZvaWQgMCA/IGFsbFBsYWNlbWVudHMgOiBfb3B0aW9ucyRhbGxvd2VkQXV0b1A7XG4gIHZhciB2YXJpYXRpb24gPSBnZXRWYXJpYXRpb24ocGxhY2VtZW50KTtcbiAgdmFyIHBsYWNlbWVudHMgPSB2YXJpYXRpb24gPyBmbGlwVmFyaWF0aW9ucyA/IHZhcmlhdGlvblBsYWNlbWVudHMgOiB2YXJpYXRpb25QbGFjZW1lbnRzLmZpbHRlcihmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGdldFZhcmlhdGlvbihwbGFjZW1lbnQpID09PSB2YXJpYXRpb247XG4gIH0pIDogYmFzZVBsYWNlbWVudHM7XG4gIHZhciBhbGxvd2VkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gYWxsb3dlZEF1dG9QbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KSA+PSAwO1xuICB9KTtcblxuICBpZiAoYWxsb3dlZFBsYWNlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgYWxsb3dlZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogVGhlIGBhbGxvd2VkQXV0b1BsYWNlbWVudHNgIG9wdGlvbiBkaWQgbm90IGFsbG93IGFueScsICdwbGFjZW1lbnRzLiBFbnN1cmUgdGhlIGBwbGFjZW1lbnRgIG9wdGlvbiBtYXRjaGVzIHRoZSB2YXJpYXRpb24nLCAnb2YgdGhlIGFsbG93ZWQgcGxhY2VtZW50cy4nLCAnRm9yIGV4YW1wbGUsIFwiYXV0b1wiIGNhbm5vdCBiZSB1c2VkIHRvIGFsbG93IFwiYm90dG9tLXN0YXJ0XCIuJywgJ1VzZSBcImF1dG8tc3RhcnRcIiBpbnN0ZWFkLiddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdOiBGbG93IHNlZW1zIHRvIGhhdmUgcHJvYmxlbXMgd2l0aCB0d28gYXJyYXkgdW5pb25zLi4uXG5cblxuICB2YXIgb3ZlcmZsb3dzID0gYWxsb3dlZFBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIGFjY1twbGFjZW1lbnRdID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nXG4gICAgfSlbZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpXTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvdmVyZmxvd3MpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gb3ZlcmZsb3dzW2FdIC0gb3ZlcmZsb3dzW2JdO1xuICB9KTtcbn0iLCJpbXBvcnQgZ2V0T3Bwb3NpdGVQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGNvbXB1dGVBdXRvUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgYm90dG9tLCB0b3AsIHN0YXJ0LCByaWdodCwgbGVmdCwgYXV0byB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi4vdXRpbHMvZ2V0VmFyaWF0aW9uLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZnVuY3Rpb24gZ2V0RXhwYW5kZWRGYWxsYmFja1BsYWNlbWVudHMocGxhY2VtZW50KSB7XG4gIGlmIChnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgPT09IGF1dG8pIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICB2YXIgb3Bwb3NpdGVQbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICByZXR1cm4gW2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KHBsYWNlbWVudCksIG9wcG9zaXRlUGxhY2VtZW50LCBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChvcHBvc2l0ZVBsYWNlbWVudCldO1xufVxuXG5mdW5jdGlvbiBmbGlwKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdLl9za2lwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIF9vcHRpb25zJG1haW5BeGlzID0gb3B0aW9ucy5tYWluQXhpcyxcbiAgICAgIGNoZWNrTWFpbkF4aXMgPSBfb3B0aW9ucyRtYWluQXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJG1haW5BeGlzLFxuICAgICAgX29wdGlvbnMkYWx0QXhpcyA9IG9wdGlvbnMuYWx0QXhpcyxcbiAgICAgIGNoZWNrQWx0QXhpcyA9IF9vcHRpb25zJGFsdEF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRhbHRBeGlzLFxuICAgICAgc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzID0gb3B0aW9ucy5mYWxsYmFja1BsYWNlbWVudHMsXG4gICAgICBwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgYm91bmRhcnkgPSBvcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IG9wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRmbGlwVmFyaWF0aW8gPSBvcHRpb25zLmZsaXBWYXJpYXRpb25zLFxuICAgICAgZmxpcFZhcmlhdGlvbnMgPSBfb3B0aW9ucyRmbGlwVmFyaWF0aW8gPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRmbGlwVmFyaWF0aW8sXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHMgPSBvcHRpb25zLmFsbG93ZWRBdXRvUGxhY2VtZW50cztcbiAgdmFyIHByZWZlcnJlZFBsYWNlbWVudCA9IHN0YXRlLm9wdGlvbnMucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocHJlZmVycmVkUGxhY2VtZW50KTtcbiAgdmFyIGlzQmFzZVBsYWNlbWVudCA9IGJhc2VQbGFjZW1lbnQgPT09IHByZWZlcnJlZFBsYWNlbWVudDtcbiAgdmFyIGZhbGxiYWNrUGxhY2VtZW50cyA9IHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyB8fCAoaXNCYXNlUGxhY2VtZW50IHx8ICFmbGlwVmFyaWF0aW9ucyA/IFtnZXRPcHBvc2l0ZVBsYWNlbWVudChwcmVmZXJyZWRQbGFjZW1lbnQpXSA6IGdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzKHByZWZlcnJlZFBsYWNlbWVudCkpO1xuICB2YXIgcGxhY2VtZW50cyA9IFtwcmVmZXJyZWRQbGFjZW1lbnRdLmNvbmNhdChmYWxsYmFja1BsYWNlbWVudHMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgPT09IGF1dG8gPyBjb21wdXRlQXV0b1BsYWNlbWVudChzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgICBmbGlwVmFyaWF0aW9uczogZmxpcFZhcmlhdGlvbnMsXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHM6IGFsbG93ZWRBdXRvUGxhY2VtZW50c1xuICAgIH0pIDogcGxhY2VtZW50KTtcbiAgfSwgW10pO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBjaGVja3NNYXAgPSBuZXcgTWFwKCk7XG4gIHZhciBtYWtlRmFsbGJhY2tDaGVja3MgPSB0cnVlO1xuICB2YXIgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50c1swXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBsYWNlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGxhY2VtZW50ID0gcGxhY2VtZW50c1tpXTtcblxuICAgIHZhciBfYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcblxuICAgIHZhciBpc1N0YXJ0VmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgPT09IHN0YXJ0O1xuICAgIHZhciBpc1ZlcnRpY2FsID0gW3RvcCwgYm90dG9tXS5pbmRleE9mKF9iYXNlUGxhY2VtZW50KSA+PSAwO1xuICAgIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuICAgIHZhciBvdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnk6IGFsdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZ1xuICAgIH0pO1xuICAgIHZhciBtYWluVmFyaWF0aW9uU2lkZSA9IGlzVmVydGljYWwgPyBpc1N0YXJ0VmFyaWF0aW9uID8gcmlnaHQgOiBsZWZ0IDogaXNTdGFydFZhcmlhdGlvbiA/IGJvdHRvbSA6IHRvcDtcblxuICAgIGlmIChyZWZlcmVuY2VSZWN0W2xlbl0gPiBwb3BwZXJSZWN0W2xlbl0pIHtcbiAgICAgIG1haW5WYXJpYXRpb25TaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpblZhcmlhdGlvblNpZGUpO1xuICAgIH1cblxuICAgIHZhciBhbHRWYXJpYXRpb25TaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpblZhcmlhdGlvblNpZGUpO1xuICAgIHZhciBjaGVja3MgPSBbXTtcblxuICAgIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgICBjaGVja3MucHVzaChvdmVyZmxvd1tfYmFzZVBsYWNlbWVudF0gPD0gMCk7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrQWx0QXhpcykge1xuICAgICAgY2hlY2tzLnB1c2gob3ZlcmZsb3dbbWFpblZhcmlhdGlvblNpZGVdIDw9IDAsIG92ZXJmbG93W2FsdFZhcmlhdGlvblNpZGVdIDw9IDApO1xuICAgIH1cblxuICAgIGlmIChjaGVja3MuZXZlcnkoZnVuY3Rpb24gKGNoZWNrKSB7XG4gICAgICByZXR1cm4gY2hlY2s7XG4gICAgfSkpIHtcbiAgICAgIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudDtcbiAgICAgIG1ha2VGYWxsYmFja0NoZWNrcyA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY2hlY2tzTWFwLnNldChwbGFjZW1lbnQsIGNoZWNrcyk7XG4gIH1cblxuICBpZiAobWFrZUZhbGxiYWNrQ2hlY2tzKSB7XG4gICAgLy8gYDJgIG1heSBiZSBkZXNpcmVkIGluIHNvbWUgY2FzZXMg4oCTIHJlc2VhcmNoIGxhdGVyXG4gICAgdmFyIG51bWJlck9mQ2hlY2tzID0gZmxpcFZhcmlhdGlvbnMgPyAzIDogMTtcblxuICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKF9pKSB7XG4gICAgICB2YXIgZml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHMuZmluZChmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgICAgIHZhciBjaGVja3MgPSBjaGVja3NNYXAuZ2V0KHBsYWNlbWVudCk7XG5cbiAgICAgICAgaWYgKGNoZWNrcykge1xuICAgICAgICAgIHJldHVybiBjaGVja3Muc2xpY2UoMCwgX2kpLmV2ZXJ5KGZ1bmN0aW9uIChjaGVjaykge1xuICAgICAgICAgICAgcmV0dXJuIGNoZWNrO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGZpdHRpbmdQbGFjZW1lbnQpIHtcbiAgICAgICAgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gZml0dGluZ1BsYWNlbWVudDtcbiAgICAgICAgcmV0dXJuIFwiYnJlYWtcIjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yICh2YXIgX2kgPSBudW1iZXJPZkNoZWNrczsgX2kgPiAwOyBfaS0tKSB7XG4gICAgICB2YXIgX3JldCA9IF9sb29wKF9pKTtcblxuICAgICAgaWYgKF9yZXQgPT09IFwiYnJlYWtcIikgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXRlLnBsYWNlbWVudCAhPT0gZmlyc3RGaXR0aW5nUGxhY2VtZW50KSB7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXS5fc2tpcCA9IHRydWU7XG4gICAgc3RhdGUucGxhY2VtZW50ID0gZmlyc3RGaXR0aW5nUGxhY2VtZW50O1xuICAgIHN0YXRlLnJlc2V0ID0gdHJ1ZTtcbiAgfVxufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnZmxpcCcsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBmbGlwLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ29mZnNldCddLFxuICBkYXRhOiB7XG4gICAgX3NraXA6IGZhbHNlXG4gIH1cbn07IiwiaW1wb3J0IHsgdG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4uL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5cbmZ1bmN0aW9uIGdldFNpZGVPZmZzZXRzKG92ZXJmbG93LCByZWN0LCBwcmV2ZW50ZWRPZmZzZXRzKSB7XG4gIGlmIChwcmV2ZW50ZWRPZmZzZXRzID09PSB2b2lkIDApIHtcbiAgICBwcmV2ZW50ZWRPZmZzZXRzID0ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDBcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0b3A6IG92ZXJmbG93LnRvcCAtIHJlY3QuaGVpZ2h0IC0gcHJldmVudGVkT2Zmc2V0cy55LFxuICAgIHJpZ2h0OiBvdmVyZmxvdy5yaWdodCAtIHJlY3Qud2lkdGggKyBwcmV2ZW50ZWRPZmZzZXRzLngsXG4gICAgYm90dG9tOiBvdmVyZmxvdy5ib3R0b20gLSByZWN0LmhlaWdodCArIHByZXZlbnRlZE9mZnNldHMueSxcbiAgICBsZWZ0OiBvdmVyZmxvdy5sZWZ0IC0gcmVjdC53aWR0aCAtIHByZXZlbnRlZE9mZnNldHMueFxuICB9O1xufVxuXG5mdW5jdGlvbiBpc0FueVNpZGVGdWxseUNsaXBwZWQob3ZlcmZsb3cpIHtcbiAgcmV0dXJuIFt0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnRdLnNvbWUoZnVuY3Rpb24gKHNpZGUpIHtcbiAgICByZXR1cm4gb3ZlcmZsb3dbc2lkZV0gPj0gMDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhpZGUoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgcHJldmVudGVkT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucHJldmVudE92ZXJmbG93O1xuICB2YXIgcmVmZXJlbmNlT3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGVsZW1lbnRDb250ZXh0OiAncmVmZXJlbmNlJ1xuICB9KTtcbiAgdmFyIHBvcHBlckFsdE92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBhbHRCb3VuZGFyeTogdHJ1ZVxuICB9KTtcbiAgdmFyIHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKHJlZmVyZW5jZU92ZXJmbG93LCByZWZlcmVuY2VSZWN0KTtcbiAgdmFyIHBvcHBlckVzY2FwZU9mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhwb3BwZXJBbHRPdmVyZmxvdywgcG9wcGVyUmVjdCwgcHJldmVudGVkT2Zmc2V0cyk7XG4gIHZhciBpc1JlZmVyZW5jZUhpZGRlbiA9IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChyZWZlcmVuY2VDbGlwcGluZ09mZnNldHMpO1xuICB2YXIgaGFzUG9wcGVyRXNjYXBlZCA9IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChwb3BwZXJFc2NhcGVPZmZzZXRzKTtcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IHtcbiAgICByZWZlcmVuY2VDbGlwcGluZ09mZnNldHM6IHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyxcbiAgICBwb3BwZXJFc2NhcGVPZmZzZXRzOiBwb3BwZXJFc2NhcGVPZmZzZXRzLFxuICAgIGlzUmVmZXJlbmNlSGlkZGVuOiBpc1JlZmVyZW5jZUhpZGRlbixcbiAgICBoYXNQb3BwZXJFc2NhcGVkOiBoYXNQb3BwZXJFc2NhcGVkXG4gIH07XG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIsIHtcbiAgICAnZGF0YS1wb3BwZXItcmVmZXJlbmNlLWhpZGRlbic6IGlzUmVmZXJlbmNlSGlkZGVuLFxuICAgICdkYXRhLXBvcHBlci1lc2NhcGVkJzogaGFzUG9wcGVyRXNjYXBlZFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2hpZGUnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ3ByZXZlbnRPdmVyZmxvdyddLFxuICBmbjogaGlkZVxufTsiLCJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgcGxhY2VtZW50cyB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKHBsYWNlbWVudCwgcmVjdHMsIG9mZnNldCkge1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIGludmVydERpc3RhbmNlID0gW2xlZnQsIHRvcF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwID8gLTEgOiAxO1xuXG4gIHZhciBfcmVmID0gdHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJyA/IG9mZnNldChPYmplY3QuYXNzaWduKHt9LCByZWN0cywge1xuICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gIH0pKSA6IG9mZnNldCxcbiAgICAgIHNraWRkaW5nID0gX3JlZlswXSxcbiAgICAgIGRpc3RhbmNlID0gX3JlZlsxXTtcblxuICBza2lkZGluZyA9IHNraWRkaW5nIHx8IDA7XG4gIGRpc3RhbmNlID0gKGRpc3RhbmNlIHx8IDApICogaW52ZXJ0RGlzdGFuY2U7XG4gIHJldHVybiBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMCA/IHtcbiAgICB4OiBkaXN0YW5jZSxcbiAgICB5OiBza2lkZGluZ1xuICB9IDoge1xuICAgIHg6IHNraWRkaW5nLFxuICAgIHk6IGRpc3RhbmNlXG4gIH07XG59XG5cbmZ1bmN0aW9uIG9mZnNldChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmMi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYyLm5hbWU7XG4gIHZhciBfb3B0aW9ucyRvZmZzZXQgPSBvcHRpb25zLm9mZnNldCxcbiAgICAgIG9mZnNldCA9IF9vcHRpb25zJG9mZnNldCA9PT0gdm9pZCAwID8gWzAsIDBdIDogX29wdGlvbnMkb2Zmc2V0O1xuICB2YXIgZGF0YSA9IHBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIGFjY1twbGFjZW1lbnRdID0gZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkocGxhY2VtZW50LCBzdGF0ZS5yZWN0cywgb2Zmc2V0KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHZhciBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQgPSBkYXRhW3N0YXRlLnBsYWNlbWVudF0sXG4gICAgICB4ID0gX2RhdGEkc3RhdGUkcGxhY2VtZW50LngsXG4gICAgICB5ID0gX2RhdGEkc3RhdGUkcGxhY2VtZW50Lnk7XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyAhPSBudWxsKSB7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnggKz0geDtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueSArPSB5O1xuICB9XG5cbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGRhdGE7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdvZmZzZXQnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICByZXF1aXJlczogWydwb3BwZXJPZmZzZXRzJ10sXG4gIGZuOiBvZmZzZXRcbn07IiwiaW1wb3J0IGNvbXB1dGVPZmZzZXRzIGZyb20gXCIuLi91dGlscy9jb21wdXRlT2Zmc2V0cy5qc1wiO1xuXG5mdW5jdGlvbiBwb3BwZXJPZmZzZXRzKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIC8vIE9mZnNldHMgYXJlIHRoZSBhY3R1YWwgcG9zaXRpb24gdGhlIHBvcHBlciBuZWVkcyB0byBoYXZlIHRvIGJlXG4gIC8vIHByb3Blcmx5IHBvc2l0aW9uZWQgbmVhciBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBiYXNpYyBwbGFjZW1lbnQsIGFuZCB3aWxsIGJlIGFkanVzdGVkIGJ5XG4gIC8vIHRoZSBtb2RpZmllcnMgaW4gdGhlIG5leHQgc3RlcFxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gY29tcHV0ZU9mZnNldHMoe1xuICAgIHJlZmVyZW5jZTogc3RhdGUucmVjdHMucmVmZXJlbmNlLFxuICAgIGVsZW1lbnQ6IHN0YXRlLnJlY3RzLnBvcHBlcixcbiAgICBzdHJhdGVneTogJ2Fic29sdXRlJyxcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3BvcHBlck9mZnNldHMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3JlYWQnLFxuICBmbjogcG9wcGVyT2Zmc2V0cyxcbiAgZGF0YToge31cbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QWx0QXhpcyhheGlzKSB7XG4gIHJldHVybiBheGlzID09PSAneCcgPyAneScgOiAneCc7XG59IiwiaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tLCBzdGFydCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldEFsdEF4aXMgZnJvbSBcIi4uL3V0aWxzL2dldEFsdEF4aXMuanNcIjtcbmltcG9ydCB3aXRoaW4gZnJvbSBcIi4uL3V0aWxzL3dpdGhpbi5qc1wiO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4uL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuLi91dGlscy9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCBnZXRGcmVzaFNpZGVPYmplY3QgZnJvbSBcIi4uL3V0aWxzL2dldEZyZXNoU2lkZU9iamVjdC5qc1wiO1xuaW1wb3J0IHsgbWF4IGFzIG1hdGhNYXgsIG1pbiBhcyBtYXRoTWluIH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjtcblxuZnVuY3Rpb24gcHJldmVudE92ZXJmbG93KF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICB2YXIgX29wdGlvbnMkbWFpbkF4aXMgPSBvcHRpb25zLm1haW5BeGlzLFxuICAgICAgY2hlY2tNYWluQXhpcyA9IF9vcHRpb25zJG1haW5BeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkbWFpbkF4aXMsXG4gICAgICBfb3B0aW9ucyRhbHRBeGlzID0gb3B0aW9ucy5hbHRBeGlzLFxuICAgICAgY2hlY2tBbHRBeGlzID0gX29wdGlvbnMkYWx0QXhpcyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRhbHRBeGlzLFxuICAgICAgYm91bmRhcnkgPSBvcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IG9wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgX29wdGlvbnMkdGV0aGVyID0gb3B0aW9ucy50ZXRoZXIsXG4gICAgICB0ZXRoZXIgPSBfb3B0aW9ucyR0ZXRoZXIgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyR0ZXRoZXIsXG4gICAgICBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQgPSBvcHRpb25zLnRldGhlck9mZnNldCxcbiAgICAgIHRldGhlck9mZnNldCA9IF9vcHRpb25zJHRldGhlck9mZnNldCA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJHRldGhlck9mZnNldDtcbiAgdmFyIG92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgcGFkZGluZzogcGFkZGluZyxcbiAgICBhbHRCb3VuZGFyeTogYWx0Qm91bmRhcnlcbiAgfSk7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgdmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciBpc0Jhc2VQbGFjZW1lbnQgPSAhdmFyaWF0aW9uO1xuICB2YXIgbWFpbkF4aXMgPSBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCk7XG4gIHZhciBhbHRBeGlzID0gZ2V0QWx0QXhpcyhtYWluQXhpcyk7XG4gIHZhciBwb3BwZXJPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciB0ZXRoZXJPZmZzZXRWYWx1ZSA9IHR5cGVvZiB0ZXRoZXJPZmZzZXQgPT09ICdmdW5jdGlvbicgPyB0ZXRoZXJPZmZzZXQoT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUucmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KSkgOiB0ZXRoZXJPZmZzZXQ7XG4gIHZhciBkYXRhID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIGlmICghcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChjaGVja01haW5BeGlzIHx8IGNoZWNrQWx0QXhpcykge1xuICAgIHZhciBtYWluU2lkZSA9IG1haW5BeGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICAgIHZhciBhbHRTaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICAgIHZhciBsZW4gPSBtYWluQXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBvZmZzZXQgPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXTtcbiAgICB2YXIgbWluID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gKyBvdmVyZmxvd1ttYWluU2lkZV07XG4gICAgdmFyIG1heCA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdIC0gb3ZlcmZsb3dbYWx0U2lkZV07XG4gICAgdmFyIGFkZGl0aXZlID0gdGV0aGVyID8gLXBvcHBlclJlY3RbbGVuXSAvIDIgOiAwO1xuICAgIHZhciBtaW5MZW4gPSB2YXJpYXRpb24gPT09IHN0YXJ0ID8gcmVmZXJlbmNlUmVjdFtsZW5dIDogcG9wcGVyUmVjdFtsZW5dO1xuICAgIHZhciBtYXhMZW4gPSB2YXJpYXRpb24gPT09IHN0YXJ0ID8gLXBvcHBlclJlY3RbbGVuXSA6IC1yZWZlcmVuY2VSZWN0W2xlbl07IC8vIFdlIG5lZWQgdG8gaW5jbHVkZSB0aGUgYXJyb3cgaW4gdGhlIGNhbGN1bGF0aW9uIHNvIHRoZSBhcnJvdyBkb2Vzbid0IGdvXG4gICAgLy8gb3V0c2lkZSB0aGUgcmVmZXJlbmNlIGJvdW5kc1xuXG4gICAgdmFyIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICAgIHZhciBhcnJvd1JlY3QgPSB0ZXRoZXIgJiYgYXJyb3dFbGVtZW50ID8gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpIDoge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDBcbiAgICB9O1xuICAgIHZhciBhcnJvd1BhZGRpbmdPYmplY3QgPSBzdGF0ZS5tb2RpZmllcnNEYXRhWydhcnJvdyNwZXJzaXN0ZW50J10gPyBzdGF0ZS5tb2RpZmllcnNEYXRhWydhcnJvdyNwZXJzaXN0ZW50J10ucGFkZGluZyA6IGdldEZyZXNoU2lkZU9iamVjdCgpO1xuICAgIHZhciBhcnJvd1BhZGRpbmdNaW4gPSBhcnJvd1BhZGRpbmdPYmplY3RbbWFpblNpZGVdO1xuICAgIHZhciBhcnJvd1BhZGRpbmdNYXggPSBhcnJvd1BhZGRpbmdPYmplY3RbYWx0U2lkZV07IC8vIElmIHRoZSByZWZlcmVuY2UgbGVuZ3RoIGlzIHNtYWxsZXIgdGhhbiB0aGUgYXJyb3cgbGVuZ3RoLCB3ZSBkb24ndCB3YW50XG4gICAgLy8gdG8gaW5jbHVkZSBpdHMgZnVsbCBzaXplIGluIHRoZSBjYWxjdWxhdGlvbi4gSWYgdGhlIHJlZmVyZW5jZSBpcyBzbWFsbFxuICAgIC8vIGFuZCBuZWFyIHRoZSBlZGdlIG9mIGEgYm91bmRhcnksIHRoZSBwb3BwZXIgY2FuIG92ZXJmbG93IGV2ZW4gaWYgdGhlXG4gICAgLy8gcmVmZXJlbmNlIGlzIG5vdCBvdmVyZmxvd2luZyBhcyB3ZWxsIChlLmcuIHZpcnR1YWwgZWxlbWVudHMgd2l0aCBub1xuICAgIC8vIHdpZHRoIG9yIGhlaWdodClcblxuICAgIHZhciBhcnJvd0xlbiA9IHdpdGhpbigwLCByZWZlcmVuY2VSZWN0W2xlbl0sIGFycm93UmVjdFtsZW5dKTtcbiAgICB2YXIgbWluT2Zmc2V0ID0gaXNCYXNlUGxhY2VtZW50ID8gcmVmZXJlbmNlUmVjdFtsZW5dIC8gMiAtIGFkZGl0aXZlIC0gYXJyb3dMZW4gLSBhcnJvd1BhZGRpbmdNaW4gLSB0ZXRoZXJPZmZzZXRWYWx1ZSA6IG1pbkxlbiAtIGFycm93TGVuIC0gYXJyb3dQYWRkaW5nTWluIC0gdGV0aGVyT2Zmc2V0VmFsdWU7XG4gICAgdmFyIG1heE9mZnNldCA9IGlzQmFzZVBsYWNlbWVudCA/IC1yZWZlcmVuY2VSZWN0W2xlbl0gLyAyICsgYWRkaXRpdmUgKyBhcnJvd0xlbiArIGFycm93UGFkZGluZ01heCArIHRldGhlck9mZnNldFZhbHVlIDogbWF4TGVuICsgYXJyb3dMZW4gKyBhcnJvd1BhZGRpbmdNYXggKyB0ZXRoZXJPZmZzZXRWYWx1ZTtcbiAgICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdyAmJiBnZXRPZmZzZXRQYXJlbnQoc3RhdGUuZWxlbWVudHMuYXJyb3cpO1xuICAgIHZhciBjbGllbnRPZmZzZXQgPSBhcnJvd09mZnNldFBhcmVudCA/IG1haW5BeGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRUb3AgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudExlZnQgfHwgMCA6IDA7XG4gICAgdmFyIG9mZnNldE1vZGlmaWVyVmFsdWUgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldCA/IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0W3N0YXRlLnBsYWNlbWVudF1bbWFpbkF4aXNdIDogMDtcbiAgICB2YXIgdGV0aGVyTWluID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gKyBtaW5PZmZzZXQgLSBvZmZzZXRNb2RpZmllclZhbHVlIC0gY2xpZW50T2Zmc2V0O1xuICAgIHZhciB0ZXRoZXJNYXggPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSArIG1heE9mZnNldCAtIG9mZnNldE1vZGlmaWVyVmFsdWU7XG5cbiAgICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgICAgdmFyIHByZXZlbnRlZE9mZnNldCA9IHdpdGhpbih0ZXRoZXIgPyBtYXRoTWluKG1pbiwgdGV0aGVyTWluKSA6IG1pbiwgb2Zmc2V0LCB0ZXRoZXIgPyBtYXRoTWF4KG1heCwgdGV0aGVyTWF4KSA6IG1heCk7XG4gICAgICBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSA9IHByZXZlbnRlZE9mZnNldDtcbiAgICAgIGRhdGFbbWFpbkF4aXNdID0gcHJldmVudGVkT2Zmc2V0IC0gb2Zmc2V0O1xuICAgIH1cblxuICAgIGlmIChjaGVja0FsdEF4aXMpIHtcbiAgICAgIHZhciBfbWFpblNpZGUgPSBtYWluQXhpcyA9PT0gJ3gnID8gdG9wIDogbGVmdDtcblxuICAgICAgdmFyIF9hbHRTaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IGJvdHRvbSA6IHJpZ2h0O1xuXG4gICAgICB2YXIgX29mZnNldCA9IHBvcHBlck9mZnNldHNbYWx0QXhpc107XG5cbiAgICAgIHZhciBfbWluID0gX29mZnNldCArIG92ZXJmbG93W19tYWluU2lkZV07XG5cbiAgICAgIHZhciBfbWF4ID0gX29mZnNldCAtIG92ZXJmbG93W19hbHRTaWRlXTtcblxuICAgICAgdmFyIF9wcmV2ZW50ZWRPZmZzZXQgPSB3aXRoaW4odGV0aGVyID8gbWF0aE1pbihfbWluLCB0ZXRoZXJNaW4pIDogX21pbiwgX29mZnNldCwgdGV0aGVyID8gbWF0aE1heChfbWF4LCB0ZXRoZXJNYXgpIDogX21heCk7XG5cbiAgICAgIHBvcHBlck9mZnNldHNbYWx0QXhpc10gPSBfcHJldmVudGVkT2Zmc2V0O1xuICAgICAgZGF0YVthbHRBeGlzXSA9IF9wcmV2ZW50ZWRPZmZzZXQgLSBfb2Zmc2V0O1xuICAgIH1cbiAgfVxuXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBkYXRhO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAncHJldmVudE92ZXJmbG93JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydvZmZzZXQnXVxufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRIVE1MRWxlbWVudFNjcm9sbChlbGVtZW50KSB7XG4gIHJldHVybiB7XG4gICAgc2Nyb2xsTGVmdDogZWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgIHNjcm9sbFRvcDogZWxlbWVudC5zY3JvbGxUb3BcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgZ2V0SFRNTEVsZW1lbnRTY3JvbGwgZnJvbSBcIi4vZ2V0SFRNTEVsZW1lbnRTY3JvbGwuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE5vZGVTY3JvbGwobm9kZSkge1xuICBpZiAobm9kZSA9PT0gZ2V0V2luZG93KG5vZGUpIHx8ICFpc0hUTUxFbGVtZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIGdldFdpbmRvd1Njcm9sbChub2RlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2V0SFRNTEVsZW1lbnRTY3JvbGwobm9kZSk7XG4gIH1cbn0iLCJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldE5vZGVTY3JvbGwgZnJvbSBcIi4vZ2V0Tm9kZVNjcm9sbC5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiO1xuXG5mdW5jdGlvbiBpc0VsZW1lbnRTY2FsZWQoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBzY2FsZVggPSByZWN0LndpZHRoIC8gZWxlbWVudC5vZmZzZXRXaWR0aCB8fCAxO1xuICB2YXIgc2NhbGVZID0gcmVjdC5oZWlnaHQgLyBlbGVtZW50Lm9mZnNldEhlaWdodCB8fCAxO1xuICByZXR1cm4gc2NhbGVYICE9PSAxIHx8IHNjYWxlWSAhPT0gMTtcbn0gLy8gUmV0dXJucyB0aGUgY29tcG9zaXRlIHJlY3Qgb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byBpdHMgb2Zmc2V0UGFyZW50LlxuLy8gQ29tcG9zaXRlIG1lYW5zIGl0IHRha2VzIGludG8gYWNjb3VudCB0cmFuc2Zvcm1zIGFzIHdlbGwgYXMgbGF5b3V0LlxuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXBvc2l0ZVJlY3QoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQsIG9mZnNldFBhcmVudCwgaXNGaXhlZCkge1xuICBpZiAoaXNGaXhlZCA9PT0gdm9pZCAwKSB7XG4gICAgaXNGaXhlZCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ID0gaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICB2YXIgb2Zmc2V0UGFyZW50SXNTY2FsZWQgPSBpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCkgJiYgaXNFbGVtZW50U2NhbGVkKG9mZnNldFBhcmVudCk7XG4gIHZhciBkb2N1bWVudEVsZW1lbnQgPSBnZXREb2N1bWVudEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIHJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQsIG9mZnNldFBhcmVudElzU2NhbGVkKTtcbiAgdmFyIHNjcm9sbCA9IHtcbiAgICBzY3JvbGxMZWZ0OiAwLFxuICAgIHNjcm9sbFRvcDogMFxuICB9O1xuICB2YXIgb2Zmc2V0cyA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcblxuICBpZiAoaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgfHwgIWlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ICYmICFpc0ZpeGVkKSB7XG4gICAgaWYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgIT09ICdib2R5JyB8fCAvLyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzEwNzhcbiAgICBpc1Njcm9sbFBhcmVudChkb2N1bWVudEVsZW1lbnQpKSB7XG4gICAgICBzY3JvbGwgPSBnZXROb2RlU2Nyb2xsKG9mZnNldFBhcmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgb2Zmc2V0cyA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQsIHRydWUpO1xuICAgICAgb2Zmc2V0cy54ICs9IG9mZnNldFBhcmVudC5jbGllbnRMZWZ0O1xuICAgICAgb2Zmc2V0cy55ICs9IG9mZnNldFBhcmVudC5jbGllbnRUb3A7XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIG9mZnNldHMueCA9IGdldFdpbmRvd1Njcm9sbEJhclgoZG9jdW1lbnRFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IHJlY3QubGVmdCArIHNjcm9sbC5zY3JvbGxMZWZ0IC0gb2Zmc2V0cy54LFxuICAgIHk6IHJlY3QudG9wICsgc2Nyb2xsLnNjcm9sbFRvcCAtIG9mZnNldHMueSxcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0XG4gIH07XG59IiwiaW1wb3J0IHsgbW9kaWZpZXJQaGFzZXMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjsgLy8gc291cmNlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80OTg3NTI1NVxuXG5mdW5jdGlvbiBvcmRlcihtb2RpZmllcnMpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIHZpc2l0ZWQgPSBuZXcgU2V0KCk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgbWFwLnNldChtb2RpZmllci5uYW1lLCBtb2RpZmllcik7XG4gIH0pOyAvLyBPbiB2aXNpdGluZyBvYmplY3QsIGNoZWNrIGZvciBpdHMgZGVwZW5kZW5jaWVzIGFuZCB2aXNpdCB0aGVtIHJlY3Vyc2l2ZWx5XG5cbiAgZnVuY3Rpb24gc29ydChtb2RpZmllcikge1xuICAgIHZpc2l0ZWQuYWRkKG1vZGlmaWVyLm5hbWUpO1xuICAgIHZhciByZXF1aXJlcyA9IFtdLmNvbmNhdChtb2RpZmllci5yZXF1aXJlcyB8fCBbXSwgbW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cyB8fCBbXSk7XG4gICAgcmVxdWlyZXMuZm9yRWFjaChmdW5jdGlvbiAoZGVwKSB7XG4gICAgICBpZiAoIXZpc2l0ZWQuaGFzKGRlcCkpIHtcbiAgICAgICAgdmFyIGRlcE1vZGlmaWVyID0gbWFwLmdldChkZXApO1xuXG4gICAgICAgIGlmIChkZXBNb2RpZmllcikge1xuICAgICAgICAgIHNvcnQoZGVwTW9kaWZpZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVzdWx0LnB1c2gobW9kaWZpZXIpO1xuICB9XG5cbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKCF2aXNpdGVkLmhhcyhtb2RpZmllci5uYW1lKSkge1xuICAgICAgLy8gY2hlY2sgZm9yIHZpc2l0ZWQgb2JqZWN0XG4gICAgICBzb3J0KG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcmRlck1vZGlmaWVycyhtb2RpZmllcnMpIHtcbiAgLy8gb3JkZXIgYmFzZWQgb24gZGVwZW5kZW5jaWVzXG4gIHZhciBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXIobW9kaWZpZXJzKTsgLy8gb3JkZXIgYmFzZWQgb24gcGhhc2VcblxuICByZXR1cm4gbW9kaWZpZXJQaGFzZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBoYXNlKSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQob3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICByZXR1cm4gbW9kaWZpZXIucGhhc2UgPT09IHBoYXNlO1xuICAgIH0pKTtcbiAgfSwgW10pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlYm91bmNlKGZuKSB7XG4gIHZhciBwZW5kaW5nO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghcGVuZGluZykge1xuICAgICAgcGVuZGluZyA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHBlbmRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgcmVzb2x2ZShmbigpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGVuZGluZztcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZUJ5TmFtZShtb2RpZmllcnMpIHtcbiAgdmFyIG1lcmdlZCA9IG1vZGlmaWVycy5yZWR1Y2UoZnVuY3Rpb24gKG1lcmdlZCwgY3VycmVudCkge1xuICAgIHZhciBleGlzdGluZyA9IG1lcmdlZFtjdXJyZW50Lm5hbWVdO1xuICAgIG1lcmdlZFtjdXJyZW50Lm5hbWVdID0gZXhpc3RpbmcgPyBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZywgY3VycmVudCwge1xuICAgICAgb3B0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgZXhpc3Rpbmcub3B0aW9ucywgY3VycmVudC5vcHRpb25zKSxcbiAgICAgIGRhdGE6IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLmRhdGEsIGN1cnJlbnQuZGF0YSlcbiAgICB9KSA6IGN1cnJlbnQ7XG4gICAgcmV0dXJuIG1lcmdlZDtcbiAgfSwge30pOyAvLyBJRTExIGRvZXMgbm90IHN1cHBvcnQgT2JqZWN0LnZhbHVlc1xuXG4gIHJldHVybiBPYmplY3Qua2V5cyhtZXJnZWQpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIG1lcmdlZFtrZXldO1xuICB9KTtcbn0iLCJpbXBvcnQgZ2V0Q29tcG9zaXRlUmVjdCBmcm9tIFwiLi9kb20tdXRpbHMvZ2V0Q29tcG9zaXRlUmVjdC5qc1wiO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSBcIi4vZG9tLXV0aWxzL2dldExheW91dFJlY3QuanNcIjtcbmltcG9ydCBsaXN0U2Nyb2xsUGFyZW50cyBmcm9tIFwiLi9kb20tdXRpbHMvbGlzdFNjcm9sbFBhcmVudHMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZG9tLXV0aWxzL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCBvcmRlck1vZGlmaWVycyBmcm9tIFwiLi91dGlscy9vcmRlck1vZGlmaWVycy5qc1wiO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gXCIuL3V0aWxzL2RlYm91bmNlLmpzXCI7XG5pbXBvcnQgdmFsaWRhdGVNb2RpZmllcnMgZnJvbSBcIi4vdXRpbHMvdmFsaWRhdGVNb2RpZmllcnMuanNcIjtcbmltcG9ydCB1bmlxdWVCeSBmcm9tIFwiLi91dGlscy91bmlxdWVCeS5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IG1lcmdlQnlOYW1lIGZyb20gXCIuL3V0aWxzL21lcmdlQnlOYW1lLmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gXCIuL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgeyBhdXRvIH0gZnJvbSBcIi4vZW51bXMuanNcIjtcbnZhciBJTlZBTElEX0VMRU1FTlRfRVJST1IgPSAnUG9wcGVyOiBJbnZhbGlkIHJlZmVyZW5jZSBvciBwb3BwZXIgYXJndW1lbnQgcHJvdmlkZWQuIFRoZXkgbXVzdCBiZSBlaXRoZXIgYSBET00gZWxlbWVudCBvciB2aXJ0dWFsIGVsZW1lbnQuJztcbnZhciBJTkZJTklURV9MT09QX0VSUk9SID0gJ1BvcHBlcjogQW4gaW5maW5pdGUgbG9vcCBpbiB0aGUgbW9kaWZpZXJzIGN5Y2xlIGhhcyBiZWVuIGRldGVjdGVkISBUaGUgY3ljbGUgaGFzIGJlZW4gaW50ZXJydXB0ZWQgdG8gcHJldmVudCBhIGJyb3dzZXIgY3Jhc2guJztcbnZhciBERUZBVUxUX09QVElPTlMgPSB7XG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gIG1vZGlmaWVyczogW10sXG4gIHN0cmF0ZWd5OiAnYWJzb2x1dGUnXG59O1xuXG5mdW5jdGlvbiBhcmVWYWxpZEVsZW1lbnRzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuICFhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gIShlbGVtZW50ICYmIHR5cGVvZiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCA9PT0gJ2Z1bmN0aW9uJyk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9wcGVyR2VuZXJhdG9yKGdlbmVyYXRvck9wdGlvbnMpIHtcbiAgaWYgKGdlbmVyYXRvck9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIGdlbmVyYXRvck9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfZ2VuZXJhdG9yT3B0aW9ucyA9IGdlbmVyYXRvck9wdGlvbnMsXG4gICAgICBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYgPSBfZ2VuZXJhdG9yT3B0aW9ucy5kZWZhdWx0TW9kaWZpZXJzLFxuICAgICAgZGVmYXVsdE1vZGlmaWVycyA9IF9nZW5lcmF0b3JPcHRpb25zJGRlZiA9PT0gdm9pZCAwID8gW10gOiBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYsXG4gICAgICBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyID0gX2dlbmVyYXRvck9wdGlvbnMuZGVmYXVsdE9wdGlvbnMsXG4gICAgICBkZWZhdWx0T3B0aW9ucyA9IF9nZW5lcmF0b3JPcHRpb25zJGRlZjIgPT09IHZvaWQgMCA/IERFRkFVTFRfT1BUSU9OUyA6IF9nZW5lcmF0b3JPcHRpb25zJGRlZjI7XG4gIHJldHVybiBmdW5jdGlvbiBjcmVhdGVQb3BwZXIocmVmZXJlbmNlLCBwb3BwZXIsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7XG4gICAgfVxuXG4gICAgdmFyIHN0YXRlID0ge1xuICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgIG9yZGVyZWRNb2RpZmllcnM6IFtdLFxuICAgICAgb3B0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9PUFRJT05TLCBkZWZhdWx0T3B0aW9ucyksXG4gICAgICBtb2RpZmllcnNEYXRhOiB7fSxcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlLFxuICAgICAgICBwb3BwZXI6IHBvcHBlclxuICAgICAgfSxcbiAgICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgICAgc3R5bGVzOiB7fVxuICAgIH07XG4gICAgdmFyIGVmZmVjdENsZWFudXBGbnMgPSBbXTtcbiAgICB2YXIgaXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB2YXIgaW5zdGFuY2UgPSB7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBzZXRPcHRpb25zOiBmdW5jdGlvbiBzZXRPcHRpb25zKHNldE9wdGlvbnNBY3Rpb24pIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2V0T3B0aW9uc0FjdGlvbiA9PT0gJ2Z1bmN0aW9uJyA/IHNldE9wdGlvbnNBY3Rpb24oc3RhdGUub3B0aW9ucykgOiBzZXRPcHRpb25zQWN0aW9uO1xuICAgICAgICBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIHN0YXRlLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgc3RhdGUub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHN0YXRlLnNjcm9sbFBhcmVudHMgPSB7XG4gICAgICAgICAgcmVmZXJlbmNlOiBpc0VsZW1lbnQocmVmZXJlbmNlKSA/IGxpc3RTY3JvbGxQYXJlbnRzKHJlZmVyZW5jZSkgOiByZWZlcmVuY2UuY29udGV4dEVsZW1lbnQgPyBsaXN0U2Nyb2xsUGFyZW50cyhyZWZlcmVuY2UuY29udGV4dEVsZW1lbnQpIDogW10sXG4gICAgICAgICAgcG9wcGVyOiBsaXN0U2Nyb2xsUGFyZW50cyhwb3BwZXIpXG4gICAgICAgIH07IC8vIE9yZGVycyB0aGUgbW9kaWZpZXJzIGJhc2VkIG9uIHRoZWlyIGRlcGVuZGVuY2llcyBhbmQgYHBoYXNlYFxuICAgICAgICAvLyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgdmFyIG9yZGVyZWRNb2RpZmllcnMgPSBvcmRlck1vZGlmaWVycyhtZXJnZUJ5TmFtZShbXS5jb25jYXQoZGVmYXVsdE1vZGlmaWVycywgc3RhdGUub3B0aW9ucy5tb2RpZmllcnMpKSk7IC8vIFN0cmlwIG91dCBkaXNhYmxlZCBtb2RpZmllcnNcblxuICAgICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzID0gb3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICByZXR1cm4gbS5lbmFibGVkO1xuICAgICAgICB9KTsgLy8gVmFsaWRhdGUgdGhlIHByb3ZpZGVkIG1vZGlmaWVycyBzbyB0aGF0IHRoZSBjb25zdW1lciB3aWxsIGdldCB3YXJuZWRcbiAgICAgICAgLy8gaWYgb25lIG9mIHRoZSBtb2RpZmllcnMgaXMgaW52YWxpZCBmb3IgYW55IHJlYXNvblxuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICB2YXIgbW9kaWZpZXJzID0gdW5pcXVlQnkoW10uY29uY2F0KG9yZGVyZWRNb2RpZmllcnMsIHN0YXRlLm9wdGlvbnMubW9kaWZpZXJzKSwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gX3JlZi5uYW1lO1xuICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFsaWRhdGVNb2RpZmllcnMobW9kaWZpZXJzKTtcblxuICAgICAgICAgIGlmIChnZXRCYXNlUGxhY2VtZW50KHN0YXRlLm9wdGlvbnMucGxhY2VtZW50KSA9PT0gYXV0bykge1xuICAgICAgICAgICAgdmFyIGZsaXBNb2RpZmllciA9IHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZmluZChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgICAgICAgICAgdmFyIG5hbWUgPSBfcmVmMi5uYW1lO1xuICAgICAgICAgICAgICByZXR1cm4gbmFtZSA9PT0gJ2ZsaXAnO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICghZmxpcE1vZGlmaWVyKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFwiYXV0b1wiIHBsYWNlbWVudHMgcmVxdWlyZSB0aGUgXCJmbGlwXCIgbW9kaWZpZXIgYmUnLCAncHJlc2VudCBhbmQgZW5hYmxlZCB0byB3b3JrLiddLmpvaW4oJyAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9nZXRDb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShwb3BwZXIpLFxuICAgICAgICAgICAgICBtYXJnaW5Ub3AgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5Ub3AsXG4gICAgICAgICAgICAgIG1hcmdpblJpZ2h0ID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luUmlnaHQsXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbSA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpbkJvdHRvbSxcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdCA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpbkxlZnQ7IC8vIFdlIG5vIGxvbmdlciB0YWtlIGludG8gYWNjb3VudCBgbWFyZ2luc2Agb24gdGhlIHBvcHBlciwgYW5kIGl0IGNhblxuICAgICAgICAgIC8vIGNhdXNlIGJ1Z3Mgd2l0aCBwb3NpdGlvbmluZywgc28gd2UnbGwgd2FybiB0aGUgY29uc3VtZXJcblxuXG4gICAgICAgICAgaWYgKFttYXJnaW5Ub3AsIG1hcmdpblJpZ2h0LCBtYXJnaW5Cb3R0b20sIG1hcmdpbkxlZnRdLnNvbWUoZnVuY3Rpb24gKG1hcmdpbikge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQobWFyZ2luKTtcbiAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFsnUG9wcGVyOiBDU1MgXCJtYXJnaW5cIiBzdHlsZXMgY2Fubm90IGJlIHVzZWQgdG8gYXBwbHkgcGFkZGluZycsICdiZXR3ZWVuIHRoZSBwb3BwZXIgYW5kIGl0cyByZWZlcmVuY2UgZWxlbWVudCBvciBib3VuZGFyeS4nLCAnVG8gcmVwbGljYXRlIG1hcmdpbiwgdXNlIHRoZSBgb2Zmc2V0YCBtb2RpZmllciwgYXMgd2VsbCBhcycsICd0aGUgYHBhZGRpbmdgIG9wdGlvbiBpbiB0aGUgYHByZXZlbnRPdmVyZmxvd2AgYW5kIGBmbGlwYCcsICdtb2RpZmllcnMuJ10uam9pbignICcpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBydW5Nb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIC8vIFN5bmMgdXBkYXRlIOKAkyBpdCB3aWxsIGFsd2F5cyBiZSBleGVjdXRlZCwgZXZlbiBpZiBub3QgbmVjZXNzYXJ5LiBUaGlzXG4gICAgICAvLyBpcyB1c2VmdWwgZm9yIGxvdyBmcmVxdWVuY3kgdXBkYXRlcyB3aGVyZSBzeW5jIGJlaGF2aW9yIHNpbXBsaWZpZXMgdGhlXG4gICAgICAvLyBsb2dpYy5cbiAgICAgIC8vIEZvciBoaWdoIGZyZXF1ZW5jeSB1cGRhdGVzIChlLmcuIGByZXNpemVgIGFuZCBgc2Nyb2xsYCBldmVudHMpLCBhbHdheXNcbiAgICAgIC8vIHByZWZlciB0aGUgYXN5bmMgUG9wcGVyI3VwZGF0ZSBtZXRob2RcbiAgICAgIGZvcmNlVXBkYXRlOiBmdW5jdGlvbiBmb3JjZVVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKGlzRGVzdHJveWVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9zdGF0ZSRlbGVtZW50cyA9IHN0YXRlLmVsZW1lbnRzLFxuICAgICAgICAgICAgcmVmZXJlbmNlID0gX3N0YXRlJGVsZW1lbnRzLnJlZmVyZW5jZSxcbiAgICAgICAgICAgIHBvcHBlciA9IF9zdGF0ZSRlbGVtZW50cy5wb3BwZXI7IC8vIERvbid0IHByb2NlZWQgaWYgYHJlZmVyZW5jZWAgb3IgYHBvcHBlcmAgYXJlIG5vdCB2YWxpZCBlbGVtZW50c1xuICAgICAgICAvLyBhbnltb3JlXG5cbiAgICAgICAgaWYgKCFhcmVWYWxpZEVsZW1lbnRzKHJlZmVyZW5jZSwgcG9wcGVyKSkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSU5WQUxJRF9FTEVNRU5UX0VSUk9SKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gU3RvcmUgdGhlIHJlZmVyZW5jZSBhbmQgcG9wcGVyIHJlY3RzIHRvIGJlIHJlYWQgYnkgbW9kaWZpZXJzXG5cblxuICAgICAgICBzdGF0ZS5yZWN0cyA9IHtcbiAgICAgICAgICByZWZlcmVuY2U6IGdldENvbXBvc2l0ZVJlY3QocmVmZXJlbmNlLCBnZXRPZmZzZXRQYXJlbnQocG9wcGVyKSwgc3RhdGUub3B0aW9ucy5zdHJhdGVneSA9PT0gJ2ZpeGVkJyksXG4gICAgICAgICAgcG9wcGVyOiBnZXRMYXlvdXRSZWN0KHBvcHBlcilcbiAgICAgICAgfTsgLy8gTW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gcmVzZXQgdGhlIGN1cnJlbnQgdXBkYXRlIGN5Y2xlLiBUaGVcbiAgICAgICAgLy8gbW9zdCBjb21tb24gdXNlIGNhc2UgZm9yIHRoaXMgaXMgdGhlIGBmbGlwYCBtb2RpZmllciBjaGFuZ2luZyB0aGVcbiAgICAgICAgLy8gcGxhY2VtZW50LCB3aGljaCB0aGVuIG5lZWRzIHRvIHJlLXJ1biBhbGwgdGhlIG1vZGlmaWVycywgYmVjYXVzZSB0aGVcbiAgICAgICAgLy8gbG9naWMgd2FzIHByZXZpb3VzbHkgcmFuIGZvciB0aGUgcHJldmlvdXMgcGxhY2VtZW50IGFuZCBpcyB0aGVyZWZvcmVcbiAgICAgICAgLy8gc3RhbGUvaW5jb3JyZWN0XG5cbiAgICAgICAgc3RhdGUucmVzZXQgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUucGxhY2VtZW50ID0gc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQ7IC8vIE9uIGVhY2ggdXBkYXRlIGN5Y2xlLCB0aGUgYG1vZGlmaWVyc0RhdGFgIHByb3BlcnR5IGZvciBlYWNoIG1vZGlmaWVyXG4gICAgICAgIC8vIGlzIGZpbGxlZCB3aXRoIHRoZSBpbml0aWFsIGRhdGEgc3BlY2lmaWVkIGJ5IHRoZSBtb2RpZmllci4gVGhpcyBtZWFuc1xuICAgICAgICAvLyBpdCBkb2Vzbid0IHBlcnNpc3QgYW5kIGlzIGZyZXNoIG9uIGVhY2ggdXBkYXRlLlxuICAgICAgICAvLyBUbyBlbnN1cmUgcGVyc2lzdGVudCBkYXRhLCB1c2UgYCR7bmFtZX0jcGVyc2lzdGVudGBcblxuICAgICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlLm1vZGlmaWVyc0RhdGFbbW9kaWZpZXIubmFtZV0gPSBPYmplY3QuYXNzaWduKHt9LCBtb2RpZmllci5kYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBfX2RlYnVnX2xvb3BzX18gPSAwO1xuXG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIF9fZGVidWdfbG9vcHNfXyArPSAxO1xuXG4gICAgICAgICAgICBpZiAoX19kZWJ1Z19sb29wc19fID4gMTAwKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSU5GSU5JVEVfTE9PUF9FUlJPUik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzdGF0ZS5yZXNldCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgc3RhdGUucmVzZXQgPSBmYWxzZTtcbiAgICAgICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgX3N0YXRlJG9yZGVyZWRNb2RpZmllID0gc3RhdGUub3JkZXJlZE1vZGlmaWVyc1tpbmRleF0sXG4gICAgICAgICAgICAgIGZuID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLmZuLFxuICAgICAgICAgICAgICBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLm9wdGlvbnMsXG4gICAgICAgICAgICAgIF9vcHRpb25zID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllMiA9PT0gdm9pZCAwID8ge30gOiBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyLFxuICAgICAgICAgICAgICBuYW1lID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLm5hbWU7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IGZuKHtcbiAgICAgICAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICAgICAgICBvcHRpb25zOiBfb3B0aW9ucyxcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlXG4gICAgICAgICAgICB9KSB8fCBzdGF0ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBBc3luYyBhbmQgb3B0aW1pc3RpY2FsbHkgb3B0aW1pemVkIHVwZGF0ZSDigJMgaXQgd2lsbCBub3QgYmUgZXhlY3V0ZWQgaWZcbiAgICAgIC8vIG5vdCBuZWNlc3NhcnkgKGRlYm91bmNlZCB0byBydW4gYXQgbW9zdCBvbmNlLXBlci10aWNrKVxuICAgICAgdXBkYXRlOiBkZWJvdW5jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgIGluc3RhbmNlLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgcmVzb2x2ZShzdGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSksXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIGlzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKCFhcmVWYWxpZEVsZW1lbnRzKHJlZmVyZW5jZSwgcG9wcGVyKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBjb25zb2xlLmVycm9yKElOVkFMSURfRUxFTUVOVF9FUlJPUik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5zZXRPcHRpb25zKG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICBpZiAoIWlzRGVzdHJveWVkICYmIG9wdGlvbnMub25GaXJzdFVwZGF0ZSkge1xuICAgICAgICBvcHRpb25zLm9uRmlyc3RVcGRhdGUoc3RhdGUpO1xuICAgICAgfVxuICAgIH0pOyAvLyBNb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byBleGVjdXRlIGFyYml0cmFyeSBjb2RlIGJlZm9yZSB0aGUgZmlyc3RcbiAgICAvLyB1cGRhdGUgY3ljbGUgcnVucy4gVGhleSB3aWxsIGJlIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSB1cGRhdGVcbiAgICAvLyBjeWNsZS4gVGhpcyBpcyB1c2VmdWwgd2hlbiBhIG1vZGlmaWVyIGFkZHMgc29tZSBwZXJzaXN0ZW50IGRhdGEgdGhhdFxuICAgIC8vIG90aGVyIG1vZGlmaWVycyBuZWVkIHRvIHVzZSwgYnV0IHRoZSBtb2RpZmllciBpcyBydW4gYWZ0ZXIgdGhlIGRlcGVuZGVudFxuICAgIC8vIG9uZS5cblxuICAgIGZ1bmN0aW9uIHJ1bk1vZGlmaWVyRWZmZWN0cygpIHtcbiAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBfcmVmMy5uYW1lLFxuICAgICAgICAgICAgX3JlZjMkb3B0aW9ucyA9IF9yZWYzLm9wdGlvbnMsXG4gICAgICAgICAgICBvcHRpb25zID0gX3JlZjMkb3B0aW9ucyA9PT0gdm9pZCAwID8ge30gOiBfcmVmMyRvcHRpb25zLFxuICAgICAgICAgICAgZWZmZWN0ID0gX3JlZjMuZWZmZWN0O1xuXG4gICAgICAgIGlmICh0eXBlb2YgZWZmZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIGNsZWFudXBGbiA9IGVmZmVjdCh7XG4gICAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlLFxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdmFyIG5vb3BGbiA9IGZ1bmN0aW9uIG5vb3BGbigpIHt9O1xuXG4gICAgICAgICAgZWZmZWN0Q2xlYW51cEZucy5wdXNoKGNsZWFudXBGbiB8fCBub29wRm4pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCkge1xuICAgICAgZWZmZWN0Q2xlYW51cEZucy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgIH0pO1xuICAgICAgZWZmZWN0Q2xlYW51cEZucyA9IFtdO1xuICAgIH1cblxuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcbn1cbmV4cG9ydCB2YXIgY3JlYXRlUG9wcGVyID0gLyojX19QVVJFX18qL3BvcHBlckdlbmVyYXRvcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGRldGVjdE92ZXJmbG93IH07IiwiaW1wb3J0IHsgcG9wcGVyR2VuZXJhdG9yLCBkZXRlY3RPdmVyZmxvdyB9IGZyb20gXCIuL2NyZWF0ZVBvcHBlci5qc1wiO1xuaW1wb3J0IGV2ZW50TGlzdGVuZXJzIGZyb20gXCIuL21vZGlmaWVycy9ldmVudExpc3RlbmVycy5qc1wiO1xuaW1wb3J0IHBvcHBlck9mZnNldHMgZnJvbSBcIi4vbW9kaWZpZXJzL3BvcHBlck9mZnNldHMuanNcIjtcbmltcG9ydCBjb21wdXRlU3R5bGVzIGZyb20gXCIuL21vZGlmaWVycy9jb21wdXRlU3R5bGVzLmpzXCI7XG5pbXBvcnQgYXBwbHlTdHlsZXMgZnJvbSBcIi4vbW9kaWZpZXJzL2FwcGx5U3R5bGVzLmpzXCI7XG52YXIgZGVmYXVsdE1vZGlmaWVycyA9IFtldmVudExpc3RlbmVycywgcG9wcGVyT2Zmc2V0cywgY29tcHV0ZVN0eWxlcywgYXBwbHlTdHlsZXNdO1xudmFyIGNyZWF0ZVBvcHBlciA9IC8qI19fUFVSRV9fKi9wb3BwZXJHZW5lcmF0b3Ioe1xuICBkZWZhdWx0TW9kaWZpZXJzOiBkZWZhdWx0TW9kaWZpZXJzXG59KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIsIHBvcHBlckdlbmVyYXRvciwgZGVmYXVsdE1vZGlmaWVycywgZGV0ZWN0T3ZlcmZsb3cgfTsiLCJpbXBvcnQgeyBwb3BwZXJHZW5lcmF0b3IsIGRldGVjdE92ZXJmbG93IH0gZnJvbSBcIi4vY3JlYXRlUG9wcGVyLmpzXCI7XG5pbXBvcnQgZXZlbnRMaXN0ZW5lcnMgZnJvbSBcIi4vbW9kaWZpZXJzL2V2ZW50TGlzdGVuZXJzLmpzXCI7XG5pbXBvcnQgcG9wcGVyT2Zmc2V0cyBmcm9tIFwiLi9tb2RpZmllcnMvcG9wcGVyT2Zmc2V0cy5qc1wiO1xuaW1wb3J0IGNvbXB1dGVTdHlsZXMgZnJvbSBcIi4vbW9kaWZpZXJzL2NvbXB1dGVTdHlsZXMuanNcIjtcbmltcG9ydCBhcHBseVN0eWxlcyBmcm9tIFwiLi9tb2RpZmllcnMvYXBwbHlTdHlsZXMuanNcIjtcbmltcG9ydCBvZmZzZXQgZnJvbSBcIi4vbW9kaWZpZXJzL29mZnNldC5qc1wiO1xuaW1wb3J0IGZsaXAgZnJvbSBcIi4vbW9kaWZpZXJzL2ZsaXAuanNcIjtcbmltcG9ydCBwcmV2ZW50T3ZlcmZsb3cgZnJvbSBcIi4vbW9kaWZpZXJzL3ByZXZlbnRPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGFycm93IGZyb20gXCIuL21vZGlmaWVycy9hcnJvdy5qc1wiO1xuaW1wb3J0IGhpZGUgZnJvbSBcIi4vbW9kaWZpZXJzL2hpZGUuanNcIjtcbnZhciBkZWZhdWx0TW9kaWZpZXJzID0gW2V2ZW50TGlzdGVuZXJzLCBwb3BwZXJPZmZzZXRzLCBjb21wdXRlU3R5bGVzLCBhcHBseVN0eWxlcywgb2Zmc2V0LCBmbGlwLCBwcmV2ZW50T3ZlcmZsb3csIGFycm93LCBoaWRlXTtcbnZhciBjcmVhdGVQb3BwZXIgPSAvKiNfX1BVUkVfXyovcG9wcGVyR2VuZXJhdG9yKHtcbiAgZGVmYXVsdE1vZGlmaWVyczogZGVmYXVsdE1vZGlmaWVyc1xufSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgY3JlYXRlUG9wcGVyLCBwb3BwZXJHZW5lcmF0b3IsIGRlZmF1bHRNb2RpZmllcnMsIGRldGVjdE92ZXJmbG93IH07IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgY3JlYXRlUG9wcGVyIGFzIGNyZWF0ZVBvcHBlckxpdGUgfSBmcm9tIFwiLi9wb3BwZXItbGl0ZS5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCAqIGZyb20gXCIuL21vZGlmaWVycy9pbmRleC5qc1wiOyIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogZHJvcGRvd24uanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgKiBhcyBQb3BwZXIgZnJvbSAnQHBvcHBlcmpzL2NvcmUnXG5cbmltcG9ydCB7XG4gIGRlZmluZUpRdWVyeVBsdWdpbixcbiAgZ2V0RWxlbWVudCxcbiAgZ2V0RWxlbWVudEZyb21TZWxlY3RvcixcbiAgZ2V0TmV4dEFjdGl2ZUVsZW1lbnQsXG4gIGlzRGlzYWJsZWQsXG4gIGlzRWxlbWVudCxcbiAgaXNSVEwsXG4gIGlzVmlzaWJsZSxcbiAgbm9vcCxcbiAgdHlwZUNoZWNrQ29uZmlnXG59IGZyb20gJy4vdXRpbC9pbmRleCdcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi9kb20vZXZlbnQtaGFuZGxlcidcbmltcG9ydCBNYW5pcHVsYXRvciBmcm9tICcuL2RvbS9tYW5pcHVsYXRvcidcbmltcG9ydCBTZWxlY3RvckVuZ2luZSBmcm9tICcuL2RvbS9zZWxlY3Rvci1lbmdpbmUnXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuL2Jhc2UtY29tcG9uZW50J1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FID0gJ2Ryb3Bkb3duJ1xuY29uc3QgREFUQV9LRVkgPSAnYnMuZHJvcGRvd24nXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSdcblxuY29uc3QgRVNDQVBFX0tFWSA9ICdFc2NhcGUnXG5jb25zdCBTUEFDRV9LRVkgPSAnU3BhY2UnXG5jb25zdCBUQUJfS0VZID0gJ1RhYidcbmNvbnN0IEFSUk9XX1VQX0tFWSA9ICdBcnJvd1VwJ1xuY29uc3QgQVJST1dfRE9XTl9LRVkgPSAnQXJyb3dEb3duJ1xuY29uc3QgUklHSFRfTU9VU0VfQlVUVE9OID0gMiAvLyBNb3VzZUV2ZW50LmJ1dHRvbiB2YWx1ZSBmb3IgdGhlIHNlY29uZGFyeSBidXR0b24sIHVzdWFsbHkgdGhlIHJpZ2h0IGJ1dHRvblxuXG5jb25zdCBSRUdFWFBfS0VZRE9XTiA9IG5ldyBSZWdFeHAoYCR7QVJST1dfVVBfS0VZfXwke0FSUk9XX0RPV05fS0VZfXwke0VTQ0FQRV9LRVl9YClcblxuY29uc3QgRVZFTlRfSElERSA9IGBoaWRlJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfSElEREVOID0gYGhpZGRlbiR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX1NIT1cgPSBgc2hvdyR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX1NIT1dOID0gYHNob3duJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkgPSBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5jb25zdCBFVkVOVF9LRVlET1dOX0RBVEFfQVBJID0gYGtleWRvd24ke0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5jb25zdCBFVkVOVF9LRVlVUF9EQVRBX0FQSSA9IGBrZXl1cCR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcblxuY29uc3QgQ0xBU1NfTkFNRV9TSE9XID0gJ3Nob3cnXG5jb25zdCBDTEFTU19OQU1FX0RST1BVUCA9ICdkcm9wdXAnXG5jb25zdCBDTEFTU19OQU1FX0RST1BFTkQgPSAnZHJvcGVuZCdcbmNvbnN0IENMQVNTX05BTUVfRFJPUFNUQVJUID0gJ2Ryb3BzdGFydCdcbmNvbnN0IENMQVNTX05BTUVfTkFWQkFSID0gJ25hdmJhcidcblxuY29uc3QgU0VMRUNUT1JfREFUQV9UT0dHTEUgPSAnW2RhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIl0nXG5jb25zdCBTRUxFQ1RPUl9NRU5VID0gJy5kcm9wZG93bi1tZW51J1xuY29uc3QgU0VMRUNUT1JfTkFWQkFSX05BViA9ICcubmF2YmFyLW5hdidcbmNvbnN0IFNFTEVDVE9SX1ZJU0lCTEVfSVRFTVMgPSAnLmRyb3Bkb3duLW1lbnUgLmRyb3Bkb3duLWl0ZW06bm90KC5kaXNhYmxlZCk6bm90KDpkaXNhYmxlZCknXG5cbmNvbnN0IFBMQUNFTUVOVF9UT1AgPSBpc1JUTCgpID8gJ3RvcC1lbmQnIDogJ3RvcC1zdGFydCdcbmNvbnN0IFBMQUNFTUVOVF9UT1BFTkQgPSBpc1JUTCgpID8gJ3RvcC1zdGFydCcgOiAndG9wLWVuZCdcbmNvbnN0IFBMQUNFTUVOVF9CT1RUT00gPSBpc1JUTCgpID8gJ2JvdHRvbS1lbmQnIDogJ2JvdHRvbS1zdGFydCdcbmNvbnN0IFBMQUNFTUVOVF9CT1RUT01FTkQgPSBpc1JUTCgpID8gJ2JvdHRvbS1zdGFydCcgOiAnYm90dG9tLWVuZCdcbmNvbnN0IFBMQUNFTUVOVF9SSUdIVCA9IGlzUlRMKCkgPyAnbGVmdC1zdGFydCcgOiAncmlnaHQtc3RhcnQnXG5jb25zdCBQTEFDRU1FTlRfTEVGVCA9IGlzUlRMKCkgPyAncmlnaHQtc3RhcnQnIDogJ2xlZnQtc3RhcnQnXG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIG9mZnNldDogWzAsIDJdLFxuICBib3VuZGFyeTogJ2NsaXBwaW5nUGFyZW50cycsXG4gIHJlZmVyZW5jZTogJ3RvZ2dsZScsXG4gIGRpc3BsYXk6ICdkeW5hbWljJyxcbiAgcG9wcGVyQ29uZmlnOiBudWxsLFxuICBhdXRvQ2xvc2U6IHRydWVcbn1cblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIG9mZnNldDogJyhhcnJheXxzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgYm91bmRhcnk6ICcoc3RyaW5nfGVsZW1lbnQpJyxcbiAgcmVmZXJlbmNlOiAnKHN0cmluZ3xlbGVtZW50fG9iamVjdCknLFxuICBkaXNwbGF5OiAnc3RyaW5nJyxcbiAgcG9wcGVyQ29uZmlnOiAnKG51bGx8b2JqZWN0fGZ1bmN0aW9uKScsXG4gIGF1dG9DbG9zZTogJyhib29sZWFufHN0cmluZyknXG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBEcm9wZG93biBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICBzdXBlcihlbGVtZW50KVxuXG4gICAgdGhpcy5fcG9wcGVyID0gbnVsbFxuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpXG4gICAgdGhpcy5fbWVudSA9IHRoaXMuX2dldE1lbnVFbGVtZW50KClcbiAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpXG4gIH1cblxuICAvLyBHZXR0ZXJzXG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcblxuICB0b2dnbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzU2hvd24oKSA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KClcbiAgfVxuXG4gIHNob3coKSB7XG4gICAgaWYgKGlzRGlzYWJsZWQodGhpcy5fZWxlbWVudCkgfHwgdGhpcy5faXNTaG93bih0aGlzLl9tZW51KSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgcmVsYXRlZFRhcmdldCA9IHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICB9XG5cbiAgICBjb25zdCBzaG93RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XLCByZWxhdGVkVGFyZ2V0KVxuXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBwYXJlbnQgPSBEcm9wZG93bi5nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KVxuICAgIC8vIFRvdGFsbHkgZGlzYWJsZSBQb3BwZXIgZm9yIERyb3Bkb3ducyBpbiBOYXZiYXJcbiAgICBpZiAodGhpcy5faW5OYXZiYXIpIHtcbiAgICAgIE1hbmlwdWxhdG9yLnNldERhdGFBdHRyaWJ1dGUodGhpcy5fbWVudSwgJ3BvcHBlcicsICdub25lJylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fY3JlYXRlUG9wcGVyKHBhcmVudClcbiAgICB9XG5cbiAgICAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgYWRkIGV4dHJhXG4gICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB0byB0aGUgYm9keSdzIGltbWVkaWF0ZSBjaGlsZHJlbjtcbiAgICAvLyBvbmx5IG5lZWRlZCBiZWNhdXNlIG9mIGJyb2tlbiBldmVudCBkZWxlZ2F0aW9uIG9uIGlPU1xuICAgIC8vIGh0dHBzOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxNC8wMi9tb3VzZV9ldmVudF9idWIuaHRtbFxuICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiZcbiAgICAgICFwYXJlbnQuY2xvc2VzdChTRUxFQ1RPUl9OQVZCQVJfTkFWKSkge1xuICAgICAgW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pXG4gICAgICAgIC5mb3JFYWNoKGVsZW0gPT4gRXZlbnRIYW5kbGVyLm9uKGVsZW0sICdtb3VzZW92ZXInLCBub29wKSlcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50LmZvY3VzKClcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRydWUpXG5cbiAgICB0aGlzLl9tZW51LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XKVxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1cpXG4gICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04sIHJlbGF0ZWRUYXJnZXQpXG4gIH1cblxuICBoaWRlKCkge1xuICAgIGlmIChpc0Rpc2FibGVkKHRoaXMuX2VsZW1lbnQpIHx8ICF0aGlzLl9pc1Nob3duKHRoaXMuX21lbnUpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgIH1cblxuICAgIHRoaXMuX2NvbXBsZXRlSGlkZShyZWxhdGVkVGFyZ2V0KVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICBpZiAodGhpcy5fcG9wcGVyKSB7XG4gICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpXG4gICAgfVxuXG4gICAgc3VwZXIuZGlzcG9zZSgpXG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgdGhpcy5faW5OYXZiYXIgPSB0aGlzLl9kZXRlY3ROYXZiYXIoKVxuICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcbiAgICAgIHRoaXMuX3BvcHBlci51cGRhdGUoKVxuICAgIH1cbiAgfVxuXG4gIC8vIFByaXZhdGVcblxuICBfY29tcGxldGVIaWRlKHJlbGF0ZWRUYXJnZXQpIHtcbiAgICBjb25zdCBoaWRlRXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURFLCByZWxhdGVkVGFyZ2V0KVxuICAgIGlmIChoaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIHJlbW92ZSB0aGUgZXh0cmFcbiAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydFxuICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIFtdLmNvbmNhdCguLi5kb2N1bWVudC5ib2R5LmNoaWxkcmVuKVxuICAgICAgICAuZm9yRWFjaChlbGVtID0+IEV2ZW50SGFuZGxlci5vZmYoZWxlbSwgJ21vdXNlb3ZlcicsIG5vb3ApKVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcbiAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KClcbiAgICB9XG5cbiAgICB0aGlzLl9tZW51LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XKVxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKVxuICAgIE1hbmlwdWxhdG9yLnJlbW92ZURhdGFBdHRyaWJ1dGUodGhpcy5fbWVudSwgJ3BvcHBlcicpXG4gICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElEREVOLCByZWxhdGVkVGFyZ2V0KVxuICB9XG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7XG4gICAgICAuLi50aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQsXG4gICAgICAuLi5NYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KSxcbiAgICAgIC4uLmNvbmZpZ1xuICAgIH1cblxuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGUpXG5cbiAgICBpZiAodHlwZW9mIGNvbmZpZy5yZWZlcmVuY2UgPT09ICdvYmplY3QnICYmICFpc0VsZW1lbnQoY29uZmlnLnJlZmVyZW5jZSkgJiZcbiAgICAgIHR5cGVvZiBjb25maWcucmVmZXJlbmNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gJ2Z1bmN0aW9uJ1xuICAgICkge1xuICAgICAgLy8gUG9wcGVyIHZpcnR1YWwgZWxlbWVudHMgcmVxdWlyZSBhIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBtZXRob2RcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7TkFNRS50b1VwcGVyQ2FzZSgpfTogT3B0aW9uIFwicmVmZXJlbmNlXCIgcHJvdmlkZWQgdHlwZSBcIm9iamVjdFwiIHdpdGhvdXQgYSByZXF1aXJlZCBcImdldEJvdW5kaW5nQ2xpZW50UmVjdFwiIG1ldGhvZC5gKVxuICAgIH1cblxuICAgIHJldHVybiBjb25maWdcbiAgfVxuXG4gIF9jcmVhdGVQb3BwZXIocGFyZW50KSB7XG4gICAgaWYgKHR5cGVvZiBQb3BwZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXBcXCdzIGRyb3Bkb3ducyByZXF1aXJlIFBvcHBlciAoaHR0cHM6Ly9wb3BwZXIuanMub3JnKScpXG4gICAgfVxuXG4gICAgbGV0IHJlZmVyZW5jZUVsZW1lbnQgPSB0aGlzLl9lbGVtZW50XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLnJlZmVyZW5jZSA9PT0gJ3BhcmVudCcpIHtcbiAgICAgIHJlZmVyZW5jZUVsZW1lbnQgPSBwYXJlbnRcbiAgICB9IGVsc2UgaWYgKGlzRWxlbWVudCh0aGlzLl9jb25maWcucmVmZXJlbmNlKSkge1xuICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IGdldEVsZW1lbnQodGhpcy5fY29uZmlnLnJlZmVyZW5jZSlcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcucmVmZXJlbmNlID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2NvbmZpZy5yZWZlcmVuY2VcbiAgICB9XG5cbiAgICBjb25zdCBwb3BwZXJDb25maWcgPSB0aGlzLl9nZXRQb3BwZXJDb25maWcoKVxuICAgIGNvbnN0IGlzRGlzcGxheVN0YXRpYyA9IHBvcHBlckNvbmZpZy5tb2RpZmllcnMuZmluZChtb2RpZmllciA9PiBtb2RpZmllci5uYW1lID09PSAnYXBwbHlTdHlsZXMnICYmIG1vZGlmaWVyLmVuYWJsZWQgPT09IGZhbHNlKVxuXG4gICAgdGhpcy5fcG9wcGVyID0gUG9wcGVyLmNyZWF0ZVBvcHBlcihyZWZlcmVuY2VFbGVtZW50LCB0aGlzLl9tZW51LCBwb3BwZXJDb25maWcpXG5cbiAgICBpZiAoaXNEaXNwbGF5U3RhdGljKSB7XG4gICAgICBNYW5pcHVsYXRvci5zZXREYXRhQXR0cmlidXRlKHRoaXMuX21lbnUsICdwb3BwZXInLCAnc3RhdGljJylcbiAgICB9XG4gIH1cblxuICBfaXNTaG93bihlbGVtZW50ID0gdGhpcy5fZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1cpXG4gIH1cblxuICBfZ2V0TWVudUVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIFNlbGVjdG9yRW5naW5lLm5leHQodGhpcy5fZWxlbWVudCwgU0VMRUNUT1JfTUVOVSlbMF1cbiAgfVxuXG4gIF9nZXRQbGFjZW1lbnQoKSB7XG4gICAgY29uc3QgcGFyZW50RHJvcGRvd24gPSB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGVcblxuICAgIGlmIChwYXJlbnREcm9wZG93bi5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9EUk9QRU5EKSkge1xuICAgICAgcmV0dXJuIFBMQUNFTUVOVF9SSUdIVFxuICAgIH1cblxuICAgIGlmIChwYXJlbnREcm9wZG93bi5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9EUk9QU1RBUlQpKSB7XG4gICAgICByZXR1cm4gUExBQ0VNRU5UX0xFRlRcbiAgICB9XG5cbiAgICAvLyBXZSBuZWVkIHRvIHRyaW0gdGhlIHZhbHVlIGJlY2F1c2UgY3VzdG9tIHByb3BlcnRpZXMgY2FuIGFsc28gaW5jbHVkZSBzcGFjZXNcbiAgICBjb25zdCBpc0VuZCA9IGdldENvbXB1dGVkU3R5bGUodGhpcy5fbWVudSkuZ2V0UHJvcGVydHlWYWx1ZSgnLS1icy1wb3NpdGlvbicpLnRyaW0oKSA9PT0gJ2VuZCdcblxuICAgIGlmIChwYXJlbnREcm9wZG93bi5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9EUk9QVVApKSB7XG4gICAgICByZXR1cm4gaXNFbmQgPyBQTEFDRU1FTlRfVE9QRU5EIDogUExBQ0VNRU5UX1RPUFxuICAgIH1cblxuICAgIHJldHVybiBpc0VuZCA/IFBMQUNFTUVOVF9CT1RUT01FTkQgOiBQTEFDRU1FTlRfQk9UVE9NXG4gIH1cblxuICBfZGV0ZWN0TmF2YmFyKCkge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50LmNsb3Nlc3QoYC4ke0NMQVNTX05BTUVfTkFWQkFSfWApICE9PSBudWxsXG4gIH1cblxuICBfZ2V0T2Zmc2V0KCkge1xuICAgIGNvbnN0IHsgb2Zmc2V0IH0gPSB0aGlzLl9jb25maWdcblxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG9mZnNldC5zcGxpdCgnLCcpLm1hcCh2YWwgPT4gTnVtYmVyLnBhcnNlSW50KHZhbCwgMTApKVxuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gcG9wcGVyRGF0YSA9PiBvZmZzZXQocG9wcGVyRGF0YSwgdGhpcy5fZWxlbWVudClcbiAgICB9XG5cbiAgICByZXR1cm4gb2Zmc2V0XG4gIH1cblxuICBfZ2V0UG9wcGVyQ29uZmlnKCkge1xuICAgIGNvbnN0IGRlZmF1bHRCc1BvcHBlckNvbmZpZyA9IHtcbiAgICAgIHBsYWNlbWVudDogdGhpcy5fZ2V0UGxhY2VtZW50KCksXG4gICAgICBtb2RpZmllcnM6IFt7XG4gICAgICAgIG5hbWU6ICdwcmV2ZW50T3ZlcmZsb3cnLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgYm91bmRhcnk6IHRoaXMuX2NvbmZpZy5ib3VuZGFyeVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAnb2Zmc2V0JyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIG9mZnNldDogdGhpcy5fZ2V0T2Zmc2V0KClcbiAgICAgICAgfVxuICAgICAgfV1cbiAgICB9XG5cbiAgICAvLyBEaXNhYmxlIFBvcHBlciBpZiB3ZSBoYXZlIGEgc3RhdGljIGRpc3BsYXlcbiAgICBpZiAodGhpcy5fY29uZmlnLmRpc3BsYXkgPT09ICdzdGF0aWMnKSB7XG4gICAgICBkZWZhdWx0QnNQb3BwZXJDb25maWcubW9kaWZpZXJzID0gW3tcbiAgICAgICAgbmFtZTogJ2FwcGx5U3R5bGVzJyxcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgIH1dXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmRlZmF1bHRCc1BvcHBlckNvbmZpZyxcbiAgICAgIC4uLih0eXBlb2YgdGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWcoZGVmYXVsdEJzUG9wcGVyQ29uZmlnKSA6IHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWcpXG4gICAgfVxuICB9XG5cbiAgX3NlbGVjdE1lbnVJdGVtKHsga2V5LCB0YXJnZXQgfSkge1xuICAgIGNvbnN0IGl0ZW1zID0gU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9WSVNJQkxFX0lURU1TLCB0aGlzLl9tZW51KS5maWx0ZXIoaXNWaXNpYmxlKVxuXG4gICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGlmIHRhcmdldCBpc24ndCBpbmNsdWRlZCBpbiBpdGVtcyAoZS5nLiB3aGVuIGV4cGFuZGluZyB0aGUgZHJvcGRvd24pXG4gICAgLy8gYWxsb3cgY3ljbGluZyB0byBnZXQgdGhlIGxhc3QgaXRlbSBpbiBjYXNlIGtleSBlcXVhbHMgQVJST1dfVVBfS0VZXG4gICAgZ2V0TmV4dEFjdGl2ZUVsZW1lbnQoaXRlbXMsIHRhcmdldCwga2V5ID09PSBBUlJPV19ET1dOX0tFWSwgIWl0ZW1zLmluY2x1ZGVzKHRhcmdldCkpLmZvY3VzKClcbiAgfVxuXG4gIC8vIFN0YXRpY1xuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gRHJvcGRvd24uZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBjb25maWcpXG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYClcbiAgICAgIH1cblxuICAgICAgZGF0YVtjb25maWddKClcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIGNsZWFyTWVudXMoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQgJiYgKGV2ZW50LmJ1dHRvbiA9PT0gUklHSFRfTU9VU0VfQlVUVE9OIHx8IChldmVudC50eXBlID09PSAna2V5dXAnICYmIGV2ZW50LmtleSAhPT0gVEFCX0tFWSkpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCB0b2dnbGVzID0gU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9EQVRBX1RPR0dMRSlcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0b2dnbGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBjb250ZXh0ID0gRHJvcGRvd24uZ2V0SW5zdGFuY2UodG9nZ2xlc1tpXSlcbiAgICAgIGlmICghY29udGV4dCB8fCBjb250ZXh0Ll9jb25maWcuYXV0b0Nsb3NlID09PSBmYWxzZSkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBpZiAoIWNvbnRleHQuX2lzU2hvd24oKSkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBjb25zdCByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBjb250ZXh0Ll9lbGVtZW50XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICBjb25zdCBjb21wb3NlZFBhdGggPSBldmVudC5jb21wb3NlZFBhdGgoKVxuICAgICAgICBjb25zdCBpc01lbnVUYXJnZXQgPSBjb21wb3NlZFBhdGguaW5jbHVkZXMoY29udGV4dC5fbWVudSlcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGNvbXBvc2VkUGF0aC5pbmNsdWRlcyhjb250ZXh0Ll9lbGVtZW50KSB8fFxuICAgICAgICAgIChjb250ZXh0Ll9jb25maWcuYXV0b0Nsb3NlID09PSAnaW5zaWRlJyAmJiAhaXNNZW51VGFyZ2V0KSB8fFxuICAgICAgICAgIChjb250ZXh0Ll9jb25maWcuYXV0b0Nsb3NlID09PSAnb3V0c2lkZScgJiYgaXNNZW51VGFyZ2V0KVxuICAgICAgICApIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGFiIG5hdmlnYXRpb24gdGhyb3VnaCB0aGUgZHJvcGRvd24gbWVudSBvciBldmVudHMgZnJvbSBjb250YWluZWQgaW5wdXRzIHNob3VsZG4ndCBjbG9zZSB0aGUgbWVudVxuICAgICAgICBpZiAoY29udGV4dC5fbWVudS5jb250YWlucyhldmVudC50YXJnZXQpICYmICgoZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC5rZXkgPT09IFRBQl9LRVkpIHx8IC9pbnB1dHxzZWxlY3R8b3B0aW9ufHRleHRhcmVhfGZvcm0vaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSkpIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdjbGljaycpIHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0LmNsaWNrRXZlbnQgPSBldmVudFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQuX2NvbXBsZXRlSGlkZShyZWxhdGVkVGFyZ2V0KVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRQYXJlbnRGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGdldEVsZW1lbnRGcm9tU2VsZWN0b3IoZWxlbWVudCkgfHwgZWxlbWVudC5wYXJlbnROb2RlXG4gIH1cblxuICBzdGF0aWMgZGF0YUFwaUtleWRvd25IYW5kbGVyKGV2ZW50KSB7XG4gICAgLy8gSWYgbm90IGlucHV0L3RleHRhcmVhOlxuICAgIC8vICAtIEFuZCBub3QgYSBrZXkgaW4gUkVHRVhQX0tFWURPV04gPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgIC8vIElmIGlucHV0L3RleHRhcmVhOlxuICAgIC8vICAtIElmIHNwYWNlIGtleSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgLy8gIC0gSWYga2V5IGlzIG90aGVyIHRoYW4gZXNjYXBlXG4gICAgLy8gICAgLSBJZiBrZXkgaXMgbm90IHVwIG9yIGRvd24gPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgIC8vICAgIC0gSWYgdHJpZ2dlciBpbnNpZGUgdGhlIG1lbnUgPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSA/XG4gICAgICBldmVudC5rZXkgPT09IFNQQUNFX0tFWSB8fCAoZXZlbnQua2V5ICE9PSBFU0NBUEVfS0VZICYmXG4gICAgICAoKGV2ZW50LmtleSAhPT0gQVJST1dfRE9XTl9LRVkgJiYgZXZlbnQua2V5ICE9PSBBUlJPV19VUF9LRVkpIHx8XG4gICAgICAgIGV2ZW50LnRhcmdldC5jbG9zZXN0KFNFTEVDVE9SX01FTlUpKSkgOlxuICAgICAgIVJFR0VYUF9LRVlET1dOLnRlc3QoZXZlbnQua2V5KSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgaXNBY3RpdmUgPSB0aGlzLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1cpXG5cbiAgICBpZiAoIWlzQWN0aXZlICYmIGV2ZW50LmtleSA9PT0gRVNDQVBFX0tFWSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgICBpZiAoaXNEaXNhYmxlZCh0aGlzKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgZ2V0VG9nZ2xlQnV0dG9uID0gdGhpcy5tYXRjaGVzKFNFTEVDVE9SX0RBVEFfVE9HR0xFKSA/IHRoaXMgOiBTZWxlY3RvckVuZ2luZS5wcmV2KHRoaXMsIFNFTEVDVE9SX0RBVEFfVE9HR0xFKVswXVxuICAgIGNvbnN0IGluc3RhbmNlID0gRHJvcGRvd24uZ2V0T3JDcmVhdGVJbnN0YW5jZShnZXRUb2dnbGVCdXR0b24pXG5cbiAgICBpZiAoZXZlbnQua2V5ID09PSBFU0NBUEVfS0VZKSB7XG4gICAgICBpbnN0YW5jZS5oaWRlKClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChldmVudC5rZXkgPT09IEFSUk9XX1VQX0tFWSB8fCBldmVudC5rZXkgPT09IEFSUk9XX0RPV05fS0VZKSB7XG4gICAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICAgIGluc3RhbmNlLnNob3coKVxuICAgICAgfVxuXG4gICAgICBpbnN0YW5jZS5fc2VsZWN0TWVudUl0ZW0oZXZlbnQpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoIWlzQWN0aXZlIHx8IGV2ZW50LmtleSA9PT0gU1BBQ0VfS0VZKSB7XG4gICAgICBEcm9wZG93bi5jbGVhck1lbnVzKClcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0tFWURPV05fREFUQV9BUEksIFNFTEVDVE9SX0RBVEFfVE9HR0xFLCBEcm9wZG93bi5kYXRhQXBpS2V5ZG93bkhhbmRsZXIpXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0tFWURPV05fREFUQV9BUEksIFNFTEVDVE9SX01FTlUsIERyb3Bkb3duLmRhdGFBcGlLZXlkb3duSGFuZGxlcilcbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEksIERyb3Bkb3duLmNsZWFyTWVudXMpXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0tFWVVQX0RBVEFfQVBJLCBEcm9wZG93bi5jbGVhck1lbnVzKVxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9DTElDS19EQVRBX0FQSSwgU0VMRUNUT1JfREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gIERyb3Bkb3duLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcykudG9nZ2xlKClcbn0pXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogYWRkIC5Ecm9wZG93biB0byBqUXVlcnkgb25seSBpZiBqUXVlcnkgaXMgcHJlc2VudFxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihEcm9wZG93bilcblxuZXhwb3J0IGRlZmF1bHQgRHJvcGRvd25cbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogdXRpbC9zY3JvbGxCYXIuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgU2VsZWN0b3JFbmdpbmUgZnJvbSAnLi4vZG9tL3NlbGVjdG9yLWVuZ2luZSdcbmltcG9ydCBNYW5pcHVsYXRvciBmcm9tICcuLi9kb20vbWFuaXB1bGF0b3InXG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tICcuL2luZGV4J1xuXG5jb25zdCBTRUxFQ1RPUl9GSVhFRF9DT05URU5UID0gJy5maXhlZC10b3AsIC5maXhlZC1ib3R0b20sIC5pcy1maXhlZCwgLnN0aWNreS10b3AnXG5jb25zdCBTRUxFQ1RPUl9TVElDS1lfQ09OVEVOVCA9ICcuc3RpY2t5LXRvcCdcblxuY2xhc3MgU2Nyb2xsQmFySGVscGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fZWxlbWVudCA9IGRvY3VtZW50LmJvZHlcbiAgfVxuXG4gIGdldFdpZHRoKCkge1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cvaW5uZXJXaWR0aCN1c2FnZV9ub3Rlc1xuICAgIGNvbnN0IGRvY3VtZW50V2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGhcbiAgICByZXR1cm4gTWF0aC5hYnMod2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudFdpZHRoKVxuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBjb25zdCB3aWR0aCA9IHRoaXMuZ2V0V2lkdGgoKVxuICAgIHRoaXMuX2Rpc2FibGVPdmVyRmxvdygpXG4gICAgLy8gZ2l2ZSBwYWRkaW5nIHRvIGVsZW1lbnQgdG8gYmFsYW5jZSB0aGUgaGlkZGVuIHNjcm9sbGJhciB3aWR0aFxuICAgIHRoaXMuX3NldEVsZW1lbnRBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQsICdwYWRkaW5nUmlnaHQnLCBjYWxjdWxhdGVkVmFsdWUgPT4gY2FsY3VsYXRlZFZhbHVlICsgd2lkdGgpXG4gICAgLy8gdHJpY2s6IFdlIGFkanVzdCBwb3NpdGl2ZSBwYWRkaW5nUmlnaHQgYW5kIG5lZ2F0aXZlIG1hcmdpblJpZ2h0IHRvIHN0aWNreS10b3AgZWxlbWVudHMgdG8ga2VlcCBzaG93aW5nIGZ1bGx3aWR0aFxuICAgIHRoaXMuX3NldEVsZW1lbnRBdHRyaWJ1dGVzKFNFTEVDVE9SX0ZJWEVEX0NPTlRFTlQsICdwYWRkaW5nUmlnaHQnLCBjYWxjdWxhdGVkVmFsdWUgPT4gY2FsY3VsYXRlZFZhbHVlICsgd2lkdGgpXG4gICAgdGhpcy5fc2V0RWxlbWVudEF0dHJpYnV0ZXMoU0VMRUNUT1JfU1RJQ0tZX0NPTlRFTlQsICdtYXJnaW5SaWdodCcsIGNhbGN1bGF0ZWRWYWx1ZSA9PiBjYWxjdWxhdGVkVmFsdWUgLSB3aWR0aClcbiAgfVxuXG4gIF9kaXNhYmxlT3ZlckZsb3coKSB7XG4gICAgdGhpcy5fc2F2ZUluaXRpYWxBdHRyaWJ1dGUodGhpcy5fZWxlbWVudCwgJ292ZXJmbG93JylcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbidcbiAgfVxuXG4gIF9zZXRFbGVtZW50QXR0cmlidXRlcyhzZWxlY3Rvciwgc3R5bGVQcm9wLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHNjcm9sbGJhcldpZHRoID0gdGhpcy5nZXRXaWR0aCgpXG4gICAgY29uc3QgbWFuaXB1bGF0aW9uQ2FsbEJhY2sgPSBlbGVtZW50ID0+IHtcbiAgICAgIGlmIChlbGVtZW50ICE9PSB0aGlzLl9lbGVtZW50ICYmIHdpbmRvdy5pbm5lcldpZHRoID4gZWxlbWVudC5jbGllbnRXaWR0aCArIHNjcm9sbGJhcldpZHRoKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB0aGlzLl9zYXZlSW5pdGlhbEF0dHJpYnV0ZShlbGVtZW50LCBzdHlsZVByb3ApXG4gICAgICBjb25zdCBjYWxjdWxhdGVkVmFsdWUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KVtzdHlsZVByb3BdXG4gICAgICBlbGVtZW50LnN0eWxlW3N0eWxlUHJvcF0gPSBgJHtjYWxsYmFjayhOdW1iZXIucGFyc2VGbG9hdChjYWxjdWxhdGVkVmFsdWUpKX1weGBcbiAgICB9XG5cbiAgICB0aGlzLl9hcHBseU1hbmlwdWxhdGlvbkNhbGxiYWNrKHNlbGVjdG9yLCBtYW5pcHVsYXRpb25DYWxsQmFjaylcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuX3Jlc2V0RWxlbWVudEF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCwgJ292ZXJmbG93JylcbiAgICB0aGlzLl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQsICdwYWRkaW5nUmlnaHQnKVxuICAgIHRoaXMuX3Jlc2V0RWxlbWVudEF0dHJpYnV0ZXMoU0VMRUNUT1JfRklYRURfQ09OVEVOVCwgJ3BhZGRpbmdSaWdodCcpXG4gICAgdGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcyhTRUxFQ1RPUl9TVElDS1lfQ09OVEVOVCwgJ21hcmdpblJpZ2h0JylcbiAgfVxuXG4gIF9zYXZlSW5pdGlhbEF0dHJpYnV0ZShlbGVtZW50LCBzdHlsZVByb3ApIHtcbiAgICBjb25zdCBhY3R1YWxWYWx1ZSA9IGVsZW1lbnQuc3R5bGVbc3R5bGVQcm9wXVxuICAgIGlmIChhY3R1YWxWYWx1ZSkge1xuICAgICAgTWFuaXB1bGF0b3Iuc2V0RGF0YUF0dHJpYnV0ZShlbGVtZW50LCBzdHlsZVByb3AsIGFjdHVhbFZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIF9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKHNlbGVjdG9yLCBzdHlsZVByb3ApIHtcbiAgICBjb25zdCBtYW5pcHVsYXRpb25DYWxsQmFjayA9IGVsZW1lbnQgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBNYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlKGVsZW1lbnQsIHN0eWxlUHJvcClcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoc3R5bGVQcm9wKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgTWFuaXB1bGF0b3IucmVtb3ZlRGF0YUF0dHJpYnV0ZShlbGVtZW50LCBzdHlsZVByb3ApXG4gICAgICAgIGVsZW1lbnQuc3R5bGVbc3R5bGVQcm9wXSA9IHZhbHVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fYXBwbHlNYW5pcHVsYXRpb25DYWxsYmFjayhzZWxlY3RvciwgbWFuaXB1bGF0aW9uQ2FsbEJhY2spXG4gIH1cblxuICBfYXBwbHlNYW5pcHVsYXRpb25DYWxsYmFjayhzZWxlY3RvciwgY2FsbEJhY2spIHtcbiAgICBpZiAoaXNFbGVtZW50KHNlbGVjdG9yKSkge1xuICAgICAgY2FsbEJhY2soc2VsZWN0b3IpXG4gICAgfSBlbHNlIHtcbiAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmQoc2VsZWN0b3IsIHRoaXMuX2VsZW1lbnQpLmZvckVhY2goY2FsbEJhY2spXG4gICAgfVxuICB9XG5cbiAgaXNPdmVyZmxvd2luZygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRXaWR0aCgpID4gMFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNjcm9sbEJhckhlbHBlclxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4xLjMpOiB1dGlsL2JhY2tkcm9wLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tICcuLi9kb20vZXZlbnQtaGFuZGxlcidcbmltcG9ydCB7IGV4ZWN1dGUsIGV4ZWN1dGVBZnRlclRyYW5zaXRpb24sIGdldEVsZW1lbnQsIHJlZmxvdywgdHlwZUNoZWNrQ29uZmlnIH0gZnJvbSAnLi9pbmRleCdcblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgY2xhc3NOYW1lOiAnbW9kYWwtYmFja2Ryb3AnLFxuICBpc1Zpc2libGU6IHRydWUsIC8vIGlmIGZhbHNlLCB3ZSB1c2UgdGhlIGJhY2tkcm9wIGhlbHBlciB3aXRob3V0IGFkZGluZyBhbnkgZWxlbWVudCB0byB0aGUgZG9tXG4gIGlzQW5pbWF0ZWQ6IGZhbHNlLFxuICByb290RWxlbWVudDogJ2JvZHknLCAvLyBnaXZlIHRoZSBjaG9pY2UgdG8gcGxhY2UgYmFja2Ryb3AgdW5kZXIgZGlmZmVyZW50IGVsZW1lbnRzXG4gIGNsaWNrQ2FsbGJhY2s6IG51bGxcbn1cblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIGNsYXNzTmFtZTogJ3N0cmluZycsXG4gIGlzVmlzaWJsZTogJ2Jvb2xlYW4nLFxuICBpc0FuaW1hdGVkOiAnYm9vbGVhbicsXG4gIHJvb3RFbGVtZW50OiAnKGVsZW1lbnR8c3RyaW5nKScsXG4gIGNsaWNrQ2FsbGJhY2s6ICcoZnVuY3Rpb258bnVsbCknXG59XG5jb25zdCBOQU1FID0gJ2JhY2tkcm9wJ1xuY29uc3QgQ0xBU1NfTkFNRV9GQURFID0gJ2ZhZGUnXG5jb25zdCBDTEFTU19OQU1FX1NIT1cgPSAnc2hvdydcblxuY29uc3QgRVZFTlRfTU9VU0VET1dOID0gYG1vdXNlZG93bi5icy4ke05BTUV9YFxuXG5jbGFzcyBCYWNrZHJvcCB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpXG4gICAgdGhpcy5faXNBcHBlbmRlZCA9IGZhbHNlXG4gICAgdGhpcy5fZWxlbWVudCA9IG51bGxcbiAgfVxuXG4gIHNob3coY2FsbGJhY2spIHtcbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5pc1Zpc2libGUpIHtcbiAgICAgIGV4ZWN1dGUoY2FsbGJhY2spXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9hcHBlbmQoKVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5pc0FuaW1hdGVkKSB7XG4gICAgICByZWZsb3codGhpcy5fZ2V0RWxlbWVudCgpKVxuICAgIH1cblxuICAgIHRoaXMuX2dldEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVylcblxuICAgIHRoaXMuX2VtdWxhdGVBbmltYXRpb24oKCkgPT4ge1xuICAgICAgZXhlY3V0ZShjYWxsYmFjaylcbiAgICB9KVxuICB9XG5cbiAgaGlkZShjYWxsYmFjaykge1xuICAgIGlmICghdGhpcy5fY29uZmlnLmlzVmlzaWJsZSkge1xuICAgICAgZXhlY3V0ZShjYWxsYmFjaylcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2dldEVsZW1lbnQoKS5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVylcblxuICAgIHRoaXMuX2VtdWxhdGVBbmltYXRpb24oKCkgPT4ge1xuICAgICAgdGhpcy5kaXNwb3NlKClcbiAgICAgIGV4ZWN1dGUoY2FsbGJhY2spXG4gICAgfSlcbiAgfVxuXG4gIC8vIFByaXZhdGVcblxuICBfZ2V0RWxlbWVudCgpIHtcbiAgICBpZiAoIXRoaXMuX2VsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGJhY2tkcm9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgIGJhY2tkcm9wLmNsYXNzTmFtZSA9IHRoaXMuX2NvbmZpZy5jbGFzc05hbWVcbiAgICAgIGlmICh0aGlzLl9jb25maWcuaXNBbmltYXRlZCkge1xuICAgICAgICBiYWNrZHJvcC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfRkFERSlcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZWxlbWVudCA9IGJhY2tkcm9wXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRcbiAgfVxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnID0ge1xuICAgICAgLi4uRGVmYXVsdCxcbiAgICAgIC4uLih0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IHt9KVxuICAgIH1cblxuICAgIC8vIHVzZSBnZXRFbGVtZW50KCkgd2l0aCB0aGUgZGVmYXVsdCBcImJvZHlcIiB0byBnZXQgYSBmcmVzaCBFbGVtZW50IG9uIGVhY2ggaW5zdGFudGlhdGlvblxuICAgIGNvbmZpZy5yb290RWxlbWVudCA9IGdldEVsZW1lbnQoY29uZmlnLnJvb3RFbGVtZW50KVxuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKVxuICAgIHJldHVybiBjb25maWdcbiAgfVxuXG4gIF9hcHBlbmQoKSB7XG4gICAgaWYgKHRoaXMuX2lzQXBwZW5kZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2NvbmZpZy5yb290RWxlbWVudC5hcHBlbmQodGhpcy5fZ2V0RWxlbWVudCgpKVxuXG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2dldEVsZW1lbnQoKSwgRVZFTlRfTU9VU0VET1dOLCAoKSA9PiB7XG4gICAgICBleGVjdXRlKHRoaXMuX2NvbmZpZy5jbGlja0NhbGxiYWNrKVxuICAgIH0pXG5cbiAgICB0aGlzLl9pc0FwcGVuZGVkID0gdHJ1ZVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICBpZiAoIXRoaXMuX2lzQXBwZW5kZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIEV2ZW50SGFuZGxlci5vZmYodGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VET1dOKVxuXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKVxuICAgIHRoaXMuX2lzQXBwZW5kZWQgPSBmYWxzZVxuICB9XG5cbiAgX2VtdWxhdGVBbmltYXRpb24oY2FsbGJhY2spIHtcbiAgICBleGVjdXRlQWZ0ZXJUcmFuc2l0aW9uKGNhbGxiYWNrLCB0aGlzLl9nZXRFbGVtZW50KCksIHRoaXMuX2NvbmZpZy5pc0FuaW1hdGVkKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJhY2tkcm9wXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IHV0aWwvZm9jdXN0cmFwLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tICcuLi9kb20vZXZlbnQtaGFuZGxlcidcbmltcG9ydCBTZWxlY3RvckVuZ2luZSBmcm9tICcuLi9kb20vc2VsZWN0b3ItZW5naW5lJ1xuaW1wb3J0IHsgdHlwZUNoZWNrQ29uZmlnIH0gZnJvbSAnLi9pbmRleCdcblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgdHJhcEVsZW1lbnQ6IG51bGwsIC8vIFRoZSBlbGVtZW50IHRvIHRyYXAgZm9jdXMgaW5zaWRlIG9mXG4gIGF1dG9mb2N1czogdHJ1ZVxufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgdHJhcEVsZW1lbnQ6ICdlbGVtZW50JyxcbiAgYXV0b2ZvY3VzOiAnYm9vbGVhbidcbn1cblxuY29uc3QgTkFNRSA9ICdmb2N1c3RyYXAnXG5jb25zdCBEQVRBX0tFWSA9ICdicy5mb2N1c3RyYXAnXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgRVZFTlRfRk9DVVNJTiA9IGBmb2N1c2luJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfS0VZRE9XTl9UQUIgPSBga2V5ZG93bi50YWIke0VWRU5UX0tFWX1gXG5cbmNvbnN0IFRBQl9LRVkgPSAnVGFiJ1xuY29uc3QgVEFCX05BVl9GT1JXQVJEID0gJ2ZvcndhcmQnXG5jb25zdCBUQUJfTkFWX0JBQ0tXQVJEID0gJ2JhY2t3YXJkJ1xuXG5jbGFzcyBGb2N1c1RyYXAge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKVxuICAgIHRoaXMuX2lzQWN0aXZlID0gZmFsc2VcbiAgICB0aGlzLl9sYXN0VGFiTmF2RGlyZWN0aW9uID0gbnVsbFxuICB9XG5cbiAgYWN0aXZhdGUoKSB7XG4gICAgY29uc3QgeyB0cmFwRWxlbWVudCwgYXV0b2ZvY3VzIH0gPSB0aGlzLl9jb25maWdcblxuICAgIGlmICh0aGlzLl9pc0FjdGl2ZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGF1dG9mb2N1cykge1xuICAgICAgdHJhcEVsZW1lbnQuZm9jdXMoKVxuICAgIH1cblxuICAgIEV2ZW50SGFuZGxlci5vZmYoZG9jdW1lbnQsIEVWRU5UX0tFWSkgLy8gZ3VhcmQgYWdhaW5zdCBpbmZpbml0ZSBmb2N1cyBsb29wXG4gICAgRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9GT0NVU0lOLCBldmVudCA9PiB0aGlzLl9oYW5kbGVGb2N1c2luKGV2ZW50KSlcbiAgICBFdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0tFWURPV05fVEFCLCBldmVudCA9PiB0aGlzLl9oYW5kbGVLZXlkb3duKGV2ZW50KSlcblxuICAgIHRoaXMuX2lzQWN0aXZlID0gdHJ1ZVxuICB9XG5cbiAgZGVhY3RpdmF0ZSgpIHtcbiAgICBpZiAoIXRoaXMuX2lzQWN0aXZlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9pc0FjdGl2ZSA9IGZhbHNlXG4gICAgRXZlbnRIYW5kbGVyLm9mZihkb2N1bWVudCwgRVZFTlRfS0VZKVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuXG4gIF9oYW5kbGVGb2N1c2luKGV2ZW50KSB7XG4gICAgY29uc3QgeyB0YXJnZXQgfSA9IGV2ZW50XG4gICAgY29uc3QgeyB0cmFwRWxlbWVudCB9ID0gdGhpcy5fY29uZmlnXG5cbiAgICBpZiAodGFyZ2V0ID09PSBkb2N1bWVudCB8fCB0YXJnZXQgPT09IHRyYXBFbGVtZW50IHx8IHRyYXBFbGVtZW50LmNvbnRhaW5zKHRhcmdldCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGVsZW1lbnRzID0gU2VsZWN0b3JFbmdpbmUuZm9jdXNhYmxlQ2hpbGRyZW4odHJhcEVsZW1lbnQpXG5cbiAgICBpZiAoZWxlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0cmFwRWxlbWVudC5mb2N1cygpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9sYXN0VGFiTmF2RGlyZWN0aW9uID09PSBUQUJfTkFWX0JBQ0tXQVJEKSB7XG4gICAgICBlbGVtZW50c1tlbGVtZW50cy5sZW5ndGggLSAxXS5mb2N1cygpXG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnRzWzBdLmZvY3VzKClcbiAgICB9XG4gIH1cblxuICBfaGFuZGxlS2V5ZG93bihldmVudCkge1xuICAgIGlmIChldmVudC5rZXkgIT09IFRBQl9LRVkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2xhc3RUYWJOYXZEaXJlY3Rpb24gPSBldmVudC5zaGlmdEtleSA/IFRBQl9OQVZfQkFDS1dBUkQgOiBUQUJfTkFWX0ZPUldBUkRcbiAgfVxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnID0ge1xuICAgICAgLi4uRGVmYXVsdCxcbiAgICAgIC4uLih0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IHt9KVxuICAgIH1cbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSlcbiAgICByZXR1cm4gY29uZmlnXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9jdXNUcmFwXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IG1vZGFsLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IHtcbiAgZGVmaW5lSlF1ZXJ5UGx1Z2luLFxuICBnZXRFbGVtZW50RnJvbVNlbGVjdG9yLFxuICBpc1JUTCxcbiAgaXNWaXNpYmxlLFxuICByZWZsb3csXG4gIHR5cGVDaGVja0NvbmZpZ1xufSBmcm9tICcuL3V0aWwvaW5kZXgnXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4vZG9tL2V2ZW50LWhhbmRsZXInXG5pbXBvcnQgTWFuaXB1bGF0b3IgZnJvbSAnLi9kb20vbWFuaXB1bGF0b3InXG5pbXBvcnQgU2VsZWN0b3JFbmdpbmUgZnJvbSAnLi9kb20vc2VsZWN0b3ItZW5naW5lJ1xuaW1wb3J0IFNjcm9sbEJhckhlbHBlciBmcm9tICcuL3V0aWwvc2Nyb2xsYmFyJ1xuaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSAnLi9iYXNlLWNvbXBvbmVudCdcbmltcG9ydCBCYWNrZHJvcCBmcm9tICcuL3V0aWwvYmFja2Ryb3AnXG5pbXBvcnQgRm9jdXNUcmFwIGZyb20gJy4vdXRpbC9mb2N1c3RyYXAnXG5pbXBvcnQgeyBlbmFibGVEaXNtaXNzVHJpZ2dlciB9IGZyb20gJy4vdXRpbC9jb21wb25lbnQtZnVuY3Rpb25zJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FID0gJ21vZGFsJ1xuY29uc3QgREFUQV9LRVkgPSAnYnMubW9kYWwnXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSdcbmNvbnN0IEVTQ0FQRV9LRVkgPSAnRXNjYXBlJ1xuXG5jb25zdCBEZWZhdWx0ID0ge1xuICBiYWNrZHJvcDogdHJ1ZSxcbiAga2V5Ym9hcmQ6IHRydWUsXG4gIGZvY3VzOiB0cnVlXG59XG5cbmNvbnN0IERlZmF1bHRUeXBlID0ge1xuICBiYWNrZHJvcDogJyhib29sZWFufHN0cmluZyknLFxuICBrZXlib2FyZDogJ2Jvb2xlYW4nLFxuICBmb2N1czogJ2Jvb2xlYW4nXG59XG5cbmNvbnN0IEVWRU5UX0hJREUgPSBgaGlkZSR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0hJREVfUFJFVkVOVEVEID0gYGhpZGVQcmV2ZW50ZWQke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9ISURERU4gPSBgaGlkZGVuJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfU0hPVyA9IGBzaG93JHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfU0hPV04gPSBgc2hvd24ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9SRVNJWkUgPSBgcmVzaXplJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfQ0xJQ0tfRElTTUlTUyA9IGBjbGljay5kaXNtaXNzJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfS0VZRE9XTl9ESVNNSVNTID0gYGtleWRvd24uZGlzbWlzcyR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX01PVVNFVVBfRElTTUlTUyA9IGBtb3VzZXVwLmRpc21pc3Mke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9NT1VTRURPV05fRElTTUlTUyA9IGBtb3VzZWRvd24uZGlzbWlzcyR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0NMSUNLX0RBVEFfQVBJID0gYGNsaWNrJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YFxuXG5jb25zdCBDTEFTU19OQU1FX09QRU4gPSAnbW9kYWwtb3BlbidcbmNvbnN0IENMQVNTX05BTUVfRkFERSA9ICdmYWRlJ1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XID0gJ3Nob3cnXG5jb25zdCBDTEFTU19OQU1FX1NUQVRJQyA9ICdtb2RhbC1zdGF0aWMnXG5cbmNvbnN0IE9QRU5fU0VMRUNUT1IgPSAnLm1vZGFsLnNob3cnXG5jb25zdCBTRUxFQ1RPUl9ESUFMT0cgPSAnLm1vZGFsLWRpYWxvZydcbmNvbnN0IFNFTEVDVE9SX01PREFMX0JPRFkgPSAnLm1vZGFsLWJvZHknXG5jb25zdCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSA9ICdbZGF0YS1icy10b2dnbGU9XCJtb2RhbFwiXSdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIE1vZGFsIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKGVsZW1lbnQpXG5cbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKVxuICAgIHRoaXMuX2RpYWxvZyA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfRElBTE9HLCB0aGlzLl9lbGVtZW50KVxuICAgIHRoaXMuX2JhY2tkcm9wID0gdGhpcy5faW5pdGlhbGl6ZUJhY2tEcm9wKClcbiAgICB0aGlzLl9mb2N1c3RyYXAgPSB0aGlzLl9pbml0aWFsaXplRm9jdXNUcmFwKClcbiAgICB0aGlzLl9pc1Nob3duID0gZmFsc2VcbiAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2VcbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZVxuICAgIHRoaXMuX3Njcm9sbEJhciA9IG5ldyBTY3JvbGxCYXJIZWxwZXIoKVxuICB9XG5cbiAgLy8gR2V0dGVyc1xuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFxuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICAvLyBQdWJsaWNcblxuICB0b2dnbGUocmVsYXRlZFRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLl9pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3cocmVsYXRlZFRhcmdldClcbiAgfVxuXG4gIHNob3cocmVsYXRlZFRhcmdldCkge1xuICAgIGlmICh0aGlzLl9pc1Nob3duIHx8IHRoaXMuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3Qgc2hvd0V2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPVywge1xuICAgICAgcmVsYXRlZFRhcmdldFxuICAgIH0pXG5cbiAgICBpZiAoc2hvd0V2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2lzU2hvd24gPSB0cnVlXG5cbiAgICBpZiAodGhpcy5faXNBbmltYXRlZCgpKSB7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSB0cnVlXG4gICAgfVxuXG4gICAgdGhpcy5fc2Nyb2xsQmFyLmhpZGUoKVxuXG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfT1BFTilcblxuICAgIHRoaXMuX2FkanVzdERpYWxvZygpXG5cbiAgICB0aGlzLl9zZXRFc2NhcGVFdmVudCgpXG4gICAgdGhpcy5fc2V0UmVzaXplRXZlbnQoKVxuXG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2RpYWxvZywgRVZFTlRfTU9VU0VET1dOX0RJU01JU1MsICgpID0+IHtcbiAgICAgIEV2ZW50SGFuZGxlci5vbmUodGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VVUF9ESVNNSVNTLCBldmVudCA9PiB7XG4gICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IHRoaXMuX2VsZW1lbnQpIHtcbiAgICAgICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0aGlzLl9zaG93QmFja2Ryb3AoKCkgPT4gdGhpcy5fc2hvd0VsZW1lbnQocmVsYXRlZFRhcmdldCkpXG4gIH1cblxuICBoaWRlKCkge1xuICAgIGlmICghdGhpcy5faXNTaG93biB8fCB0aGlzLl9pc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREUpXG5cbiAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZVxuICAgIGNvbnN0IGlzQW5pbWF0ZWQgPSB0aGlzLl9pc0FuaW1hdGVkKClcblxuICAgIGlmIChpc0FuaW1hdGVkKSB7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSB0cnVlXG4gICAgfVxuXG4gICAgdGhpcy5fc2V0RXNjYXBlRXZlbnQoKVxuICAgIHRoaXMuX3NldFJlc2l6ZUV2ZW50KClcblxuICAgIHRoaXMuX2ZvY3VzdHJhcC5kZWFjdGl2YXRlKClcblxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpXG5cbiAgICBFdmVudEhhbmRsZXIub2ZmKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0NMSUNLX0RJU01JU1MpXG4gICAgRXZlbnRIYW5kbGVyLm9mZih0aGlzLl9kaWFsb2csIEVWRU5UX01PVVNFRE9XTl9ESVNNSVNTKVxuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB0aGlzLl9oaWRlTW9kYWwoKSwgdGhpcy5fZWxlbWVudCwgaXNBbmltYXRlZClcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgW3dpbmRvdywgdGhpcy5fZGlhbG9nXVxuICAgICAgLmZvckVhY2goaHRtbEVsZW1lbnQgPT4gRXZlbnRIYW5kbGVyLm9mZihodG1sRWxlbWVudCwgRVZFTlRfS0VZKSlcblxuICAgIHRoaXMuX2JhY2tkcm9wLmRpc3Bvc2UoKVxuICAgIHRoaXMuX2ZvY3VzdHJhcC5kZWFjdGl2YXRlKClcbiAgICBzdXBlci5kaXNwb3NlKClcbiAgfVxuXG4gIGhhbmRsZVVwZGF0ZSgpIHtcbiAgICB0aGlzLl9hZGp1c3REaWFsb2coKVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuXG4gIF9pbml0aWFsaXplQmFja0Ryb3AoKSB7XG4gICAgcmV0dXJuIG5ldyBCYWNrZHJvcCh7XG4gICAgICBpc1Zpc2libGU6IEJvb2xlYW4odGhpcy5fY29uZmlnLmJhY2tkcm9wKSwgLy8gJ3N0YXRpYycgb3B0aW9uIHdpbGwgYmUgdHJhbnNsYXRlZCB0byB0cnVlLCBhbmQgYm9vbGVhbnMgd2lsbCBrZWVwIHRoZWlyIHZhbHVlXG4gICAgICBpc0FuaW1hdGVkOiB0aGlzLl9pc0FuaW1hdGVkKClcbiAgICB9KVxuICB9XG5cbiAgX2luaXRpYWxpemVGb2N1c1RyYXAoKSB7XG4gICAgcmV0dXJuIG5ldyBGb2N1c1RyYXAoe1xuICAgICAgdHJhcEVsZW1lbnQ6IHRoaXMuX2VsZW1lbnRcbiAgICB9KVxuICB9XG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7XG4gICAgICAuLi5EZWZhdWx0LFxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiB7fSlcbiAgICB9XG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQpIHtcbiAgICBjb25zdCBpc0FuaW1hdGVkID0gdGhpcy5faXNBbmltYXRlZCgpXG4gICAgY29uc3QgbW9kYWxCb2R5ID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9NT0RBTF9CT0RZLCB0aGlzLl9kaWFsb2cpXG5cbiAgICBpZiAoIXRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSB8fCB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAvLyBEb24ndCBtb3ZlIG1vZGFsJ3MgRE9NIHBvc2l0aW9uXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZCh0aGlzLl9lbGVtZW50KVxuICAgIH1cblxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKVxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLW1vZGFsJywgdHJ1ZSlcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgncm9sZScsICdkaWFsb2cnKVxuICAgIHRoaXMuX2VsZW1lbnQuc2Nyb2xsVG9wID0gMFxuXG4gICAgaWYgKG1vZGFsQm9keSkge1xuICAgICAgbW9kYWxCb2R5LnNjcm9sbFRvcCA9IDBcbiAgICB9XG5cbiAgICBpZiAoaXNBbmltYXRlZCkge1xuICAgICAgcmVmbG93KHRoaXMuX2VsZW1lbnQpXG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVylcblxuICAgIGNvbnN0IHRyYW5zaXRpb25Db21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9jb25maWcuZm9jdXMpIHtcbiAgICAgICAgdGhpcy5fZm9jdXN0cmFwLmFjdGl2YXRlKClcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2VcbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1dOLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXRcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayh0cmFuc2l0aW9uQ29tcGxldGUsIHRoaXMuX2RpYWxvZywgaXNBbmltYXRlZClcbiAgfVxuXG4gIF9zZXRFc2NhcGVFdmVudCgpIHtcbiAgICBpZiAodGhpcy5faXNTaG93bikge1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0tFWURPV05fRElTTUlTUywgZXZlbnQgPT4ge1xuICAgICAgICBpZiAodGhpcy5fY29uZmlnLmtleWJvYXJkICYmIGV2ZW50LmtleSA9PT0gRVNDQVBFX0tFWSkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICB0aGlzLmhpZGUoKVxuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9jb25maWcua2V5Ym9hcmQgJiYgZXZlbnQua2V5ID09PSBFU0NBUEVfS0VZKSB7XG4gICAgICAgICAgdGhpcy5fdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbigpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIEV2ZW50SGFuZGxlci5vZmYodGhpcy5fZWxlbWVudCwgRVZFTlRfS0VZRE9XTl9ESVNNSVNTKVxuICAgIH1cbiAgfVxuXG4gIF9zZXRSZXNpemVFdmVudCgpIHtcbiAgICBpZiAodGhpcy5faXNTaG93bikge1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKHdpbmRvdywgRVZFTlRfUkVTSVpFLCAoKSA9PiB0aGlzLl9hZGp1c3REaWFsb2coKSlcbiAgICB9IGVsc2Uge1xuICAgICAgRXZlbnRIYW5kbGVyLm9mZih3aW5kb3csIEVWRU5UX1JFU0laRSlcbiAgICB9XG4gIH1cblxuICBfaGlkZU1vZGFsKCkge1xuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIHRydWUpXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnKVxuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdyb2xlJylcbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZVxuICAgIHRoaXMuX2JhY2tkcm9wLmhpZGUoKCkgPT4ge1xuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfT1BFTilcbiAgICAgIHRoaXMuX3Jlc2V0QWRqdXN0bWVudHMoKVxuICAgICAgdGhpcy5fc2Nyb2xsQmFyLnJlc2V0KClcbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJRERFTilcbiAgICB9KVxuICB9XG5cbiAgX3Nob3dCYWNrZHJvcChjYWxsYmFjaykge1xuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9DTElDS19ESVNNSVNTLCBldmVudCA9PiB7XG4gICAgICBpZiAodGhpcy5faWdub3JlQmFja2Ryb3BDbGljaykge1xuICAgICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2VcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudC50YXJnZXQgIT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcuYmFja2Ryb3AgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5oaWRlKClcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fY29uZmlnLmJhY2tkcm9wID09PSAnc3RhdGljJykge1xuICAgICAgICB0aGlzLl90cmlnZ2VyQmFja2Ryb3BUcmFuc2l0aW9uKClcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5fYmFja2Ryb3Auc2hvdyhjYWxsYmFjaylcbiAgfVxuXG4gIF9pc0FuaW1hdGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0ZBREUpXG4gIH1cblxuICBfdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbigpIHtcbiAgICBjb25zdCBoaWRlRXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURFX1BSRVZFTlRFRClcbiAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHsgY2xhc3NMaXN0LCBzY3JvbGxIZWlnaHQsIHN0eWxlIH0gPSB0aGlzLl9lbGVtZW50XG4gICAgY29uc3QgaXNNb2RhbE92ZXJmbG93aW5nID0gc2Nyb2xsSGVpZ2h0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxuXG4gICAgLy8gcmV0dXJuIGlmIHRoZSBmb2xsb3dpbmcgYmFja2dyb3VuZCB0cmFuc2l0aW9uIGhhc24ndCB5ZXQgY29tcGxldGVkXG4gICAgaWYgKCghaXNNb2RhbE92ZXJmbG93aW5nICYmIHN0eWxlLm92ZXJmbG93WSA9PT0gJ2hpZGRlbicpIHx8IGNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NUQVRJQykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICghaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICBzdHlsZS5vdmVyZmxvd1kgPSAnaGlkZGVuJ1xuICAgIH1cblxuICAgIGNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TVEFUSUMpXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB7XG4gICAgICBjbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU1RBVElDKVxuICAgICAgaWYgKCFpc01vZGFsT3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgc3R5bGUub3ZlcmZsb3dZID0gJydcbiAgICAgICAgfSwgdGhpcy5fZGlhbG9nKVxuICAgICAgfVxuICAgIH0sIHRoaXMuX2RpYWxvZylcblxuICAgIHRoaXMuX2VsZW1lbnQuZm9jdXMoKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB0aGUgZm9sbG93aW5nIG1ldGhvZHMgYXJlIHVzZWQgdG8gaGFuZGxlIG92ZXJmbG93aW5nIG1vZGFsc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgX2FkanVzdERpYWxvZygpIHtcbiAgICBjb25zdCBpc01vZGFsT3ZlcmZsb3dpbmcgPSB0aGlzLl9lbGVtZW50LnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHRcbiAgICBjb25zdCBzY3JvbGxiYXJXaWR0aCA9IHRoaXMuX3Njcm9sbEJhci5nZXRXaWR0aCgpXG4gICAgY29uc3QgaXNCb2R5T3ZlcmZsb3dpbmcgPSBzY3JvbGxiYXJXaWR0aCA+IDBcblxuICAgIGlmICgoIWlzQm9keU92ZXJmbG93aW5nICYmIGlzTW9kYWxPdmVyZmxvd2luZyAmJiAhaXNSVEwoKSkgfHwgKGlzQm9keU92ZXJmbG93aW5nICYmICFpc01vZGFsT3ZlcmZsb3dpbmcgJiYgaXNSVEwoKSkpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSBgJHtzY3JvbGxiYXJXaWR0aH1weGBcbiAgICB9XG5cbiAgICBpZiAoKGlzQm9keU92ZXJmbG93aW5nICYmICFpc01vZGFsT3ZlcmZsb3dpbmcgJiYgIWlzUlRMKCkpIHx8ICghaXNCb2R5T3ZlcmZsb3dpbmcgJiYgaXNNb2RhbE92ZXJmbG93aW5nICYmIGlzUlRMKCkpKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IGAke3Njcm9sbGJhcldpZHRofXB4YFxuICAgIH1cbiAgfVxuXG4gIF9yZXNldEFkanVzdG1lbnRzKCkge1xuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSAnJ1xuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gJydcbiAgfVxuXG4gIC8vIFN0YXRpY1xuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnLCByZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gTW9kYWwuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBjb25maWcpXG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYClcbiAgICAgIH1cblxuICAgICAgZGF0YVtjb25maWddKHJlbGF0ZWRUYXJnZXQpXG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEksIFNFTEVDVE9SX0RBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgY29uc3QgdGFyZ2V0ID0gZ2V0RWxlbWVudEZyb21TZWxlY3Rvcih0aGlzKVxuXG4gIGlmIChbJ0EnLCAnQVJFQSddLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cblxuICBFdmVudEhhbmRsZXIub25lKHRhcmdldCwgRVZFTlRfU0hPVywgc2hvd0V2ZW50ID0+IHtcbiAgICBpZiAoc2hvd0V2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIC8vIG9ubHkgcmVnaXN0ZXIgZm9jdXMgcmVzdG9yZXIgaWYgbW9kYWwgd2lsbCBhY3R1YWxseSBnZXQgc2hvd25cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIEV2ZW50SGFuZGxlci5vbmUodGFyZ2V0LCBFVkVOVF9ISURERU4sICgpID0+IHtcbiAgICAgIGlmIChpc1Zpc2libGUodGhpcykpIHtcbiAgICAgICAgdGhpcy5mb2N1cygpXG4gICAgICB9XG4gICAgfSlcbiAgfSlcblxuICAvLyBhdm9pZCBjb25mbGljdCB3aGVuIGNsaWNraW5nIG1vZGRhbCB0b2dnbGVyIHdoaWxlIGFub3RoZXIgb25lIGlzIG9wZW5cbiAgY29uc3QgYWxsUmVhZHlPcGVuID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShPUEVOX1NFTEVDVE9SKVxuICBpZiAoYWxsUmVhZHlPcGVuKSB7XG4gICAgTW9kYWwuZ2V0SW5zdGFuY2UoYWxsUmVhZHlPcGVuKS5oaWRlKClcbiAgfVxuXG4gIGNvbnN0IGRhdGEgPSBNb2RhbC5nZXRPckNyZWF0ZUluc3RhbmNlKHRhcmdldClcblxuICBkYXRhLnRvZ2dsZSh0aGlzKVxufSlcblxuZW5hYmxlRGlzbWlzc1RyaWdnZXIoTW9kYWwpXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogYWRkIC5Nb2RhbCB0byBqUXVlcnkgb25seSBpZiBqUXVlcnkgaXMgcHJlc2VudFxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihNb2RhbClcblxuZXhwb3J0IGRlZmF1bHQgTW9kYWxcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogb2ZmY2FudmFzLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IHtcbiAgZGVmaW5lSlF1ZXJ5UGx1Z2luLFxuICBnZXRFbGVtZW50RnJvbVNlbGVjdG9yLFxuICBpc0Rpc2FibGVkLFxuICBpc1Zpc2libGUsXG4gIHR5cGVDaGVja0NvbmZpZ1xufSBmcm9tICcuL3V0aWwvaW5kZXgnXG5pbXBvcnQgU2Nyb2xsQmFySGVscGVyIGZyb20gJy4vdXRpbC9zY3JvbGxiYXInXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4vZG9tL2V2ZW50LWhhbmRsZXInXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuL2Jhc2UtY29tcG9uZW50J1xuaW1wb3J0IFNlbGVjdG9yRW5naW5lIGZyb20gJy4vZG9tL3NlbGVjdG9yLWVuZ2luZSdcbmltcG9ydCBNYW5pcHVsYXRvciBmcm9tICcuL2RvbS9tYW5pcHVsYXRvcidcbmltcG9ydCBCYWNrZHJvcCBmcm9tICcuL3V0aWwvYmFja2Ryb3AnXG5pbXBvcnQgRm9jdXNUcmFwIGZyb20gJy4vdXRpbC9mb2N1c3RyYXAnXG5pbXBvcnQgeyBlbmFibGVEaXNtaXNzVHJpZ2dlciB9IGZyb20gJy4vdXRpbC9jb21wb25lbnQtZnVuY3Rpb25zJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FID0gJ29mZmNhbnZhcydcbmNvbnN0IERBVEFfS0VZID0gJ2JzLm9mZmNhbnZhcydcbmNvbnN0IEVWRU5UX0tFWSA9IGAuJHtEQVRBX0tFWX1gXG5jb25zdCBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJ1xuY29uc3QgRVZFTlRfTE9BRF9EQVRBX0FQSSA9IGBsb2FkJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YFxuY29uc3QgRVNDQVBFX0tFWSA9ICdFc2NhcGUnXG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIGJhY2tkcm9wOiB0cnVlLFxuICBrZXlib2FyZDogdHJ1ZSxcbiAgc2Nyb2xsOiBmYWxzZVxufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgYmFja2Ryb3A6ICdib29sZWFuJyxcbiAga2V5Ym9hcmQ6ICdib29sZWFuJyxcbiAgc2Nyb2xsOiAnYm9vbGVhbidcbn1cblxuY29uc3QgQ0xBU1NfTkFNRV9TSE9XID0gJ3Nob3cnXG5jb25zdCBDTEFTU19OQU1FX0JBQ0tEUk9QID0gJ29mZmNhbnZhcy1iYWNrZHJvcCdcbmNvbnN0IE9QRU5fU0VMRUNUT1IgPSAnLm9mZmNhbnZhcy5zaG93J1xuXG5jb25zdCBFVkVOVF9TSE9XID0gYHNob3cke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9TSE9XTiA9IGBzaG93biR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0hJREUgPSBgaGlkZSR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX0hJRERFTiA9IGBoaWRkZW4ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9DTElDS19EQVRBX0FQSSA9IGBjbGljayR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcbmNvbnN0IEVWRU5UX0tFWURPV05fRElTTUlTUyA9IGBrZXlkb3duLmRpc21pc3Mke0VWRU5UX0tFWX1gXG5cbmNvbnN0IFNFTEVDVE9SX0RBVEFfVE9HR0xFID0gJ1tkYXRhLWJzLXRvZ2dsZT1cIm9mZmNhbnZhc1wiXSdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIE9mZmNhbnZhcyBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICBzdXBlcihlbGVtZW50KVxuXG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZylcbiAgICB0aGlzLl9pc1Nob3duID0gZmFsc2VcbiAgICB0aGlzLl9iYWNrZHJvcCA9IHRoaXMuX2luaXRpYWxpemVCYWNrRHJvcCgpXG4gICAgdGhpcy5fZm9jdXN0cmFwID0gdGhpcy5faW5pdGlhbGl6ZUZvY3VzVHJhcCgpXG4gICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKVxuICB9XG5cbiAgLy8gR2V0dGVyc1xuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRVxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICAvLyBQdWJsaWNcblxuICB0b2dnbGUocmVsYXRlZFRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLl9pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3cocmVsYXRlZFRhcmdldClcbiAgfVxuXG4gIHNob3cocmVsYXRlZFRhcmdldCkge1xuICAgIGlmICh0aGlzLl9pc1Nob3duKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBzaG93RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XLCB7IHJlbGF0ZWRUYXJnZXQgfSlcblxuICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5faXNTaG93biA9IHRydWVcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSdcblxuICAgIHRoaXMuX2JhY2tkcm9wLnNob3coKVxuXG4gICAgaWYgKCF0aGlzLl9jb25maWcuc2Nyb2xsKSB7XG4gICAgICBuZXcgU2Nyb2xsQmFySGVscGVyKCkuaGlkZSgpXG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJylcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcsIHRydWUpXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnZGlhbG9nJylcbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XKVxuXG4gICAgY29uc3QgY29tcGxldGVDYWxsQmFjayA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5fY29uZmlnLnNjcm9sbCkge1xuICAgICAgICB0aGlzLl9mb2N1c3RyYXAuYWN0aXZhdGUoKVxuICAgICAgfVxuXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XTiwgeyByZWxhdGVkVGFyZ2V0IH0pXG4gICAgfVxuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZUNhbGxCYWNrLCB0aGlzLl9lbGVtZW50LCB0cnVlKVxuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBpZiAoIXRoaXMuX2lzU2hvd24pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREUpXG5cbiAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuX2ZvY3VzdHJhcC5kZWFjdGl2YXRlKClcbiAgICB0aGlzLl9lbGVtZW50LmJsdXIoKVxuICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZVxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpXG4gICAgdGhpcy5fYmFja2Ryb3AuaGlkZSgpXG5cbiAgICBjb25zdCBjb21wbGV0ZUNhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdHJ1ZSlcbiAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLW1vZGFsJylcbiAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdyb2xlJylcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nXG5cbiAgICAgIGlmICghdGhpcy5fY29uZmlnLnNjcm9sbCkge1xuICAgICAgICBuZXcgU2Nyb2xsQmFySGVscGVyKCkucmVzZXQoKVxuICAgICAgfVxuXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURERU4pXG4gICAgfVxuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZUNhbGxiYWNrLCB0aGlzLl9lbGVtZW50LCB0cnVlKVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICB0aGlzLl9iYWNrZHJvcC5kaXNwb3NlKClcbiAgICB0aGlzLl9mb2N1c3RyYXAuZGVhY3RpdmF0ZSgpXG4gICAgc3VwZXIuZGlzcG9zZSgpXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7XG4gICAgICAuLi5EZWZhdWx0LFxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiB7fSlcbiAgICB9XG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX2luaXRpYWxpemVCYWNrRHJvcCgpIHtcbiAgICByZXR1cm4gbmV3IEJhY2tkcm9wKHtcbiAgICAgIGNsYXNzTmFtZTogQ0xBU1NfTkFNRV9CQUNLRFJPUCxcbiAgICAgIGlzVmlzaWJsZTogdGhpcy5fY29uZmlnLmJhY2tkcm9wLFxuICAgICAgaXNBbmltYXRlZDogdHJ1ZSxcbiAgICAgIHJvb3RFbGVtZW50OiB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUsXG4gICAgICBjbGlja0NhbGxiYWNrOiAoKSA9PiB0aGlzLmhpZGUoKVxuICAgIH0pXG4gIH1cblxuICBfaW5pdGlhbGl6ZUZvY3VzVHJhcCgpIHtcbiAgICByZXR1cm4gbmV3IEZvY3VzVHJhcCh7XG4gICAgICB0cmFwRWxlbWVudDogdGhpcy5fZWxlbWVudFxuICAgIH0pXG4gIH1cblxuICBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0tFWURPV05fRElTTUlTUywgZXZlbnQgPT4ge1xuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5rZXlib2FyZCAmJiBldmVudC5rZXkgPT09IEVTQ0FQRV9LRVkpIHtcbiAgICAgICAgdGhpcy5oaWRlKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLy8gU3RhdGljXG5cbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBPZmZjYW52YXMuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBjb25maWcpXG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGFbY29uZmlnXSA9PT0gdW5kZWZpbmVkIHx8IGNvbmZpZy5zdGFydHNXaXRoKCdfJykgfHwgY29uZmlnID09PSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYClcbiAgICAgIH1cblxuICAgICAgZGF0YVtjb25maWddKHRoaXMpXG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEksIFNFTEVDVE9SX0RBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgY29uc3QgdGFyZ2V0ID0gZ2V0RWxlbWVudEZyb21TZWxlY3Rvcih0aGlzKVxuXG4gIGlmIChbJ0EnLCAnQVJFQSddLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cblxuICBpZiAoaXNEaXNhYmxlZCh0aGlzKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgRXZlbnRIYW5kbGVyLm9uZSh0YXJnZXQsIEVWRU5UX0hJRERFTiwgKCkgPT4ge1xuICAgIC8vIGZvY3VzIG9uIHRyaWdnZXIgd2hlbiBpdCBpcyBjbG9zZWRcbiAgICBpZiAoaXNWaXNpYmxlKHRoaXMpKSB7XG4gICAgICB0aGlzLmZvY3VzKClcbiAgICB9XG4gIH0pXG5cbiAgLy8gYXZvaWQgY29uZmxpY3Qgd2hlbiBjbGlja2luZyBhIHRvZ2dsZXIgb2YgYW4gb2ZmY2FudmFzLCB3aGlsZSBhbm90aGVyIGlzIG9wZW5cbiAgY29uc3QgYWxsUmVhZHlPcGVuID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShPUEVOX1NFTEVDVE9SKVxuICBpZiAoYWxsUmVhZHlPcGVuICYmIGFsbFJlYWR5T3BlbiAhPT0gdGFyZ2V0KSB7XG4gICAgT2ZmY2FudmFzLmdldEluc3RhbmNlKGFsbFJlYWR5T3BlbikuaGlkZSgpXG4gIH1cblxuICBjb25zdCBkYXRhID0gT2ZmY2FudmFzLmdldE9yQ3JlYXRlSW5zdGFuY2UodGFyZ2V0KVxuICBkYXRhLnRvZ2dsZSh0aGlzKVxufSlcblxuRXZlbnRIYW5kbGVyLm9uKHdpbmRvdywgRVZFTlRfTE9BRF9EQVRBX0FQSSwgKCkgPT5cbiAgU2VsZWN0b3JFbmdpbmUuZmluZChPUEVOX1NFTEVDVE9SKS5mb3JFYWNoKGVsID0+IE9mZmNhbnZhcy5nZXRPckNyZWF0ZUluc3RhbmNlKGVsKS5zaG93KCkpXG4pXG5cbmVuYWJsZURpc21pc3NUcmlnZ2VyKE9mZmNhbnZhcylcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihPZmZjYW52YXMpXG5cbmV4cG9ydCBkZWZhdWx0IE9mZmNhbnZhc1xuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4xLjMpOiB1dGlsL3Nhbml0aXplci5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IHVyaUF0dHJpYnV0ZXMgPSBuZXcgU2V0KFtcbiAgJ2JhY2tncm91bmQnLFxuICAnY2l0ZScsXG4gICdocmVmJyxcbiAgJ2l0ZW10eXBlJyxcbiAgJ2xvbmdkZXNjJyxcbiAgJ3Bvc3RlcicsXG4gICdzcmMnLFxuICAneGxpbms6aHJlZidcbl0pXG5cbmNvbnN0IEFSSUFfQVRUUklCVVRFX1BBVFRFUk4gPSAvXmFyaWEtW1xcdy1dKiQvaVxuXG4vKipcbiAqIEEgcGF0dGVybiB0aGF0IHJlY29nbml6ZXMgYSBjb21tb25seSB1c2VmdWwgc3Vic2V0IG9mIFVSTHMgdGhhdCBhcmUgc2FmZS5cbiAqXG4gKiBTaG91dG91dCB0byBBbmd1bGFyIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi8xMi4yLngvcGFja2FnZXMvY29yZS9zcmMvc2FuaXRpemF0aW9uL3VybF9zYW5pdGl6ZXIudHNcbiAqL1xuY29uc3QgU0FGRV9VUkxfUEFUVEVSTiA9IC9eKD86KD86aHR0cHM/fG1haWx0b3xmdHB8dGVsfGZpbGV8c21zKTp8W14jJi86P10qKD86WyMvP118JCkpL2lcblxuLyoqXG4gKiBBIHBhdHRlcm4gdGhhdCBtYXRjaGVzIHNhZmUgZGF0YSBVUkxzLiBPbmx5IG1hdGNoZXMgaW1hZ2UsIHZpZGVvIGFuZCBhdWRpbyB0eXBlcy5cbiAqXG4gKiBTaG91dG91dCB0byBBbmd1bGFyIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi8xMi4yLngvcGFja2FnZXMvY29yZS9zcmMvc2FuaXRpemF0aW9uL3VybF9zYW5pdGl6ZXIudHNcbiAqL1xuY29uc3QgREFUQV9VUkxfUEFUVEVSTiA9IC9eZGF0YTooPzppbWFnZVxcLyg/OmJtcHxnaWZ8anBlZ3xqcGd8cG5nfHRpZmZ8d2VicCl8dmlkZW9cXC8oPzptcGVnfG1wNHxvZ2d8d2VibSl8YXVkaW9cXC8oPzptcDN8b2dhfG9nZ3xvcHVzKSk7YmFzZTY0LFtcXGQrL2Etel0rPSokL2lcblxuY29uc3QgYWxsb3dlZEF0dHJpYnV0ZSA9IChhdHRyaWJ1dGUsIGFsbG93ZWRBdHRyaWJ1dGVMaXN0KSA9PiB7XG4gIGNvbnN0IGF0dHJpYnV0ZU5hbWUgPSBhdHRyaWJ1dGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKVxuXG4gIGlmIChhbGxvd2VkQXR0cmlidXRlTGlzdC5pbmNsdWRlcyhhdHRyaWJ1dGVOYW1lKSkge1xuICAgIGlmICh1cmlBdHRyaWJ1dGVzLmhhcyhhdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgcmV0dXJuIEJvb2xlYW4oU0FGRV9VUkxfUEFUVEVSTi50ZXN0KGF0dHJpYnV0ZS5ub2RlVmFsdWUpIHx8IERBVEFfVVJMX1BBVFRFUk4udGVzdChhdHRyaWJ1dGUubm9kZVZhbHVlKSlcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgY29uc3QgcmVnRXhwID0gYWxsb3dlZEF0dHJpYnV0ZUxpc3QuZmlsdGVyKGF0dHJpYnV0ZVJlZ2V4ID0+IGF0dHJpYnV0ZVJlZ2V4IGluc3RhbmNlb2YgUmVnRXhwKVxuXG4gIC8vIENoZWNrIGlmIGEgcmVndWxhciBleHByZXNzaW9uIHZhbGlkYXRlcyB0aGUgYXR0cmlidXRlLlxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gcmVnRXhwLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKHJlZ0V4cFtpXS50ZXN0KGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZVxufVxuXG5leHBvcnQgY29uc3QgRGVmYXVsdEFsbG93bGlzdCA9IHtcbiAgLy8gR2xvYmFsIGF0dHJpYnV0ZXMgYWxsb3dlZCBvbiBhbnkgc3VwcGxpZWQgZWxlbWVudCBiZWxvdy5cbiAgJyonOiBbJ2NsYXNzJywgJ2RpcicsICdpZCcsICdsYW5nJywgJ3JvbGUnLCBBUklBX0FUVFJJQlVURV9QQVRURVJOXSxcbiAgYTogWyd0YXJnZXQnLCAnaHJlZicsICd0aXRsZScsICdyZWwnXSxcbiAgYXJlYTogW10sXG4gIGI6IFtdLFxuICBicjogW10sXG4gIGNvbDogW10sXG4gIGNvZGU6IFtdLFxuICBkaXY6IFtdLFxuICBlbTogW10sXG4gIGhyOiBbXSxcbiAgaDE6IFtdLFxuICBoMjogW10sXG4gIGgzOiBbXSxcbiAgaDQ6IFtdLFxuICBoNTogW10sXG4gIGg2OiBbXSxcbiAgaTogW10sXG4gIGltZzogWydzcmMnLCAnc3Jjc2V0JywgJ2FsdCcsICd0aXRsZScsICd3aWR0aCcsICdoZWlnaHQnXSxcbiAgbGk6IFtdLFxuICBvbDogW10sXG4gIHA6IFtdLFxuICBwcmU6IFtdLFxuICBzOiBbXSxcbiAgc21hbGw6IFtdLFxuICBzcGFuOiBbXSxcbiAgc3ViOiBbXSxcbiAgc3VwOiBbXSxcbiAgc3Ryb25nOiBbXSxcbiAgdTogW10sXG4gIHVsOiBbXVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2FuaXRpemVIdG1sKHVuc2FmZUh0bWwsIGFsbG93TGlzdCwgc2FuaXRpemVGbikge1xuICBpZiAoIXVuc2FmZUh0bWwubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHVuc2FmZUh0bWxcbiAgfVxuXG4gIGlmIChzYW5pdGl6ZUZuICYmIHR5cGVvZiBzYW5pdGl6ZUZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHNhbml0aXplRm4odW5zYWZlSHRtbClcbiAgfVxuXG4gIGNvbnN0IGRvbVBhcnNlciA9IG5ldyB3aW5kb3cuRE9NUGFyc2VyKClcbiAgY29uc3QgY3JlYXRlZERvY3VtZW50ID0gZG9tUGFyc2VyLnBhcnNlRnJvbVN0cmluZyh1bnNhZmVIdG1sLCAndGV4dC9odG1sJylcbiAgY29uc3QgZWxlbWVudHMgPSBbXS5jb25jYXQoLi4uY3JlYXRlZERvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbCgnKicpKVxuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1tpXVxuICAgIGNvbnN0IGVsZW1lbnROYW1lID0gZWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXG5cbiAgICBpZiAoIU9iamVjdC5rZXlzKGFsbG93TGlzdCkuaW5jbHVkZXMoZWxlbWVudE5hbWUpKSB7XG4gICAgICBlbGVtZW50LnJlbW92ZSgpXG5cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgY29uc3QgYXR0cmlidXRlTGlzdCA9IFtdLmNvbmNhdCguLi5lbGVtZW50LmF0dHJpYnV0ZXMpXG4gICAgY29uc3QgYWxsb3dlZEF0dHJpYnV0ZXMgPSBbXS5jb25jYXQoYWxsb3dMaXN0WycqJ10gfHwgW10sIGFsbG93TGlzdFtlbGVtZW50TmFtZV0gfHwgW10pXG5cbiAgICBhdHRyaWJ1dGVMaXN0LmZvckVhY2goYXR0cmlidXRlID0+IHtcbiAgICAgIGlmICghYWxsb3dlZEF0dHJpYnV0ZShhdHRyaWJ1dGUsIGFsbG93ZWRBdHRyaWJ1dGVzKSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUubm9kZU5hbWUpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVkRG9jdW1lbnQuYm9keS5pbm5lckhUTUxcbn1cbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogdG9vbHRpcC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCAqIGFzIFBvcHBlciBmcm9tICdAcG9wcGVyanMvY29yZSdcblxuaW1wb3J0IHtcbiAgZGVmaW5lSlF1ZXJ5UGx1Z2luLFxuICBmaW5kU2hhZG93Um9vdCxcbiAgZ2V0RWxlbWVudCxcbiAgZ2V0VUlELFxuICBpc0VsZW1lbnQsXG4gIGlzUlRMLFxuICBub29wLFxuICB0eXBlQ2hlY2tDb25maWdcbn0gZnJvbSAnLi91dGlsL2luZGV4J1xuaW1wb3J0IHsgRGVmYXVsdEFsbG93bGlzdCwgc2FuaXRpemVIdG1sIH0gZnJvbSAnLi91dGlsL3Nhbml0aXplcidcbmltcG9ydCBEYXRhIGZyb20gJy4vZG9tL2RhdGEnXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4vZG9tL2V2ZW50LWhhbmRsZXInXG5pbXBvcnQgTWFuaXB1bGF0b3IgZnJvbSAnLi9kb20vbWFuaXB1bGF0b3InXG5pbXBvcnQgU2VsZWN0b3JFbmdpbmUgZnJvbSAnLi9kb20vc2VsZWN0b3ItZW5naW5lJ1xuaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSAnLi9iYXNlLWNvbXBvbmVudCdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSA9ICd0b29sdGlwJ1xuY29uc3QgREFUQV9LRVkgPSAnYnMudG9vbHRpcCdcbmNvbnN0IEVWRU5UX0tFWSA9IGAuJHtEQVRBX0tFWX1gXG5jb25zdCBDTEFTU19QUkVGSVggPSAnYnMtdG9vbHRpcCdcbmNvbnN0IERJU0FMTE9XRURfQVRUUklCVVRFUyA9IG5ldyBTZXQoWydzYW5pdGl6ZScsICdhbGxvd0xpc3QnLCAnc2FuaXRpemVGbiddKVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgYW5pbWF0aW9uOiAnYm9vbGVhbicsXG4gIHRlbXBsYXRlOiAnc3RyaW5nJyxcbiAgdGl0bGU6ICcoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pJyxcbiAgdHJpZ2dlcjogJ3N0cmluZycsXG4gIGRlbGF5OiAnKG51bWJlcnxvYmplY3QpJyxcbiAgaHRtbDogJ2Jvb2xlYW4nLFxuICBzZWxlY3RvcjogJyhzdHJpbmd8Ym9vbGVhbiknLFxuICBwbGFjZW1lbnQ6ICcoc3RyaW5nfGZ1bmN0aW9uKScsXG4gIG9mZnNldDogJyhhcnJheXxzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgY29udGFpbmVyOiAnKHN0cmluZ3xlbGVtZW50fGJvb2xlYW4pJyxcbiAgZmFsbGJhY2tQbGFjZW1lbnRzOiAnYXJyYXknLFxuICBib3VuZGFyeTogJyhzdHJpbmd8ZWxlbWVudCknLFxuICBjdXN0b21DbGFzczogJyhzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgc2FuaXRpemU6ICdib29sZWFuJyxcbiAgc2FuaXRpemVGbjogJyhudWxsfGZ1bmN0aW9uKScsXG4gIGFsbG93TGlzdDogJ29iamVjdCcsXG4gIHBvcHBlckNvbmZpZzogJyhudWxsfG9iamVjdHxmdW5jdGlvbiknXG59XG5cbmNvbnN0IEF0dGFjaG1lbnRNYXAgPSB7XG4gIEFVVE86ICdhdXRvJyxcbiAgVE9QOiAndG9wJyxcbiAgUklHSFQ6IGlzUlRMKCkgPyAnbGVmdCcgOiAncmlnaHQnLFxuICBCT1RUT006ICdib3R0b20nLFxuICBMRUZUOiBpc1JUTCgpID8gJ3JpZ2h0JyA6ICdsZWZ0J1xufVxuXG5jb25zdCBEZWZhdWx0ID0ge1xuICBhbmltYXRpb246IHRydWUsXG4gIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInRvb2x0aXBcIiByb2xlPVwidG9vbHRpcFwiPicgK1xuICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInRvb2x0aXAtYXJyb3dcIj48L2Rpdj4nICtcbiAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+JyArXG4gICAgICAgICAgICAnPC9kaXY+JyxcbiAgdHJpZ2dlcjogJ2hvdmVyIGZvY3VzJyxcbiAgdGl0bGU6ICcnLFxuICBkZWxheTogMCxcbiAgaHRtbDogZmFsc2UsXG4gIHNlbGVjdG9yOiBmYWxzZSxcbiAgcGxhY2VtZW50OiAndG9wJyxcbiAgb2Zmc2V0OiBbMCwgMF0sXG4gIGNvbnRhaW5lcjogZmFsc2UsXG4gIGZhbGxiYWNrUGxhY2VtZW50czogWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXSxcbiAgYm91bmRhcnk6ICdjbGlwcGluZ1BhcmVudHMnLFxuICBjdXN0b21DbGFzczogJycsXG4gIHNhbml0aXplOiB0cnVlLFxuICBzYW5pdGl6ZUZuOiBudWxsLFxuICBhbGxvd0xpc3Q6IERlZmF1bHRBbGxvd2xpc3QsXG4gIHBvcHBlckNvbmZpZzogbnVsbFxufVxuXG5jb25zdCBFdmVudCA9IHtcbiAgSElERTogYGhpZGUke0VWRU5UX0tFWX1gLFxuICBISURERU46IGBoaWRkZW4ke0VWRU5UX0tFWX1gLFxuICBTSE9XOiBgc2hvdyR7RVZFTlRfS0VZfWAsXG4gIFNIT1dOOiBgc2hvd24ke0VWRU5UX0tFWX1gLFxuICBJTlNFUlRFRDogYGluc2VydGVkJHtFVkVOVF9LRVl9YCxcbiAgQ0xJQ0s6IGBjbGljayR7RVZFTlRfS0VZfWAsXG4gIEZPQ1VTSU46IGBmb2N1c2luJHtFVkVOVF9LRVl9YCxcbiAgRk9DVVNPVVQ6IGBmb2N1c291dCR7RVZFTlRfS0VZfWAsXG4gIE1PVVNFRU5URVI6IGBtb3VzZWVudGVyJHtFVkVOVF9LRVl9YCxcbiAgTU9VU0VMRUFWRTogYG1vdXNlbGVhdmUke0VWRU5UX0tFWX1gXG59XG5cbmNvbnN0IENMQVNTX05BTUVfRkFERSA9ICdmYWRlJ1xuY29uc3QgQ0xBU1NfTkFNRV9NT0RBTCA9ICdtb2RhbCdcbmNvbnN0IENMQVNTX05BTUVfU0hPVyA9ICdzaG93J1xuXG5jb25zdCBIT1ZFUl9TVEFURV9TSE9XID0gJ3Nob3cnXG5jb25zdCBIT1ZFUl9TVEFURV9PVVQgPSAnb3V0J1xuXG5jb25zdCBTRUxFQ1RPUl9UT09MVElQX0lOTkVSID0gJy50b29sdGlwLWlubmVyJ1xuY29uc3QgU0VMRUNUT1JfTU9EQUwgPSBgLiR7Q0xBU1NfTkFNRV9NT0RBTH1gXG5cbmNvbnN0IEVWRU5UX01PREFMX0hJREUgPSAnaGlkZS5icy5tb2RhbCdcblxuY29uc3QgVFJJR0dFUl9IT1ZFUiA9ICdob3ZlcidcbmNvbnN0IFRSSUdHRVJfRk9DVVMgPSAnZm9jdXMnXG5jb25zdCBUUklHR0VSX0NMSUNLID0gJ2NsaWNrJ1xuY29uc3QgVFJJR0dFUl9NQU5VQUwgPSAnbWFudWFsJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgVG9vbHRpcCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICBpZiAodHlwZW9mIFBvcHBlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgdG9vbHRpcHMgcmVxdWlyZSBQb3BwZXIgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZyknKVxuICAgIH1cblxuICAgIHN1cGVyKGVsZW1lbnQpXG5cbiAgICAvLyBwcml2YXRlXG4gICAgdGhpcy5faXNFbmFibGVkID0gdHJ1ZVxuICAgIHRoaXMuX3RpbWVvdXQgPSAwXG4gICAgdGhpcy5faG92ZXJTdGF0ZSA9ICcnXG4gICAgdGhpcy5fYWN0aXZlVHJpZ2dlciA9IHt9XG4gICAgdGhpcy5fcG9wcGVyID0gbnVsbFxuXG4gICAgLy8gUHJvdGVjdGVkXG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZylcbiAgICB0aGlzLnRpcCA9IG51bGxcblxuICAgIHRoaXMuX3NldExpc3RlbmVycygpXG4gIH1cblxuICAvLyBHZXR0ZXJzXG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUVcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRXZlbnQoKSB7XG4gICAgcmV0dXJuIEV2ZW50XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgLy8gUHVibGljXG5cbiAgZW5hYmxlKCkge1xuICAgIHRoaXMuX2lzRW5hYmxlZCA9IHRydWVcbiAgfVxuXG4gIGRpc2FibGUoKSB7XG4gICAgdGhpcy5faXNFbmFibGVkID0gZmFsc2VcbiAgfVxuXG4gIHRvZ2dsZUVuYWJsZWQoKSB7XG4gICAgdGhpcy5faXNFbmFibGVkID0gIXRoaXMuX2lzRW5hYmxlZFxuICB9XG5cbiAgdG9nZ2xlKGV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLl9pc0VuYWJsZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChldmVudCkge1xuICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldChldmVudClcblxuICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlci5jbGljayA9ICFjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyLmNsaWNrXG5cbiAgICAgIGlmIChjb250ZXh0Ll9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkpIHtcbiAgICAgICAgY29udGV4dC5fZW50ZXIobnVsbCwgY29udGV4dClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRleHQuX2xlYXZlKG51bGwsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmdldFRpcEVsZW1lbnQoKS5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKSkge1xuICAgICAgICB0aGlzLl9sZWF2ZShudWxsLCB0aGlzKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdGhpcy5fZW50ZXIobnVsbCwgdGhpcylcbiAgICB9XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KVxuXG4gICAgRXZlbnRIYW5kbGVyLm9mZih0aGlzLl9lbGVtZW50LmNsb3Nlc3QoU0VMRUNUT1JfTU9EQUwpLCBFVkVOVF9NT0RBTF9ISURFLCB0aGlzLl9oaWRlTW9kYWxIYW5kbGVyKVxuXG4gICAgaWYgKHRoaXMudGlwKSB7XG4gICAgICB0aGlzLnRpcC5yZW1vdmUoKVxuICAgIH1cblxuICAgIHRoaXMuX2Rpc3Bvc2VQb3BwZXIoKVxuICAgIHN1cGVyLmRpc3Bvc2UoKVxuICB9XG5cbiAgc2hvdygpIHtcbiAgICBpZiAodGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHVzZSBzaG93IG9uIHZpc2libGUgZWxlbWVudHMnKVxuICAgIH1cblxuICAgIGlmICghKHRoaXMuaXNXaXRoQ29udGVudCgpICYmIHRoaXMuX2lzRW5hYmxlZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHNob3dFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuRXZlbnQuU0hPVylcbiAgICBjb25zdCBzaGFkb3dSb290ID0gZmluZFNoYWRvd1Jvb3QodGhpcy5fZWxlbWVudClcbiAgICBjb25zdCBpc0luVGhlRG9tID0gc2hhZG93Um9vdCA9PT0gbnVsbCA/XG4gICAgICB0aGlzLl9lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKHRoaXMuX2VsZW1lbnQpIDpcbiAgICAgIHNoYWRvd1Jvb3QuY29udGFpbnModGhpcy5fZWxlbWVudClcblxuICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCB8fCAhaXNJblRoZURvbSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gQSB0cmljayB0byByZWNyZWF0ZSBhIHRvb2x0aXAgaW4gY2FzZSBhIG5ldyB0aXRsZSBpcyBnaXZlbiBieSB1c2luZyB0aGUgTk9UIGRvY3VtZW50ZWQgYGRhdGEtYnMtb3JpZ2luYWwtdGl0bGVgXG4gICAgLy8gVGhpcyB3aWxsIGJlIHJlbW92ZWQgbGF0ZXIgaW4gZmF2b3Igb2YgYSBgc2V0Q29udGVudGAgbWV0aG9kXG4gICAgaWYgKHRoaXMuY29uc3RydWN0b3IuTkFNRSA9PT0gJ3Rvb2x0aXAnICYmIHRoaXMudGlwICYmIHRoaXMuZ2V0VGl0bGUoKSAhPT0gdGhpcy50aXAucXVlcnlTZWxlY3RvcihTRUxFQ1RPUl9UT09MVElQX0lOTkVSKS5pbm5lckhUTUwpIHtcbiAgICAgIHRoaXMuX2Rpc3Bvc2VQb3BwZXIoKVxuICAgICAgdGhpcy50aXAucmVtb3ZlKClcbiAgICAgIHRoaXMudGlwID0gbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpXG4gICAgY29uc3QgdGlwSWQgPSBnZXRVSUQodGhpcy5jb25zdHJ1Y3Rvci5OQU1FKVxuXG4gICAgdGlwLnNldEF0dHJpYnV0ZSgnaWQnLCB0aXBJZClcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScsIHRpcElkKVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgIHRpcC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfRkFERSlcbiAgICB9XG5cbiAgICBjb25zdCBwbGFjZW1lbnQgPSB0eXBlb2YgdGhpcy5fY29uZmlnLnBsYWNlbWVudCA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgICB0aGlzLl9jb25maWcucGxhY2VtZW50LmNhbGwodGhpcywgdGlwLCB0aGlzLl9lbGVtZW50KSA6XG4gICAgICB0aGlzLl9jb25maWcucGxhY2VtZW50XG5cbiAgICBjb25zdCBhdHRhY2htZW50ID0gdGhpcy5fZ2V0QXR0YWNobWVudChwbGFjZW1lbnQpXG4gICAgdGhpcy5fYWRkQXR0YWNobWVudENsYXNzKGF0dGFjaG1lbnQpXG5cbiAgICBjb25zdCB7IGNvbnRhaW5lciB9ID0gdGhpcy5fY29uZmlnXG4gICAgRGF0YS5zZXQodGlwLCB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLCB0aGlzKVxuXG4gICAgaWYgKCF0aGlzLl9lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKHRoaXMudGlwKSkge1xuICAgICAgY29udGFpbmVyLmFwcGVuZCh0aXApXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LklOU0VSVEVEKVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcbiAgICAgIHRoaXMuX3BvcHBlci51cGRhdGUoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wb3BwZXIgPSBQb3BwZXIuY3JlYXRlUG9wcGVyKHRoaXMuX2VsZW1lbnQsIHRpcCwgdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKGF0dGFjaG1lbnQpKVxuICAgIH1cblxuICAgIHRpcC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVylcblxuICAgIGNvbnN0IGN1c3RvbUNsYXNzID0gdGhpcy5fcmVzb2x2ZVBvc3NpYmxlRnVuY3Rpb24odGhpcy5fY29uZmlnLmN1c3RvbUNsYXNzKVxuICAgIGlmIChjdXN0b21DbGFzcykge1xuICAgICAgdGlwLmNsYXNzTGlzdC5hZGQoLi4uY3VzdG9tQ2xhc3Muc3BsaXQoJyAnKSlcbiAgICB9XG5cbiAgICAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgYWRkIGV4dHJhXG4gICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB0byB0aGUgYm9keSdzIGltbWVkaWF0ZSBjaGlsZHJlbjtcbiAgICAvLyBvbmx5IG5lZWRlZCBiZWNhdXNlIG9mIGJyb2tlbiBldmVudCBkZWxlZ2F0aW9uIG9uIGlPU1xuICAgIC8vIGh0dHBzOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxNC8wMi9tb3VzZV9ldmVudF9idWIuaHRtbFxuICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIFtdLmNvbmNhdCguLi5kb2N1bWVudC5ib2R5LmNoaWxkcmVuKS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICBFdmVudEhhbmRsZXIub24oZWxlbWVudCwgJ21vdXNlb3ZlcicsIG5vb3ApXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgY29uc3QgcHJldkhvdmVyU3RhdGUgPSB0aGlzLl9ob3ZlclN0YXRlXG5cbiAgICAgIHRoaXMuX2hvdmVyU3RhdGUgPSBudWxsXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LlNIT1dOKVxuXG4gICAgICBpZiAocHJldkhvdmVyU3RhdGUgPT09IEhPVkVSX1NUQVRFX09VVCkge1xuICAgICAgICB0aGlzLl9sZWF2ZShudWxsLCB0aGlzKVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGlzQW5pbWF0ZWQgPSB0aGlzLnRpcC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9GQURFKVxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIHRoaXMudGlwLCBpc0FuaW1hdGVkKVxuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBpZiAoIXRoaXMuX3BvcHBlcikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KClcbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ob3ZlclN0YXRlICE9PSBIT1ZFUl9TVEFURV9TSE9XKSB7XG4gICAgICAgIHRpcC5yZW1vdmUoKVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9jbGVhblRpcENsYXNzKClcbiAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5JylcbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuRXZlbnQuSElEREVOKVxuXG4gICAgICB0aGlzLl9kaXNwb3NlUG9wcGVyKClcbiAgICB9XG5cbiAgICBjb25zdCBoaWRlRXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkhJREUpXG4gICAgaWYgKGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aXAuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpXG5cbiAgICAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYVxuICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgd2UgYWRkZWQgZm9yIGlPUyBzdXBwb3J0XG4gICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pXG4gICAgICAgIC5mb3JFYWNoKGVsZW1lbnQgPT4gRXZlbnRIYW5kbGVyLm9mZihlbGVtZW50LCAnbW91c2VvdmVyJywgbm9vcCkpXG4gICAgfVxuXG4gICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUUklHR0VSX0NMSUNLXSA9IGZhbHNlXG4gICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUUklHR0VSX0ZPQ1VTXSA9IGZhbHNlXG4gICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUUklHR0VSX0hPVkVSXSA9IGZhbHNlXG5cbiAgICBjb25zdCBpc0FuaW1hdGVkID0gdGhpcy50aXAuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSlcbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCB0aGlzLnRpcCwgaXNBbmltYXRlZClcbiAgICB0aGlzLl9ob3ZlclN0YXRlID0gJydcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl9wb3BwZXIudXBkYXRlKClcbiAgICB9XG4gIH1cblxuICAvLyBQcm90ZWN0ZWRcblxuICBpc1dpdGhDb250ZW50KCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMuZ2V0VGl0bGUoKSlcbiAgfVxuXG4gIGdldFRpcEVsZW1lbnQoKSB7XG4gICAgaWYgKHRoaXMudGlwKSB7XG4gICAgICByZXR1cm4gdGhpcy50aXBcbiAgICB9XG5cbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBlbGVtZW50LmlubmVySFRNTCA9IHRoaXMuX2NvbmZpZy50ZW1wbGF0ZVxuXG4gICAgY29uc3QgdGlwID0gZWxlbWVudC5jaGlsZHJlblswXVxuICAgIHRoaXMuc2V0Q29udGVudCh0aXApXG4gICAgdGlwLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9GQURFLCBDTEFTU19OQU1FX1NIT1cpXG5cbiAgICB0aGlzLnRpcCA9IHRpcFxuICAgIHJldHVybiB0aGlzLnRpcFxuICB9XG5cbiAgc2V0Q29udGVudCh0aXApIHtcbiAgICB0aGlzLl9zYW5pdGl6ZUFuZFNldENvbnRlbnQodGlwLCB0aGlzLmdldFRpdGxlKCksIFNFTEVDVE9SX1RPT0xUSVBfSU5ORVIpXG4gIH1cblxuICBfc2FuaXRpemVBbmRTZXRDb250ZW50KHRlbXBsYXRlLCBjb250ZW50LCBzZWxlY3Rvcikge1xuICAgIGNvbnN0IHRlbXBsYXRlRWxlbWVudCA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoc2VsZWN0b3IsIHRlbXBsYXRlKVxuXG4gICAgaWYgKCFjb250ZW50ICYmIHRlbXBsYXRlRWxlbWVudCkge1xuICAgICAgdGVtcGxhdGVFbGVtZW50LnJlbW92ZSgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3ZSB1c2UgYXBwZW5kIGZvciBodG1sIG9iamVjdHMgdG8gbWFpbnRhaW4ganMgZXZlbnRzXG4gICAgdGhpcy5zZXRFbGVtZW50Q29udGVudCh0ZW1wbGF0ZUVsZW1lbnQsIGNvbnRlbnQpXG4gIH1cblxuICBzZXRFbGVtZW50Q29udGVudChlbGVtZW50LCBjb250ZW50KSB7XG4gICAgaWYgKGVsZW1lbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc0VsZW1lbnQoY29udGVudCkpIHtcbiAgICAgIGNvbnRlbnQgPSBnZXRFbGVtZW50KGNvbnRlbnQpXG5cbiAgICAgIC8vIGNvbnRlbnQgaXMgYSBET00gbm9kZSBvciBhIGpRdWVyeVxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5odG1sKSB7XG4gICAgICAgIGlmIChjb250ZW50LnBhcmVudE5vZGUgIT09IGVsZW1lbnQpIHtcbiAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9ICcnXG4gICAgICAgICAgZWxlbWVudC5hcHBlbmQoY29udGVudClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IGNvbnRlbnQudGV4dENvbnRlbnRcbiAgICAgIH1cblxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5odG1sKSB7XG4gICAgICBpZiAodGhpcy5fY29uZmlnLnNhbml0aXplKSB7XG4gICAgICAgIGNvbnRlbnQgPSBzYW5pdGl6ZUh0bWwoY29udGVudCwgdGhpcy5fY29uZmlnLmFsbG93TGlzdCwgdGhpcy5fY29uZmlnLnNhbml0aXplRm4pXG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gY29udGVudFxuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gY29udGVudFxuICAgIH1cbiAgfVxuXG4gIGdldFRpdGxlKCkge1xuICAgIGNvbnN0IHRpdGxlID0gdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtb3JpZ2luYWwtdGl0bGUnKSB8fCB0aGlzLl9jb25maWcudGl0bGVcblxuICAgIHJldHVybiB0aGlzLl9yZXNvbHZlUG9zc2libGVGdW5jdGlvbih0aXRsZSlcbiAgfVxuXG4gIHVwZGF0ZUF0dGFjaG1lbnQoYXR0YWNobWVudCkge1xuICAgIGlmIChhdHRhY2htZW50ID09PSAncmlnaHQnKSB7XG4gICAgICByZXR1cm4gJ2VuZCdcbiAgICB9XG5cbiAgICBpZiAoYXR0YWNobWVudCA9PT0gJ2xlZnQnKSB7XG4gICAgICByZXR1cm4gJ3N0YXJ0J1xuICAgIH1cblxuICAgIHJldHVybiBhdHRhY2htZW50XG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldChldmVudCwgY29udGV4dCkge1xuICAgIHJldHVybiBjb250ZXh0IHx8IHRoaXMuY29uc3RydWN0b3IuZ2V0T3JDcmVhdGVJbnN0YW5jZShldmVudC5kZWxlZ2F0ZVRhcmdldCwgdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSlcbiAgfVxuXG4gIF9nZXRPZmZzZXQoKSB7XG4gICAgY29uc3QgeyBvZmZzZXQgfSA9IHRoaXMuX2NvbmZpZ1xuXG4gICAgaWYgKHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gb2Zmc2V0LnNwbGl0KCcsJykubWFwKHZhbCA9PiBOdW1iZXIucGFyc2VJbnQodmFsLCAxMCkpXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvZmZzZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBwb3BwZXJEYXRhID0+IG9mZnNldChwb3BwZXJEYXRhLCB0aGlzLl9lbGVtZW50KVxuICAgIH1cblxuICAgIHJldHVybiBvZmZzZXRcbiAgfVxuXG4gIF9yZXNvbHZlUG9zc2libGVGdW5jdGlvbihjb250ZW50KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBjb250ZW50ID09PSAnZnVuY3Rpb24nID8gY29udGVudC5jYWxsKHRoaXMuX2VsZW1lbnQpIDogY29udGVudFxuICB9XG5cbiAgX2dldFBvcHBlckNvbmZpZyhhdHRhY2htZW50KSB7XG4gICAgY29uc3QgZGVmYXVsdEJzUG9wcGVyQ29uZmlnID0ge1xuICAgICAgcGxhY2VtZW50OiBhdHRhY2htZW50LFxuICAgICAgbW9kaWZpZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnZmxpcCcsXG4gICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgZmFsbGJhY2tQbGFjZW1lbnRzOiB0aGlzLl9jb25maWcuZmFsbGJhY2tQbGFjZW1lbnRzXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ29mZnNldCcsXG4gICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLl9nZXRPZmZzZXQoKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdwcmV2ZW50T3ZlcmZsb3cnLFxuICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIGJvdW5kYXJ5OiB0aGlzLl9jb25maWcuYm91bmRhcnlcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnYXJyb3cnLFxuICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIGVsZW1lbnQ6IGAuJHt0aGlzLmNvbnN0cnVjdG9yLk5BTUV9LWFycm93YFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdvbkNoYW5nZScsXG4gICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICBwaGFzZTogJ2FmdGVyV3JpdGUnLFxuICAgICAgICAgIGZuOiBkYXRhID0+IHRoaXMuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZShkYXRhKVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgb25GaXJzdFVwZGF0ZTogZGF0YSA9PiB7XG4gICAgICAgIGlmIChkYXRhLm9wdGlvbnMucGxhY2VtZW50ICE9PSBkYXRhLnBsYWNlbWVudCkge1xuICAgICAgICAgIHRoaXMuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZShkYXRhKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmRlZmF1bHRCc1BvcHBlckNvbmZpZyxcbiAgICAgIC4uLih0eXBlb2YgdGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWcoZGVmYXVsdEJzUG9wcGVyQ29uZmlnKSA6IHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWcpXG4gICAgfVxuICB9XG5cbiAgX2FkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KSB7XG4gICAgdGhpcy5nZXRUaXBFbGVtZW50KCkuY2xhc3NMaXN0LmFkZChgJHt0aGlzLl9nZXRCYXNpY0NsYXNzUHJlZml4KCl9LSR7dGhpcy51cGRhdGVBdHRhY2htZW50KGF0dGFjaG1lbnQpfWApXG4gIH1cblxuICBfZ2V0QXR0YWNobWVudChwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gQXR0YWNobWVudE1hcFtwbGFjZW1lbnQudG9VcHBlckNhc2UoKV1cbiAgfVxuXG4gIF9zZXRMaXN0ZW5lcnMoKSB7XG4gICAgY29uc3QgdHJpZ2dlcnMgPSB0aGlzLl9jb25maWcudHJpZ2dlci5zcGxpdCgnICcpXG5cbiAgICB0cmlnZ2Vycy5mb3JFYWNoKHRyaWdnZXIgPT4ge1xuICAgICAgaWYgKHRyaWdnZXIgPT09ICdjbGljaycpIHtcbiAgICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuRXZlbnQuQ0xJQ0ssIHRoaXMuX2NvbmZpZy5zZWxlY3RvciwgZXZlbnQgPT4gdGhpcy50b2dnbGUoZXZlbnQpKVxuICAgICAgfSBlbHNlIGlmICh0cmlnZ2VyICE9PSBUUklHR0VSX01BTlVBTCkge1xuICAgICAgICBjb25zdCBldmVudEluID0gdHJpZ2dlciA9PT0gVFJJR0dFUl9IT1ZFUiA/XG4gICAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5NT1VTRUVOVEVSIDpcbiAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTSU5cbiAgICAgICAgY29uc3QgZXZlbnRPdXQgPSB0cmlnZ2VyID09PSBUUklHR0VSX0hPVkVSID9cbiAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFTEVBVkUgOlxuICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNPVVRcblxuICAgICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgZXZlbnRJbiwgdGhpcy5fY29uZmlnLnNlbGVjdG9yLCBldmVudCA9PiB0aGlzLl9lbnRlcihldmVudCkpXG4gICAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBldmVudE91dCwgdGhpcy5fY29uZmlnLnNlbGVjdG9yLCBldmVudCA9PiB0aGlzLl9sZWF2ZShldmVudCkpXG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMuX2hpZGVNb2RhbEhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5fZWxlbWVudCkge1xuICAgICAgICB0aGlzLmhpZGUoKVxuICAgICAgfVxuICAgIH1cblxuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LmNsb3Nlc3QoU0VMRUNUT1JfTU9EQUwpLCBFVkVOVF9NT0RBTF9ISURFLCB0aGlzLl9oaWRlTW9kYWxIYW5kbGVyKVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5zZWxlY3Rvcikge1xuICAgICAgdGhpcy5fY29uZmlnID0ge1xuICAgICAgICAuLi50aGlzLl9jb25maWcsXG4gICAgICAgIHRyaWdnZXI6ICdtYW51YWwnLFxuICAgICAgICBzZWxlY3RvcjogJydcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZml4VGl0bGUoKVxuICAgIH1cbiAgfVxuXG4gIF9maXhUaXRsZSgpIHtcbiAgICBjb25zdCB0aXRsZSA9IHRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKCd0aXRsZScpXG4gICAgY29uc3Qgb3JpZ2luYWxUaXRsZVR5cGUgPSB0eXBlb2YgdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtb3JpZ2luYWwtdGl0bGUnKVxuXG4gICAgaWYgKHRpdGxlIHx8IG9yaWdpbmFsVGl0bGVUeXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtb3JpZ2luYWwtdGl0bGUnLCB0aXRsZSB8fCAnJylcbiAgICAgIGlmICh0aXRsZSAmJiAhdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKSAmJiAhdGhpcy5fZWxlbWVudC50ZXh0Q29udGVudCkge1xuICAgICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIHRpdGxlKVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgndGl0bGUnLCAnJylcbiAgICB9XG4gIH1cblxuICBfZW50ZXIoZXZlbnQsIGNvbnRleHQpIHtcbiAgICBjb250ZXh0ID0gdGhpcy5faW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KGV2ZW50LCBjb250ZXh0KVxuXG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyW1xuICAgICAgICBldmVudC50eXBlID09PSAnZm9jdXNpbicgPyBUUklHR0VSX0ZPQ1VTIDogVFJJR0dFUl9IT1ZFUlxuICAgICAgXSA9IHRydWVcbiAgICB9XG5cbiAgICBpZiAoY29udGV4dC5nZXRUaXBFbGVtZW50KCkuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVykgfHwgY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSE9WRVJfU1RBVEVfU0hPVykge1xuICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhPVkVSX1NUQVRFX1NIT1dcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNsZWFyVGltZW91dChjb250ZXh0Ll90aW1lb3V0KVxuXG4gICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhPVkVSX1NUQVRFX1NIT1dcblxuICAgIGlmICghY29udGV4dC5fY29uZmlnLmRlbGF5IHx8ICFjb250ZXh0Ll9jb25maWcuZGVsYXkuc2hvdykge1xuICAgICAgY29udGV4dC5zaG93KClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnRleHQuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmIChjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIT1ZFUl9TVEFURV9TSE9XKSB7XG4gICAgICAgIGNvbnRleHQuc2hvdygpXG4gICAgICB9XG4gICAgfSwgY29udGV4dC5fY29uZmlnLmRlbGF5LnNob3cpXG4gIH1cblxuICBfbGVhdmUoZXZlbnQsIGNvbnRleHQpIHtcbiAgICBjb250ZXh0ID0gdGhpcy5faW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KGV2ZW50LCBjb250ZXh0KVxuXG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyW1xuICAgICAgICBldmVudC50eXBlID09PSAnZm9jdXNvdXQnID8gVFJJR0dFUl9GT0NVUyA6IFRSSUdHRVJfSE9WRVJcbiAgICAgIF0gPSBjb250ZXh0Ll9lbGVtZW50LmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpXG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KGNvbnRleHQuX3RpbWVvdXQpXG5cbiAgICBjb250ZXh0Ll9ob3ZlclN0YXRlID0gSE9WRVJfU1RBVEVfT1VUXG5cbiAgICBpZiAoIWNvbnRleHQuX2NvbmZpZy5kZWxheSB8fCAhY29udGV4dC5fY29uZmlnLmRlbGF5LmhpZGUpIHtcbiAgICAgIGNvbnRleHQuaGlkZSgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb250ZXh0Ll90aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSE9WRVJfU1RBVEVfT1VUKSB7XG4gICAgICAgIGNvbnRleHQuaGlkZSgpXG4gICAgICB9XG4gICAgfSwgY29udGV4dC5fY29uZmlnLmRlbGF5LmhpZGUpXG4gIH1cblxuICBfaXNXaXRoQWN0aXZlVHJpZ2dlcigpIHtcbiAgICBmb3IgKGNvbnN0IHRyaWdnZXIgaW4gdGhpcy5fYWN0aXZlVHJpZ2dlcikge1xuICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRyaWdnZXJbdHJpZ2dlcl0pIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uc3QgZGF0YUF0dHJpYnV0ZXMgPSBNYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KVxuXG4gICAgT2JqZWN0LmtleXMoZGF0YUF0dHJpYnV0ZXMpLmZvckVhY2goZGF0YUF0dHIgPT4ge1xuICAgICAgaWYgKERJU0FMTE9XRURfQVRUUklCVVRFUy5oYXMoZGF0YUF0dHIpKSB7XG4gICAgICAgIGRlbGV0ZSBkYXRhQXR0cmlidXRlc1tkYXRhQXR0cl1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgY29uZmlnID0ge1xuICAgICAgLi4udGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LFxuICAgICAgLi4uZGF0YUF0dHJpYnV0ZXMsXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge30pXG4gICAgfVxuXG4gICAgY29uZmlnLmNvbnRhaW5lciA9IGNvbmZpZy5jb250YWluZXIgPT09IGZhbHNlID8gZG9jdW1lbnQuYm9keSA6IGdldEVsZW1lbnQoY29uZmlnLmNvbnRhaW5lcilcblxuICAgIGlmICh0eXBlb2YgY29uZmlnLmRlbGF5ID09PSAnbnVtYmVyJykge1xuICAgICAgY29uZmlnLmRlbGF5ID0ge1xuICAgICAgICBzaG93OiBjb25maWcuZGVsYXksXG4gICAgICAgIGhpZGU6IGNvbmZpZy5kZWxheVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29uZmlnLnRpdGxlID09PSAnbnVtYmVyJykge1xuICAgICAgY29uZmlnLnRpdGxlID0gY29uZmlnLnRpdGxlLnRvU3RyaW5nKClcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbmZpZy5jb250ZW50ID09PSAnbnVtYmVyJykge1xuICAgICAgY29uZmlnLmNvbnRlbnQgPSBjb25maWcuY29udGVudC50b1N0cmluZygpXG4gICAgfVxuXG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSlcblxuICAgIGlmIChjb25maWcuc2FuaXRpemUpIHtcbiAgICAgIGNvbmZpZy50ZW1wbGF0ZSA9IHNhbml0aXplSHRtbChjb25maWcudGVtcGxhdGUsIGNvbmZpZy5hbGxvd0xpc3QsIGNvbmZpZy5zYW5pdGl6ZUZuKVxuICAgIH1cblxuICAgIHJldHVybiBjb25maWdcbiAgfVxuXG4gIF9nZXREZWxlZ2F0ZUNvbmZpZygpIHtcbiAgICBjb25zdCBjb25maWcgPSB7fVxuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5fY29uZmlnKSB7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0W2tleV0gIT09IHRoaXMuX2NvbmZpZ1trZXldKSB7XG4gICAgICAgIGNvbmZpZ1trZXldID0gdGhpcy5fY29uZmlnW2tleV1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJbiB0aGUgZnV0dXJlIGNhbiBiZSByZXBsYWNlZCB3aXRoOlxuICAgIC8vIGNvbnN0IGtleXNXaXRoRGlmZmVyZW50VmFsdWVzID0gT2JqZWN0LmVudHJpZXModGhpcy5fY29uZmlnKS5maWx0ZXIoZW50cnkgPT4gdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0W2VudHJ5WzBdXSAhPT0gdGhpcy5fY29uZmlnW2VudHJ5WzBdXSlcbiAgICAvLyBgT2JqZWN0LmZyb21FbnRyaWVzKGtleXNXaXRoRGlmZmVyZW50VmFsdWVzKWBcbiAgICByZXR1cm4gY29uZmlnXG4gIH1cblxuICBfY2xlYW5UaXBDbGFzcygpIHtcbiAgICBjb25zdCB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKVxuICAgIGNvbnN0IGJhc2ljQ2xhc3NQcmVmaXhSZWdleCA9IG5ldyBSZWdFeHAoYChefFxcXFxzKSR7dGhpcy5fZ2V0QmFzaWNDbGFzc1ByZWZpeCgpfVxcXFxTK2AsICdnJylcbiAgICBjb25zdCB0YWJDbGFzcyA9IHRpcC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykubWF0Y2goYmFzaWNDbGFzc1ByZWZpeFJlZ2V4KVxuICAgIGlmICh0YWJDbGFzcyAhPT0gbnVsbCAmJiB0YWJDbGFzcy5sZW5ndGggPiAwKSB7XG4gICAgICB0YWJDbGFzcy5tYXAodG9rZW4gPT4gdG9rZW4udHJpbSgpKVxuICAgICAgICAuZm9yRWFjaCh0Q2xhc3MgPT4gdGlwLmNsYXNzTGlzdC5yZW1vdmUodENsYXNzKSlcbiAgICB9XG4gIH1cblxuICBfZ2V0QmFzaWNDbGFzc1ByZWZpeCgpIHtcbiAgICByZXR1cm4gQ0xBU1NfUFJFRklYXG4gIH1cblxuICBfaGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKHBvcHBlckRhdGEpIHtcbiAgICBjb25zdCB7IHN0YXRlIH0gPSBwb3BwZXJEYXRhXG5cbiAgICBpZiAoIXN0YXRlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLnRpcCA9IHN0YXRlLmVsZW1lbnRzLnBvcHBlclxuICAgIHRoaXMuX2NsZWFuVGlwQ2xhc3MoKVxuICAgIHRoaXMuX2FkZEF0dGFjaG1lbnRDbGFzcyh0aGlzLl9nZXRBdHRhY2htZW50KHN0YXRlLnBsYWNlbWVudCkpXG4gIH1cblxuICBfZGlzcG9zZVBvcHBlcigpIHtcbiAgICBpZiAodGhpcy5fcG9wcGVyKSB7XG4gICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpXG4gICAgICB0aGlzLl9wb3BwZXIgPSBudWxsXG4gICAgfVxuICB9XG5cbiAgLy8gU3RhdGljXG5cbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBUb29sdGlwLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgY29uZmlnKVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVtjb25maWddKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogYWRkIC5Ub29sdGlwIHRvIGpRdWVyeSBvbmx5IGlmIGpRdWVyeSBpcyBwcmVzZW50XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKFRvb2x0aXApXG5cbmV4cG9ydCBkZWZhdWx0IFRvb2x0aXBcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogcG9wb3Zlci5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCB7IGRlZmluZUpRdWVyeVBsdWdpbiB9IGZyb20gJy4vdXRpbC9pbmRleCdcbmltcG9ydCBUb29sdGlwIGZyb20gJy4vdG9vbHRpcCdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSA9ICdwb3BvdmVyJ1xuY29uc3QgREFUQV9LRVkgPSAnYnMucG9wb3ZlcidcbmNvbnN0IEVWRU5UX0tFWSA9IGAuJHtEQVRBX0tFWX1gXG5jb25zdCBDTEFTU19QUkVGSVggPSAnYnMtcG9wb3ZlcidcblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgLi4uVG9vbHRpcC5EZWZhdWx0LFxuICBwbGFjZW1lbnQ6ICdyaWdodCcsXG4gIG9mZnNldDogWzAsIDhdLFxuICB0cmlnZ2VyOiAnY2xpY2snLFxuICBjb250ZW50OiAnJyxcbiAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwicG9wb3ZlclwiIHJvbGU9XCJ0b29sdGlwXCI+JyArXG4gICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwicG9wb3Zlci1hcnJvd1wiPjwvZGl2PicgK1xuICAgICAgICAgICAgICAnPGgzIGNsYXNzPVwicG9wb3Zlci1oZWFkZXJcIj48L2gzPicgK1xuICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInBvcG92ZXItYm9keVwiPjwvZGl2PicgK1xuICAgICAgICAgICAgJzwvZGl2Pidcbn1cblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIC4uLlRvb2x0aXAuRGVmYXVsdFR5cGUsXG4gIGNvbnRlbnQ6ICcoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pJ1xufVxuXG5jb25zdCBFdmVudCA9IHtcbiAgSElERTogYGhpZGUke0VWRU5UX0tFWX1gLFxuICBISURERU46IGBoaWRkZW4ke0VWRU5UX0tFWX1gLFxuICBTSE9XOiBgc2hvdyR7RVZFTlRfS0VZfWAsXG4gIFNIT1dOOiBgc2hvd24ke0VWRU5UX0tFWX1gLFxuICBJTlNFUlRFRDogYGluc2VydGVkJHtFVkVOVF9LRVl9YCxcbiAgQ0xJQ0s6IGBjbGljayR7RVZFTlRfS0VZfWAsXG4gIEZPQ1VTSU46IGBmb2N1c2luJHtFVkVOVF9LRVl9YCxcbiAgRk9DVVNPVVQ6IGBmb2N1c291dCR7RVZFTlRfS0VZfWAsXG4gIE1PVVNFRU5URVI6IGBtb3VzZWVudGVyJHtFVkVOVF9LRVl9YCxcbiAgTU9VU0VMRUFWRTogYG1vdXNlbGVhdmUke0VWRU5UX0tFWX1gXG59XG5cbmNvbnN0IFNFTEVDVE9SX1RJVExFID0gJy5wb3BvdmVyLWhlYWRlcidcbmNvbnN0IFNFTEVDVE9SX0NPTlRFTlQgPSAnLnBvcG92ZXItYm9keSdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIFBvcG92ZXIgZXh0ZW5kcyBUb29sdGlwIHtcbiAgLy8gR2V0dGVyc1xuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFxuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FXG4gIH1cblxuICBzdGF0aWMgZ2V0IEV2ZW50KCkge1xuICAgIHJldHVybiBFdmVudFxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0VHlwZSgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFR5cGVcbiAgfVxuXG4gIC8vIE92ZXJyaWRlc1xuXG4gIGlzV2l0aENvbnRlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGl0bGUoKSB8fCB0aGlzLl9nZXRDb250ZW50KClcbiAgfVxuXG4gIHNldENvbnRlbnQodGlwKSB7XG4gICAgdGhpcy5fc2FuaXRpemVBbmRTZXRDb250ZW50KHRpcCwgdGhpcy5nZXRUaXRsZSgpLCBTRUxFQ1RPUl9USVRMRSlcbiAgICB0aGlzLl9zYW5pdGl6ZUFuZFNldENvbnRlbnQodGlwLCB0aGlzLl9nZXRDb250ZW50KCksIFNFTEVDVE9SX0NPTlRFTlQpXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2dldENvbnRlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKHRoaXMuX2NvbmZpZy5jb250ZW50KVxuICB9XG5cbiAgX2dldEJhc2ljQ2xhc3NQcmVmaXgoKSB7XG4gICAgcmV0dXJuIENMQVNTX1BSRUZJWFxuICB9XG5cbiAgLy8gU3RhdGljXG5cbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBQb3BvdmVyLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgY29uZmlnKVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVtjb25maWddKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogYWRkIC5Qb3BvdmVyIHRvIGpRdWVyeSBvbmx5IGlmIGpRdWVyeSBpcyBwcmVzZW50XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKFBvcG92ZXIpXG5cbmV4cG9ydCBkZWZhdWx0IFBvcG92ZXJcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogc2Nyb2xsc3B5LmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IHtcbiAgZGVmaW5lSlF1ZXJ5UGx1Z2luLFxuICBnZXRFbGVtZW50LFxuICBnZXRTZWxlY3RvckZyb21FbGVtZW50LFxuICB0eXBlQ2hlY2tDb25maWdcbn0gZnJvbSAnLi91dGlsL2luZGV4J1xuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tICcuL2RvbS9ldmVudC1oYW5kbGVyJ1xuaW1wb3J0IE1hbmlwdWxhdG9yIGZyb20gJy4vZG9tL21hbmlwdWxhdG9yJ1xuaW1wb3J0IFNlbGVjdG9yRW5naW5lIGZyb20gJy4vZG9tL3NlbGVjdG9yLWVuZ2luZSdcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gJy4vYmFzZS1jb21wb25lbnQnXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUgPSAnc2Nyb2xsc3B5J1xuY29uc3QgREFUQV9LRVkgPSAnYnMuc2Nyb2xsc3B5J1xuY29uc3QgRVZFTlRfS0VZID0gYC4ke0RBVEFfS0VZfWBcbmNvbnN0IERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknXG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIG9mZnNldDogMTAsXG4gIG1ldGhvZDogJ2F1dG8nLFxuICB0YXJnZXQ6ICcnXG59XG5cbmNvbnN0IERlZmF1bHRUeXBlID0ge1xuICBvZmZzZXQ6ICdudW1iZXInLFxuICBtZXRob2Q6ICdzdHJpbmcnLFxuICB0YXJnZXQ6ICcoc3RyaW5nfGVsZW1lbnQpJ1xufVxuXG5jb25zdCBFVkVOVF9BQ1RJVkFURSA9IGBhY3RpdmF0ZSR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX1NDUk9MTCA9IGBzY3JvbGwke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9MT0FEX0RBVEFfQVBJID0gYGxvYWQke0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG5cbmNvbnN0IENMQVNTX05BTUVfRFJPUERPV05fSVRFTSA9ICdkcm9wZG93bi1pdGVtJ1xuY29uc3QgQ0xBU1NfTkFNRV9BQ1RJVkUgPSAnYWN0aXZlJ1xuXG5jb25zdCBTRUxFQ1RPUl9EQVRBX1NQWSA9ICdbZGF0YS1icy1zcHk9XCJzY3JvbGxcIl0nXG5jb25zdCBTRUxFQ1RPUl9OQVZfTElTVF9HUk9VUCA9ICcubmF2LCAubGlzdC1ncm91cCdcbmNvbnN0IFNFTEVDVE9SX05BVl9MSU5LUyA9ICcubmF2LWxpbmsnXG5jb25zdCBTRUxFQ1RPUl9OQVZfSVRFTVMgPSAnLm5hdi1pdGVtJ1xuY29uc3QgU0VMRUNUT1JfTElTVF9JVEVNUyA9ICcubGlzdC1ncm91cC1pdGVtJ1xuY29uc3QgU0VMRUNUT1JfTElOS19JVEVNUyA9IGAke1NFTEVDVE9SX05BVl9MSU5LU30sICR7U0VMRUNUT1JfTElTVF9JVEVNU30sIC4ke0NMQVNTX05BTUVfRFJPUERPV05fSVRFTX1gXG5jb25zdCBTRUxFQ1RPUl9EUk9QRE9XTiA9ICcuZHJvcGRvd24nXG5jb25zdCBTRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEUgPSAnLmRyb3Bkb3duLXRvZ2dsZSdcblxuY29uc3QgTUVUSE9EX09GRlNFVCA9ICdvZmZzZXQnXG5jb25zdCBNRVRIT0RfUE9TSVRJT04gPSAncG9zaXRpb24nXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBTY3JvbGxTcHkgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgc3VwZXIoZWxlbWVudClcbiAgICB0aGlzLl9zY3JvbGxFbGVtZW50ID0gdGhpcy5fZWxlbWVudC50YWdOYW1lID09PSAnQk9EWScgPyB3aW5kb3cgOiB0aGlzLl9lbGVtZW50XG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZylcbiAgICB0aGlzLl9vZmZzZXRzID0gW11cbiAgICB0aGlzLl90YXJnZXRzID0gW11cbiAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSBudWxsXG4gICAgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gMFxuXG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX3Njcm9sbEVsZW1lbnQsIEVWRU5UX1NDUk9MTCwgKCkgPT4gdGhpcy5fcHJvY2VzcygpKVxuXG4gICAgdGhpcy5yZWZyZXNoKClcbiAgICB0aGlzLl9wcm9jZXNzKClcbiAgfVxuXG4gIC8vIEdldHRlcnNcblxuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRcbiAgfVxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRVxuICB9XG5cbiAgLy8gUHVibGljXG5cbiAgcmVmcmVzaCgpIHtcbiAgICBjb25zdCBhdXRvTWV0aG9kID0gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gdGhpcy5fc2Nyb2xsRWxlbWVudC53aW5kb3cgP1xuICAgICAgTUVUSE9EX09GRlNFVCA6XG4gICAgICBNRVRIT0RfUE9TSVRJT05cblxuICAgIGNvbnN0IG9mZnNldE1ldGhvZCA9IHRoaXMuX2NvbmZpZy5tZXRob2QgPT09ICdhdXRvJyA/XG4gICAgICBhdXRvTWV0aG9kIDpcbiAgICAgIHRoaXMuX2NvbmZpZy5tZXRob2RcblxuICAgIGNvbnN0IG9mZnNldEJhc2UgPSBvZmZzZXRNZXRob2QgPT09IE1FVEhPRF9QT1NJVElPTiA/XG4gICAgICB0aGlzLl9nZXRTY3JvbGxUb3AoKSA6XG4gICAgICAwXG5cbiAgICB0aGlzLl9vZmZzZXRzID0gW11cbiAgICB0aGlzLl90YXJnZXRzID0gW11cbiAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKVxuXG4gICAgY29uc3QgdGFyZ2V0cyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfTElOS19JVEVNUywgdGhpcy5fY29uZmlnLnRhcmdldClcblxuICAgIHRhcmdldHMubWFwKGVsZW1lbnQgPT4ge1xuICAgICAgY29uc3QgdGFyZ2V0U2VsZWN0b3IgPSBnZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpXG4gICAgICBjb25zdCB0YXJnZXQgPSB0YXJnZXRTZWxlY3RvciA/IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUodGFyZ2V0U2VsZWN0b3IpIDogbnVsbFxuXG4gICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IHRhcmdldEJDUiA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgICBpZiAodGFyZ2V0QkNSLndpZHRoIHx8IHRhcmdldEJDUi5oZWlnaHQpIHtcbiAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgTWFuaXB1bGF0b3Jbb2Zmc2V0TWV0aG9kXSh0YXJnZXQpLnRvcCArIG9mZnNldEJhc2UsXG4gICAgICAgICAgICB0YXJnZXRTZWxlY3RvclxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH0pXG4gICAgICAuZmlsdGVyKGl0ZW0gPT4gaXRlbSlcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhWzBdIC0gYlswXSlcbiAgICAgIC5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICB0aGlzLl9vZmZzZXRzLnB1c2goaXRlbVswXSlcbiAgICAgICAgdGhpcy5fdGFyZ2V0cy5wdXNoKGl0ZW1bMV0pXG4gICAgICB9KVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICBFdmVudEhhbmRsZXIub2ZmKHRoaXMuX3Njcm9sbEVsZW1lbnQsIEVWRU5UX0tFWSlcbiAgICBzdXBlci5kaXNwb3NlKClcbiAgfVxuXG4gIC8vIFByaXZhdGVcblxuICBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IHtcbiAgICAgIC4uLkRlZmF1bHQsXG4gICAgICAuLi5NYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KSxcbiAgICAgIC4uLih0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fSlcbiAgICB9XG5cbiAgICBjb25maWcudGFyZ2V0ID0gZ2V0RWxlbWVudChjb25maWcudGFyZ2V0KSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRcblxuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKVxuXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX2dldFNjcm9sbFRvcCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID9cbiAgICAgIHRoaXMuX3Njcm9sbEVsZW1lbnQucGFnZVlPZmZzZXQgOlxuICAgICAgdGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3BcbiAgfVxuXG4gIF9nZXRTY3JvbGxIZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IHx8IE1hdGgubWF4KFxuICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQsXG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0XG4gICAgKVxuICB9XG5cbiAgX2dldE9mZnNldEhlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID9cbiAgICAgIHdpbmRvdy5pbm5lckhlaWdodCA6XG4gICAgICB0aGlzLl9zY3JvbGxFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodFxuICB9XG5cbiAgX3Byb2Nlc3MoKSB7XG4gICAgY29uc3Qgc2Nyb2xsVG9wID0gdGhpcy5fZ2V0U2Nyb2xsVG9wKCkgKyB0aGlzLl9jb25maWcub2Zmc2V0XG4gICAgY29uc3Qgc2Nyb2xsSGVpZ2h0ID0gdGhpcy5fZ2V0U2Nyb2xsSGVpZ2h0KClcbiAgICBjb25zdCBtYXhTY3JvbGwgPSB0aGlzLl9jb25maWcub2Zmc2V0ICsgc2Nyb2xsSGVpZ2h0IC0gdGhpcy5fZ2V0T2Zmc2V0SGVpZ2h0KClcblxuICAgIGlmICh0aGlzLl9zY3JvbGxIZWlnaHQgIT09IHNjcm9sbEhlaWdodCkge1xuICAgICAgdGhpcy5yZWZyZXNoKClcbiAgICB9XG5cbiAgICBpZiAoc2Nyb2xsVG9wID49IG1heFNjcm9sbCkge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5fdGFyZ2V0c1t0aGlzLl90YXJnZXRzLmxlbmd0aCAtIDFdXG5cbiAgICAgIGlmICh0aGlzLl9hY3RpdmVUYXJnZXQgIT09IHRhcmdldCkge1xuICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0YXJnZXQpXG4gICAgICB9XG5cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICh0aGlzLl9hY3RpdmVUYXJnZXQgJiYgc2Nyb2xsVG9wIDwgdGhpcy5fb2Zmc2V0c1swXSAmJiB0aGlzLl9vZmZzZXRzWzBdID4gMCkge1xuICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gbnVsbFxuICAgICAgdGhpcy5fY2xlYXIoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IHRoaXMuX29mZnNldHMubGVuZ3RoOyBpLS07KSB7XG4gICAgICBjb25zdCBpc0FjdGl2ZVRhcmdldCA9IHRoaXMuX2FjdGl2ZVRhcmdldCAhPT0gdGhpcy5fdGFyZ2V0c1tpXSAmJlxuICAgICAgICAgIHNjcm9sbFRvcCA+PSB0aGlzLl9vZmZzZXRzW2ldICYmXG4gICAgICAgICAgKHR5cGVvZiB0aGlzLl9vZmZzZXRzW2kgKyAxXSA9PT0gJ3VuZGVmaW5lZCcgfHwgc2Nyb2xsVG9wIDwgdGhpcy5fb2Zmc2V0c1tpICsgMV0pXG5cbiAgICAgIGlmIChpc0FjdGl2ZVRhcmdldCkge1xuICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0aGlzLl90YXJnZXRzW2ldKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9hY3RpdmF0ZSh0YXJnZXQpIHtcbiAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSB0YXJnZXRcblxuICAgIHRoaXMuX2NsZWFyKClcblxuICAgIGNvbnN0IHF1ZXJpZXMgPSBTRUxFQ1RPUl9MSU5LX0lURU1TLnNwbGl0KCcsJylcbiAgICAgIC5tYXAoc2VsZWN0b3IgPT4gYCR7c2VsZWN0b3J9W2RhdGEtYnMtdGFyZ2V0PVwiJHt0YXJnZXR9XCJdLCR7c2VsZWN0b3J9W2hyZWY9XCIke3RhcmdldH1cIl1gKVxuXG4gICAgY29uc3QgbGluayA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUocXVlcmllcy5qb2luKCcsJyksIHRoaXMuX2NvbmZpZy50YXJnZXQpXG5cbiAgICBsaW5rLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUpXG4gICAgaWYgKGxpbmsuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRFJPUERPV05fSVRFTSkpIHtcbiAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFLCBsaW5rLmNsb3Nlc3QoU0VMRUNUT1JfRFJPUERPV04pKVxuICAgICAgICAuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0FDVElWRSlcbiAgICB9IGVsc2Uge1xuICAgICAgU2VsZWN0b3JFbmdpbmUucGFyZW50cyhsaW5rLCBTRUxFQ1RPUl9OQVZfTElTVF9HUk9VUClcbiAgICAgICAgLmZvckVhY2gobGlzdEdyb3VwID0+IHtcbiAgICAgICAgICAvLyBTZXQgdHJpZ2dlcmVkIGxpbmtzIHBhcmVudHMgYXMgYWN0aXZlXG4gICAgICAgICAgLy8gV2l0aCBib3RoIDx1bD4gYW5kIDxuYXY+IG1hcmt1cCBhIHBhcmVudCBpcyB0aGUgcHJldmlvdXMgc2libGluZyBvZiBhbnkgbmF2IGFuY2VzdG9yXG4gICAgICAgICAgU2VsZWN0b3JFbmdpbmUucHJldihsaXN0R3JvdXAsIGAke1NFTEVDVE9SX05BVl9MSU5LU30sICR7U0VMRUNUT1JfTElTVF9JVEVNU31gKVxuICAgICAgICAgICAgLmZvckVhY2goaXRlbSA9PiBpdGVtLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUpKVxuXG4gICAgICAgICAgLy8gSGFuZGxlIHNwZWNpYWwgY2FzZSB3aGVuIC5uYXYtbGluayBpcyBpbnNpZGUgLm5hdi1pdGVtXG4gICAgICAgICAgU2VsZWN0b3JFbmdpbmUucHJldihsaXN0R3JvdXAsIFNFTEVDVE9SX05BVl9JVEVNUylcbiAgICAgICAgICAgIC5mb3JFYWNoKG5hdkl0ZW0gPT4ge1xuICAgICAgICAgICAgICBTZWxlY3RvckVuZ2luZS5jaGlsZHJlbihuYXZJdGVtLCBTRUxFQ1RPUl9OQVZfTElOS1MpXG4gICAgICAgICAgICAgICAgLmZvckVhY2goaXRlbSA9PiBpdGVtLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUpKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9zY3JvbGxFbGVtZW50LCBFVkVOVF9BQ1RJVkFURSwge1xuICAgICAgcmVsYXRlZFRhcmdldDogdGFyZ2V0XG4gICAgfSlcbiAgfVxuXG4gIF9jbGVhcigpIHtcbiAgICBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0xJTktfSVRFTVMsIHRoaXMuX2NvbmZpZy50YXJnZXQpXG4gICAgICAuZmlsdGVyKG5vZGUgPT4gbm9kZS5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9BQ1RJVkUpKVxuICAgICAgLmZvckVhY2gobm9kZSA9PiBub2RlLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9BQ1RJVkUpKVxuICB9XG5cbiAgLy8gU3RhdGljXG5cbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBTY3JvbGxTcHkuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBjb25maWcpXG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYClcbiAgICAgIH1cblxuICAgICAgZGF0YVtjb25maWddKClcbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuRXZlbnRIYW5kbGVyLm9uKHdpbmRvdywgRVZFTlRfTE9BRF9EQVRBX0FQSSwgKCkgPT4ge1xuICBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0RBVEFfU1BZKVxuICAgIC5mb3JFYWNoKHNweSA9PiBuZXcgU2Nyb2xsU3B5KHNweSkpXG59KVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGFkZCAuU2Nyb2xsU3B5IHRvIGpRdWVyeSBvbmx5IGlmIGpRdWVyeSBpcyBwcmVzZW50XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKFNjcm9sbFNweSlcblxuZXhwb3J0IGRlZmF1bHQgU2Nyb2xsU3B5XG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IHRhYi5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCB7XG4gIGRlZmluZUpRdWVyeVBsdWdpbixcbiAgZ2V0RWxlbWVudEZyb21TZWxlY3RvcixcbiAgaXNEaXNhYmxlZCxcbiAgcmVmbG93XG59IGZyb20gJy4vdXRpbC9pbmRleCdcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi9kb20vZXZlbnQtaGFuZGxlcidcbmltcG9ydCBTZWxlY3RvckVuZ2luZSBmcm9tICcuL2RvbS9zZWxlY3Rvci1lbmdpbmUnXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuL2Jhc2UtY29tcG9uZW50J1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FID0gJ3RhYidcbmNvbnN0IERBVEFfS0VZID0gJ2JzLnRhYidcbmNvbnN0IEVWRU5UX0tFWSA9IGAuJHtEQVRBX0tFWX1gXG5jb25zdCBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJ1xuXG5jb25zdCBFVkVOVF9ISURFID0gYGhpZGUke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9ISURERU4gPSBgaGlkZGVuJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfU0hPVyA9IGBzaG93JHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfU0hPV04gPSBgc2hvd24ke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9DTElDS19EQVRBX0FQSSA9IGBjbGljayR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcblxuY29uc3QgQ0xBU1NfTkFNRV9EUk9QRE9XTl9NRU5VID0gJ2Ryb3Bkb3duLW1lbnUnXG5jb25zdCBDTEFTU19OQU1FX0FDVElWRSA9ICdhY3RpdmUnXG5jb25zdCBDTEFTU19OQU1FX0ZBREUgPSAnZmFkZSdcbmNvbnN0IENMQVNTX05BTUVfU0hPVyA9ICdzaG93J1xuXG5jb25zdCBTRUxFQ1RPUl9EUk9QRE9XTiA9ICcuZHJvcGRvd24nXG5jb25zdCBTRUxFQ1RPUl9OQVZfTElTVF9HUk9VUCA9ICcubmF2LCAubGlzdC1ncm91cCdcbmNvbnN0IFNFTEVDVE9SX0FDVElWRSA9ICcuYWN0aXZlJ1xuY29uc3QgU0VMRUNUT1JfQUNUSVZFX1VMID0gJzpzY29wZSA+IGxpID4gLmFjdGl2ZSdcbmNvbnN0IFNFTEVDVE9SX0RBVEFfVE9HR0xFID0gJ1tkYXRhLWJzLXRvZ2dsZT1cInRhYlwiXSwgW2RhdGEtYnMtdG9nZ2xlPVwicGlsbFwiXSwgW2RhdGEtYnMtdG9nZ2xlPVwibGlzdFwiXSdcbmNvbnN0IFNFTEVDVE9SX0RST1BET1dOX1RPR0dMRSA9ICcuZHJvcGRvd24tdG9nZ2xlJ1xuY29uc3QgU0VMRUNUT1JfRFJPUERPV05fQUNUSVZFX0NISUxEID0gJzpzY29wZSA+IC5kcm9wZG93bi1tZW51IC5hY3RpdmUnXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBUYWIgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgLy8gR2V0dGVyc1xuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRVxuICB9XG5cbiAgLy8gUHVibGljXG5cbiAgc2hvdygpIHtcbiAgICBpZiAoKHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSAmJlxuICAgICAgdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJlxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9BQ1RJVkUpKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGV0IHByZXZpb3VzXG4gICAgY29uc3QgdGFyZ2V0ID0gZ2V0RWxlbWVudEZyb21TZWxlY3Rvcih0aGlzLl9lbGVtZW50KVxuICAgIGNvbnN0IGxpc3RFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5jbG9zZXN0KFNFTEVDVE9SX05BVl9MSVNUX0dST1VQKVxuXG4gICAgaWYgKGxpc3RFbGVtZW50KSB7XG4gICAgICBjb25zdCBpdGVtU2VsZWN0b3IgPSBsaXN0RWxlbWVudC5ub2RlTmFtZSA9PT0gJ1VMJyB8fCBsaXN0RWxlbWVudC5ub2RlTmFtZSA9PT0gJ09MJyA/IFNFTEVDVE9SX0FDVElWRV9VTCA6IFNFTEVDVE9SX0FDVElWRVxuICAgICAgcHJldmlvdXMgPSBTZWxlY3RvckVuZ2luZS5maW5kKGl0ZW1TZWxlY3RvciwgbGlzdEVsZW1lbnQpXG4gICAgICBwcmV2aW91cyA9IHByZXZpb3VzW3ByZXZpb3VzLmxlbmd0aCAtIDFdXG4gICAgfVxuXG4gICAgY29uc3QgaGlkZUV2ZW50ID0gcHJldmlvdXMgP1xuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIocHJldmlvdXMsIEVWRU5UX0hJREUsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgICAgfSkgOlxuICAgICAgbnVsbFxuXG4gICAgY29uc3Qgc2hvd0V2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPVywge1xuICAgICAgcmVsYXRlZFRhcmdldDogcHJldmlvdXNcbiAgICB9KVxuXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkIHx8IChoaWRlRXZlbnQgIT09IG51bGwgJiYgaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9hY3RpdmF0ZSh0aGlzLl9lbGVtZW50LCBsaXN0RWxlbWVudClcblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIocHJldmlvdXMsIEVWRU5UX0hJRERFTiwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgICB9KVxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04sIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogcHJldmlvdXNcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgdGhpcy5fYWN0aXZhdGUodGFyZ2V0LCB0YXJnZXQucGFyZW50Tm9kZSwgY29tcGxldGUpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXBsZXRlKClcbiAgICB9XG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2FjdGl2YXRlKGVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBhY3RpdmVFbGVtZW50cyA9IGNvbnRhaW5lciAmJiAoY29udGFpbmVyLm5vZGVOYW1lID09PSAnVUwnIHx8IGNvbnRhaW5lci5ub2RlTmFtZSA9PT0gJ09MJykgP1xuICAgICAgU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9BQ1RJVkVfVUwsIGNvbnRhaW5lcikgOlxuICAgICAgU2VsZWN0b3JFbmdpbmUuY2hpbGRyZW4oY29udGFpbmVyLCBTRUxFQ1RPUl9BQ1RJVkUpXG5cbiAgICBjb25zdCBhY3RpdmUgPSBhY3RpdmVFbGVtZW50c1swXVxuICAgIGNvbnN0IGlzVHJhbnNpdGlvbmluZyA9IGNhbGxiYWNrICYmIChhY3RpdmUgJiYgYWN0aXZlLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0ZBREUpKVxuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB0aGlzLl90cmFuc2l0aW9uQ29tcGxldGUoZWxlbWVudCwgYWN0aXZlLCBjYWxsYmFjaylcblxuICAgIGlmIChhY3RpdmUgJiYgaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICBhY3RpdmUuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpXG4gICAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCBlbGVtZW50LCB0cnVlKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb21wbGV0ZSgpXG4gICAgfVxuICB9XG5cbiAgX3RyYW5zaXRpb25Db21wbGV0ZShlbGVtZW50LCBhY3RpdmUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKGFjdGl2ZSkge1xuICAgICAgYWN0aXZlLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9BQ1RJVkUpXG5cbiAgICAgIGNvbnN0IGRyb3Bkb3duQ2hpbGQgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0RST1BET1dOX0FDVElWRV9DSElMRCwgYWN0aXZlLnBhcmVudE5vZGUpXG5cbiAgICAgIGlmIChkcm9wZG93bkNoaWxkKSB7XG4gICAgICAgIGRyb3Bkb3duQ2hpbGQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0FDVElWRSlcbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2ZS5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSA9PT0gJ3RhYicpIHtcbiAgICAgICAgYWN0aXZlLnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsIGZhbHNlKVxuICAgICAgfVxuICAgIH1cblxuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0FDVElWRSlcbiAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSA9PT0gJ3RhYicpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgdHJ1ZSlcbiAgICB9XG5cbiAgICByZWZsb3coZWxlbWVudClcblxuICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0ZBREUpKSB7XG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XKVxuICAgIH1cblxuICAgIGxldCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGVcbiAgICBpZiAocGFyZW50ICYmIHBhcmVudC5ub2RlTmFtZSA9PT0gJ0xJJykge1xuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGVcbiAgICB9XG5cbiAgICBpZiAocGFyZW50ICYmIHBhcmVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9EUk9QRE9XTl9NRU5VKSkge1xuICAgICAgY29uc3QgZHJvcGRvd25FbGVtZW50ID0gZWxlbWVudC5jbG9zZXN0KFNFTEVDVE9SX0RST1BET1dOKVxuXG4gICAgICBpZiAoZHJvcGRvd25FbGVtZW50KSB7XG4gICAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFLCBkcm9wZG93bkVsZW1lbnQpXG4gICAgICAgICAgLmZvckVhY2goZHJvcGRvd24gPT4gZHJvcGRvd24uY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0FDVElWRSkpXG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcbiAgICB9XG5cbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKClcbiAgICB9XG4gIH1cblxuICAvLyBTdGF0aWNcblxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IFRhYi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpXG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApXG4gICAgICAgIH1cblxuICAgICAgICBkYXRhW2NvbmZpZ10oKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGlmIChbJ0EnLCAnQVJFQSddLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cblxuICBpZiAoaXNEaXNhYmxlZCh0aGlzKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3QgZGF0YSA9IFRhYi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpXG4gIGRhdGEuc2hvdygpXG59KVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGFkZCAuVGFiIHRvIGpRdWVyeSBvbmx5IGlmIGpRdWVyeSBpcyBwcmVzZW50XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKFRhYilcblxuZXhwb3J0IGRlZmF1bHQgVGFiXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IHRvYXN0LmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IHtcbiAgZGVmaW5lSlF1ZXJ5UGx1Z2luLFxuICByZWZsb3csXG4gIHR5cGVDaGVja0NvbmZpZ1xufSBmcm9tICcuL3V0aWwvaW5kZXgnXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4vZG9tL2V2ZW50LWhhbmRsZXInXG5pbXBvcnQgTWFuaXB1bGF0b3IgZnJvbSAnLi9kb20vbWFuaXB1bGF0b3InXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tICcuL2Jhc2UtY29tcG9uZW50J1xuaW1wb3J0IHsgZW5hYmxlRGlzbWlzc1RyaWdnZXIgfSBmcm9tICcuL3V0aWwvY29tcG9uZW50LWZ1bmN0aW9ucydcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSA9ICd0b2FzdCdcbmNvbnN0IERBVEFfS0VZID0gJ2JzLnRvYXN0J1xuY29uc3QgRVZFTlRfS0VZID0gYC4ke0RBVEFfS0VZfWBcblxuY29uc3QgRVZFTlRfTU9VU0VPVkVSID0gYG1vdXNlb3ZlciR7RVZFTlRfS0VZfWBcbmNvbnN0IEVWRU5UX01PVVNFT1VUID0gYG1vdXNlb3V0JHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfRk9DVVNJTiA9IGBmb2N1c2luJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfRk9DVVNPVVQgPSBgZm9jdXNvdXQke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9ISURFID0gYGhpZGUke0VWRU5UX0tFWX1gXG5jb25zdCBFVkVOVF9ISURERU4gPSBgaGlkZGVuJHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfU0hPVyA9IGBzaG93JHtFVkVOVF9LRVl9YFxuY29uc3QgRVZFTlRfU0hPV04gPSBgc2hvd24ke0VWRU5UX0tFWX1gXG5cbmNvbnN0IENMQVNTX05BTUVfRkFERSA9ICdmYWRlJ1xuY29uc3QgQ0xBU1NfTkFNRV9ISURFID0gJ2hpZGUnIC8vIEBkZXByZWNhdGVkIC0ga2VwdCBoZXJlIG9ubHkgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5jb25zdCBDTEFTU19OQU1FX1NIT1cgPSAnc2hvdydcbmNvbnN0IENMQVNTX05BTUVfU0hPV0lORyA9ICdzaG93aW5nJ1xuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgYW5pbWF0aW9uOiAnYm9vbGVhbicsXG4gIGF1dG9oaWRlOiAnYm9vbGVhbicsXG4gIGRlbGF5OiAnbnVtYmVyJ1xufVxuXG5jb25zdCBEZWZhdWx0ID0ge1xuICBhbmltYXRpb246IHRydWUsXG4gIGF1dG9oaWRlOiB0cnVlLFxuICBkZWxheTogNTAwMFxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgVG9hc3QgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgc3VwZXIoZWxlbWVudClcblxuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpXG4gICAgdGhpcy5fdGltZW91dCA9IG51bGxcbiAgICB0aGlzLl9oYXNNb3VzZUludGVyYWN0aW9uID0gZmFsc2VcbiAgICB0aGlzLl9oYXNLZXlib2FyZEludGVyYWN0aW9uID0gZmFsc2VcbiAgICB0aGlzLl9zZXRMaXN0ZW5lcnMoKVxuICB9XG5cbiAgLy8gR2V0dGVyc1xuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRUeXBlXG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRcbiAgfVxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRVxuICB9XG5cbiAgLy8gUHVibGljXG5cbiAgc2hvdygpIHtcbiAgICBjb25zdCBzaG93RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XKVxuXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9jbGVhclRpbWVvdXQoKVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0ZBREUpXG4gICAgfVxuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XSU5HKVxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04pXG5cbiAgICAgIHRoaXMuX21heWJlU2NoZWR1bGVIaWRlKClcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9ISURFKSAvLyBAZGVwcmVjYXRlZFxuICAgIHJlZmxvdyh0aGlzLl9lbGVtZW50KVxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1cpXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPV0lORylcblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIHRoaXMuX2VsZW1lbnQsIHRoaXMuX2NvbmZpZy5hbmltYXRpb24pXG4gIH1cblxuICBoaWRlKCkge1xuICAgIGlmICghdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgaGlkZUV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElERSlcblxuICAgIGlmIChoaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9ISURFKSAvLyBAZGVwcmVjYXRlZFxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPV0lORylcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURERU4pXG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPV0lORylcbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCB0aGlzLl9lbGVtZW50LCB0aGlzLl9jb25maWcuYW5pbWF0aW9uKVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICB0aGlzLl9jbGVhclRpbWVvdXQoKVxuXG4gICAgaWYgKHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVykpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpXG4gICAgfVxuXG4gICAgc3VwZXIuZGlzcG9zZSgpXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7XG4gICAgICAuLi5EZWZhdWx0LFxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge30pXG4gICAgfVxuXG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSlcblxuICAgIHJldHVybiBjb25maWdcbiAgfVxuXG4gIF9tYXliZVNjaGVkdWxlSGlkZSgpIHtcbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5hdXRvaGlkZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2hhc01vdXNlSW50ZXJhY3Rpb24gfHwgdGhpcy5faGFzS2V5Ym9hcmRJbnRlcmFjdGlvbikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5oaWRlKClcbiAgICB9LCB0aGlzLl9jb25maWcuZGVsYXkpXG4gIH1cblxuICBfb25JbnRlcmFjdGlvbihldmVudCwgaXNJbnRlcmFjdGluZykge1xuICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgY2FzZSAnbW91c2VvdmVyJzpcbiAgICAgIGNhc2UgJ21vdXNlb3V0JzpcbiAgICAgICAgdGhpcy5faGFzTW91c2VJbnRlcmFjdGlvbiA9IGlzSW50ZXJhY3RpbmdcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2ZvY3VzaW4nOlxuICAgICAgY2FzZSAnZm9jdXNvdXQnOlxuICAgICAgICB0aGlzLl9oYXNLZXlib2FyZEludGVyYWN0aW9uID0gaXNJbnRlcmFjdGluZ1xuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBpZiAoaXNJbnRlcmFjdGluZykge1xuICAgICAgdGhpcy5fY2xlYXJUaW1lb3V0KClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IG5leHRFbGVtZW50ID0gZXZlbnQucmVsYXRlZFRhcmdldFxuICAgIGlmICh0aGlzLl9lbGVtZW50ID09PSBuZXh0RWxlbWVudCB8fCB0aGlzLl9lbGVtZW50LmNvbnRhaW5zKG5leHRFbGVtZW50KSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fbWF5YmVTY2hlZHVsZUhpZGUoKVxuICB9XG5cbiAgX3NldExpc3RlbmVycygpIHtcbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VPVkVSLCBldmVudCA9PiB0aGlzLl9vbkludGVyYWN0aW9uKGV2ZW50LCB0cnVlKSlcbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VPVVQsIGV2ZW50ID0+IHRoaXMuX29uSW50ZXJhY3Rpb24oZXZlbnQsIGZhbHNlKSlcbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfRk9DVVNJTiwgZXZlbnQgPT4gdGhpcy5fb25JbnRlcmFjdGlvbihldmVudCwgdHJ1ZSkpXG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0ZPQ1VTT1VULCBldmVudCA9PiB0aGlzLl9vbkludGVyYWN0aW9uKGV2ZW50LCBmYWxzZSkpXG4gIH1cblxuICBfY2xlYXJUaW1lb3V0KCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KVxuICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsXG4gIH1cblxuICAvLyBTdGF0aWNcblxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IFRvYXN0LmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgY29uZmlnKVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVtjb25maWddKHRoaXMpXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG5lbmFibGVEaXNtaXNzVHJpZ2dlcihUb2FzdClcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBhZGQgLlRvYXN0IHRvIGpRdWVyeSBvbmx5IGlmIGpRdWVyeSBpcyBwcmVzZW50XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKFRvYXN0KVxuXG5leHBvcnQgZGVmYXVsdCBUb2FzdFxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4xLjMpOiBpbmRleC51bWQuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgQWxlcnQgZnJvbSAnLi9zcmMvYWxlcnQnXG5pbXBvcnQgQnV0dG9uIGZyb20gJy4vc3JjL2J1dHRvbidcbmltcG9ydCBDYXJvdXNlbCBmcm9tICcuL3NyYy9jYXJvdXNlbCdcbmltcG9ydCBDb2xsYXBzZSBmcm9tICcuL3NyYy9jb2xsYXBzZSdcbmltcG9ydCBEcm9wZG93biBmcm9tICcuL3NyYy9kcm9wZG93bidcbmltcG9ydCBNb2RhbCBmcm9tICcuL3NyYy9tb2RhbCdcbmltcG9ydCBPZmZjYW52YXMgZnJvbSAnLi9zcmMvb2ZmY2FudmFzJ1xuaW1wb3J0IFBvcG92ZXIgZnJvbSAnLi9zcmMvcG9wb3ZlcidcbmltcG9ydCBTY3JvbGxTcHkgZnJvbSAnLi9zcmMvc2Nyb2xsc3B5J1xuaW1wb3J0IFRhYiBmcm9tICcuL3NyYy90YWInXG5pbXBvcnQgVG9hc3QgZnJvbSAnLi9zcmMvdG9hc3QnXG5pbXBvcnQgVG9vbHRpcCBmcm9tICcuL3NyYy90b29sdGlwJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIEFsZXJ0LFxuICBCdXR0b24sXG4gIENhcm91c2VsLFxuICBDb2xsYXBzZSxcbiAgRHJvcGRvd24sXG4gIE1vZGFsLFxuICBPZmZjYW52YXMsXG4gIFBvcG92ZXIsXG4gIFNjcm9sbFNweSxcbiAgVGFiLFxuICBUb2FzdCxcbiAgVG9vbHRpcFxufVxuIiwiLyohIGNob2ljZXMuanMgdjkuMC4xIHwgwqkgMjAxOSBKb3NoIEpvaG5zb24gfCBodHRwczovL2dpdGh1Yi5jb20vanNoam9obnNvbi9DaG9pY2VzI3JlYWRtZSAqL1xuKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiQ2hvaWNlc1wiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJDaG9pY2VzXCJdID0gZmFjdG9yeSgpO1xufSkod2luZG93LCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuLyoqKioqKi8gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3Rcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vKioqKioqLyBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuLyoqKioqKi8gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3Rcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4vKioqKioqLyBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbi8qKioqKiovIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gbnM7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL3B1YmxpYy9hc3NldHMvc2NyaXB0cy9cIjtcbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBpc01lcmdlYWJsZU9iamVjdCA9IGZ1bmN0aW9uIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiBpc05vbk51bGxPYmplY3QodmFsdWUpXG5cdFx0JiYgIWlzU3BlY2lhbCh2YWx1ZSlcbn07XG5cbmZ1bmN0aW9uIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSkge1xuXHRyZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnXG59XG5cbmZ1bmN0aW9uIGlzU3BlY2lhbCh2YWx1ZSkge1xuXHR2YXIgc3RyaW5nVmFsdWUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuXG5cdHJldHVybiBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcblx0XHR8fCBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgRGF0ZV0nXG5cdFx0fHwgaXNSZWFjdEVsZW1lbnQodmFsdWUpXG59XG5cbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9iNWFjOTYzZmI3OTFkMTI5OGU3ZjM5NjIzNjM4M2JjOTU1ZjkxNmMxL3NyYy9pc29tb3JwaGljL2NsYXNzaWMvZWxlbWVudC9SZWFjdEVsZW1lbnQuanMjTDIxLUwyNVxudmFyIGNhblVzZVN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBjYW5Vc2VTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgOiAweGVhYzc7XG5cbmZ1bmN0aW9uIGlzUmVhY3RFbGVtZW50KHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFXG59XG5cbmZ1bmN0aW9uIGVtcHR5VGFyZ2V0KHZhbCkge1xuXHRyZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fVxufVxuXG5mdW5jdGlvbiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh2YWx1ZSwgb3B0aW9ucykge1xuXHRyZXR1cm4gKG9wdGlvbnMuY2xvbmUgIT09IGZhbHNlICYmIG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QodmFsdWUpKVxuXHRcdD8gZGVlcG1lcmdlKGVtcHR5VGFyZ2V0KHZhbHVlKSwgdmFsdWUsIG9wdGlvbnMpXG5cdFx0OiB2YWx1ZVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0QXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRyZXR1cm4gdGFyZ2V0LmNvbmNhdChzb3VyY2UpLm1hcChmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKGVsZW1lbnQsIG9wdGlvbnMpXG5cdH0pXG59XG5cbmZ1bmN0aW9uIGdldE1lcmdlRnVuY3Rpb24oa2V5LCBvcHRpb25zKSB7XG5cdGlmICghb3B0aW9ucy5jdXN0b21NZXJnZSkge1xuXHRcdHJldHVybiBkZWVwbWVyZ2Vcblx0fVxuXHR2YXIgY3VzdG9tTWVyZ2UgPSBvcHRpb25zLmN1c3RvbU1lcmdlKGtleSk7XG5cdHJldHVybiB0eXBlb2YgY3VzdG9tTWVyZ2UgPT09ICdmdW5jdGlvbicgPyBjdXN0b21NZXJnZSA6IGRlZXBtZXJnZVxufVxuXG5mdW5jdGlvbiBnZXRFbnVtZXJhYmxlT3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkge1xuXHRyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc1xuXHRcdD8gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpLmZpbHRlcihmdW5jdGlvbihzeW1ib2wpIHtcblx0XHRcdHJldHVybiB0YXJnZXQucHJvcGVydHlJc0VudW1lcmFibGUoc3ltYm9sKVxuXHRcdH0pXG5cdFx0OiBbXVxufVxuXG5mdW5jdGlvbiBnZXRLZXlzKHRhcmdldCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXModGFyZ2V0KS5jb25jYXQoZ2V0RW51bWVyYWJsZU93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpKVxufVxuXG4vLyBQcm90ZWN0cyBmcm9tIHByb3RvdHlwZSBwb2lzb25pbmcgYW5kIHVuZXhwZWN0ZWQgbWVyZ2luZyB1cCB0aGUgcHJvdG90eXBlIGNoYWluLlxuZnVuY3Rpb24gcHJvcGVydHlJc1Vuc2FmZSh0YXJnZXQsIGtleSkge1xuXHR0cnkge1xuXHRcdHJldHVybiAoa2V5IGluIHRhcmdldCkgLy8gUHJvcGVydGllcyBhcmUgc2FmZSB0byBtZXJnZSBpZiB0aGV5IGRvbid0IGV4aXN0IGluIHRoZSB0YXJnZXQgeWV0LFxuXHRcdFx0JiYgIShPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkgLy8gdW5zYWZlIGlmIHRoZXkgZXhpc3QgdXAgdGhlIHByb3RvdHlwZSBjaGFpbixcblx0XHRcdFx0JiYgT2JqZWN0LnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodGFyZ2V0LCBrZXkpKSAvLyBhbmQgYWxzbyB1bnNhZmUgaWYgdGhleSdyZSBub25lbnVtZXJhYmxlLlxuXHR9IGNhdGNoICh1bnVzZWQpIHtcblx0XHQvLyBDb3VudGVyaW50dWl0aXZlbHksIGl0J3Mgc2FmZSB0byBtZXJnZSBhbnkgcHJvcGVydHkgb24gYSB0YXJnZXQgdGhhdCBjYXVzZXMgdGhlIGBpbmAgb3BlcmF0b3IgdG8gdGhyb3cuXG5cdFx0Ly8gVGhpcyBoYXBwZW5zIHdoZW4gdHJ5aW5nIHRvIGNvcHkgYW4gb2JqZWN0IGluIHRoZSBzb3VyY2Ugb3ZlciBhIHBsYWluIHN0cmluZyBpbiB0aGUgdGFyZ2V0LlxuXHRcdHJldHVybiBmYWxzZVxuXHR9XG59XG5cbmZ1bmN0aW9uIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdHZhciBkZXN0aW5hdGlvbiA9IHt9O1xuXHRpZiAob3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCh0YXJnZXQpKSB7XG5cdFx0Z2V0S2V5cyh0YXJnZXQpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQodGFyZ2V0W2tleV0sIG9wdGlvbnMpO1xuXHRcdH0pO1xuXHR9XG5cdGdldEtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdGlmIChwcm9wZXJ0eUlzVW5zYWZlKHRhcmdldCwga2V5KSkge1xuXHRcdFx0cmV0dXJuXG5cdFx0fVxuXG5cdFx0aWYgKCFvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHNvdXJjZVtrZXldKSB8fCAhdGFyZ2V0W2tleV0pIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBnZXRNZXJnZUZ1bmN0aW9uKGtleSwgb3B0aW9ucykodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gZGVzdGluYXRpb25cbn1cblxuZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRvcHRpb25zLmFycmF5TWVyZ2UgPSBvcHRpb25zLmFycmF5TWVyZ2UgfHwgZGVmYXVsdEFycmF5TWVyZ2U7XG5cdG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QgPSBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0IHx8IGlzTWVyZ2VhYmxlT2JqZWN0O1xuXHQvLyBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCBpcyBhZGRlZCB0byBgb3B0aW9uc2Agc28gdGhhdCBjdXN0b20gYXJyYXlNZXJnZSgpXG5cdC8vIGltcGxlbWVudGF0aW9ucyBjYW4gdXNlIGl0LiBUaGUgY2FsbGVyIG1heSBub3QgcmVwbGFjZSBpdC5cblx0b3B0aW9ucy5jbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkO1xuXG5cdHZhciBzb3VyY2VJc0FycmF5ID0gQXJyYXkuaXNBcnJheShzb3VyY2UpO1xuXHR2YXIgdGFyZ2V0SXNBcnJheSA9IEFycmF5LmlzQXJyYXkodGFyZ2V0KTtcblx0dmFyIHNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2ggPSBzb3VyY2VJc0FycmF5ID09PSB0YXJnZXRJc0FycmF5O1xuXG5cdGlmICghc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCkge1xuXHRcdHJldHVybiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChzb3VyY2UsIG9wdGlvbnMpXG5cdH0gZWxzZSBpZiAoc291cmNlSXNBcnJheSkge1xuXHRcdHJldHVybiBvcHRpb25zLmFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpXG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zKVxuXHR9XG59XG5cbmRlZXBtZXJnZS5hbGwgPSBmdW5jdGlvbiBkZWVwbWVyZ2VBbGwoYXJyYXksIG9wdGlvbnMpIHtcblx0aWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIGFuIGFycmF5Jylcblx0fVxuXG5cdHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgbmV4dCkge1xuXHRcdHJldHVybiBkZWVwbWVyZ2UocHJldiwgbmV4dCwgb3B0aW9ucylcblx0fSwge30pXG59O1xuXG52YXIgZGVlcG1lcmdlXzEgPSBkZWVwbWVyZ2U7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVlcG1lcmdlXzE7XG5cblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCwgbW9kdWxlKSB7LyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9wb255ZmlsbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbi8qIGdsb2JhbCB3aW5kb3cgKi9cblxuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHJ1ZSkge1xuICByb290ID0gbW9kdWxlO1xufSBlbHNlIHt9XG5cbnZhciByZXN1bHQgPSBPYmplY3QoX3BvbnlmaWxsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bLyogZGVmYXVsdCAqLyBcImFcIl0pKHJvb3QpO1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IChyZXN1bHQpO1xuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwodGhpcywgX193ZWJwYWNrX3JlcXVpcmVfXyg1KSwgX193ZWJwYWNrX3JlcXVpcmVfXyg2KShtb2R1bGUpKSlcblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qIVxuICogRnVzZS5qcyB2My40LjUgLSBMaWdodHdlaWdodCBmdXp6eS1zZWFyY2ggKGh0dHA6Ly9mdXNlanMuaW8pXG4gKiBcbiAqIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IEtpcm9sbG9zIFJpc2sgKGh0dHA6Ly9raXJvLm1lKVxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC4gQXBhY2hlIFNvZnR3YXJlIExpY2Vuc2UgMi4wXG4gKiBcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICovXG4hZnVuY3Rpb24oZSx0KXsgdHJ1ZT9tb2R1bGUuZXhwb3J0cz10KCk6dW5kZWZpbmVkfSh0aGlzLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIG4ocil7aWYodFtyXSlyZXR1cm4gdFtyXS5leHBvcnRzO3ZhciBvPXRbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLG4pLG8ubD0hMCxvLmV4cG9ydHN9cmV0dXJuIG4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQscil7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2VudW1lcmFibGU6ITAsZ2V0OnJ9KX0sbi5yPWZ1bmN0aW9uKGUpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LG4udD1mdW5jdGlvbihlLHQpe2lmKDEmdCYmKGU9bihlKSksOCZ0KXJldHVybiBlO2lmKDQmdCYmXCJvYmplY3RcIj09dHlwZW9mIGUmJmUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgcj1PYmplY3QuY3JlYXRlKG51bGwpO2lmKG4ucihyKSxPYmplY3QuZGVmaW5lUHJvcGVydHkocixcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTplfSksMiZ0JiZcInN0cmluZ1wiIT10eXBlb2YgZSlmb3IodmFyIG8gaW4gZSluLmQocixvLGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfS5iaW5kKG51bGwsbykpO3JldHVybiByfSxuLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIG4uZCh0LFwiYVwiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPVwiXCIsbihuLnM9MSl9KFtmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gQXJyYXkuaXNBcnJheT9BcnJheS5pc0FycmF5KGUpOlwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX19LGZ1bmN0aW9uKGUsdCxuKXtmdW5jdGlvbiByKGUpe3JldHVybihyPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIGV9KShlKX1mdW5jdGlvbiBvKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciByPXRbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIua2V5LHIpfX12YXIgaT1uKDIpLGE9big4KSxzPW4oMCksYz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxuKXt2YXIgcj1uLmxvY2F0aW9uLG89dm9pZCAwPT09cj8wOnIsaT1uLmRpc3RhbmNlLHM9dm9pZCAwPT09aT8xMDA6aSxjPW4udGhyZXNob2xkLGg9dm9pZCAwPT09Yz8uNjpjLGw9bi5tYXhQYXR0ZXJuTGVuZ3RoLHU9dm9pZCAwPT09bD8zMjpsLGY9bi5jYXNlU2Vuc2l0aXZlLGQ9dm9pZCAwIT09ZiYmZix2PW4udG9rZW5TZXBhcmF0b3IscD12b2lkIDA9PT12Py8gKy9nOnYsZz1uLmZpbmRBbGxNYXRjaGVzLHk9dm9pZCAwIT09ZyYmZyxtPW4ubWluTWF0Y2hDaGFyTGVuZ3RoLGs9dm9pZCAwPT09bT8xOm0sUz1uLmlkLHg9dm9pZCAwPT09Uz9udWxsOlMsYj1uLmtleXMsTT12b2lkIDA9PT1iP1tdOmIsXz1uLnNob3VsZFNvcnQsTD12b2lkIDA9PT1ffHxfLHc9bi5nZXRGbixBPXZvaWQgMD09PXc/YTp3LEM9bi5zb3J0Rm4sST12b2lkIDA9PT1DP2Z1bmN0aW9uKGUsdCl7cmV0dXJuIGUuc2NvcmUtdC5zY29yZX06QyxPPW4udG9rZW5pemUsaj12b2lkIDAhPT1PJiZPLFA9bi5tYXRjaEFsbFRva2VucyxGPXZvaWQgMCE9PVAmJlAsVD1uLmluY2x1ZGVNYXRjaGVzLHo9dm9pZCAwIT09VCYmVCxFPW4uaW5jbHVkZVNjb3JlLEs9dm9pZCAwIT09RSYmRSwkPW4udmVyYm9zZSxKPXZvaWQgMCE9PSQmJiQ7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSx0aGlzLm9wdGlvbnM9e2xvY2F0aW9uOm8sZGlzdGFuY2U6cyx0aHJlc2hvbGQ6aCxtYXhQYXR0ZXJuTGVuZ3RoOnUsaXNDYXNlU2Vuc2l0aXZlOmQsdG9rZW5TZXBhcmF0b3I6cCxmaW5kQWxsTWF0Y2hlczp5LG1pbk1hdGNoQ2hhckxlbmd0aDprLGlkOngsa2V5czpNLGluY2x1ZGVNYXRjaGVzOnosaW5jbHVkZVNjb3JlOkssc2hvdWxkU29ydDpMLGdldEZuOkEsc29ydEZuOkksdmVyYm9zZTpKLHRva2VuaXplOmosbWF0Y2hBbGxUb2tlbnM6Rn0sdGhpcy5zZXRDb2xsZWN0aW9uKHQpfXZhciB0LG4sYztyZXR1cm4gdD1lLChuPVt7a2V5Olwic2V0Q29sbGVjdGlvblwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmxpc3Q9ZSxlfX0se2tleTpcInNlYXJjaFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7bGltaXQ6ITF9O3RoaXMuX2xvZygnLS0tLS0tLS0tXFxuU2VhcmNoIHBhdHRlcm46IFwiJy5jb25jYXQoZSwnXCInKSk7dmFyIG49dGhpcy5fcHJlcGFyZVNlYXJjaGVycyhlKSxyPW4udG9rZW5TZWFyY2hlcnMsbz1uLmZ1bGxTZWFyY2hlcixpPXRoaXMuX3NlYXJjaChyLG8pLGE9aS53ZWlnaHRzLHM9aS5yZXN1bHRzO3JldHVybiB0aGlzLl9jb21wdXRlU2NvcmUoYSxzKSx0aGlzLm9wdGlvbnMuc2hvdWxkU29ydCYmdGhpcy5fc29ydChzKSx0LmxpbWl0JiZcIm51bWJlclwiPT10eXBlb2YgdC5saW1pdCYmKHM9cy5zbGljZSgwLHQubGltaXQpKSx0aGlzLl9mb3JtYXQocyl9fSx7a2V5OlwiX3ByZXBhcmVTZWFyY2hlcnNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpcIlwiLHQ9W107aWYodGhpcy5vcHRpb25zLnRva2VuaXplKWZvcih2YXIgbj1lLnNwbGl0KHRoaXMub3B0aW9ucy50b2tlblNlcGFyYXRvcikscj0wLG89bi5sZW5ndGg7cjxvO3IrPTEpdC5wdXNoKG5ldyBpKG5bcl0sdGhpcy5vcHRpb25zKSk7cmV0dXJue3Rva2VuU2VhcmNoZXJzOnQsZnVsbFNlYXJjaGVyOm5ldyBpKGUsdGhpcy5vcHRpb25zKX19fSx7a2V5OlwiX3NlYXJjaFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOltdLHQ9YXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDAsbj10aGlzLmxpc3Qscj17fSxvPVtdO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBuWzBdKXtmb3IodmFyIGk9MCxhPW4ubGVuZ3RoO2k8YTtpKz0xKXRoaXMuX2FuYWx5emUoe2tleTpcIlwiLHZhbHVlOm5baV0scmVjb3JkOmksaW5kZXg6aX0se3Jlc3VsdE1hcDpyLHJlc3VsdHM6byx0b2tlblNlYXJjaGVyczplLGZ1bGxTZWFyY2hlcjp0fSk7cmV0dXJue3dlaWdodHM6bnVsbCxyZXN1bHRzOm99fWZvcih2YXIgcz17fSxjPTAsaD1uLmxlbmd0aDtjPGg7Yys9MSlmb3IodmFyIGw9bltjXSx1PTAsZj10aGlzLm9wdGlvbnMua2V5cy5sZW5ndGg7dTxmO3UrPTEpe3ZhciBkPXRoaXMub3B0aW9ucy5rZXlzW3VdO2lmKFwic3RyaW5nXCIhPXR5cGVvZiBkKXtpZihzW2QubmFtZV09e3dlaWdodDoxLWQud2VpZ2h0fHwxfSxkLndlaWdodDw9MHx8ZC53ZWlnaHQ+MSl0aHJvdyBuZXcgRXJyb3IoXCJLZXkgd2VpZ2h0IGhhcyB0byBiZSA+IDAgYW5kIDw9IDFcIik7ZD1kLm5hbWV9ZWxzZSBzW2RdPXt3ZWlnaHQ6MX07dGhpcy5fYW5hbHl6ZSh7a2V5OmQsdmFsdWU6dGhpcy5vcHRpb25zLmdldEZuKGwsZCkscmVjb3JkOmwsaW5kZXg6Y30se3Jlc3VsdE1hcDpyLHJlc3VsdHM6byx0b2tlblNlYXJjaGVyczplLGZ1bGxTZWFyY2hlcjp0fSl9cmV0dXJue3dlaWdodHM6cyxyZXN1bHRzOm99fX0se2tleTpcIl9hbmFseXplXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmtleSxyPWUuYXJyYXlJbmRleCxvPXZvaWQgMD09PXI/LTE6cixpPWUudmFsdWUsYT1lLnJlY29yZCxjPWUuaW5kZXgsaD10LnRva2VuU2VhcmNoZXJzLGw9dm9pZCAwPT09aD9bXTpoLHU9dC5mdWxsU2VhcmNoZXIsZj12b2lkIDA9PT11P1tdOnUsZD10LnJlc3VsdE1hcCx2PXZvaWQgMD09PWQ/e306ZCxwPXQucmVzdWx0cyxnPXZvaWQgMD09PXA/W106cDtpZihudWxsIT1pKXt2YXIgeT0hMSxtPS0xLGs9MDtpZihcInN0cmluZ1wiPT10eXBlb2YgaSl7dGhpcy5fbG9nKFwiXFxuS2V5OiBcIi5jb25jYXQoXCJcIj09PW4/XCItXCI6bikpO3ZhciBTPWYuc2VhcmNoKGkpO2lmKHRoaXMuX2xvZygnRnVsbCB0ZXh0OiBcIicuY29uY2F0KGksJ1wiLCBzY29yZTogJykuY29uY2F0KFMuc2NvcmUpKSx0aGlzLm9wdGlvbnMudG9rZW5pemUpe2Zvcih2YXIgeD1pLnNwbGl0KHRoaXMub3B0aW9ucy50b2tlblNlcGFyYXRvciksYj1bXSxNPTA7TTxsLmxlbmd0aDtNKz0xKXt2YXIgXz1sW01dO3RoaXMuX2xvZygnXFxuUGF0dGVybjogXCInLmNvbmNhdChfLnBhdHRlcm4sJ1wiJykpO2Zvcih2YXIgTD0hMSx3PTA7dzx4Lmxlbmd0aDt3Kz0xKXt2YXIgQT14W3ddLEM9Xy5zZWFyY2goQSksST17fTtDLmlzTWF0Y2g/KElbQV09Qy5zY29yZSx5PSEwLEw9ITAsYi5wdXNoKEMuc2NvcmUpKTooSVtBXT0xLHRoaXMub3B0aW9ucy5tYXRjaEFsbFRva2Vuc3x8Yi5wdXNoKDEpKSx0aGlzLl9sb2coJ1Rva2VuOiBcIicuY29uY2F0KEEsJ1wiLCBzY29yZTogJykuY29uY2F0KElbQV0pKX1MJiYoays9MSl9bT1iWzBdO2Zvcih2YXIgTz1iLmxlbmd0aCxqPTE7ajxPO2orPTEpbSs9YltqXTttLz1PLHRoaXMuX2xvZyhcIlRva2VuIHNjb3JlIGF2ZXJhZ2U6XCIsbSl9dmFyIFA9Uy5zY29yZTttPi0xJiYoUD0oUCttKS8yKSx0aGlzLl9sb2coXCJTY29yZSBhdmVyYWdlOlwiLFApO3ZhciBGPSF0aGlzLm9wdGlvbnMudG9rZW5pemV8fCF0aGlzLm9wdGlvbnMubWF0Y2hBbGxUb2tlbnN8fGs+PWwubGVuZ3RoO2lmKHRoaXMuX2xvZyhcIlxcbkNoZWNrIE1hdGNoZXM6IFwiLmNvbmNhdChGKSksKHl8fFMuaXNNYXRjaCkmJkYpe3ZhciBUPXZbY107VD9ULm91dHB1dC5wdXNoKHtrZXk6bixhcnJheUluZGV4Om8sdmFsdWU6aSxzY29yZTpQLG1hdGNoZWRJbmRpY2VzOlMubWF0Y2hlZEluZGljZXN9KToodltjXT17aXRlbTphLG91dHB1dDpbe2tleTpuLGFycmF5SW5kZXg6byx2YWx1ZTppLHNjb3JlOlAsbWF0Y2hlZEluZGljZXM6Uy5tYXRjaGVkSW5kaWNlc31dfSxnLnB1c2godltjXSkpfX1lbHNlIGlmKHMoaSkpZm9yKHZhciB6PTAsRT1pLmxlbmd0aDt6PEU7eis9MSl0aGlzLl9hbmFseXplKHtrZXk6bixhcnJheUluZGV4OnosdmFsdWU6aVt6XSxyZWNvcmQ6YSxpbmRleDpjfSx7cmVzdWx0TWFwOnYscmVzdWx0czpnLHRva2VuU2VhcmNoZXJzOmwsZnVsbFNlYXJjaGVyOmZ9KX19fSx7a2V5OlwiX2NvbXB1dGVTY29yZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dGhpcy5fbG9nKFwiXFxuXFxuQ29tcHV0aW5nIHNjb3JlOlxcblwiKTtmb3IodmFyIG49MCxyPXQubGVuZ3RoO248cjtuKz0xKXtmb3IodmFyIG89dFtuXS5vdXRwdXQsaT1vLmxlbmd0aCxhPTEscz0xLGM9MDtjPGk7Yys9MSl7dmFyIGg9ZT9lW29bY10ua2V5XS53ZWlnaHQ6MSxsPSgxPT09aD9vW2NdLnNjb3JlOm9bY10uc2NvcmV8fC4wMDEpKmg7MSE9PWg/cz1NYXRoLm1pbihzLGwpOihvW2NdLm5TY29yZT1sLGEqPWwpfXRbbl0uc2NvcmU9MT09PXM/YTpzLHRoaXMuX2xvZyh0W25dKX19fSx7a2V5OlwiX3NvcnRcIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9sb2coXCJcXG5cXG5Tb3J0aW5nLi4uLlwiKSxlLnNvcnQodGhpcy5vcHRpb25zLnNvcnRGbil9fSx7a2V5OlwiX2Zvcm1hdFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PVtdO2lmKHRoaXMub3B0aW9ucy52ZXJib3NlKXt2YXIgbj1bXTt0aGlzLl9sb2coXCJcXG5cXG5PdXRwdXQ6XFxuXFxuXCIsSlNPTi5zdHJpbmdpZnkoZSxmdW5jdGlvbihlLHQpe2lmKFwib2JqZWN0XCI9PT1yKHQpJiZudWxsIT09dCl7aWYoLTEhPT1uLmluZGV4T2YodCkpcmV0dXJuO24ucHVzaCh0KX1yZXR1cm4gdH0pKSxuPW51bGx9dmFyIG89W107dGhpcy5vcHRpb25zLmluY2x1ZGVNYXRjaGVzJiZvLnB1c2goZnVuY3Rpb24oZSx0KXt2YXIgbj1lLm91dHB1dDt0Lm1hdGNoZXM9W107Zm9yKHZhciByPTAsbz1uLmxlbmd0aDtyPG87cis9MSl7dmFyIGk9bltyXTtpZigwIT09aS5tYXRjaGVkSW5kaWNlcy5sZW5ndGgpe3ZhciBhPXtpbmRpY2VzOmkubWF0Y2hlZEluZGljZXMsdmFsdWU6aS52YWx1ZX07aS5rZXkmJihhLmtleT1pLmtleSksaS5oYXNPd25Qcm9wZXJ0eShcImFycmF5SW5kZXhcIikmJmkuYXJyYXlJbmRleD4tMSYmKGEuYXJyYXlJbmRleD1pLmFycmF5SW5kZXgpLHQubWF0Y2hlcy5wdXNoKGEpfX19KSx0aGlzLm9wdGlvbnMuaW5jbHVkZVNjb3JlJiZvLnB1c2goZnVuY3Rpb24oZSx0KXt0LnNjb3JlPWUuc2NvcmV9KTtmb3IodmFyIGk9MCxhPWUubGVuZ3RoO2k8YTtpKz0xKXt2YXIgcz1lW2ldO2lmKHRoaXMub3B0aW9ucy5pZCYmKHMuaXRlbT10aGlzLm9wdGlvbnMuZ2V0Rm4ocy5pdGVtLHRoaXMub3B0aW9ucy5pZClbMF0pLG8ubGVuZ3RoKXtmb3IodmFyIGM9e2l0ZW06cy5pdGVtfSxoPTAsbD1vLmxlbmd0aDtoPGw7aCs9MSlvW2hdKHMsYyk7dC5wdXNoKGMpfWVsc2UgdC5wdXNoKHMuaXRlbSl9cmV0dXJuIHR9fSx7a2V5OlwiX2xvZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU7dGhpcy5vcHRpb25zLnZlcmJvc2UmJihlPWNvbnNvbGUpLmxvZy5hcHBseShlLGFyZ3VtZW50cyl9fV0pJiZvKHQucHJvdG90eXBlLG4pLGMmJm8odCxjKSxlfSgpO2UuZXhwb3J0cz1jfSxmdW5jdGlvbihlLHQsbil7ZnVuY3Rpb24gcihlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLmtleSxyKX19dmFyIG89bigzKSxpPW4oNCksYT1uKDcpLHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQsbil7dmFyIHI9bi5sb2NhdGlvbixvPXZvaWQgMD09PXI/MDpyLGk9bi5kaXN0YW5jZSxzPXZvaWQgMD09PWk/MTAwOmksYz1uLnRocmVzaG9sZCxoPXZvaWQgMD09PWM/LjY6YyxsPW4ubWF4UGF0dGVybkxlbmd0aCx1PXZvaWQgMD09PWw/MzI6bCxmPW4uaXNDYXNlU2Vuc2l0aXZlLGQ9dm9pZCAwIT09ZiYmZix2PW4udG9rZW5TZXBhcmF0b3IscD12b2lkIDA9PT12Py8gKy9nOnYsZz1uLmZpbmRBbGxNYXRjaGVzLHk9dm9pZCAwIT09ZyYmZyxtPW4ubWluTWF0Y2hDaGFyTGVuZ3RoLGs9dm9pZCAwPT09bT8xOm07IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSx0aGlzLm9wdGlvbnM9e2xvY2F0aW9uOm8sZGlzdGFuY2U6cyx0aHJlc2hvbGQ6aCxtYXhQYXR0ZXJuTGVuZ3RoOnUsaXNDYXNlU2Vuc2l0aXZlOmQsdG9rZW5TZXBhcmF0b3I6cCxmaW5kQWxsTWF0Y2hlczp5LG1pbk1hdGNoQ2hhckxlbmd0aDprfSx0aGlzLnBhdHRlcm49dGhpcy5vcHRpb25zLmlzQ2FzZVNlbnNpdGl2ZT90OnQudG9Mb3dlckNhc2UoKSx0aGlzLnBhdHRlcm4ubGVuZ3RoPD11JiYodGhpcy5wYXR0ZXJuQWxwaGFiZXQ9YSh0aGlzLnBhdHRlcm4pKX12YXIgdCxuLHM7cmV0dXJuIHQ9ZSwobj1be2tleTpcInNlYXJjaFwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKHRoaXMub3B0aW9ucy5pc0Nhc2VTZW5zaXRpdmV8fChlPWUudG9Mb3dlckNhc2UoKSksdGhpcy5wYXR0ZXJuPT09ZSlyZXR1cm57aXNNYXRjaDohMCxzY29yZTowLG1hdGNoZWRJbmRpY2VzOltbMCxlLmxlbmd0aC0xXV19O3ZhciB0PXRoaXMub3B0aW9ucyxuPXQubWF4UGF0dGVybkxlbmd0aCxyPXQudG9rZW5TZXBhcmF0b3I7aWYodGhpcy5wYXR0ZXJuLmxlbmd0aD5uKXJldHVybiBvKGUsdGhpcy5wYXR0ZXJuLHIpO3ZhciBhPXRoaXMub3B0aW9ucyxzPWEubG9jYXRpb24sYz1hLmRpc3RhbmNlLGg9YS50aHJlc2hvbGQsbD1hLmZpbmRBbGxNYXRjaGVzLHU9YS5taW5NYXRjaENoYXJMZW5ndGg7cmV0dXJuIGkoZSx0aGlzLnBhdHRlcm4sdGhpcy5wYXR0ZXJuQWxwaGFiZXQse2xvY2F0aW9uOnMsZGlzdGFuY2U6Yyx0aHJlc2hvbGQ6aCxmaW5kQWxsTWF0Y2hlczpsLG1pbk1hdGNoQ2hhckxlbmd0aDp1fSl9fV0pJiZyKHQucHJvdG90eXBlLG4pLHMmJnIodCxzKSxlfSgpO2UuZXhwb3J0cz1zfSxmdW5jdGlvbihlLHQpe3ZhciBuPS9bXFwtXFxbXFxdXFwvXFx7XFx9XFwoXFwpXFwqXFwrXFw/XFwuXFxcXFxcXlxcJFxcfF0vZztlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06LyArL2csbz1uZXcgUmVnRXhwKHQucmVwbGFjZShuLFwiXFxcXCQmXCIpLnJlcGxhY2UocixcInxcIikpLGk9ZS5tYXRjaChvKSxhPSEhaSxzPVtdO2lmKGEpZm9yKHZhciBjPTAsaD1pLmxlbmd0aDtjPGg7Yys9MSl7dmFyIGw9aVtjXTtzLnB1c2goW2UuaW5kZXhPZihsKSxsLmxlbmd0aC0xXSl9cmV0dXJue3Njb3JlOmE/LjU6MSxpc01hdGNoOmEsbWF0Y2hlZEluZGljZXM6c319fSxmdW5jdGlvbihlLHQsbil7dmFyIHI9big1KSxvPW4oNik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuLGkpe2Zvcih2YXIgYT1pLmxvY2F0aW9uLHM9dm9pZCAwPT09YT8wOmEsYz1pLmRpc3RhbmNlLGg9dm9pZCAwPT09Yz8xMDA6YyxsPWkudGhyZXNob2xkLHU9dm9pZCAwPT09bD8uNjpsLGY9aS5maW5kQWxsTWF0Y2hlcyxkPXZvaWQgMCE9PWYmJmYsdj1pLm1pbk1hdGNoQ2hhckxlbmd0aCxwPXZvaWQgMD09PXY/MTp2LGc9cyx5PWUubGVuZ3RoLG09dSxrPWUuaW5kZXhPZih0LGcpLFM9dC5sZW5ndGgseD1bXSxiPTA7Yjx5O2IrPTEpeFtiXT0wO2lmKC0xIT09ayl7dmFyIE09cih0LHtlcnJvcnM6MCxjdXJyZW50TG9jYXRpb246ayxleHBlY3RlZExvY2F0aW9uOmcsZGlzdGFuY2U6aH0pO2lmKG09TWF0aC5taW4oTSxtKSwtMSE9PShrPWUubGFzdEluZGV4T2YodCxnK1MpKSl7dmFyIF89cih0LHtlcnJvcnM6MCxjdXJyZW50TG9jYXRpb246ayxleHBlY3RlZExvY2F0aW9uOmcsZGlzdGFuY2U6aH0pO209TWF0aC5taW4oXyxtKX19az0tMTtmb3IodmFyIEw9W10sdz0xLEE9Uyt5LEM9MTw8Uy0xLEk9MDtJPFM7SSs9MSl7Zm9yKHZhciBPPTAsaj1BO088ajspe3IodCx7ZXJyb3JzOkksY3VycmVudExvY2F0aW9uOmcraixleHBlY3RlZExvY2F0aW9uOmcsZGlzdGFuY2U6aH0pPD1tP089ajpBPWosaj1NYXRoLmZsb29yKChBLU8pLzIrTyl9QT1qO3ZhciBQPU1hdGgubWF4KDEsZy1qKzEpLEY9ZD95Ok1hdGgubWluKGcraix5KStTLFQ9QXJyYXkoRisyKTtUW0YrMV09KDE8PEkpLTE7Zm9yKHZhciB6PUY7ej49UDt6LT0xKXt2YXIgRT16LTEsSz1uW2UuY2hhckF0KEUpXTtpZihLJiYoeFtFXT0xKSxUW3pdPShUW3orMV08PDF8MSkmSywwIT09SSYmKFRbel18PShMW3orMV18TFt6XSk8PDF8MXxMW3orMV0pLFRbel0mQyYmKHc9cih0LHtlcnJvcnM6SSxjdXJyZW50TG9jYXRpb246RSxleHBlY3RlZExvY2F0aW9uOmcsZGlzdGFuY2U6aH0pKTw9bSl7aWYobT13LChrPUUpPD1nKWJyZWFrO1A9TWF0aC5tYXgoMSwyKmctayl9fWlmKHIodCx7ZXJyb3JzOkkrMSxjdXJyZW50TG9jYXRpb246ZyxleHBlY3RlZExvY2F0aW9uOmcsZGlzdGFuY2U6aH0pPm0pYnJlYWs7TD1UfXJldHVybntpc01hdGNoOms+PTAsc2NvcmU6MD09PXc/LjAwMTp3LG1hdGNoZWRJbmRpY2VzOm8oeCxwKX19fSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciBuPXQuZXJyb3JzLHI9dm9pZCAwPT09bj8wOm4sbz10LmN1cnJlbnRMb2NhdGlvbixpPXZvaWQgMD09PW8/MDpvLGE9dC5leHBlY3RlZExvY2F0aW9uLHM9dm9pZCAwPT09YT8wOmEsYz10LmRpc3RhbmNlLGg9dm9pZCAwPT09Yz8xMDA6YyxsPXIvZS5sZW5ndGgsdT1NYXRoLmFicyhzLWkpO3JldHVybiBoP2wrdS9oOnU/MTpsfX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOltdLHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjEsbj1bXSxyPS0xLG89LTEsaT0wLGE9ZS5sZW5ndGg7aTxhO2krPTEpe3ZhciBzPWVbaV07cyYmLTE9PT1yP3I9aTpzfHwtMT09PXJ8fCgobz1pLTEpLXIrMT49dCYmbi5wdXNoKFtyLG9dKSxyPS0xKX1yZXR1cm4gZVtpLTFdJiZpLXI+PXQmJm4ucHVzaChbcixpLTFdKSxufX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXt9LG49ZS5sZW5ndGgscj0wO3I8bjtyKz0xKXRbZS5jaGFyQXQocildPTA7Zm9yKHZhciBvPTA7bzxuO28rPTEpdFtlLmNoYXJBdChvKV18PTE8PG4tby0xO3JldHVybiB0fX0sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oMCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uIGUodCxuLG8pe2lmKG4pe3ZhciBpPW4uaW5kZXhPZihcIi5cIiksYT1uLHM9bnVsbDstMSE9PWkmJihhPW4uc2xpY2UoMCxpKSxzPW4uc2xpY2UoaSsxKSk7dmFyIGM9dFthXTtpZihudWxsIT1jKWlmKHN8fFwic3RyaW5nXCIhPXR5cGVvZiBjJiZcIm51bWJlclwiIT10eXBlb2YgYylpZihyKGMpKWZvcih2YXIgaD0wLGw9Yy5sZW5ndGg7aDxsO2grPTEpZShjW2hdLHMsbyk7ZWxzZSBzJiZlKGMscyxvKTtlbHNlIG8ucHVzaChjLnRvU3RyaW5nKCkpfWVsc2Ugby5wdXNoKHQpO3JldHVybiBvfShlLHQsW10pfX1dKX0pO1xuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbDsgfSk7XG5mdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKiovIH0pLFxuLyogNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbnZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcblxuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcblxuXG4vKioqLyB9KSxcbi8qIDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG5cbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvZnVzZS5qcy9kaXN0L2Z1c2UuanNcbnZhciBkaXN0X2Z1c2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xudmFyIGZ1c2VfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oZGlzdF9mdXNlKTtcblxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9kZWVwbWVyZ2UvZGlzdC9janMuanNcbnZhciBjanMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIGNqc19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihjanMpO1xuXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzXG52YXIgZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9yZWR1eC5qc1xuXG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG59O1xuXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IFwiQEByZWR1eC9JTklUXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUkVQTEFDRTogXCJAQHJlZHV4L1JFUExBQ0VcIiArIHJhbmRvbVN0cmluZygpLFxuICBQUk9CRV9VTktOT1dOX0FDVElPTjogZnVuY3Rpb24gUFJPQkVfVU5LTk9XTl9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFwiQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTlwiICsgcmFuZG9tU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0IGxvb2tzIGxpa2UgeW91IGFyZSBwYXNzaW5nIHNldmVyYWwgc3RvcmUgZW5oYW5jZXJzIHRvICcgKyAnY3JlYXRlU3RvcmUoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCBjb21wb3NlIHRoZW0gJyArICd0b2dldGhlciB0byBhIHNpbmdsZSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlKGxpc3RlbmVyKSBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmW2VzW1wiYVwiIC8qIGRlZmF1bHQgKi9dXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyW2VzW1wiYVwiIC8qIGRlZmF1bHQgKi9dXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cblxuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgXCJhY3Rpb24gXFxcIlwiICsgU3RyaW5nKGFjdGlvblR5cGUpICsgXCJcXFwiXCIgfHwgJ2FuIGFjdGlvbic7XG4gIHJldHVybiBcIkdpdmVuIFwiICsgYWN0aW9uRGVzY3JpcHRpb24gKyBcIiwgcmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBcIiArIFwiVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBcIiArIFwiSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCI7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIGFyZ3VtZW50TmFtZSArIFwiIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXFxcIlwiICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyBcIlxcXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgXCIgKyAoXCJrZXlzOiBcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLlJFUExBQ0UpIHJldHVybjtcblxuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBcIlVuZXhwZWN0ZWQgXCIgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArIFwiIFwiICsgKFwiXFxcIlwiICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIgZm91bmQgaW4gXCIgKyBhcmd1bWVudE5hbWUgKyBcIi4gXCIpICsgXCJFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6IFwiICsgKFwiXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgIHZhciBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBcIiArIFwiSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IFwiICsgXCJleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IFwiICsgXCJub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCBcIiArIFwieW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlIFwiICsgQWN0aW9uVHlwZXMuSU5JVCArIFwiIG9yIG90aGVyIGFjdGlvbnMgaW4gXFxcInJlZHV4LypcXFwiIFwiKSArIFwibmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgXCIgKyBcImN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIFwiICsgXCJpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgXCIgKyBcImFjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLlwiKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5cblxuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKGZhbHNlKSB7fVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7IC8vIFRoaXMgaXMgdXNlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3Qgd2FybiBhYm91dCB0aGUgc2FtZVxuICAvLyBrZXlzIG11bHRpcGxlIHRpbWVzLlxuXG4gIHZhciB1bmV4cGVjdGVkS2V5Q2FjaGU7XG5cbiAgaWYgKGZhbHNlKSB7fVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yO1xuXG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChmYWxzZSkgeyB2YXIgd2FybmluZ01lc3NhZ2U7IH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZVtfa2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhbiBhY3Rpb24gY3JlYXRvciBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZGlzcGF0Y2ggd3JhcHBlZCBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGluc3RlYWQgcmVjZWl2ZWQgXCIgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMpICsgXCIuIFwiICsgXCJEaWQgeW91IHdyaXRlIFxcXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCIgaW5zdGVhZCBvZiBcXFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCI/XCIpO1xuICB9XG5cbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gYWN0aW9uQ3JlYXRvcnMpIHtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpKTtcbiAgfVxuXG4gIGlmIChlbnVtZXJhYmxlT25seSkga2V5cyA9IGtleXMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgfSk7XG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHZvaWQgMCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMih7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAoZmFsc2UpIHt9XG5cblxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9zY3JpcHRzL3JlZHVjZXJzL2l0ZW1zLmpzXG52YXIgZGVmYXVsdFN0YXRlID0gW107XG5mdW5jdGlvbiBpdGVtc19pdGVtcyhzdGF0ZSwgYWN0aW9uKSB7XG4gIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgc3RhdGUgPSBkZWZhdWx0U3RhdGU7XG4gIH1cblxuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSAnQUREX0lURU0nOlxuICAgICAge1xuICAgICAgICAvLyBBZGQgb2JqZWN0IHRvIGl0ZW1zIGFycmF5XG4gICAgICAgIHZhciBuZXdTdGF0ZSA9IFtdLmNvbmNhdChzdGF0ZSwgW3tcbiAgICAgICAgICBpZDogYWN0aW9uLmlkLFxuICAgICAgICAgIGNob2ljZUlkOiBhY3Rpb24uY2hvaWNlSWQsXG4gICAgICAgICAgZ3JvdXBJZDogYWN0aW9uLmdyb3VwSWQsXG4gICAgICAgICAgdmFsdWU6IGFjdGlvbi52YWx1ZSxcbiAgICAgICAgICBsYWJlbDogYWN0aW9uLmxhYmVsLFxuICAgICAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICBoaWdobGlnaHRlZDogZmFsc2UsXG4gICAgICAgICAgY3VzdG9tUHJvcGVydGllczogYWN0aW9uLmN1c3RvbVByb3BlcnRpZXMsXG4gICAgICAgICAgcGxhY2Vob2xkZXI6IGFjdGlvbi5wbGFjZWhvbGRlciB8fCBmYWxzZSxcbiAgICAgICAgICBrZXlDb2RlOiBudWxsXG4gICAgICAgIH1dKTtcbiAgICAgICAgcmV0dXJuIG5ld1N0YXRlLm1hcChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgdmFyIGl0ZW0gPSBvYmo7XG4gICAgICAgICAgaXRlbS5oaWdobGlnaHRlZCA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgIGNhc2UgJ1JFTU9WRV9JVEVNJzpcbiAgICAgIHtcbiAgICAgICAgLy8gU2V0IGl0ZW0gdG8gaW5hY3RpdmVcbiAgICAgICAgcmV0dXJuIHN0YXRlLm1hcChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgdmFyIGl0ZW0gPSBvYmo7XG5cbiAgICAgICAgICBpZiAoaXRlbS5pZCA9PT0gYWN0aW9uLmlkKSB7XG4gICAgICAgICAgICBpdGVtLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgIGNhc2UgJ0hJR0hMSUdIVF9JVEVNJzpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLm1hcChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgdmFyIGl0ZW0gPSBvYmo7XG5cbiAgICAgICAgICBpZiAoaXRlbS5pZCA9PT0gYWN0aW9uLmlkKSB7XG4gICAgICAgICAgICBpdGVtLmhpZ2hsaWdodGVkID0gYWN0aW9uLmhpZ2hsaWdodGVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgIGRlZmF1bHQ6XG4gICAgICB7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH1cbiAgfVxufVxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvc2NyaXB0cy9yZWR1Y2Vycy9ncm91cHMuanNcbnZhciBncm91cHNfZGVmYXVsdFN0YXRlID0gW107XG5mdW5jdGlvbiBncm91cHMoc3RhdGUsIGFjdGlvbikge1xuICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgIHN0YXRlID0gZ3JvdXBzX2RlZmF1bHRTdGF0ZTtcbiAgfVxuXG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlICdBRERfR1JPVVAnOlxuICAgICAge1xuICAgICAgICByZXR1cm4gW10uY29uY2F0KHN0YXRlLCBbe1xuICAgICAgICAgIGlkOiBhY3Rpb24uaWQsXG4gICAgICAgICAgdmFsdWU6IGFjdGlvbi52YWx1ZSxcbiAgICAgICAgICBhY3RpdmU6IGFjdGlvbi5hY3RpdmUsXG4gICAgICAgICAgZGlzYWJsZWQ6IGFjdGlvbi5kaXNhYmxlZFxuICAgICAgICB9XSk7XG4gICAgICB9XG5cbiAgICBjYXNlICdDTEVBUl9DSE9JQ0VTJzpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuICB9XG59XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9zY3JpcHRzL3JlZHVjZXJzL2Nob2ljZXMuanNcbnZhciBjaG9pY2VzX2RlZmF1bHRTdGF0ZSA9IFtdO1xuZnVuY3Rpb24gY2hvaWNlc19jaG9pY2VzKHN0YXRlLCBhY3Rpb24pIHtcbiAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICBzdGF0ZSA9IGNob2ljZXNfZGVmYXVsdFN0YXRlO1xuICB9XG5cbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgJ0FERF9DSE9JQ0UnOlxuICAgICAge1xuICAgICAgICAvKlxuICAgICAgICAgICAgQSBkaXNhYmxlZCBjaG9pY2UgYXBwZWFycyBpbiB0aGUgY2hvaWNlIGRyb3Bkb3duIGJ1dCBjYW5ub3QgYmUgc2VsZWN0ZWRcbiAgICAgICAgICAgIEEgc2VsZWN0ZWQgY2hvaWNlIGhhcyBiZWVuIGFkZGVkIHRvIHRoZSBwYXNzZWQgaW5wdXQncyB2YWx1ZSAoYWRkZWQgYXMgYW4gaXRlbSlcbiAgICAgICAgICAgIEFuIGFjdGl2ZSBjaG9pY2UgYXBwZWFycyB3aXRoaW4gdGhlIGNob2ljZSBkcm9wZG93blxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIFtdLmNvbmNhdChzdGF0ZSwgW3tcbiAgICAgICAgICBpZDogYWN0aW9uLmlkLFxuICAgICAgICAgIGVsZW1lbnRJZDogYWN0aW9uLmVsZW1lbnRJZCxcbiAgICAgICAgICBncm91cElkOiBhY3Rpb24uZ3JvdXBJZCxcbiAgICAgICAgICB2YWx1ZTogYWN0aW9uLnZhbHVlLFxuICAgICAgICAgIGxhYmVsOiBhY3Rpb24ubGFiZWwgfHwgYWN0aW9uLnZhbHVlLFxuICAgICAgICAgIGRpc2FibGVkOiBhY3Rpb24uZGlzYWJsZWQgfHwgZmFsc2UsXG4gICAgICAgICAgc2VsZWN0ZWQ6IGZhbHNlLFxuICAgICAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICBzY29yZTogOTk5OSxcbiAgICAgICAgICBjdXN0b21Qcm9wZXJ0aWVzOiBhY3Rpb24uY3VzdG9tUHJvcGVydGllcyxcbiAgICAgICAgICBwbGFjZWhvbGRlcjogYWN0aW9uLnBsYWNlaG9sZGVyIHx8IGZhbHNlLFxuICAgICAgICAgIGtleUNvZGU6IG51bGxcbiAgICAgICAgfV0pO1xuICAgICAgfVxuXG4gICAgY2FzZSAnQUREX0lURU0nOlxuICAgICAge1xuICAgICAgICAvLyBJZiBhbGwgY2hvaWNlcyBuZWVkIHRvIGJlIGFjdGl2YXRlZFxuICAgICAgICBpZiAoYWN0aW9uLmFjdGl2YXRlT3B0aW9ucykge1xuICAgICAgICAgIHJldHVybiBzdGF0ZS5tYXAoZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgdmFyIGNob2ljZSA9IG9iajtcbiAgICAgICAgICAgIGNob2ljZS5hY3RpdmUgPSBhY3Rpb24uYWN0aXZlO1xuICAgICAgICAgICAgcmV0dXJuIGNob2ljZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSAvLyBXaGVuIGFuIGl0ZW0gaXMgYWRkZWQgYW5kIGl0IGhhcyBhbiBhc3NvY2lhdGVkIGNob2ljZSxcbiAgICAgICAgLy8gd2Ugd2FudCB0byBkaXNhYmxlIGl0IHNvIGl0IGNhbid0IGJlIGNob3NlbiBhZ2FpblxuXG5cbiAgICAgICAgaWYgKGFjdGlvbi5jaG9pY2VJZCA+IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlLm1hcChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICB2YXIgY2hvaWNlID0gb2JqO1xuXG4gICAgICAgICAgICBpZiAoY2hvaWNlLmlkID09PSBwYXJzZUludChhY3Rpb24uY2hvaWNlSWQsIDEwKSkge1xuICAgICAgICAgICAgICBjaG9pY2Uuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY2hvaWNlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuXG4gICAgY2FzZSAnUkVNT1ZFX0lURU0nOlxuICAgICAge1xuICAgICAgICAvLyBXaGVuIGFuIGl0ZW0gaXMgcmVtb3ZlZCBhbmQgaXQgaGFzIGFuIGFzc29jaWF0ZWQgY2hvaWNlLFxuICAgICAgICAvLyB3ZSB3YW50IHRvIHJlLWVuYWJsZSBpdCBzbyBpdCBjYW4gYmUgY2hvc2VuIGFnYWluXG4gICAgICAgIGlmIChhY3Rpb24uY2hvaWNlSWQgPiAtMSkge1xuICAgICAgICAgIHJldHVybiBzdGF0ZS5tYXAoZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgdmFyIGNob2ljZSA9IG9iajtcblxuICAgICAgICAgICAgaWYgKGNob2ljZS5pZCA9PT0gcGFyc2VJbnQoYWN0aW9uLmNob2ljZUlkLCAxMCkpIHtcbiAgICAgICAgICAgICAgY2hvaWNlLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBjaG9pY2U7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICB9XG5cbiAgICBjYXNlICdGSUxURVJfQ0hPSUNFUyc6XG4gICAgICB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5tYXAoZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgIHZhciBjaG9pY2UgPSBvYmo7IC8vIFNldCBhY3RpdmUgc3RhdGUgYmFzZWQgb24gd2hldGhlciBjaG9pY2UgaXNcbiAgICAgICAgICAvLyB3aXRoaW4gZmlsdGVyZWQgcmVzdWx0c1xuXG4gICAgICAgICAgY2hvaWNlLmFjdGl2ZSA9IGFjdGlvbi5yZXN1bHRzLnNvbWUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gX3JlZi5pdGVtLFxuICAgICAgICAgICAgICAgIHNjb3JlID0gX3JlZi5zY29yZTtcblxuICAgICAgICAgICAgaWYgKGl0ZW0uaWQgPT09IGNob2ljZS5pZCkge1xuICAgICAgICAgICAgICBjaG9pY2Uuc2NvcmUgPSBzY29yZTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gY2hvaWNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgIGNhc2UgJ0FDVElWQVRFX0NIT0lDRVMnOlxuICAgICAge1xuICAgICAgICByZXR1cm4gc3RhdGUubWFwKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICB2YXIgY2hvaWNlID0gb2JqO1xuICAgICAgICAgIGNob2ljZS5hY3RpdmUgPSBhY3Rpb24uYWN0aXZlO1xuICAgICAgICAgIHJldHVybiBjaG9pY2U7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgY2FzZSAnQ0xFQVJfQ0hPSUNFUyc6XG4gICAgICB7XG4gICAgICAgIHJldHVybiBjaG9pY2VzX2RlZmF1bHRTdGF0ZTtcbiAgICAgIH1cblxuICAgIGRlZmF1bHQ6XG4gICAgICB7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH1cbiAgfVxufVxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvc2NyaXB0cy9yZWR1Y2Vycy9nZW5lcmFsLmpzXG52YXIgZ2VuZXJhbF9kZWZhdWx0U3RhdGUgPSB7XG4gIGxvYWRpbmc6IGZhbHNlXG59O1xuXG52YXIgZ2VuZXJhbCA9IGZ1bmN0aW9uIGdlbmVyYWwoc3RhdGUsIGFjdGlvbikge1xuICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgIHN0YXRlID0gZ2VuZXJhbF9kZWZhdWx0U3RhdGU7XG4gIH1cblxuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSAnU0VUX0lTX0xPQURJTkcnOlxuICAgICAge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxvYWRpbmc6IGFjdGlvbi5pc0xvYWRpbmdcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgIGRlZmF1bHQ6XG4gICAgICB7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH1cbiAgfVxufTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgcmVkdWNlcnNfZ2VuZXJhbCA9IChnZW5lcmFsKTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3NjcmlwdHMvbGliL3V0aWxzLmpzXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbnZhciBnZXRSYW5kb21OdW1iZXIgPSBmdW5jdGlvbiBnZXRSYW5kb21OdW1iZXIobWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluKTtcbn07XG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cblxudmFyIGdlbmVyYXRlQ2hhcnMgPSBmdW5jdGlvbiBnZW5lcmF0ZUNoYXJzKGxlbmd0aCkge1xuICByZXR1cm4gQXJyYXkuZnJvbSh7XG4gICAgbGVuZ3RoOiBsZW5ndGhcbiAgfSwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXRSYW5kb21OdW1iZXIoMCwgMzYpLnRvU3RyaW5nKDM2KTtcbiAgfSkuam9pbignJyk7XG59O1xuLyoqXG4gKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnQgfCBIVE1MU2VsZWN0RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuXG52YXIgZ2VuZXJhdGVJZCA9IGZ1bmN0aW9uIGdlbmVyYXRlSWQoZWxlbWVudCwgcHJlZml4KSB7XG4gIHZhciBpZCA9IGVsZW1lbnQuaWQgfHwgZWxlbWVudC5uYW1lICYmIGVsZW1lbnQubmFtZSArIFwiLVwiICsgZ2VuZXJhdGVDaGFycygyKSB8fCBnZW5lcmF0ZUNoYXJzKDQpO1xuICBpZCA9IGlkLnJlcGxhY2UoLyg6fFxcLnxcXFt8XFxdfCwpL2csICcnKTtcbiAgaWQgPSBwcmVmaXggKyBcIi1cIiArIGlkO1xuICByZXR1cm4gaWQ7XG59O1xuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5cbnZhciBnZXRUeXBlID0gZnVuY3Rpb24gZ2V0VHlwZShvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopLnNsaWNlKDgsIC0xKTtcbn07XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge2FueX0gb2JqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuXG52YXIgaXNUeXBlID0gZnVuY3Rpb24gaXNUeXBlKHR5cGUsIG9iaikge1xuICByZXR1cm4gb2JqICE9PSB1bmRlZmluZWQgJiYgb2JqICE9PSBudWxsICYmIGdldFR5cGUob2JqKSA9PT0gdHlwZTtcbn07XG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IFt3cmFwcGVyPXtIVE1MRGl2RWxlbWVudH1dXG4gKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9XG4gKi9cblxudmFyIHV0aWxzX3dyYXAgPSBmdW5jdGlvbiB3cmFwKGVsZW1lbnQsIHdyYXBwZXIpIHtcbiAgaWYgKHdyYXBwZXIgPT09IHZvaWQgMCkge1xuICAgIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgfVxuXG4gIGlmIChlbGVtZW50Lm5leHRTaWJsaW5nKSB7XG4gICAgZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh3cmFwcGVyLCBlbGVtZW50Lm5leHRTaWJsaW5nKTtcbiAgfSBlbHNlIHtcbiAgICBlbGVtZW50LnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQod3JhcHBlcik7XG4gIH1cblxuICByZXR1cm4gd3JhcHBlci5hcHBlbmRDaGlsZChlbGVtZW50KTtcbn07XG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gc3RhcnRFbFxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gKiBAcGFyYW0gezEgfCAtMX0gZGlyZWN0aW9uXG4gKiBAcmV0dXJucyB7RWxlbWVudCB8IHVuZGVmaW5lZH1cbiAqL1xuXG52YXIgZ2V0QWRqYWNlbnRFbCA9IGZ1bmN0aW9uIGdldEFkamFjZW50RWwoc3RhcnRFbCwgc2VsZWN0b3IsIGRpcmVjdGlvbikge1xuICBpZiAoZGlyZWN0aW9uID09PSB2b2lkIDApIHtcbiAgICBkaXJlY3Rpb24gPSAxO1xuICB9XG5cbiAgaWYgKCEoc3RhcnRFbCBpbnN0YW5jZW9mIEVsZW1lbnQpIHx8IHR5cGVvZiBzZWxlY3RvciAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgdmFyIHByb3AgPSAoZGlyZWN0aW9uID4gMCA/ICduZXh0JyA6ICdwcmV2aW91cycpICsgXCJFbGVtZW50U2libGluZ1wiO1xuICB2YXIgc2libGluZyA9IHN0YXJ0RWxbcHJvcF07XG5cbiAgd2hpbGUgKHNpYmxpbmcpIHtcbiAgICBpZiAoc2libGluZy5tYXRjaGVzKHNlbGVjdG9yKSkge1xuICAgICAgcmV0dXJuIHNpYmxpbmc7XG4gICAgfVxuXG4gICAgc2libGluZyA9IHNpYmxpbmdbcHJvcF07XG4gIH1cblxuICByZXR1cm4gc2libGluZztcbn07XG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fSBwYXJlbnRcbiAqIEBwYXJhbSB7LTEgfCAxfSBkaXJlY3Rpb25cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5cbnZhciBpc1Njcm9sbGVkSW50b1ZpZXcgPSBmdW5jdGlvbiBpc1Njcm9sbGVkSW50b1ZpZXcoZWxlbWVudCwgcGFyZW50LCBkaXJlY3Rpb24pIHtcbiAgaWYgKGRpcmVjdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgZGlyZWN0aW9uID0gMTtcbiAgfVxuXG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBpc1Zpc2libGU7XG5cbiAgaWYgKGRpcmVjdGlvbiA+IDApIHtcbiAgICAvLyBJbiB2aWV3IGZyb20gYm90dG9tXG4gICAgaXNWaXNpYmxlID0gcGFyZW50LnNjcm9sbFRvcCArIHBhcmVudC5vZmZzZXRIZWlnaHQgPj0gZWxlbWVudC5vZmZzZXRUb3AgKyBlbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiB2aWV3IGZyb20gdG9wXG4gICAgaXNWaXNpYmxlID0gZWxlbWVudC5vZmZzZXRUb3AgPj0gcGFyZW50LnNjcm9sbFRvcDtcbiAgfVxuXG4gIHJldHVybiBpc1Zpc2libGU7XG59O1xuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cblxudmFyIHNhbml0aXNlID0gZnVuY3Rpb24gc2FuaXRpc2UodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdmFsdWUucmVwbGFjZSgvJi9nLCAnJmFtcDsnKS5yZXBsYWNlKC8+L2csICcmcnQ7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG4vKipcbiAqIEByZXR1cm5zIHsoKSA9PiAoc3RyOiBzdHJpbmcpID0+IEVsZW1lbnR9XG4gKi9cblxudmFyIHN0clRvRWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0bXBFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cikge1xuICAgIHZhciBjbGVhbmVkSW5wdXQgPSBzdHIudHJpbSgpO1xuICAgIHRtcEVsLmlubmVySFRNTCA9IGNsZWFuZWRJbnB1dDtcbiAgICB2YXIgZmlybGRDaGlsZCA9IHRtcEVsLmNoaWxkcmVuWzBdO1xuXG4gICAgd2hpbGUgKHRtcEVsLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHRtcEVsLnJlbW92ZUNoaWxkKHRtcEVsLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHJldHVybiBmaXJsZENoaWxkO1xuICB9O1xufSgpO1xuLyoqXG4gKiBAcGFyYW0ge3sgbGFiZWw/OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfX0gYVxuICogQHBhcmFtIHt7IGxhYmVsPzogc3RyaW5nLCB2YWx1ZTogc3RyaW5nIH19IGJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cblxudmFyIHNvcnRCeUFscGhhID0gZnVuY3Rpb24gc29ydEJ5QWxwaGEoX3JlZiwgX3JlZjIpIHtcbiAgdmFyIHZhbHVlID0gX3JlZi52YWx1ZSxcbiAgICAgIF9yZWYkbGFiZWwgPSBfcmVmLmxhYmVsLFxuICAgICAgbGFiZWwgPSBfcmVmJGxhYmVsID09PSB2b2lkIDAgPyB2YWx1ZSA6IF9yZWYkbGFiZWw7XG4gIHZhciB2YWx1ZTIgPSBfcmVmMi52YWx1ZSxcbiAgICAgIF9yZWYyJGxhYmVsID0gX3JlZjIubGFiZWwsXG4gICAgICBsYWJlbDIgPSBfcmVmMiRsYWJlbCA9PT0gdm9pZCAwID8gdmFsdWUyIDogX3JlZjIkbGFiZWw7XG4gIHJldHVybiBsYWJlbC5sb2NhbGVDb21wYXJlKGxhYmVsMiwgW10sIHtcbiAgICBzZW5zaXRpdml0eTogJ2Jhc2UnLFxuICAgIGlnbm9yZVB1bmN0dWF0aW9uOiB0cnVlLFxuICAgIG51bWVyaWM6IHRydWVcbiAgfSk7XG59O1xuLyoqXG4gKiBAcGFyYW0ge3sgc2NvcmU6IG51bWJlciB9fSBhXG4gKiBAcGFyYW0ge3sgc2NvcmU6IG51bWJlciB9fSBiXG4gKi9cblxudmFyIHNvcnRCeVNjb3JlID0gZnVuY3Rpb24gc29ydEJ5U2NvcmUoYSwgYikge1xuICByZXR1cm4gYS5zY29yZSAtIGIuc2NvcmU7XG59O1xuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtvYmplY3R9IGN1c3RvbUFyZ3NcbiAqL1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgdHlwZSwgY3VzdG9tQXJncykge1xuICBpZiAoY3VzdG9tQXJncyA9PT0gdm9pZCAwKSB7XG4gICAgY3VzdG9tQXJncyA9IG51bGw7XG4gIH1cblxuICB2YXIgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQodHlwZSwge1xuICAgIGRldGFpbDogY3VzdG9tQXJncyxcbiAgICBidWJibGVzOiB0cnVlLFxuICAgIGNhbmNlbGFibGU6IHRydWVcbiAgfSk7XG4gIHJldHVybiBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufTtcbi8qKlxuICogQHBhcmFtIHthcnJheX0gYXJyYXlcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IFtrZXk9XCJ2YWx1ZVwiXVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cblxudmFyIGV4aXN0c0luQXJyYXkgPSBmdW5jdGlvbiBleGlzdHNJbkFycmF5KGFycmF5LCB2YWx1ZSwga2V5KSB7XG4gIGlmIChrZXkgPT09IHZvaWQgMCkge1xuICAgIGtleSA9ICd2YWx1ZSc7XG4gIH1cblxuICByZXR1cm4gYXJyYXkuc29tZShmdW5jdGlvbiAoaXRlbSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gaXRlbVtrZXldID09PSB2YWx1ZS50cmltKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZW1ba2V5XSA9PT0gdmFsdWU7XG4gIH0pO1xufTtcbi8qKlxuICogQHBhcmFtIHthbnl9IG9ialxuICogQHJldHVybnMge2FueX1cbiAqL1xuXG52YXIgY2xvbmVPYmplY3QgPSBmdW5jdGlvbiBjbG9uZU9iamVjdChvYmopIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIGtleXMgcHJlc2VudCBvbiB0aGUgZmlyc3QgYnV0IG1pc3Npbmcgb24gdGhlIHNlY29uZCBvYmplY3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBhXG4gKiBAcGFyYW0ge29iamVjdH0gYlxuICogQHJldHVybnMge3N0cmluZ1tdfVxuICovXG5cbnZhciBkaWZmID0gZnVuY3Rpb24gZGlmZihhLCBiKSB7XG4gIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKGEpLnNvcnQoKTtcbiAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMoYikuc29ydCgpO1xuICByZXR1cm4gYUtleXMuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGJLZXlzLmluZGV4T2YoaSkgPCAwO1xuICB9KTtcbn07XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9zY3JpcHRzL3JlZHVjZXJzL2luZGV4LmpzXG5cblxuXG5cblxuXG52YXIgYXBwUmVkdWNlciA9IGNvbWJpbmVSZWR1Y2Vycyh7XG4gIGl0ZW1zOiBpdGVtc19pdGVtcyxcbiAgZ3JvdXBzOiBncm91cHMsXG4gIGNob2ljZXM6IGNob2ljZXNfY2hvaWNlcyxcbiAgZ2VuZXJhbDogcmVkdWNlcnNfZ2VuZXJhbFxufSk7XG5cbnZhciByZWR1Y2Vyc19yb290UmVkdWNlciA9IGZ1bmN0aW9uIHJvb3RSZWR1Y2VyKHBhc3NlZFN0YXRlLCBhY3Rpb24pIHtcbiAgdmFyIHN0YXRlID0gcGFzc2VkU3RhdGU7IC8vIElmIHdlIGFyZSBjbGVhcmluZyBhbGwgaXRlbXMsIGdyb3VwcyBhbmQgb3B0aW9ucyB3ZSByZWFzc2lnblxuICAvLyBzdGF0ZSBhbmQgdGhlbiBwYXNzIHRoYXQgc3RhdGUgdG8gb3VyIHByb3BlciByZWR1Y2VyLiBUaGlzIGlzbid0XG4gIC8vIG11dGF0aW5nIG91ciBhY3R1YWwgc3RhdGVcbiAgLy8gU2VlOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zNTY0MTk5MlxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ0NMRUFSX0FMTCcpIHtcbiAgICBzdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfSBlbHNlIGlmIChhY3Rpb24udHlwZSA9PT0gJ1JFU0VUX1RPJykge1xuICAgIHJldHVybiBjbG9uZU9iamVjdChhY3Rpb24uc3RhdGUpO1xuICB9XG5cbiAgcmV0dXJuIGFwcFJlZHVjZXIoc3RhdGUsIGFjdGlvbik7XG59O1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciByZWR1Y2VycyA9IChyZWR1Y2Vyc19yb290UmVkdWNlcik7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9zY3JpcHRzL3N0b3JlL3N0b3JlLmpzXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cblxuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uLy4uL3R5cGVzL2luZGV4JykuQ2hvaWNlcy5DaG9pY2V9IENob2ljZVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vLi4vdHlwZXMvaW5kZXgnKS5DaG9pY2VzLkdyb3VwfSBHcm91cFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vLi4vdHlwZXMvaW5kZXgnKS5DaG9pY2VzLkl0ZW19IEl0ZW1cbiAqL1xuXG52YXIgc3RvcmVfU3RvcmUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdG9yZSgpIHtcbiAgICB0aGlzLl9zdG9yZSA9IGNyZWF0ZVN0b3JlKHJlZHVjZXJzLCB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyAmJiB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXygpKTtcbiAgfVxuICAvKipcbiAgICogU3Vic2NyaWJlIHN0b3JlIHRvIGZ1bmN0aW9uIGNhbGwgKHdyYXBwZWQgUmVkdXggbWV0aG9kKVxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gb25DaGFuZ2UgRnVuY3Rpb24gdG8gdHJpZ2dlciB3aGVuIHN0YXRlIGNoYW5nZXNcbiAgICogQHJldHVyblxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBTdG9yZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShvbkNoYW5nZSkge1xuICAgIHRoaXMuX3N0b3JlLnN1YnNjcmliZShvbkNoYW5nZSk7XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoIGV2ZW50IHRvIHN0b3JlICh3cmFwcGVkIFJlZHV4IG1ldGhvZClcbiAgICogQHBhcmFtICB7eyB0eXBlOiBzdHJpbmcsIFt4OiBzdHJpbmddOiBhbnkgfX0gYWN0aW9uIEFjdGlvbiB0byB0cmlnZ2VyXG4gICAqIEByZXR1cm5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICB0aGlzLl9zdG9yZS5kaXNwYXRjaChhY3Rpb24pO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgc3RvcmUgb2JqZWN0ICh3cmFwcGluZyBSZWR1eCBtZXRob2QpXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IFN0YXRlXG4gICAqL1xuICA7XG5cbiAgLyoqXG4gICAqIEdldCBsb2FkaW5nIHN0YXRlIGZyb20gc3RvcmVcbiAgICogQHJldHVybnMge2Jvb2xlYW59IExvYWRpbmcgU3RhdGVcbiAgICovXG4gIF9wcm90by5pc0xvYWRpbmcgPSBmdW5jdGlvbiBpc0xvYWRpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuZ2VuZXJhbC5sb2FkaW5nO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgc2luZ2xlIGNob2ljZSBieSBpdCdzIElEXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgKiBAcmV0dXJucyB7Q2hvaWNlIHwgdW5kZWZpbmVkfSBGb3VuZCBjaG9pY2VcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0Q2hvaWNlQnlJZCA9IGZ1bmN0aW9uIGdldENob2ljZUJ5SWQoaWQpIHtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmVDaG9pY2VzLmZpbmQoZnVuY3Rpb24gKGNob2ljZSkge1xuICAgICAgcmV0dXJuIGNob2ljZS5pZCA9PT0gcGFyc2VJbnQoaWQsIDEwKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogR2V0IGdyb3VwIGJ5IGdyb3VwIGlkXG4gICAqIEBwYXJhbSAge251bWJlcn0gaWQgR3JvdXAgSURcbiAgICogQHJldHVybnMge0dyb3VwIHwgdW5kZWZpbmVkfSBHcm91cCBkYXRhXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldEdyb3VwQnlJZCA9IGZ1bmN0aW9uIGdldEdyb3VwQnlJZChpZCkge1xuICAgIHJldHVybiB0aGlzLmdyb3Vwcy5maW5kKGZ1bmN0aW9uIChncm91cCkge1xuICAgICAgcmV0dXJuIGdyb3VwLmlkID09PSBpZDtcbiAgICB9KTtcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoU3RvcmUsIFt7XG4gICAga2V5OiBcInN0YXRlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGl0ZW1zIGZyb20gc3RvcmVcbiAgICAgKiBAcmV0dXJucyB7SXRlbVtdfSBJdGVtIG9iamVjdHNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIml0ZW1zXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZS5pdGVtcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGFjdGl2ZSBpdGVtcyBmcm9tIHN0b3JlXG4gICAgICogQHJldHVybnMge0l0ZW1bXX0gSXRlbSBvYmplY3RzXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJhY3RpdmVJdGVtc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXRlbXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtLmFjdGl2ZSA9PT0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgaGlnaGxpZ2h0ZWQgaXRlbXMgZnJvbSBzdG9yZVxuICAgICAqIEByZXR1cm5zIHtJdGVtW119IEl0ZW0gb2JqZWN0c1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaGlnaGxpZ2h0ZWRBY3RpdmVJdGVtc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXRlbXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtLmFjdGl2ZSAmJiBpdGVtLmhpZ2hsaWdodGVkO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBjaG9pY2VzIGZyb20gc3RvcmVcbiAgICAgKiBAcmV0dXJucyB7Q2hvaWNlW119IE9wdGlvbiBvYmplY3RzXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJjaG9pY2VzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZS5jaG9pY2VzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYWN0aXZlIGNob2ljZXMgZnJvbSBzdG9yZVxuICAgICAqIEByZXR1cm5zIHtDaG9pY2VbXX0gT3B0aW9uIG9iamVjdHNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImFjdGl2ZUNob2ljZXNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNob2ljZXMuZmlsdGVyKGZ1bmN0aW9uIChjaG9pY2UpIHtcbiAgICAgICAgcmV0dXJuIGNob2ljZS5hY3RpdmUgPT09IHRydWU7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHNlbGVjdGFibGUgY2hvaWNlcyBmcm9tIHN0b3JlXG4gICAgICogQHJldHVybnMge0Nob2ljZVtdfSBPcHRpb24gb2JqZWN0c1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2VsZWN0YWJsZUNob2ljZXNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNob2ljZXMuZmlsdGVyKGZ1bmN0aW9uIChjaG9pY2UpIHtcbiAgICAgICAgcmV0dXJuIGNob2ljZS5kaXNhYmxlZCAhPT0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgY2hvaWNlcyB0aGF0IGNhbiBiZSBzZWFyY2hlZCAoZXhjbHVkaW5nIHBsYWNlaG9sZGVycylcbiAgICAgKiBAcmV0dXJucyB7Q2hvaWNlW119IE9wdGlvbiBvYmplY3RzXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZWFyY2hhYmxlQ2hvaWNlc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0YWJsZUNob2ljZXMuZmlsdGVyKGZ1bmN0aW9uIChjaG9pY2UpIHtcbiAgICAgICAgcmV0dXJuIGNob2ljZS5wbGFjZWhvbGRlciAhPT0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgcGxhY2Vob2xkZXIgY2hvaWNlIGZyb20gc3RvcmVcbiAgICAgKiBAcmV0dXJucyB7Q2hvaWNlIHwgdW5kZWZpbmVkfSBGb3VuZCBwbGFjZWhvbGRlclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicGxhY2Vob2xkZXJDaG9pY2VcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBbXS5jb25jYXQodGhpcy5jaG9pY2VzKS5yZXZlcnNlKCkuZmluZChmdW5jdGlvbiAoY2hvaWNlKSB7XG4gICAgICAgIHJldHVybiBjaG9pY2UucGxhY2Vob2xkZXIgPT09IHRydWU7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGdyb3VwcyBmcm9tIHN0b3JlXG4gICAgICogQHJldHVybnMge0dyb3VwW119IEdyb3VwIG9iamVjdHNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdyb3Vwc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuZ3JvdXBzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYWN0aXZlIGdyb3VwcyBmcm9tIHN0b3JlXG4gICAgICogQHJldHVybnMge0dyb3VwW119IEdyb3VwIG9iamVjdHNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImFjdGl2ZUdyb3Vwc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIGdyb3VwcyA9IHRoaXMuZ3JvdXBzLFxuICAgICAgICAgIGNob2ljZXMgPSB0aGlzLmNob2ljZXM7XG4gICAgICByZXR1cm4gZ3JvdXBzLmZpbHRlcihmdW5jdGlvbiAoZ3JvdXApIHtcbiAgICAgICAgdmFyIGlzQWN0aXZlID0gZ3JvdXAuYWN0aXZlID09PSB0cnVlICYmIGdyb3VwLmRpc2FibGVkID09PSBmYWxzZTtcbiAgICAgICAgdmFyIGhhc0FjdGl2ZU9wdGlvbnMgPSBjaG9pY2VzLnNvbWUoZnVuY3Rpb24gKGNob2ljZSkge1xuICAgICAgICAgIHJldHVybiBjaG9pY2UuYWN0aXZlID09PSB0cnVlICYmIGNob2ljZS5kaXNhYmxlZCA9PT0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gaXNBY3RpdmUgJiYgaGFzQWN0aXZlT3B0aW9ucztcbiAgICAgIH0sIFtdKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3RvcmU7XG59KCk7XG5cblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL2Ryb3Bkb3duLmpzXG5mdW5jdGlvbiBkcm9wZG93bl9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gZHJvcGRvd25fY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkcm9wZG93bl9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZHJvcGRvd25fZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi8uLi90eXBlcy9pbmRleCcpLkNob2ljZXMucGFzc2VkRWxlbWVudH0gcGFzc2VkRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vLi4vdHlwZXMvaW5kZXgnKS5DaG9pY2VzLkNsYXNzTmFtZXN9IENsYXNzTmFtZXNcbiAqL1xudmFyIERyb3Bkb3duID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7e1xuICAgKiAgZWxlbWVudDogSFRNTEVsZW1lbnQsXG4gICAqICB0eXBlOiBwYXNzZWRFbGVtZW50Wyd0eXBlJ10sXG4gICAqICBjbGFzc05hbWVzOiBDbGFzc05hbWVzLFxuICAgKiB9fSBhcmdzXG4gICAqL1xuICBmdW5jdGlvbiBEcm9wZG93bihfcmVmKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQsXG4gICAgICAgIHR5cGUgPSBfcmVmLnR5cGUsXG4gICAgICAgIGNsYXNzTmFtZXMgPSBfcmVmLmNsYXNzTmFtZXM7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBCb3R0b20gcG9zaXRpb24gb2YgZHJvcGRvd24gaW4gdmlld3BvcnQgY29vcmRpbmF0ZXNcbiAgICogQHJldHVybnMge251bWJlcn0gVmVydGljYWwgcG9zaXRpb25cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gRHJvcGRvd24ucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBGaW5kIGVsZW1lbnQgdGhhdCBtYXRjaGVzIHBhc3NlZCBzZWxlY3RvclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3JcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50IHwgbnVsbH1cbiAgICovXG4gIF9wcm90by5nZXRDaGlsZCA9IGZ1bmN0aW9uIGdldENoaWxkKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfVxuICAvKipcbiAgICogU2hvdyBkcm9wZG93biB0byB1c2VyIGJ5IGFkZGluZyBhY3RpdmUgc3RhdGUgY2xhc3NcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KCkge1xuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lcy5hY3RpdmVTdGF0ZSk7XG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEhpZGUgZHJvcGRvd24gZnJvbSB1c2VyXG4gICAqIEByZXR1cm5zIHt0aGlzfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oaWRlID0gZnVuY3Rpb24gaGlkZSgpIHtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzTmFtZXMuYWN0aXZlU3RhdGUpO1xuICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgZHJvcGRvd25fY3JlYXRlQ2xhc3MoRHJvcGRvd24sIFt7XG4gICAga2V5OiBcImRpc3RhbmNlRnJvbVRvcFdpbmRvd1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERyb3Bkb3duO1xufSgpO1xuXG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3NjcmlwdHMvY29uc3RhbnRzLmpzXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMvaW5kZXgnKS5DaG9pY2VzLkNsYXNzTmFtZXN9IENsYXNzTmFtZXNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uL3R5cGVzL2luZGV4JykuQ2hvaWNlcy5PcHRpb25zfSBPcHRpb25zXG4gKi9cblxuLyoqIEB0eXBlIHtDbGFzc05hbWVzfSAqL1xuXG52YXIgREVGQVVMVF9DTEFTU05BTUVTID0ge1xuICBjb250YWluZXJPdXRlcjogJ2Nob2ljZXMnLFxuICBjb250YWluZXJJbm5lcjogJ2Nob2ljZXNfX2lubmVyJyxcbiAgaW5wdXQ6ICdjaG9pY2VzX19pbnB1dCcsXG4gIGlucHV0Q2xvbmVkOiAnY2hvaWNlc19faW5wdXQtLWNsb25lZCcsXG4gIGxpc3Q6ICdjaG9pY2VzX19saXN0JyxcbiAgbGlzdEl0ZW1zOiAnY2hvaWNlc19fbGlzdC0tbXVsdGlwbGUnLFxuICBsaXN0U2luZ2xlOiAnY2hvaWNlc19fbGlzdC0tc2luZ2xlJyxcbiAgbGlzdERyb3Bkb3duOiAnY2hvaWNlc19fbGlzdC0tZHJvcGRvd24nLFxuICBpdGVtOiAnY2hvaWNlc19faXRlbScsXG4gIGl0ZW1TZWxlY3RhYmxlOiAnY2hvaWNlc19faXRlbS0tc2VsZWN0YWJsZScsXG4gIGl0ZW1EaXNhYmxlZDogJ2Nob2ljZXNfX2l0ZW0tLWRpc2FibGVkJyxcbiAgaXRlbUNob2ljZTogJ2Nob2ljZXNfX2l0ZW0tLWNob2ljZScsXG4gIHBsYWNlaG9sZGVyOiAnY2hvaWNlc19fcGxhY2Vob2xkZXInLFxuICBncm91cDogJ2Nob2ljZXNfX2dyb3VwJyxcbiAgZ3JvdXBIZWFkaW5nOiAnY2hvaWNlc19faGVhZGluZycsXG4gIGJ1dHRvbjogJ2Nob2ljZXNfX2J1dHRvbicsXG4gIGFjdGl2ZVN0YXRlOiAnaXMtYWN0aXZlJyxcbiAgZm9jdXNTdGF0ZTogJ2lzLWZvY3VzZWQnLFxuICBvcGVuU3RhdGU6ICdpcy1vcGVuJyxcbiAgZGlzYWJsZWRTdGF0ZTogJ2lzLWRpc2FibGVkJyxcbiAgaGlnaGxpZ2h0ZWRTdGF0ZTogJ2lzLWhpZ2hsaWdodGVkJyxcbiAgc2VsZWN0ZWRTdGF0ZTogJ2lzLXNlbGVjdGVkJyxcbiAgZmxpcHBlZFN0YXRlOiAnaXMtZmxpcHBlZCcsXG4gIGxvYWRpbmdTdGF0ZTogJ2lzLWxvYWRpbmcnLFxuICBub1Jlc3VsdHM6ICdoYXMtbm8tcmVzdWx0cycsXG4gIG5vQ2hvaWNlczogJ2hhcy1uby1jaG9pY2VzJ1xufTtcbi8qKiBAdHlwZSB7T3B0aW9uc30gKi9cblxudmFyIERFRkFVTFRfQ09ORklHID0ge1xuICBpdGVtczogW10sXG4gIGNob2ljZXM6IFtdLFxuICBzaWxlbnQ6IGZhbHNlLFxuICByZW5kZXJDaG9pY2VMaW1pdDogLTEsXG4gIG1heEl0ZW1Db3VudDogLTEsXG4gIGFkZEl0ZW1zOiB0cnVlLFxuICBhZGRJdGVtRmlsdGVyOiBudWxsLFxuICByZW1vdmVJdGVtczogdHJ1ZSxcbiAgcmVtb3ZlSXRlbUJ1dHRvbjogZmFsc2UsXG4gIGVkaXRJdGVtczogZmFsc2UsXG4gIGR1cGxpY2F0ZUl0ZW1zQWxsb3dlZDogdHJ1ZSxcbiAgZGVsaW1pdGVyOiAnLCcsXG4gIHBhc3RlOiB0cnVlLFxuICBzZWFyY2hFbmFibGVkOiB0cnVlLFxuICBzZWFyY2hDaG9pY2VzOiB0cnVlLFxuICBzZWFyY2hGbG9vcjogMSxcbiAgc2VhcmNoUmVzdWx0TGltaXQ6IDQsXG4gIHNlYXJjaEZpZWxkczogWydsYWJlbCcsICd2YWx1ZSddLFxuICBwb3NpdGlvbjogJ2F1dG8nLFxuICByZXNldFNjcm9sbFBvc2l0aW9uOiB0cnVlLFxuICBzaG91bGRTb3J0OiB0cnVlLFxuICBzaG91bGRTb3J0SXRlbXM6IGZhbHNlLFxuICBzb3J0ZXI6IHNvcnRCeUFscGhhLFxuICBwbGFjZWhvbGRlcjogdHJ1ZSxcbiAgcGxhY2Vob2xkZXJWYWx1ZTogbnVsbCxcbiAgc2VhcmNoUGxhY2Vob2xkZXJWYWx1ZTogbnVsbCxcbiAgcHJlcGVuZFZhbHVlOiBudWxsLFxuICBhcHBlbmRWYWx1ZTogbnVsbCxcbiAgcmVuZGVyU2VsZWN0ZWRDaG9pY2VzOiAnYXV0bycsXG4gIGxvYWRpbmdUZXh0OiAnTG9hZGluZy4uLicsXG4gIG5vUmVzdWx0c1RleHQ6ICdObyByZXN1bHRzIGZvdW5kJyxcbiAgbm9DaG9pY2VzVGV4dDogJ05vIGNob2ljZXMgdG8gY2hvb3NlIGZyb20nLFxuICBpdGVtU2VsZWN0VGV4dDogJ1ByZXNzIHRvIHNlbGVjdCcsXG4gIHVuaXF1ZUl0ZW1UZXh0OiAnT25seSB1bmlxdWUgdmFsdWVzIGNhbiBiZSBhZGRlZCcsXG4gIGN1c3RvbUFkZEl0ZW1UZXh0OiAnT25seSB2YWx1ZXMgbWF0Y2hpbmcgc3BlY2lmaWMgY29uZGl0aW9ucyBjYW4gYmUgYWRkZWQnLFxuICBhZGRJdGVtVGV4dDogZnVuY3Rpb24gYWRkSXRlbVRleHQodmFsdWUpIHtcbiAgICByZXR1cm4gXCJQcmVzcyBFbnRlciB0byBhZGQgPGI+XFxcIlwiICsgc2FuaXRpc2UodmFsdWUpICsgXCJcXFwiPC9iPlwiO1xuICB9LFxuICBtYXhJdGVtVGV4dDogZnVuY3Rpb24gbWF4SXRlbVRleHQobWF4SXRlbUNvdW50KSB7XG4gICAgcmV0dXJuIFwiT25seSBcIiArIG1heEl0ZW1Db3VudCArIFwiIHZhbHVlcyBjYW4gYmUgYWRkZWRcIjtcbiAgfSxcbiAgdmFsdWVDb21wYXJlcjogZnVuY3Rpb24gdmFsdWVDb21wYXJlcih2YWx1ZTEsIHZhbHVlMikge1xuICAgIHJldHVybiB2YWx1ZTEgPT09IHZhbHVlMjtcbiAgfSxcbiAgZnVzZU9wdGlvbnM6IHtcbiAgICBpbmNsdWRlU2NvcmU6IHRydWVcbiAgfSxcbiAgY2FsbGJhY2tPbkluaXQ6IG51bGwsXG4gIGNhbGxiYWNrT25DcmVhdGVUZW1wbGF0ZXM6IG51bGwsXG4gIGNsYXNzTmFtZXM6IERFRkFVTFRfQ0xBU1NOQU1FU1xufTtcbnZhciBFVkVOVFMgPSB7XG4gIHNob3dEcm9wZG93bjogJ3Nob3dEcm9wZG93bicsXG4gIGhpZGVEcm9wZG93bjogJ2hpZGVEcm9wZG93bicsXG4gIGNoYW5nZTogJ2NoYW5nZScsXG4gIGNob2ljZTogJ2Nob2ljZScsXG4gIHNlYXJjaDogJ3NlYXJjaCcsXG4gIGFkZEl0ZW06ICdhZGRJdGVtJyxcbiAgcmVtb3ZlSXRlbTogJ3JlbW92ZUl0ZW0nLFxuICBoaWdobGlnaHRJdGVtOiAnaGlnaGxpZ2h0SXRlbScsXG4gIGhpZ2hsaWdodENob2ljZTogJ2hpZ2hsaWdodENob2ljZSdcbn07XG52YXIgQUNUSU9OX1RZUEVTID0ge1xuICBBRERfQ0hPSUNFOiAnQUREX0NIT0lDRScsXG4gIEZJTFRFUl9DSE9JQ0VTOiAnRklMVEVSX0NIT0lDRVMnLFxuICBBQ1RJVkFURV9DSE9JQ0VTOiAnQUNUSVZBVEVfQ0hPSUNFUycsXG4gIENMRUFSX0NIT0lDRVM6ICdDTEVBUl9DSE9JQ0VTJyxcbiAgQUREX0dST1VQOiAnQUREX0dST1VQJyxcbiAgQUREX0lURU06ICdBRERfSVRFTScsXG4gIFJFTU9WRV9JVEVNOiAnUkVNT1ZFX0lURU0nLFxuICBISUdITElHSFRfSVRFTTogJ0hJR0hMSUdIVF9JVEVNJyxcbiAgQ0xFQVJfQUxMOiAnQ0xFQVJfQUxMJ1xufTtcbnZhciBLRVlfQ09ERVMgPSB7XG4gIEJBQ0tfS0VZOiA0NixcbiAgREVMRVRFX0tFWTogOCxcbiAgRU5URVJfS0VZOiAxMyxcbiAgQV9LRVk6IDY1LFxuICBFU0NfS0VZOiAyNyxcbiAgVVBfS0VZOiAzOCxcbiAgRE9XTl9LRVk6IDQwLFxuICBQQUdFX1VQX0tFWTogMzMsXG4gIFBBR0VfRE9XTl9LRVk6IDM0XG59O1xudmFyIFRFWFRfVFlQRSA9ICd0ZXh0JztcbnZhciBTRUxFQ1RfT05FX1RZUEUgPSAnc2VsZWN0LW9uZSc7XG52YXIgU0VMRUNUX01VTFRJUExFX1RZUEUgPSAnc2VsZWN0LW11bHRpcGxlJztcbnZhciBTQ1JPTExJTkdfU1BFRUQgPSA0O1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL2NvbnRhaW5lci5qc1xuXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vLi4vdHlwZXMvaW5kZXgnKS5DaG9pY2VzLnBhc3NlZEVsZW1lbnR9IHBhc3NlZEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uLy4uL3R5cGVzL2luZGV4JykuQ2hvaWNlcy5DbGFzc05hbWVzfSBDbGFzc05hbWVzXG4gKi9cblxudmFyIGNvbnRhaW5lcl9Db250YWluZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQHBhcmFtIHt7XG4gICAqICBlbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICogIHR5cGU6IHBhc3NlZEVsZW1lbnRbJ3R5cGUnXSxcbiAgICogIGNsYXNzTmFtZXM6IENsYXNzTmFtZXMsXG4gICAqICBwb3NpdGlvblxuICAgKiB9fSBhcmdzXG4gICAqL1xuICBmdW5jdGlvbiBDb250YWluZXIoX3JlZikge1xuICAgIHZhciBlbGVtZW50ID0gX3JlZi5lbGVtZW50LFxuICAgICAgICB0eXBlID0gX3JlZi50eXBlLFxuICAgICAgICBjbGFzc05hbWVzID0gX3JlZi5jbGFzc05hbWVzLFxuICAgICAgICBwb3NpdGlvbiA9IF9yZWYucG9zaXRpb247XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7XG4gICAgdGhpcy5pc0ZsaXBwZWQgPSBmYWxzZTtcbiAgICB0aGlzLmlzRm9jdXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLmlzRGlzYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX29uRm9jdXMgPSB0aGlzLl9vbkZvY3VzLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25CbHVyID0gdGhpcy5fb25CbHVyLmJpbmQodGhpcyk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQ29udGFpbmVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLl9vbkZvY3VzKTtcbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMuX29uQmx1cik7XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZUV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5fb25Gb2N1cyk7XG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JsdXInLCB0aGlzLl9vbkJsdXIpO1xuICB9XG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgd2hldGhlciBjb250YWluZXIgc2hvdWxkIGJlIGZsaXBwZWQgYmFzZWQgb24gcGFzc2VkXG4gICAqIGRyb3Bkb3duIHBvc2l0aW9uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkcm9wZG93blBvc1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2hvdWxkRmxpcCA9IGZ1bmN0aW9uIHNob3VsZEZsaXAoZHJvcGRvd25Qb3MpIHtcbiAgICBpZiAodHlwZW9mIGRyb3Bkb3duUG9zICE9PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gLy8gSWYgZmxpcCBpcyBlbmFibGVkIGFuZCB0aGUgZHJvcGRvd24gYm90dG9tIHBvc2l0aW9uIGlzXG4gICAgLy8gZ3JlYXRlciB0aGFuIHRoZSB3aW5kb3cgaGVpZ2h0IGZsaXAgdGhlIGRyb3Bkb3duLlxuXG5cbiAgICB2YXIgc2hvdWxkRmxpcCA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMucG9zaXRpb24gPT09ICdhdXRvJykge1xuICAgICAgc2hvdWxkRmxpcCA9ICF3aW5kb3cubWF0Y2hNZWRpYShcIihtaW4taGVpZ2h0OiBcIiArIChkcm9wZG93blBvcyArIDEpICsgXCJweClcIikubWF0Y2hlcztcbiAgICB9IGVsc2UgaWYgKHRoaXMucG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICBzaG91bGRGbGlwID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2hvdWxkRmxpcDtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFjdGl2ZURlc2NlbmRhbnRJRFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXRBY3RpdmVEZXNjZW5kYW50ID0gZnVuY3Rpb24gc2V0QWN0aXZlRGVzY2VuZGFudChhY3RpdmVEZXNjZW5kYW50SUQpIHtcbiAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnLCBhY3RpdmVEZXNjZW5kYW50SUQpO1xuICB9O1xuXG4gIF9wcm90by5yZW1vdmVBY3RpdmVEZXNjZW5kYW50ID0gZnVuY3Rpb24gcmVtb3ZlQWN0aXZlRGVzY2VuZGFudCgpIHtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnKTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGRyb3Bkb3duUG9zXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9wZW4gPSBmdW5jdGlvbiBvcGVuKGRyb3Bkb3duUG9zKSB7XG4gICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWVzLm9wZW5TdGF0ZSk7XG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgdGhpcy5pc09wZW4gPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuc2hvdWxkRmxpcChkcm9wZG93blBvcykpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lcy5mbGlwcGVkU3RhdGUpO1xuICAgICAgdGhpcy5pc0ZsaXBwZWQgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY2xvc2UgPSBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzTmFtZXMub3BlblN0YXRlKTtcbiAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgdGhpcy5yZW1vdmVBY3RpdmVEZXNjZW5kYW50KCk7XG4gICAgdGhpcy5pc09wZW4gPSBmYWxzZTsgLy8gQSBkcm9wZG93biBmbGlwcyBpZiBpdCBkb2VzIG5vdCBoYXZlIHNwYWNlIHdpdGhpbiB0aGUgcGFnZVxuXG4gICAgaWYgKHRoaXMuaXNGbGlwcGVkKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzTmFtZXMuZmxpcHBlZFN0YXRlKTtcbiAgICAgIHRoaXMuaXNGbGlwcGVkID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5mb2N1cyA9IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgIGlmICghdGhpcy5pc0ZvY3Vzc2VkKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmFkZEZvY3VzU3RhdGUgPSBmdW5jdGlvbiBhZGRGb2N1c1N0YXRlKCkge1xuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lcy5mb2N1c1N0YXRlKTtcbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlRm9jdXNTdGF0ZSA9IGZ1bmN0aW9uIHJlbW92ZUZvY3VzU3RhdGUoKSB7XG4gICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jbGFzc05hbWVzLmZvY3VzU3RhdGUpO1xuICB9O1xuXG4gIF9wcm90by5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jbGFzc05hbWVzLmRpc2FibGVkU3RhdGUpO1xuICAgIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnKTtcblxuICAgIGlmICh0aGlzLnR5cGUgPT09IFNFTEVDVF9PTkVfVFlQRSkge1xuICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnMCcpO1xuICAgIH1cblxuICAgIHRoaXMuaXNEaXNhYmxlZCA9IGZhbHNlO1xuICB9O1xuXG4gIF9wcm90by5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMuZGlzYWJsZWRTdGF0ZSk7XG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG5cbiAgICBpZiAodGhpcy50eXBlID09PSBTRUxFQ1RfT05FX1RZUEUpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgfVxuXG4gICAgdGhpcy5pc0Rpc2FibGVkID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by53cmFwID0gZnVuY3Rpb24gd3JhcChlbGVtZW50KSB7XG4gICAgdXRpbHNfd3JhcChlbGVtZW50LCB0aGlzLmVsZW1lbnQpO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAgICovXG4gIDtcblxuICBfcHJvdG8udW53cmFwID0gZnVuY3Rpb24gdW53cmFwKGVsZW1lbnQpIHtcbiAgICAvLyBNb3ZlIHBhc3NlZCBlbGVtZW50IG91dHNpZGUgdGhpcyBlbGVtZW50XG4gICAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIHRoaXMuZWxlbWVudCk7IC8vIFJlbW92ZSB0aGlzIGVsZW1lbnRcblxuICAgIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XG4gIH07XG5cbiAgX3Byb3RvLmFkZExvYWRpbmdTdGF0ZSA9IGZ1bmN0aW9uIGFkZExvYWRpbmdTdGF0ZSgpIHtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMubG9hZGluZ1N0YXRlKTtcbiAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWJ1c3knLCAndHJ1ZScpO1xuICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTtcbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlTG9hZGluZ1N0YXRlID0gZnVuY3Rpb24gcmVtb3ZlTG9hZGluZ1N0YXRlKCkge1xuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3NOYW1lcy5sb2FkaW5nU3RhdGUpO1xuICAgIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtYnVzeScpO1xuICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XG4gIH07XG5cbiAgX3Byb3RvLl9vbkZvY3VzID0gZnVuY3Rpb24gX29uRm9jdXMoKSB7XG4gICAgdGhpcy5pc0ZvY3Vzc2VkID0gdHJ1ZTtcbiAgfTtcblxuICBfcHJvdG8uX29uQmx1ciA9IGZ1bmN0aW9uIF9vbkJsdXIoKSB7XG4gICAgdGhpcy5pc0ZvY3Vzc2VkID0gZmFsc2U7XG4gIH07XG5cbiAgcmV0dXJuIENvbnRhaW5lcjtcbn0oKTtcblxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9zY3JpcHRzL2NvbXBvbmVudHMvaW5wdXQuanNcbmZ1bmN0aW9uIGlucHV0X2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBpbnB1dF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGlucHV0X2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBpbnB1dF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5cblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi8uLi90eXBlcy9pbmRleCcpLkNob2ljZXMucGFzc2VkRWxlbWVudH0gcGFzc2VkRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vLi4vdHlwZXMvaW5kZXgnKS5DaG9pY2VzLkNsYXNzTmFtZXN9IENsYXNzTmFtZXNcbiAqL1xuXG52YXIgaW5wdXRfSW5wdXQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQHBhcmFtIHt7XG4gICAqICBlbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50LFxuICAgKiAgdHlwZTogcGFzc2VkRWxlbWVudFsndHlwZSddLFxuICAgKiAgY2xhc3NOYW1lczogQ2xhc3NOYW1lcyxcbiAgICogIHByZXZlbnRQYXN0ZTogYm9vbGVhblxuICAgKiB9fSBhcmdzXG4gICAqL1xuICBmdW5jdGlvbiBJbnB1dChfcmVmKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQsXG4gICAgICAgIHR5cGUgPSBfcmVmLnR5cGUsXG4gICAgICAgIGNsYXNzTmFtZXMgPSBfcmVmLmNsYXNzTmFtZXMsXG4gICAgICAgIHByZXZlbnRQYXN0ZSA9IF9yZWYucHJldmVudFBhc3RlO1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuICAgIHRoaXMucHJldmVudFBhc3RlID0gcHJldmVudFBhc3RlO1xuICAgIHRoaXMuaXNGb2N1c3NlZCA9IHRoaXMuZWxlbWVudCA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICB0aGlzLmlzRGlzYWJsZWQgPSBlbGVtZW50LmRpc2FibGVkO1xuICAgIHRoaXMuX29uUGFzdGUgPSB0aGlzLl9vblBhc3RlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25JbnB1dCA9IHRoaXMuX29uSW5wdXQuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vbkZvY3VzID0gdGhpcy5fb25Gb2N1cy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX29uQmx1ciA9IHRoaXMuX29uQmx1ci5iaW5kKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGxhY2Vob2xkZXJcbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gSW5wdXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdwYXN0ZScsIHRoaXMuX29uUGFzdGUpO1xuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIHRoaXMuX29uSW5wdXQsIHtcbiAgICAgIHBhc3NpdmU6IHRydWVcbiAgICB9KTtcbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLl9vbkZvY3VzLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCB0aGlzLl9vbkJsdXIsIHtcbiAgICAgIHBhc3NpdmU6IHRydWVcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLl9vbklucHV0LCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Bhc3RlJywgdGhpcy5fb25QYXN0ZSk7XG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5fb25Gb2N1cywge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdibHVyJywgdGhpcy5fb25CbHVyLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgIHRoaXMuaXNEaXNhYmxlZCA9IGZhbHNlO1xuICB9O1xuXG4gIF9wcm90by5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKTtcbiAgICB0aGlzLmlzRGlzYWJsZWQgPSB0cnVlO1xuICB9O1xuXG4gIF9wcm90by5mb2N1cyA9IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgIGlmICghdGhpcy5pc0ZvY3Vzc2VkKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmJsdXIgPSBmdW5jdGlvbiBibHVyKCkge1xuICAgIGlmICh0aGlzLmlzRm9jdXNzZWQpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5ibHVyKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBTZXQgdmFsdWUgb2YgaW5wdXQgdG8gYmxhbmtcbiAgICogQHBhcmFtIHtib29sZWFufSBzZXRXaWR0aFxuICAgKiBAcmV0dXJucyB7dGhpc31cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY2xlYXIgPSBmdW5jdGlvbiBjbGVhcihzZXRXaWR0aCkge1xuICAgIGlmIChzZXRXaWR0aCA9PT0gdm9pZCAwKSB7XG4gICAgICBzZXRXaWR0aCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZWxlbWVudC52YWx1ZSkge1xuICAgICAgdGhpcy5lbGVtZW50LnZhbHVlID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHNldFdpZHRoKSB7XG4gICAgICB0aGlzLnNldFdpZHRoKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgY29ycmVjdCBpbnB1dCB3aWR0aCBiYXNlZCBvbiBwbGFjZWhvbGRlclxuICAgKiB2YWx1ZSBvciBpbnB1dCB2YWx1ZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXRXaWR0aCA9IGZ1bmN0aW9uIHNldFdpZHRoKCkge1xuICAgIC8vIFJlc2l6ZSBpbnB1dCB0byBjb250ZW50cyBvciBwbGFjZWhvbGRlclxuICAgIHZhciBfdGhpcyRlbGVtZW50ID0gdGhpcy5lbGVtZW50LFxuICAgICAgICBzdHlsZSA9IF90aGlzJGVsZW1lbnQuc3R5bGUsXG4gICAgICAgIHZhbHVlID0gX3RoaXMkZWxlbWVudC52YWx1ZSxcbiAgICAgICAgcGxhY2Vob2xkZXIgPSBfdGhpcyRlbGVtZW50LnBsYWNlaG9sZGVyO1xuICAgIHN0eWxlLm1pbldpZHRoID0gcGxhY2Vob2xkZXIubGVuZ3RoICsgMSArIFwiY2hcIjtcbiAgICBzdHlsZS53aWR0aCA9IHZhbHVlLmxlbmd0aCArIDEgKyBcImNoXCI7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhY3RpdmVEZXNjZW5kYW50SURcbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2V0QWN0aXZlRGVzY2VuZGFudCA9IGZ1bmN0aW9uIHNldEFjdGl2ZURlc2NlbmRhbnQoYWN0aXZlRGVzY2VuZGFudElEKSB7XG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgYWN0aXZlRGVzY2VuZGFudElEKTtcbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlQWN0aXZlRGVzY2VuZGFudCA9IGZ1bmN0aW9uIHJlbW92ZUFjdGl2ZURlc2NlbmRhbnQoKSB7XG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1hY3RpdmVkZXNjZW5kYW50Jyk7XG4gIH07XG5cbiAgX3Byb3RvLl9vbklucHV0ID0gZnVuY3Rpb24gX29uSW5wdXQoKSB7XG4gICAgaWYgKHRoaXMudHlwZSAhPT0gU0VMRUNUX09ORV9UWVBFKSB7XG4gICAgICB0aGlzLnNldFdpZHRoKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fb25QYXN0ZSA9IGZ1bmN0aW9uIF9vblBhc3RlKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMucHJldmVudFBhc3RlKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX29uRm9jdXMgPSBmdW5jdGlvbiBfb25Gb2N1cygpIHtcbiAgICB0aGlzLmlzRm9jdXNzZWQgPSB0cnVlO1xuICB9O1xuXG4gIF9wcm90by5fb25CbHVyID0gZnVuY3Rpb24gX29uQmx1cigpIHtcbiAgICB0aGlzLmlzRm9jdXNzZWQgPSBmYWxzZTtcbiAgfTtcblxuICBpbnB1dF9jcmVhdGVDbGFzcyhJbnB1dCwgW3tcbiAgICBrZXk6IFwicGxhY2Vob2xkZXJcIixcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChwbGFjZWhvbGRlcikge1xuICAgICAgdGhpcy5lbGVtZW50LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ2YWx1ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHNhbml0aXNlKHRoaXMuZWxlbWVudC52YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuICAgICxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgdGhpcy5lbGVtZW50LnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIElucHV0O1xufSgpO1xuXG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9saXN0LmpzXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vLi4vdHlwZXMvaW5kZXgnKS5DaG9pY2VzLkNob2ljZX0gQ2hvaWNlXG4gKi9cblxudmFyIGxpc3RfTGlzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3sgZWxlbWVudDogSFRNTEVsZW1lbnQgfX0gYXJnc1xuICAgKi9cbiAgZnVuY3Rpb24gTGlzdChfcmVmKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQ7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLnNjcm9sbFBvcyA9IHRoaXMuZWxlbWVudC5zY3JvbGxUb3A7XG4gICAgdGhpcy5oZWlnaHQgPSB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExpc3QucHJvdG90eXBlO1xuXG4gIF9wcm90by5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuZWxlbWVudC5pbm5lckhUTUwgPSAnJztcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtFbGVtZW50IHwgRG9jdW1lbnRGcmFnbWVudH0gbm9kZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hcHBlbmQgPSBmdW5jdGlvbiBhcHBlbmQobm9kZSkge1xuICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChub2RlKTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gICAqIEByZXR1cm5zIHtFbGVtZW50IHwgbnVsbH1cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0Q2hpbGQgPSBmdW5jdGlvbiBnZXRDaGlsZChzZWxlY3Rvcikge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gIH1cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYXNDaGlsZHJlbiA9IGZ1bmN0aW9uIGhhc0NoaWxkcmVuKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuaGFzQ2hpbGROb2RlcygpO1xuICB9O1xuXG4gIF9wcm90by5zY3JvbGxUb1RvcCA9IGZ1bmN0aW9uIHNjcm9sbFRvVG9wKCkge1xuICAgIHRoaXMuZWxlbWVudC5zY3JvbGxUb3AgPSAwO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAgICogQHBhcmFtIHsxIHwgLTF9IGRpcmVjdGlvblxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zY3JvbGxUb0NoaWxkRWxlbWVudCA9IGZ1bmN0aW9uIHNjcm9sbFRvQ2hpbGRFbGVtZW50KGVsZW1lbnQsIGRpcmVjdGlvbikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbGlzdEhlaWdodCA9IHRoaXMuZWxlbWVudC5vZmZzZXRIZWlnaHQ7IC8vIFNjcm9sbCBwb3NpdGlvbiBvZiBkcm9wZG93blxuXG4gICAgdmFyIGxpc3RTY3JvbGxQb3NpdGlvbiA9IHRoaXMuZWxlbWVudC5zY3JvbGxUb3AgKyBsaXN0SGVpZ2h0O1xuICAgIHZhciBlbGVtZW50SGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7IC8vIERpc3RhbmNlIGZyb20gYm90dG9tIG9mIGVsZW1lbnQgdG8gdG9wIG9mIHBhcmVudFxuXG4gICAgdmFyIGVsZW1lbnRQb3MgPSBlbGVtZW50Lm9mZnNldFRvcCArIGVsZW1lbnRIZWlnaHQ7IC8vIERpZmZlcmVuY2UgYmV0d2VlbiB0aGUgZWxlbWVudCBhbmQgc2Nyb2xsIHBvc2l0aW9uXG5cbiAgICB2YXIgZGVzdGluYXRpb24gPSBkaXJlY3Rpb24gPiAwID8gdGhpcy5lbGVtZW50LnNjcm9sbFRvcCArIGVsZW1lbnRQb3MgLSBsaXN0U2Nyb2xsUG9zaXRpb24gOiBlbGVtZW50Lm9mZnNldFRvcDtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuX2FuaW1hdGVTY3JvbGwoZGVzdGluYXRpb24sIGRpcmVjdGlvbik7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzY3JvbGxQb3NcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0cmVuZ3RoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkZXN0aW5hdGlvblxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fc2Nyb2xsRG93biA9IGZ1bmN0aW9uIF9zY3JvbGxEb3duKHNjcm9sbFBvcywgc3RyZW5ndGgsIGRlc3RpbmF0aW9uKSB7XG4gICAgdmFyIGVhc2luZyA9IChkZXN0aW5hdGlvbiAtIHNjcm9sbFBvcykgLyBzdHJlbmd0aDtcbiAgICB2YXIgZGlzdGFuY2UgPSBlYXNpbmcgPiAxID8gZWFzaW5nIDogMTtcbiAgICB0aGlzLmVsZW1lbnQuc2Nyb2xsVG9wID0gc2Nyb2xsUG9zICsgZGlzdGFuY2U7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzY3JvbGxQb3NcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0cmVuZ3RoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkZXN0aW5hdGlvblxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fc2Nyb2xsVXAgPSBmdW5jdGlvbiBfc2Nyb2xsVXAoc2Nyb2xsUG9zLCBzdHJlbmd0aCwgZGVzdGluYXRpb24pIHtcbiAgICB2YXIgZWFzaW5nID0gKHNjcm9sbFBvcyAtIGRlc3RpbmF0aW9uKSAvIHN0cmVuZ3RoO1xuICAgIHZhciBkaXN0YW5jZSA9IGVhc2luZyA+IDEgPyBlYXNpbmcgOiAxO1xuICAgIHRoaXMuZWxlbWVudC5zY3JvbGxUb3AgPSBzY3JvbGxQb3MgLSBkaXN0YW5jZTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHsqfSBkZXN0aW5hdGlvblxuICAgKiBAcGFyYW0geyp9IGRpcmVjdGlvblxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fYW5pbWF0ZVNjcm9sbCA9IGZ1bmN0aW9uIF9hbmltYXRlU2Nyb2xsKGRlc3RpbmF0aW9uLCBkaXJlY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBzdHJlbmd0aCA9IFNDUk9MTElOR19TUEVFRDtcbiAgICB2YXIgY2hvaWNlTGlzdFNjcm9sbFRvcCA9IHRoaXMuZWxlbWVudC5zY3JvbGxUb3A7XG4gICAgdmFyIGNvbnRpbnVlQW5pbWF0aW9uID0gZmFsc2U7XG5cbiAgICBpZiAoZGlyZWN0aW9uID4gMCkge1xuICAgICAgdGhpcy5fc2Nyb2xsRG93bihjaG9pY2VMaXN0U2Nyb2xsVG9wLCBzdHJlbmd0aCwgZGVzdGluYXRpb24pO1xuXG4gICAgICBpZiAoY2hvaWNlTGlzdFNjcm9sbFRvcCA8IGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIGNvbnRpbnVlQW5pbWF0aW9uID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc2Nyb2xsVXAoY2hvaWNlTGlzdFNjcm9sbFRvcCwgc3RyZW5ndGgsIGRlc3RpbmF0aW9uKTtcblxuICAgICAgaWYgKGNob2ljZUxpc3RTY3JvbGxUb3AgPiBkZXN0aW5hdGlvbikge1xuICAgICAgICBjb250aW51ZUFuaW1hdGlvbiA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvbnRpbnVlQW5pbWF0aW9uKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIuX2FuaW1hdGVTY3JvbGwoZGVzdGluYXRpb24sIGRpcmVjdGlvbik7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIExpc3Q7XG59KCk7XG5cblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL3dyYXBwZWQtZWxlbWVudC5qc1xuZnVuY3Rpb24gd3JhcHBlZF9lbGVtZW50X2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiB3cmFwcGVkX2VsZW1lbnRfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSB3cmFwcGVkX2VsZW1lbnRfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIHdyYXBwZWRfZWxlbWVudF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vLi4vdHlwZXMvaW5kZXgnKS5DaG9pY2VzLnBhc3NlZEVsZW1lbnR9IHBhc3NlZEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uLy4uL3R5cGVzL2luZGV4JykuQ2hvaWNlcy5DbGFzc05hbWVzfSBDbGFzc05hbWVzXG4gKi9cblxudmFyIHdyYXBwZWRfZWxlbWVudF9XcmFwcGVkRWxlbWVudCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3tcbiAgICogIGVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MU2VsZWN0RWxlbWVudCxcbiAgICogIGNsYXNzTmFtZXM6IENsYXNzTmFtZXMsXG4gICAqIH19IGFyZ3NcbiAgICovXG4gIGZ1bmN0aW9uIFdyYXBwZWRFbGVtZW50KF9yZWYpIHtcbiAgICB2YXIgZWxlbWVudCA9IF9yZWYuZWxlbWVudCxcbiAgICAgICAgY2xhc3NOYW1lcyA9IF9yZWYuY2xhc3NOYW1lcztcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cbiAgICBpZiAoIShlbGVtZW50IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkgJiYgIShlbGVtZW50IGluc3RhbmNlb2YgSFRNTFNlbGVjdEVsZW1lbnQpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGVsZW1lbnQgcGFzc2VkJyk7XG4gICAgfVxuXG4gICAgdGhpcy5pc0Rpc2FibGVkID0gZmFsc2U7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gV3JhcHBlZEVsZW1lbnQucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb25jZWFsID0gZnVuY3Rpb24gY29uY2VhbCgpIHtcbiAgICAvLyBIaWRlIHBhc3NlZCBpbnB1dFxuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lcy5pbnB1dCk7XG4gICAgdGhpcy5lbGVtZW50LmhpZGRlbiA9IHRydWU7IC8vIFJlbW92ZSBlbGVtZW50IGZyb20gdGFiIGluZGV4XG5cbiAgICB0aGlzLmVsZW1lbnQudGFiSW5kZXggPSAtMTsgLy8gQmFja3VwIG9yaWdpbmFsIHN0eWxlcyBpZiBhbnlcblxuICAgIHZhciBvcmlnU3R5bGUgPSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdzdHlsZScpO1xuXG4gICAgaWYgKG9yaWdTdHlsZSkge1xuICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1jaG9pY2Utb3JpZy1zdHlsZScsIG9yaWdTdHlsZSk7XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1jaG9pY2UnLCAnYWN0aXZlJyk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVhbCA9IGZ1bmN0aW9uIHJldmVhbCgpIHtcbiAgICAvLyBSZWluc3RhdGUgcGFzc2VkIGVsZW1lbnRcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzTmFtZXMuaW5wdXQpO1xuICAgIHRoaXMuZWxlbWVudC5oaWRkZW4gPSBmYWxzZTtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCd0YWJpbmRleCcpOyAvLyBSZWNvdmVyIG9yaWdpbmFsIHN0eWxlcyBpZiBhbnlcblxuICAgIHZhciBvcmlnU3R5bGUgPSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWNob2ljZS1vcmlnLXN0eWxlJyk7XG5cbiAgICBpZiAob3JpZ1N0eWxlKSB7XG4gICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWNob2ljZS1vcmlnLXN0eWxlJyk7XG4gICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdzdHlsZScsIG9yaWdTdHlsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1jaG9pY2UnKTsgLy8gUmUtYXNzaWduIHZhbHVlcyAtIHRoaXMgaXMgd2VpcmQsIEkga25vd1xuICAgIC8vIEB0b2RvIEZpZ3VyZSBvdXQgd2h5IHdlIG5lZWQgdG8gZG8gdGhpc1xuXG4gICAgdGhpcy5lbGVtZW50LnZhbHVlID0gdGhpcy5lbGVtZW50LnZhbHVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtYXNzaWduXG4gIH07XG5cbiAgX3Byb3RvLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgIHRoaXMuZWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuaXNEaXNhYmxlZCA9IGZhbHNlO1xuICB9O1xuXG4gIF9wcm90by5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKTtcbiAgICB0aGlzLmVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlO1xuICAgIHRoaXMuaXNEaXNhYmxlZCA9IHRydWU7XG4gIH07XG5cbiAgX3Byb3RvLnRyaWdnZXJFdmVudCA9IGZ1bmN0aW9uIHRyaWdnZXJFdmVudChldmVudFR5cGUsIGRhdGEpIHtcbiAgICBkaXNwYXRjaEV2ZW50KHRoaXMuZWxlbWVudCwgZXZlbnRUeXBlLCBkYXRhKTtcbiAgfTtcblxuICB3cmFwcGVkX2VsZW1lbnRfY3JlYXRlQ2xhc3MoV3JhcHBlZEVsZW1lbnQsIFt7XG4gICAga2V5OiBcImlzQWN0aXZlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmRhdGFzZXQuY2hvaWNlID09PSAnYWN0aXZlJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGlyXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmRpcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidmFsdWVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQudmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgLy8geW91IG11c3QgZGVmaW5lIHNldHRlciBoZXJlIG90aGVyd2lzZSBpdCB3aWxsIGJlIHJlYWRvbmx5IHByb3BlcnR5XG4gICAgICB0aGlzLmVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gV3JhcHBlZEVsZW1lbnQ7XG59KCk7XG5cblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL3dyYXBwZWQtaW5wdXQuanNcbmZ1bmN0aW9uIHdyYXBwZWRfaW5wdXRfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIHdyYXBwZWRfaW5wdXRfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSB3cmFwcGVkX2lucHV0X2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSB3cmFwcGVkX2lucHV0X2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vLi4vdHlwZXMvaW5kZXgnKS5DaG9pY2VzLkNsYXNzTmFtZXN9IENsYXNzTmFtZXNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uLy4uL3R5cGVzL2luZGV4JykuQ2hvaWNlcy5JdGVtfSBJdGVtXG4gKi9cblxudmFyIFdyYXBwZWRJbnB1dCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1dyYXBwZWRFbGVtZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFdyYXBwZWRJbnB1dCwgX1dyYXBwZWRFbGVtZW50KTtcblxuICAvKipcbiAgICogQHBhcmFtIHt7XG4gICAqICBlbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50LFxuICAgKiAgY2xhc3NOYW1lczogQ2xhc3NOYW1lcyxcbiAgICogIGRlbGltaXRlcjogc3RyaW5nXG4gICAqIH19IGFyZ3NcbiAgICovXG4gIGZ1bmN0aW9uIFdyYXBwZWRJbnB1dChfcmVmKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgdmFyIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQsXG4gICAgICAgIGNsYXNzTmFtZXMgPSBfcmVmLmNsYXNzTmFtZXMsXG4gICAgICAgIGRlbGltaXRlciA9IF9yZWYuZGVsaW1pdGVyO1xuICAgIF90aGlzID0gX1dyYXBwZWRFbGVtZW50LmNhbGwodGhpcywge1xuICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgIGNsYXNzTmFtZXM6IGNsYXNzTmFtZXNcbiAgICB9KSB8fCB0aGlzO1xuICAgIF90aGlzLmRlbGltaXRlciA9IGRlbGltaXRlcjtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgd3JhcHBlZF9pbnB1dF9jcmVhdGVDbGFzcyhXcmFwcGVkSW5wdXQsIFt7XG4gICAga2V5OiBcInZhbHVlXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50LnZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0l0ZW1bXX0gaXRlbXNcbiAgICAgKi9cbiAgICAsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoaXRlbXMpIHtcbiAgICAgIHZhciBpdGVtVmFsdWVzID0gaXRlbXMubWFwKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICB2YXIgdmFsdWUgPSBfcmVmMi52YWx1ZTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSk7XG4gICAgICB2YXIgam9pbmVkVmFsdWVzID0gaXRlbVZhbHVlcy5qb2luKHRoaXMuZGVsaW1pdGVyKTtcbiAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgam9pbmVkVmFsdWVzKTtcbiAgICAgIHRoaXMuZWxlbWVudC52YWx1ZSA9IGpvaW5lZFZhbHVlcztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gV3JhcHBlZElucHV0O1xufSh3cmFwcGVkX2VsZW1lbnRfV3JhcHBlZEVsZW1lbnQpO1xuXG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy93cmFwcGVkLXNlbGVjdC5qc1xuZnVuY3Rpb24gd3JhcHBlZF9zZWxlY3RfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIHdyYXBwZWRfc2VsZWN0X2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgd3JhcHBlZF9zZWxlY3RfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIHdyYXBwZWRfc2VsZWN0X2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIHdyYXBwZWRfc2VsZWN0X2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi8uLi90eXBlcy9pbmRleCcpLkNob2ljZXMuQ2xhc3NOYW1lc30gQ2xhc3NOYW1lc1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vLi4vdHlwZXMvaW5kZXgnKS5DaG9pY2VzLkl0ZW19IEl0ZW1cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uLy4uL3R5cGVzL2luZGV4JykuQ2hvaWNlcy5DaG9pY2V9IENob2ljZVxuICovXG5cbnZhciBXcmFwcGVkU2VsZWN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfV3JhcHBlZEVsZW1lbnQpIHtcbiAgd3JhcHBlZF9zZWxlY3RfaW5oZXJpdHNMb29zZShXcmFwcGVkU2VsZWN0LCBfV3JhcHBlZEVsZW1lbnQpO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3tcbiAgICogIGVsZW1lbnQ6IEhUTUxTZWxlY3RFbGVtZW50LFxuICAgKiAgY2xhc3NOYW1lczogQ2xhc3NOYW1lcyxcbiAgICogIGRlbGltaXRlcjogc3RyaW5nXG4gICAqICB0ZW1wbGF0ZTogZnVuY3Rpb25cbiAgICogfX0gYXJnc1xuICAgKi9cbiAgZnVuY3Rpb24gV3JhcHBlZFNlbGVjdChfcmVmKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgdmFyIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQsXG4gICAgICAgIGNsYXNzTmFtZXMgPSBfcmVmLmNsYXNzTmFtZXMsXG4gICAgICAgIHRlbXBsYXRlID0gX3JlZi50ZW1wbGF0ZTtcbiAgICBfdGhpcyA9IF9XcmFwcGVkRWxlbWVudC5jYWxsKHRoaXMsIHtcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICBjbGFzc05hbWVzOiBjbGFzc05hbWVzXG4gICAgfSkgfHwgdGhpcztcbiAgICBfdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBXcmFwcGVkU2VsZWN0LnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQHBhcmFtIHtEb2N1bWVudEZyYWdtZW50fSBmcmFnbWVudFxuICAgKi9cbiAgX3Byb3RvLmFwcGVuZERvY0ZyYWdtZW50ID0gZnVuY3Rpb24gYXBwZW5kRG9jRnJhZ21lbnQoZnJhZ21lbnQpIHtcbiAgICB0aGlzLmVsZW1lbnQuaW5uZXJIVE1MID0gJyc7XG4gICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKGZyYWdtZW50KTtcbiAgfTtcblxuICB3cmFwcGVkX3NlbGVjdF9jcmVhdGVDbGFzcyhXcmFwcGVkU2VsZWN0LCBbe1xuICAgIGtleTogXCJwbGFjZWhvbGRlck9wdGlvblwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdvcHRpb25bdmFsdWU9XCJcIl0nKSB8fCAvLyBCYWNrd2FyZCBjb21wYXRpYmlsaXR5IGxheWVyIGZvciB0aGUgbm9uLXN0YW5kYXJkIHBsYWNlaG9sZGVyIGF0dHJpYnV0ZSBzdXBwb3J0ZWQgaW4gb2xkZXIgdmVyc2lvbnMuXG4gICAgICB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3Rvcignb3B0aW9uW3BsYWNlaG9sZGVyXScpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7RWxlbWVudFtdfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwib3B0aW9uR3JvdXBzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ09QVEdST1VQJykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7SXRlbVtdIHwgQ2hvaWNlW119XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJvcHRpb25zXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmVsZW1lbnQub3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7SXRlbVtdIHwgQ2hvaWNlW119IG9wdGlvbnNcbiAgICAgKi9cbiAgICAsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQob3B0aW9ucykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuICAgICAgdmFyIGFkZE9wdGlvblRvRnJhZ21lbnQgPSBmdW5jdGlvbiBhZGRPcHRpb25Ub0ZyYWdtZW50KGRhdGEpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgc3RhbmRhcmQgc2VsZWN0IG9wdGlvblxuICAgICAgICB2YXIgb3B0aW9uID0gX3RoaXMyLnRlbXBsYXRlKGRhdGEpOyAvLyBBcHBlbmQgaXQgdG8gZnJhZ21lbnRcblxuXG4gICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgICB9OyAvLyBBZGQgZWFjaCBsaXN0IGl0ZW0gdG8gbGlzdFxuXG5cbiAgICAgIG9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uRGF0YSkge1xuICAgICAgICByZXR1cm4gYWRkT3B0aW9uVG9GcmFnbWVudChvcHRpb25EYXRhKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5hcHBlbmREb2NGcmFnbWVudChmcmFnbWVudCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFdyYXBwZWRTZWxlY3Q7XG59KHdyYXBwZWRfZWxlbWVudF9XcmFwcGVkRWxlbWVudCk7XG5cblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL2luZGV4LmpzXG5cblxuXG5cblxuXG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3NjcmlwdHMvdGVtcGxhdGVzLmpzXG4vKipcbiAqIEhlbHBlcnMgdG8gY3JlYXRlIEhUTUwgZWxlbWVudHMgdXNlZCBieSBDaG9pY2VzXG4gKiBDYW4gYmUgb3ZlcnJpZGRlbiBieSBwcm92aWRpbmcgYGNhbGxiYWNrT25DcmVhdGVUZW1wbGF0ZXNgIG9wdGlvblxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMvaW5kZXgnKS5DaG9pY2VzLlRlbXBsYXRlc30gVGVtcGxhdGVzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi90eXBlcy9pbmRleCcpLkNob2ljZXMuQ2xhc3NOYW1lc30gQ2xhc3NOYW1lc1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMvaW5kZXgnKS5DaG9pY2VzLk9wdGlvbnN9IE9wdGlvbnNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uL3R5cGVzL2luZGV4JykuQ2hvaWNlcy5JdGVtfSBJdGVtXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi90eXBlcy9pbmRleCcpLkNob2ljZXMuQ2hvaWNlfSBDaG9pY2VcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uL3R5cGVzL2luZGV4JykuQ2hvaWNlcy5Hcm91cH0gR3JvdXBcbiAqL1xudmFyIFRFTVBMQVRFUyA9XG4vKiogQHR5cGUge1RlbXBsYXRlc30gKi9cbntcbiAgLyoqXG4gICAqIEBwYXJhbSB7UGFydGlhbDxDbGFzc05hbWVzPn0gY2xhc3NOYW1lc1xuICAgKiBAcGFyYW0ge1wibHRyXCIgfCBcInJ0bFwiIHwgXCJhdXRvXCJ9IGRpclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzU2VsZWN0RWxlbWVudFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzU2VsZWN0T25lRWxlbWVudFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNlYXJjaEVuYWJsZWRcbiAgICogQHBhcmFtIHtcInNlbGVjdC1vbmVcIiB8IFwic2VsZWN0LW11bHRpcGxlXCIgfCBcInRleHRcIn0gcGFzc2VkRWxlbWVudFR5cGVcbiAgICovXG4gIGNvbnRhaW5lck91dGVyOiBmdW5jdGlvbiBjb250YWluZXJPdXRlcihfcmVmLCBkaXIsIGlzU2VsZWN0RWxlbWVudCwgaXNTZWxlY3RPbmVFbGVtZW50LCBzZWFyY2hFbmFibGVkLCBwYXNzZWRFbGVtZW50VHlwZSkge1xuICAgIHZhciBfY29udGFpbmVyT3V0ZXIgPSBfcmVmLmNvbnRhaW5lck91dGVyO1xuICAgIHZhciBkaXYgPSBPYmplY3QuYXNzaWduKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCB7XG4gICAgICBjbGFzc05hbWU6IF9jb250YWluZXJPdXRlclxuICAgIH0pO1xuICAgIGRpdi5kYXRhc2V0LnR5cGUgPSBwYXNzZWRFbGVtZW50VHlwZTtcblxuICAgIGlmIChkaXIpIHtcbiAgICAgIGRpdi5kaXIgPSBkaXI7XG4gICAgfVxuXG4gICAgaWYgKGlzU2VsZWN0T25lRWxlbWVudCkge1xuICAgICAgZGl2LnRhYkluZGV4ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoaXNTZWxlY3RFbGVtZW50KSB7XG4gICAgICBkaXYuc2V0QXR0cmlidXRlKCdyb2xlJywgc2VhcmNoRW5hYmxlZCA/ICdjb21ib2JveCcgOiAnbGlzdGJveCcpO1xuXG4gICAgICBpZiAoc2VhcmNoRW5hYmxlZCkge1xuICAgICAgICBkaXYuc2V0QXR0cmlidXRlKCdhcmlhLWF1dG9jb21wbGV0ZScsICdsaXN0Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZGl2LnNldEF0dHJpYnV0ZSgnYXJpYS1oYXNwb3B1cCcsICd0cnVlJyk7XG4gICAgZGl2LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgIHJldHVybiBkaXY7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UGFydGlhbDxDbGFzc05hbWVzPn0gY2xhc3NOYW1lc1xuICAgKi9cbiAgY29udGFpbmVySW5uZXI6IGZ1bmN0aW9uIGNvbnRhaW5lcklubmVyKF9yZWYyKSB7XG4gICAgdmFyIF9jb250YWluZXJJbm5lciA9IF9yZWYyLmNvbnRhaW5lcklubmVyO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCB7XG4gICAgICBjbGFzc05hbWU6IF9jb250YWluZXJJbm5lclxuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1BhcnRpYWw8Q2xhc3NOYW1lcz59IGNsYXNzTmFtZXNcbiAgICogQHBhcmFtIHtib29sZWFufSBpc1NlbGVjdE9uZUVsZW1lbnRcbiAgICovXG4gIGl0ZW1MaXN0OiBmdW5jdGlvbiBpdGVtTGlzdChfcmVmMywgaXNTZWxlY3RPbmVFbGVtZW50KSB7XG4gICAgdmFyIGxpc3QgPSBfcmVmMy5saXN0LFxuICAgICAgICBsaXN0U2luZ2xlID0gX3JlZjMubGlzdFNpbmdsZSxcbiAgICAgICAgbGlzdEl0ZW1zID0gX3JlZjMubGlzdEl0ZW1zO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCB7XG4gICAgICBjbGFzc05hbWU6IGxpc3QgKyBcIiBcIiArIChpc1NlbGVjdE9uZUVsZW1lbnQgPyBsaXN0U2luZ2xlIDogbGlzdEl0ZW1zKVxuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1BhcnRpYWw8Q2xhc3NOYW1lcz59IGNsYXNzTmFtZXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqL1xuICBwbGFjZWhvbGRlcjogZnVuY3Rpb24gcGxhY2Vob2xkZXIoX3JlZjQsIHZhbHVlKSB7XG4gICAgdmFyIF9wbGFjZWhvbGRlciA9IF9yZWY0LnBsYWNlaG9sZGVyO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCB7XG4gICAgICBjbGFzc05hbWU6IF9wbGFjZWhvbGRlcixcbiAgICAgIGlubmVySFRNTDogdmFsdWVcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtQYXJ0aWFsPENsYXNzTmFtZXM+fSBjbGFzc05hbWVzXG4gICAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlbW92ZUl0ZW1CdXR0b25cbiAgICovXG4gIGl0ZW06IGZ1bmN0aW9uIGl0ZW0oX3JlZjUsIF9yZWY2LCByZW1vdmVJdGVtQnV0dG9uKSB7XG4gICAgdmFyIF9pdGVtID0gX3JlZjUuaXRlbSxcbiAgICAgICAgYnV0dG9uID0gX3JlZjUuYnV0dG9uLFxuICAgICAgICBoaWdobGlnaHRlZFN0YXRlID0gX3JlZjUuaGlnaGxpZ2h0ZWRTdGF0ZSxcbiAgICAgICAgaXRlbVNlbGVjdGFibGUgPSBfcmVmNS5pdGVtU2VsZWN0YWJsZSxcbiAgICAgICAgcGxhY2Vob2xkZXIgPSBfcmVmNS5wbGFjZWhvbGRlcjtcbiAgICB2YXIgaWQgPSBfcmVmNi5pZCxcbiAgICAgICAgdmFsdWUgPSBfcmVmNi52YWx1ZSxcbiAgICAgICAgbGFiZWwgPSBfcmVmNi5sYWJlbCxcbiAgICAgICAgY3VzdG9tUHJvcGVydGllcyA9IF9yZWY2LmN1c3RvbVByb3BlcnRpZXMsXG4gICAgICAgIGFjdGl2ZSA9IF9yZWY2LmFjdGl2ZSxcbiAgICAgICAgZGlzYWJsZWQgPSBfcmVmNi5kaXNhYmxlZCxcbiAgICAgICAgaGlnaGxpZ2h0ZWQgPSBfcmVmNi5oaWdobGlnaHRlZCxcbiAgICAgICAgaXNQbGFjZWhvbGRlciA9IF9yZWY2LnBsYWNlaG9sZGVyO1xuICAgIHZhciBkaXYgPSBPYmplY3QuYXNzaWduKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCB7XG4gICAgICBjbGFzc05hbWU6IF9pdGVtLFxuICAgICAgaW5uZXJIVE1MOiBsYWJlbFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oZGl2LmRhdGFzZXQsIHtcbiAgICAgIGl0ZW06ICcnLFxuICAgICAgaWQ6IGlkLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgY3VzdG9tUHJvcGVydGllczogY3VzdG9tUHJvcGVydGllc1xuICAgIH0pO1xuXG4gICAgaWYgKGFjdGl2ZSkge1xuICAgICAgZGl2LnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsICd0cnVlJyk7XG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBkaXYuc2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICB9XG5cbiAgICBpZiAoaXNQbGFjZWhvbGRlcikge1xuICAgICAgZGl2LmNsYXNzTGlzdC5hZGQocGxhY2Vob2xkZXIpO1xuICAgIH1cblxuICAgIGRpdi5jbGFzc0xpc3QuYWRkKGhpZ2hsaWdodGVkID8gaGlnaGxpZ2h0ZWRTdGF0ZSA6IGl0ZW1TZWxlY3RhYmxlKTtcblxuICAgIGlmIChyZW1vdmVJdGVtQnV0dG9uKSB7XG4gICAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgICAgZGl2LmNsYXNzTGlzdC5yZW1vdmUoaXRlbVNlbGVjdGFibGUpO1xuICAgICAgfVxuXG4gICAgICBkaXYuZGF0YXNldC5kZWxldGFibGUgPSAnJztcbiAgICAgIC8qKiBAdG9kbyBUaGlzIE1VU1QgYmUgbG9jYWxpemFibGUsIG5vdCBoYXJkY29kZWQhICovXG5cbiAgICAgIHZhciBSRU1PVkVfSVRFTV9URVhUID0gJ1JlbW92ZSBpdGVtJztcbiAgICAgIHZhciByZW1vdmVCdXR0b24gPSBPYmplY3QuYXNzaWduKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpLCB7XG4gICAgICAgIHR5cGU6ICdidXR0b24nLFxuICAgICAgICBjbGFzc05hbWU6IGJ1dHRvbixcbiAgICAgICAgaW5uZXJIVE1MOiBSRU1PVkVfSVRFTV9URVhUXG4gICAgICB9KTtcbiAgICAgIHJlbW92ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBSRU1PVkVfSVRFTV9URVhUICsgXCI6ICdcIiArIHZhbHVlICsgXCInXCIpO1xuICAgICAgcmVtb3ZlQnV0dG9uLmRhdGFzZXQuYnV0dG9uID0gJyc7XG4gICAgICBkaXYuYXBwZW5kQ2hpbGQocmVtb3ZlQnV0dG9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGl2O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1BhcnRpYWw8Q2xhc3NOYW1lcz59IGNsYXNzTmFtZXNcbiAgICogQHBhcmFtIHtib29sZWFufSBpc1NlbGVjdE9uZUVsZW1lbnRcbiAgICovXG4gIGNob2ljZUxpc3Q6IGZ1bmN0aW9uIGNob2ljZUxpc3QoX3JlZjcsIGlzU2VsZWN0T25lRWxlbWVudCkge1xuICAgIHZhciBsaXN0ID0gX3JlZjcubGlzdDtcbiAgICB2YXIgZGl2ID0gT2JqZWN0LmFzc2lnbihkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwge1xuICAgICAgY2xhc3NOYW1lOiBsaXN0XG4gICAgfSk7XG5cbiAgICBpZiAoIWlzU2VsZWN0T25lRWxlbWVudCkge1xuICAgICAgZGl2LnNldEF0dHJpYnV0ZSgnYXJpYS1tdWx0aXNlbGVjdGFibGUnLCAndHJ1ZScpO1xuICAgIH1cblxuICAgIGRpdi5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnbGlzdGJveCcpO1xuICAgIHJldHVybiBkaXY7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UGFydGlhbDxDbGFzc05hbWVzPn0gY2xhc3NOYW1lc1xuICAgKiBAcGFyYW0ge0dyb3VwfSBncm91cFxuICAgKi9cbiAgY2hvaWNlR3JvdXA6IGZ1bmN0aW9uIGNob2ljZUdyb3VwKF9yZWY4LCBfcmVmOSkge1xuICAgIHZhciBncm91cCA9IF9yZWY4Lmdyb3VwLFxuICAgICAgICBncm91cEhlYWRpbmcgPSBfcmVmOC5ncm91cEhlYWRpbmcsXG4gICAgICAgIGl0ZW1EaXNhYmxlZCA9IF9yZWY4Lml0ZW1EaXNhYmxlZDtcbiAgICB2YXIgaWQgPSBfcmVmOS5pZCxcbiAgICAgICAgdmFsdWUgPSBfcmVmOS52YWx1ZSxcbiAgICAgICAgZGlzYWJsZWQgPSBfcmVmOS5kaXNhYmxlZDtcbiAgICB2YXIgZGl2ID0gT2JqZWN0LmFzc2lnbihkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwge1xuICAgICAgY2xhc3NOYW1lOiBncm91cCArIFwiIFwiICsgKGRpc2FibGVkID8gaXRlbURpc2FibGVkIDogJycpXG4gICAgfSk7XG4gICAgZGl2LnNldEF0dHJpYnV0ZSgncm9sZScsICdncm91cCcpO1xuICAgIE9iamVjdC5hc3NpZ24oZGl2LmRhdGFzZXQsIHtcbiAgICAgIGdyb3VwOiAnJyxcbiAgICAgIGlkOiBpZCxcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH0pO1xuXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBkaXYuc2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICB9XG5cbiAgICBkaXYuYXBwZW5kQ2hpbGQoT2JqZWN0LmFzc2lnbihkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwge1xuICAgICAgY2xhc3NOYW1lOiBncm91cEhlYWRpbmcsXG4gICAgICBpbm5lckhUTUw6IHZhbHVlXG4gICAgfSkpO1xuICAgIHJldHVybiBkaXY7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UGFydGlhbDxDbGFzc05hbWVzPn0gY2xhc3NOYW1lc1xuICAgKiBAcGFyYW0ge0Nob2ljZX0gY2hvaWNlXG4gICAqIEBwYXJhbSB7T3B0aW9uc1snaXRlbVNlbGVjdFRleHQnXX0gc2VsZWN0VGV4dFxuICAgKi9cbiAgY2hvaWNlOiBmdW5jdGlvbiBjaG9pY2UoX3JlZjEwLCBfcmVmMTEsIHNlbGVjdFRleHQpIHtcbiAgICB2YXIgaXRlbSA9IF9yZWYxMC5pdGVtLFxuICAgICAgICBpdGVtQ2hvaWNlID0gX3JlZjEwLml0ZW1DaG9pY2UsXG4gICAgICAgIGl0ZW1TZWxlY3RhYmxlID0gX3JlZjEwLml0ZW1TZWxlY3RhYmxlLFxuICAgICAgICBzZWxlY3RlZFN0YXRlID0gX3JlZjEwLnNlbGVjdGVkU3RhdGUsXG4gICAgICAgIGl0ZW1EaXNhYmxlZCA9IF9yZWYxMC5pdGVtRGlzYWJsZWQsXG4gICAgICAgIHBsYWNlaG9sZGVyID0gX3JlZjEwLnBsYWNlaG9sZGVyO1xuICAgIHZhciBpZCA9IF9yZWYxMS5pZCxcbiAgICAgICAgdmFsdWUgPSBfcmVmMTEudmFsdWUsXG4gICAgICAgIGxhYmVsID0gX3JlZjExLmxhYmVsLFxuICAgICAgICBncm91cElkID0gX3JlZjExLmdyb3VwSWQsXG4gICAgICAgIGVsZW1lbnRJZCA9IF9yZWYxMS5lbGVtZW50SWQsXG4gICAgICAgIGlzRGlzYWJsZWQgPSBfcmVmMTEuZGlzYWJsZWQsXG4gICAgICAgIGlzU2VsZWN0ZWQgPSBfcmVmMTEuc2VsZWN0ZWQsXG4gICAgICAgIGlzUGxhY2Vob2xkZXIgPSBfcmVmMTEucGxhY2Vob2xkZXI7XG4gICAgdmFyIGRpdiA9IE9iamVjdC5hc3NpZ24oZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksIHtcbiAgICAgIGlkOiBlbGVtZW50SWQsXG4gICAgICBpbm5lckhUTUw6IGxhYmVsLFxuICAgICAgY2xhc3NOYW1lOiBpdGVtICsgXCIgXCIgKyBpdGVtQ2hvaWNlXG4gICAgfSk7XG5cbiAgICBpZiAoaXNTZWxlY3RlZCkge1xuICAgICAgZGl2LmNsYXNzTGlzdC5hZGQoc2VsZWN0ZWRTdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKGlzUGxhY2Vob2xkZXIpIHtcbiAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKHBsYWNlaG9sZGVyKTtcbiAgICB9XG5cbiAgICBkaXYuc2V0QXR0cmlidXRlKCdyb2xlJywgZ3JvdXBJZCA+IDAgPyAndHJlZWl0ZW0nIDogJ29wdGlvbicpO1xuICAgIE9iamVjdC5hc3NpZ24oZGl2LmRhdGFzZXQsIHtcbiAgICAgIGNob2ljZTogJycsXG4gICAgICBpZDogaWQsXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBzZWxlY3RUZXh0OiBzZWxlY3RUZXh0XG4gICAgfSk7XG5cbiAgICBpZiAoaXNEaXNhYmxlZCkge1xuICAgICAgZGl2LmNsYXNzTGlzdC5hZGQoaXRlbURpc2FibGVkKTtcbiAgICAgIGRpdi5kYXRhc2V0LmNob2ljZURpc2FibGVkID0gJyc7XG4gICAgICBkaXYuc2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGl2LmNsYXNzTGlzdC5hZGQoaXRlbVNlbGVjdGFibGUpO1xuICAgICAgZGl2LmRhdGFzZXQuY2hvaWNlU2VsZWN0YWJsZSA9ICcnO1xuICAgIH1cblxuICAgIHJldHVybiBkaXY7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UGFydGlhbDxDbGFzc05hbWVzPn0gY2xhc3NOYW1lc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcGxhY2Vob2xkZXJWYWx1ZVxuICAgKi9cbiAgaW5wdXQ6IGZ1bmN0aW9uIGlucHV0KF9yZWYxMiwgcGxhY2Vob2xkZXJWYWx1ZSkge1xuICAgIHZhciBfaW5wdXQgPSBfcmVmMTIuaW5wdXQsXG4gICAgICAgIGlucHV0Q2xvbmVkID0gX3JlZjEyLmlucHV0Q2xvbmVkO1xuICAgIHZhciBpbnAgPSBPYmplY3QuYXNzaWduKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JyksIHtcbiAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgIGNsYXNzTmFtZTogX2lucHV0ICsgXCIgXCIgKyBpbnB1dENsb25lZCxcbiAgICAgIGF1dG9jb21wbGV0ZTogJ29mZicsXG4gICAgICBhdXRvY2FwaXRhbGl6ZTogJ29mZicsXG4gICAgICBzcGVsbGNoZWNrOiBmYWxzZVxuICAgIH0pO1xuICAgIGlucC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAndGV4dGJveCcpO1xuICAgIGlucC5zZXRBdHRyaWJ1dGUoJ2FyaWEtYXV0b2NvbXBsZXRlJywgJ2xpc3QnKTtcbiAgICBpbnAuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgcGxhY2Vob2xkZXJWYWx1ZSk7XG4gICAgcmV0dXJuIGlucDtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtQYXJ0aWFsPENsYXNzTmFtZXM+fSBjbGFzc05hbWVzXG4gICAqL1xuICBkcm9wZG93bjogZnVuY3Rpb24gZHJvcGRvd24oX3JlZjEzKSB7XG4gICAgdmFyIGxpc3QgPSBfcmVmMTMubGlzdCxcbiAgICAgICAgbGlzdERyb3Bkb3duID0gX3JlZjEzLmxpc3REcm9wZG93bjtcbiAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2LmNsYXNzTGlzdC5hZGQobGlzdCwgbGlzdERyb3Bkb3duKTtcbiAgICBkaXYuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgcmV0dXJuIGRpdjtcbiAgfSxcblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtQYXJ0aWFsPENsYXNzTmFtZXM+fSBjbGFzc05hbWVzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpbm5lckhUTUxcbiAgICogQHBhcmFtIHtcIm5vLWNob2ljZXNcIiB8IFwibm8tcmVzdWx0c1wiIHwgXCJcIn0gdHlwZVxuICAgKi9cbiAgbm90aWNlOiBmdW5jdGlvbiBub3RpY2UoX3JlZjE0LCBpbm5lckhUTUwsIHR5cGUpIHtcbiAgICB2YXIgaXRlbSA9IF9yZWYxNC5pdGVtLFxuICAgICAgICBpdGVtQ2hvaWNlID0gX3JlZjE0Lml0ZW1DaG9pY2UsXG4gICAgICAgIG5vUmVzdWx0cyA9IF9yZWYxNC5ub1Jlc3VsdHMsXG4gICAgICAgIG5vQ2hvaWNlcyA9IF9yZWYxNC5ub0Nob2ljZXM7XG5cbiAgICBpZiAodHlwZSA9PT0gdm9pZCAwKSB7XG4gICAgICB0eXBlID0gJyc7XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzZXMgPSBbaXRlbSwgaXRlbUNob2ljZV07XG5cbiAgICBpZiAodHlwZSA9PT0gJ25vLWNob2ljZXMnKSB7XG4gICAgICBjbGFzc2VzLnB1c2gobm9DaG9pY2VzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICduby1yZXN1bHRzJykge1xuICAgICAgY2xhc3Nlcy5wdXNoKG5vUmVzdWx0cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksIHtcbiAgICAgIGlubmVySFRNTDogaW5uZXJIVE1MLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmpvaW4oJyAnKVxuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0l0ZW19IG9wdGlvblxuICAgKi9cbiAgb3B0aW9uOiBmdW5jdGlvbiBvcHRpb24oX3JlZjE1KSB7XG4gICAgdmFyIGxhYmVsID0gX3JlZjE1LmxhYmVsLFxuICAgICAgICB2YWx1ZSA9IF9yZWYxNS52YWx1ZSxcbiAgICAgICAgY3VzdG9tUHJvcGVydGllcyA9IF9yZWYxNS5jdXN0b21Qcm9wZXJ0aWVzLFxuICAgICAgICBhY3RpdmUgPSBfcmVmMTUuYWN0aXZlLFxuICAgICAgICBkaXNhYmxlZCA9IF9yZWYxNS5kaXNhYmxlZDtcbiAgICB2YXIgb3B0ID0gbmV3IE9wdGlvbihsYWJlbCwgdmFsdWUsIGZhbHNlLCBhY3RpdmUpO1xuXG4gICAgaWYgKGN1c3RvbVByb3BlcnRpZXMpIHtcbiAgICAgIG9wdC5kYXRhc2V0LmN1c3RvbVByb3BlcnRpZXMgPSBjdXN0b21Qcm9wZXJ0aWVzO1xuICAgIH1cblxuICAgIG9wdC5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICAgIHJldHVybiBvcHQ7XG4gIH1cbn07XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciB0ZW1wbGF0ZXMgPSAoVEVNUExBVEVTKTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3NjcmlwdHMvYWN0aW9ucy9jaG9pY2VzLmpzXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3JlZHV4JykuQWN0aW9ufSBBY3Rpb25cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uLy4uL3R5cGVzL2luZGV4JykuQ2hvaWNlcy5DaG9pY2V9IENob2ljZVxuICovXG5cbi8qKlxuICogQGFyZ3VtZW50IHtDaG9pY2V9IGNob2ljZVxuICogQHJldHVybnMge0FjdGlvbiAmIENob2ljZX1cbiAqL1xuXG52YXIgY2hvaWNlc19hZGRDaG9pY2UgPSBmdW5jdGlvbiBhZGRDaG9pY2UoX3JlZikge1xuICB2YXIgdmFsdWUgPSBfcmVmLnZhbHVlLFxuICAgICAgbGFiZWwgPSBfcmVmLmxhYmVsLFxuICAgICAgaWQgPSBfcmVmLmlkLFxuICAgICAgZ3JvdXBJZCA9IF9yZWYuZ3JvdXBJZCxcbiAgICAgIGRpc2FibGVkID0gX3JlZi5kaXNhYmxlZCxcbiAgICAgIGVsZW1lbnRJZCA9IF9yZWYuZWxlbWVudElkLFxuICAgICAgY3VzdG9tUHJvcGVydGllcyA9IF9yZWYuY3VzdG9tUHJvcGVydGllcyxcbiAgICAgIHBsYWNlaG9sZGVyID0gX3JlZi5wbGFjZWhvbGRlcixcbiAgICAgIGtleUNvZGUgPSBfcmVmLmtleUNvZGU7XG4gIHJldHVybiB7XG4gICAgdHlwZTogQUNUSU9OX1RZUEVTLkFERF9DSE9JQ0UsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGxhYmVsOiBsYWJlbCxcbiAgICBpZDogaWQsXG4gICAgZ3JvdXBJZDogZ3JvdXBJZCxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgZWxlbWVudElkOiBlbGVtZW50SWQsXG4gICAgY3VzdG9tUHJvcGVydGllczogY3VzdG9tUHJvcGVydGllcyxcbiAgICBwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXIsXG4gICAga2V5Q29kZToga2V5Q29kZVxuICB9O1xufTtcbi8qKlxuICogQGFyZ3VtZW50IHtDaG9pY2VbXX0gcmVzdWx0c1xuICogQHJldHVybnMge0FjdGlvbiAmIHsgcmVzdWx0czogQ2hvaWNlW10gfX1cbiAqL1xuXG52YXIgY2hvaWNlc19maWx0ZXJDaG9pY2VzID0gZnVuY3Rpb24gZmlsdGVyQ2hvaWNlcyhyZXN1bHRzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogQUNUSU9OX1RZUEVTLkZJTFRFUl9DSE9JQ0VTLFxuICAgIHJlc3VsdHM6IHJlc3VsdHNcbiAgfTtcbn07XG4vKipcbiAqIEBhcmd1bWVudCB7Ym9vbGVhbn0gYWN0aXZlXG4gKiBAcmV0dXJucyB7QWN0aW9uICYgeyBhY3RpdmU6IGJvb2xlYW4gfX1cbiAqL1xuXG52YXIgY2hvaWNlc19hY3RpdmF0ZUNob2ljZXMgPSBmdW5jdGlvbiBhY3RpdmF0ZUNob2ljZXMoYWN0aXZlKSB7XG4gIGlmIChhY3RpdmUgPT09IHZvaWQgMCkge1xuICAgIGFjdGl2ZSA9IHRydWU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHR5cGU6IEFDVElPTl9UWVBFUy5BQ1RJVkFURV9DSE9JQ0VTLFxuICAgIGFjdGl2ZTogYWN0aXZlXG4gIH07XG59O1xuLyoqXG4gKiBAcmV0dXJucyB7QWN0aW9ufVxuICovXG5cbnZhciBjaG9pY2VzX2NsZWFyQ2hvaWNlcyA9IGZ1bmN0aW9uIGNsZWFyQ2hvaWNlcygpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBBQ1RJT05fVFlQRVMuQ0xFQVJfQ0hPSUNFU1xuICB9O1xufTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3NjcmlwdHMvYWN0aW9ucy9pdGVtcy5qc1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3JlZHV4JykuQWN0aW9ufSBBY3Rpb25cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uLy4uL3R5cGVzL2luZGV4JykuQ2hvaWNlcy5JdGVtfSBJdGVtXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAqIEByZXR1cm5zIHtBY3Rpb24gJiBJdGVtfVxuICovXG5cbnZhciBpdGVtc19hZGRJdGVtID0gZnVuY3Rpb24gYWRkSXRlbShfcmVmKSB7XG4gIHZhciB2YWx1ZSA9IF9yZWYudmFsdWUsXG4gICAgICBsYWJlbCA9IF9yZWYubGFiZWwsXG4gICAgICBpZCA9IF9yZWYuaWQsXG4gICAgICBjaG9pY2VJZCA9IF9yZWYuY2hvaWNlSWQsXG4gICAgICBncm91cElkID0gX3JlZi5ncm91cElkLFxuICAgICAgY3VzdG9tUHJvcGVydGllcyA9IF9yZWYuY3VzdG9tUHJvcGVydGllcyxcbiAgICAgIHBsYWNlaG9sZGVyID0gX3JlZi5wbGFjZWhvbGRlcixcbiAgICAgIGtleUNvZGUgPSBfcmVmLmtleUNvZGU7XG4gIHJldHVybiB7XG4gICAgdHlwZTogQUNUSU9OX1RZUEVTLkFERF9JVEVNLFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBsYWJlbDogbGFiZWwsXG4gICAgaWQ6IGlkLFxuICAgIGNob2ljZUlkOiBjaG9pY2VJZCxcbiAgICBncm91cElkOiBncm91cElkLFxuICAgIGN1c3RvbVByb3BlcnRpZXM6IGN1c3RvbVByb3BlcnRpZXMsXG4gICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgIGtleUNvZGU6IGtleUNvZGVcbiAgfTtcbn07XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICogQHBhcmFtIHtzdHJpbmd9IGNob2ljZUlkXG4gKiBAcmV0dXJucyB7QWN0aW9uICYgeyBpZDogc3RyaW5nLCBjaG9pY2VJZDogc3RyaW5nIH19XG4gKi9cblxudmFyIGl0ZW1zX3JlbW92ZUl0ZW0gPSBmdW5jdGlvbiByZW1vdmVJdGVtKGlkLCBjaG9pY2VJZCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IEFDVElPTl9UWVBFUy5SRU1PVkVfSVRFTSxcbiAgICBpZDogaWQsXG4gICAgY2hvaWNlSWQ6IGNob2ljZUlkXG4gIH07XG59O1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaGlnaGxpZ2h0ZWRcbiAqIEByZXR1cm5zIHtBY3Rpb24gJiB7IGlkOiBzdHJpbmcsIGhpZ2hsaWdodGVkOiBib29sZWFuIH19XG4gKi9cblxudmFyIGl0ZW1zX2hpZ2hsaWdodEl0ZW0gPSBmdW5jdGlvbiBoaWdobGlnaHRJdGVtKGlkLCBoaWdobGlnaHRlZCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IEFDVElPTl9UWVBFUy5ISUdITElHSFRfSVRFTSxcbiAgICBpZDogaWQsXG4gICAgaGlnaGxpZ2h0ZWQ6IGhpZ2hsaWdodGVkXG4gIH07XG59O1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvc2NyaXB0cy9hY3Rpb25zL2dyb3Vwcy5qc1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3JlZHV4JykuQWN0aW9ufSBBY3Rpb25cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uLy4uL3R5cGVzL2luZGV4JykuQ2hvaWNlcy5Hcm91cH0gR3JvdXBcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7R3JvdXB9IGdyb3VwXG4gKiBAcmV0dXJucyB7QWN0aW9uICYgR3JvdXB9XG4gKi9cblxudmFyIGdyb3Vwc19hZGRHcm91cCA9IGZ1bmN0aW9uIGFkZEdyb3VwKF9yZWYpIHtcbiAgdmFyIHZhbHVlID0gX3JlZi52YWx1ZSxcbiAgICAgIGlkID0gX3JlZi5pZCxcbiAgICAgIGFjdGl2ZSA9IF9yZWYuYWN0aXZlLFxuICAgICAgZGlzYWJsZWQgPSBfcmVmLmRpc2FibGVkO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IEFDVElPTl9UWVBFUy5BRERfR1JPVVAsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGlkOiBpZCxcbiAgICBhY3RpdmU6IGFjdGl2ZSxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWRcbiAgfTtcbn07XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9zY3JpcHRzL2FjdGlvbnMvbWlzYy5qc1xuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdyZWR1eCcpLkFjdGlvbn0gQWN0aW9uXG4gKi9cblxuLyoqXG4gKiBAcmV0dXJucyB7QWN0aW9ufVxuICovXG52YXIgY2xlYXJBbGwgPSBmdW5jdGlvbiBjbGVhckFsbCgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQ0xFQVJfQUxMJ1xuICB9O1xufTtcbi8qKlxuICogQHBhcmFtIHthbnl9IHN0YXRlXG4gKiBAcmV0dXJucyB7QWN0aW9uICYgeyBzdGF0ZTogb2JqZWN0IH19XG4gKi9cblxudmFyIHJlc2V0VG8gPSBmdW5jdGlvbiByZXNldFRvKHN0YXRlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ1JFU0VUX1RPJyxcbiAgICBzdGF0ZTogc3RhdGVcbiAgfTtcbn07XG4vKipcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNMb2FkaW5nXG4gKiBAcmV0dXJucyB7QWN0aW9uICYgeyBpc0xvYWRpbmc6IGJvb2xlYW4gfX1cbiAqL1xuXG52YXIgc2V0SXNMb2FkaW5nID0gZnVuY3Rpb24gc2V0SXNMb2FkaW5nKGlzTG9hZGluZykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdTRVRfSVNfTE9BRElORycsXG4gICAgaXNMb2FkaW5nOiBpc0xvYWRpbmdcbiAgfTtcbn07XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9zY3JpcHRzL2Nob2ljZXMuanNcbmZ1bmN0aW9uIGNob2ljZXNfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIGNob2ljZXNfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBjaG9pY2VzX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBjaG9pY2VzX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4vKiogQHNlZSB7QGxpbmsgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stYWNlYTA3NWQwYWM2OTU0ZjI3NWE3MDAyMzkwNjA1MGN9ICovXG5cbnZhciBJU19JRTExID0gJy1tcy1zY3JvbGwtbGltaXQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiAnLW1zLWltZS1hbGlnbicgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi90eXBlcy9pbmRleCcpLkNob2ljZXMuQ2hvaWNlfSBDaG9pY2VcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uL3R5cGVzL2luZGV4JykuQ2hvaWNlcy5JdGVtfSBJdGVtXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi90eXBlcy9pbmRleCcpLkNob2ljZXMuR3JvdXB9IEdyb3VwXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi90eXBlcy9pbmRleCcpLkNob2ljZXMuT3B0aW9uc30gT3B0aW9uc1xuICovXG5cbi8qKiBAdHlwZSB7UGFydGlhbDxPcHRpb25zPn0gKi9cblxudmFyIFVTRVJfREVGQVVMVFMgPSB7fTtcbi8qKlxuICogQ2hvaWNlc1xuICogQGF1dGhvciBKb3NoIEpvaG5zb248am9zaEBqb3NodWFqb2huc29uLmNvLnVrPlxuICovXG5cbnZhciBjaG9pY2VzX0Nob2ljZXMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBjaG9pY2VzX2NyZWF0ZUNsYXNzKENob2ljZXMsIG51bGwsIFt7XG4gICAga2V5OiBcImRlZmF1bHRzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHtcbiAgICAgICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgICAgcmV0dXJuIFVTRVJfREVGQVVMVFM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0IHRlbXBsYXRlcygpIHtcbiAgICAgICAgICByZXR1cm4gVEVNUExBVEVTO1xuICAgICAgICB9XG5cbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8IEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MU2VsZWN0RWxlbWVudH0gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7UGFydGlhbDxPcHRpb25zPn0gdXNlckNvbmZpZ1xuICAgICAqL1xuXG4gIH1dKTtcblxuICBmdW5jdGlvbiBDaG9pY2VzKGVsZW1lbnQsIHVzZXJDb25maWcpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKGVsZW1lbnQgPT09IHZvaWQgMCkge1xuICAgICAgZWxlbWVudCA9ICdbZGF0YS1jaG9pY2VdJztcbiAgICB9XG5cbiAgICBpZiAodXNlckNvbmZpZyA9PT0gdm9pZCAwKSB7XG4gICAgICB1c2VyQ29uZmlnID0ge307XG4gICAgfVxuXG4gICAgLyoqIEB0eXBlIHtQYXJ0aWFsPE9wdGlvbnM+fSAqL1xuICAgIHRoaXMuY29uZmlnID0gY2pzX2RlZmF1bHQuYS5hbGwoW0RFRkFVTFRfQ09ORklHLCBDaG9pY2VzLmRlZmF1bHRzLm9wdGlvbnMsIHVzZXJDb25maWddLCAvLyBXaGVuIG1lcmdpbmcgYXJyYXkgY29uZmlncywgcmVwbGFjZSB3aXRoIGEgY29weSBvZiB0aGUgdXNlckNvbmZpZyBhcnJheSxcbiAgICAvLyBpbnN0ZWFkIG9mIGNvbmNhdGVuYXRpbmcgd2l0aCB0aGUgZGVmYXVsdCBhcnJheVxuICAgIHtcbiAgICAgIGFycmF5TWVyZ2U6IGZ1bmN0aW9uIGFycmF5TWVyZ2UoXywgc291cmNlQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIFtdLmNvbmNhdChzb3VyY2VBcnJheSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdmFyIGludmFsaWRDb25maWdPcHRpb25zID0gZGlmZih0aGlzLmNvbmZpZywgREVGQVVMVF9DT05GSUcpO1xuXG4gICAgaWYgKGludmFsaWRDb25maWdPcHRpb25zLmxlbmd0aCkge1xuICAgICAgY29uc29sZS53YXJuKCdVbmtub3duIGNvbmZpZyBvcHRpb24ocykgcGFzc2VkJywgaW52YWxpZENvbmZpZ09wdGlvbnMuam9pbignLCAnKSk7XG4gICAgfVxuXG4gICAgdmFyIHBhc3NlZEVsZW1lbnQgPSB0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW1lbnQpIDogZWxlbWVudDtcblxuICAgIGlmICghKHBhc3NlZEVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50IHx8IHBhc3NlZEVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MU2VsZWN0RWxlbWVudCkpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignRXhwZWN0ZWQgb25lIG9mIHRoZSBmb2xsb3dpbmcgdHlwZXMgdGV4dHxzZWxlY3Qtb25lfHNlbGVjdC1tdWx0aXBsZScpO1xuICAgIH1cblxuICAgIHRoaXMuX2lzVGV4dEVsZW1lbnQgPSBwYXNzZWRFbGVtZW50LnR5cGUgPT09IFRFWFRfVFlQRTtcbiAgICB0aGlzLl9pc1NlbGVjdE9uZUVsZW1lbnQgPSBwYXNzZWRFbGVtZW50LnR5cGUgPT09IFNFTEVDVF9PTkVfVFlQRTtcbiAgICB0aGlzLl9pc1NlbGVjdE11bHRpcGxlRWxlbWVudCA9IHBhc3NlZEVsZW1lbnQudHlwZSA9PT0gU0VMRUNUX01VTFRJUExFX1RZUEU7XG4gICAgdGhpcy5faXNTZWxlY3RFbGVtZW50ID0gdGhpcy5faXNTZWxlY3RPbmVFbGVtZW50IHx8IHRoaXMuX2lzU2VsZWN0TXVsdGlwbGVFbGVtZW50O1xuICAgIHRoaXMuY29uZmlnLnNlYXJjaEVuYWJsZWQgPSB0aGlzLl9pc1NlbGVjdE11bHRpcGxlRWxlbWVudCB8fCB0aGlzLmNvbmZpZy5zZWFyY2hFbmFibGVkO1xuXG4gICAgaWYgKCFbJ2F1dG8nLCAnYWx3YXlzJ10uaW5jbHVkZXModGhpcy5jb25maWcucmVuZGVyU2VsZWN0ZWRDaG9pY2VzKSkge1xuICAgICAgdGhpcy5jb25maWcucmVuZGVyU2VsZWN0ZWRDaG9pY2VzID0gJ2F1dG8nO1xuICAgIH1cblxuICAgIGlmICh1c2VyQ29uZmlnLmFkZEl0ZW1GaWx0ZXIgJiYgdHlwZW9mIHVzZXJDb25maWcuYWRkSXRlbUZpbHRlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIHJlID0gdXNlckNvbmZpZy5hZGRJdGVtRmlsdGVyIGluc3RhbmNlb2YgUmVnRXhwID8gdXNlckNvbmZpZy5hZGRJdGVtRmlsdGVyIDogbmV3IFJlZ0V4cCh1c2VyQ29uZmlnLmFkZEl0ZW1GaWx0ZXIpO1xuICAgICAgdGhpcy5jb25maWcuYWRkSXRlbUZpbHRlciA9IHJlLnRlc3QuYmluZChyZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2lzVGV4dEVsZW1lbnQpIHtcbiAgICAgIHRoaXMucGFzc2VkRWxlbWVudCA9IG5ldyBXcmFwcGVkSW5wdXQoe1xuICAgICAgICBlbGVtZW50OiBwYXNzZWRFbGVtZW50LFxuICAgICAgICBjbGFzc05hbWVzOiB0aGlzLmNvbmZpZy5jbGFzc05hbWVzLFxuICAgICAgICBkZWxpbWl0ZXI6IHRoaXMuY29uZmlnLmRlbGltaXRlclxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGFzc2VkRWxlbWVudCA9IG5ldyBXcmFwcGVkU2VsZWN0KHtcbiAgICAgICAgZWxlbWVudDogcGFzc2VkRWxlbWVudCxcbiAgICAgICAgY2xhc3NOYW1lczogdGhpcy5jb25maWcuY2xhc3NOYW1lcyxcbiAgICAgICAgdGVtcGxhdGU6IGZ1bmN0aW9uIHRlbXBsYXRlKGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuX3RlbXBsYXRlcy5vcHRpb24oZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuaW5pdGlhbGlzZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9zdG9yZSA9IG5ldyBzdG9yZV9TdG9yZSgpO1xuICAgIHRoaXMuX2luaXRpYWxTdGF0ZSA9IHt9O1xuICAgIHRoaXMuX2N1cnJlbnRTdGF0ZSA9IHt9O1xuICAgIHRoaXMuX3ByZXZTdGF0ZSA9IHt9O1xuICAgIHRoaXMuX2N1cnJlbnRWYWx1ZSA9ICcnO1xuICAgIHRoaXMuX2NhblNlYXJjaCA9IHRoaXMuY29uZmlnLnNlYXJjaEVuYWJsZWQ7XG4gICAgdGhpcy5faXNTY3JvbGxpbmdPbkllID0gZmFsc2U7XG4gICAgdGhpcy5faGlnaGxpZ2h0UG9zaXRpb24gPSAwO1xuICAgIHRoaXMuX3dhc1RhcCA9IHRydWU7XG4gICAgdGhpcy5fcGxhY2Vob2xkZXJWYWx1ZSA9IHRoaXMuX2dlbmVyYXRlUGxhY2Vob2xkZXJWYWx1ZSgpO1xuICAgIHRoaXMuX2Jhc2VJZCA9IGdlbmVyYXRlSWQodGhpcy5wYXNzZWRFbGVtZW50LmVsZW1lbnQsICdjaG9pY2VzLScpO1xuICAgIC8qKlxuICAgICAqIHNldHRpbmcgZGlyZWN0aW9uIGluIGNhc2VzIHdoZXJlIGl0J3MgZXhwbGljaXRseSBzZXQgb24gcGFzc2VkRWxlbWVudFxuICAgICAqIG9yIHdoZW4gY2FsY3VsYXRlZCBkaXJlY3Rpb24gaXMgZGlmZmVyZW50IGZyb20gdGhlIGRvY3VtZW50XG4gICAgICogQHR5cGUge0hUTUxFbGVtZW50WydkaXInXX1cbiAgICAgKi9cblxuICAgIHRoaXMuX2RpcmVjdGlvbiA9IHRoaXMucGFzc2VkRWxlbWVudC5kaXI7XG5cbiAgICBpZiAoIXRoaXMuX2RpcmVjdGlvbikge1xuICAgICAgdmFyIF93aW5kb3ckZ2V0Q29tcHV0ZWRTdCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMucGFzc2VkRWxlbWVudC5lbGVtZW50KSxcbiAgICAgICAgICBlbGVtZW50RGlyZWN0aW9uID0gX3dpbmRvdyRnZXRDb21wdXRlZFN0LmRpcmVjdGlvbjtcblxuICAgICAgdmFyIF93aW5kb3ckZ2V0Q29tcHV0ZWRTdDIgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLFxuICAgICAgICAgIGRvY3VtZW50RGlyZWN0aW9uID0gX3dpbmRvdyRnZXRDb21wdXRlZFN0Mi5kaXJlY3Rpb247XG5cbiAgICAgIGlmIChlbGVtZW50RGlyZWN0aW9uICE9PSBkb2N1bWVudERpcmVjdGlvbikge1xuICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSBlbGVtZW50RGlyZWN0aW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2lkTmFtZXMgPSB7XG4gICAgICBpdGVtQ2hvaWNlOiAnaXRlbS1jaG9pY2UnXG4gICAgfTsgLy8gQXNzaWduIHByZXNldCBncm91cHMgZnJvbSBwYXNzZWQgZWxlbWVudFxuXG4gICAgdGhpcy5fcHJlc2V0R3JvdXBzID0gdGhpcy5wYXNzZWRFbGVtZW50Lm9wdGlvbkdyb3VwczsgLy8gQXNzaWduIHByZXNldCBvcHRpb25zIGZyb20gcGFzc2VkIGVsZW1lbnRcblxuICAgIHRoaXMuX3ByZXNldE9wdGlvbnMgPSB0aGlzLnBhc3NlZEVsZW1lbnQub3B0aW9uczsgLy8gQXNzaWduIHByZXNldCBjaG9pY2VzIGZyb20gcGFzc2VkIG9iamVjdFxuXG4gICAgdGhpcy5fcHJlc2V0Q2hvaWNlcyA9IHRoaXMuY29uZmlnLmNob2ljZXM7IC8vIEFzc2lnbiBwcmVzZXQgaXRlbXMgZnJvbSBwYXNzZWQgb2JqZWN0IGZpcnN0XG5cbiAgICB0aGlzLl9wcmVzZXRJdGVtcyA9IHRoaXMuY29uZmlnLml0ZW1zOyAvLyBBZGQgYW55IHZhbHVlcyBwYXNzZWQgZnJvbSBhdHRyaWJ1dGVcblxuICAgIGlmICh0aGlzLnBhc3NlZEVsZW1lbnQudmFsdWUpIHtcbiAgICAgIHRoaXMuX3ByZXNldEl0ZW1zID0gdGhpcy5fcHJlc2V0SXRlbXMuY29uY2F0KHRoaXMucGFzc2VkRWxlbWVudC52YWx1ZS5zcGxpdCh0aGlzLmNvbmZpZy5kZWxpbWl0ZXIpKTtcbiAgICB9IC8vIENyZWF0ZSBhcnJheSBvZiBjaG9pY2VzIGZyb20gb3B0aW9uIGVsZW1lbnRzXG5cblxuICAgIGlmICh0aGlzLnBhc3NlZEVsZW1lbnQub3B0aW9ucykge1xuICAgICAgdGhpcy5wYXNzZWRFbGVtZW50Lm9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAobykge1xuICAgICAgICBfdGhpcy5fcHJlc2V0Q2hvaWNlcy5wdXNoKHtcbiAgICAgICAgICB2YWx1ZTogby52YWx1ZSxcbiAgICAgICAgICBsYWJlbDogby5pbm5lckhUTUwsXG4gICAgICAgICAgc2VsZWN0ZWQ6IG8uc2VsZWN0ZWQsXG4gICAgICAgICAgZGlzYWJsZWQ6IG8uZGlzYWJsZWQgfHwgby5wYXJlbnROb2RlLmRpc2FibGVkLFxuICAgICAgICAgIHBsYWNlaG9sZGVyOiBvLnZhbHVlID09PSAnJyB8fCBvLmhhc0F0dHJpYnV0ZSgncGxhY2Vob2xkZXInKSxcbiAgICAgICAgICBjdXN0b21Qcm9wZXJ0aWVzOiBvLmdldEF0dHJpYnV0ZSgnZGF0YS1jdXN0b20tcHJvcGVydGllcycpXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5fcmVuZGVyID0gdGhpcy5fcmVuZGVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25Gb2N1cyA9IHRoaXMuX29uRm9jdXMuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vbkJsdXIgPSB0aGlzLl9vbkJsdXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vbktleVVwID0gdGhpcy5fb25LZXlVcC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX29uS2V5RG93biA9IHRoaXMuX29uS2V5RG93bi5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX29uQ2xpY2sgPSB0aGlzLl9vbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25Ub3VjaE1vdmUgPSB0aGlzLl9vblRvdWNoTW92ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX29uVG91Y2hFbmQgPSB0aGlzLl9vblRvdWNoRW5kLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25Nb3VzZURvd24gPSB0aGlzLl9vbk1vdXNlRG93bi5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX29uTW91c2VPdmVyID0gdGhpcy5fb25Nb3VzZU92ZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vbkZvcm1SZXNldCA9IHRoaXMuX29uRm9ybVJlc2V0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25BS2V5ID0gdGhpcy5fb25BS2V5LmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25FbnRlcktleSA9IHRoaXMuX29uRW50ZXJLZXkuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vbkVzY2FwZUtleSA9IHRoaXMuX29uRXNjYXBlS2V5LmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25EaXJlY3Rpb25LZXkgPSB0aGlzLl9vbkRpcmVjdGlvbktleS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX29uRGVsZXRlS2V5ID0gdGhpcy5fb25EZWxldGVLZXkuYmluZCh0aGlzKTsgLy8gSWYgZWxlbWVudCBoYXMgYWxyZWFkeSBiZWVuIGluaXRpYWxpc2VkIHdpdGggQ2hvaWNlcywgZmFpbCBzaWxlbnRseVxuXG4gICAgaWYgKHRoaXMucGFzc2VkRWxlbWVudC5pc0FjdGl2ZSkge1xuICAgICAgaWYgKCF0aGlzLmNvbmZpZy5zaWxlbnQpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdUcnlpbmcgdG8gaW5pdGlhbGlzZSBDaG9pY2VzIG9uIGVsZW1lbnQgYWxyZWFkeSBpbml0aWFsaXNlZCcpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmluaXRpYWxpc2VkID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIExldCdzIGdvXG5cblxuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IENob2ljZXMucHJvdG90eXBlO1xuXG4gIF9wcm90by5pbml0ID0gZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBpZiAodGhpcy5pbml0aWFsaXNlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2NyZWF0ZVRlbXBsYXRlcygpO1xuXG4gICAgdGhpcy5fY3JlYXRlRWxlbWVudHMoKTtcblxuICAgIHRoaXMuX2NyZWF0ZVN0cnVjdHVyZSgpOyAvLyBTZXQgaW5pdGlhbCBzdGF0ZSAoV2UgbmVlZCB0byBjbG9uZSB0aGUgc3RhdGUgYmVjYXVzZSBzb21lIHJlZHVjZXJzXG4gICAgLy8gbW9kaWZ5IHRoZSBpbm5lciBvYmplY3RzIHByb3BlcnRpZXMgaW4gdGhlIHN0YXRlKSDwn6SiXG5cblxuICAgIHRoaXMuX2luaXRpYWxTdGF0ZSA9IGNsb25lT2JqZWN0KHRoaXMuX3N0b3JlLnN0YXRlKTtcblxuICAgIHRoaXMuX3N0b3JlLnN1YnNjcmliZSh0aGlzLl9yZW5kZXIpO1xuXG4gICAgdGhpcy5fcmVuZGVyKCk7XG5cbiAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpO1xuXG4gICAgdmFyIHNob3VsZERpc2FibGUgPSAhdGhpcy5jb25maWcuYWRkSXRlbXMgfHwgdGhpcy5wYXNzZWRFbGVtZW50LmVsZW1lbnQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuXG4gICAgaWYgKHNob3VsZERpc2FibGUpIHtcbiAgICAgIHRoaXMuZGlzYWJsZSgpO1xuICAgIH1cblxuICAgIHRoaXMuaW5pdGlhbGlzZWQgPSB0cnVlO1xuICAgIHZhciBjYWxsYmFja09uSW5pdCA9IHRoaXMuY29uZmlnLmNhbGxiYWNrT25Jbml0OyAvLyBSdW4gY2FsbGJhY2sgaWYgaXQgaXMgYSBmdW5jdGlvblxuXG4gICAgaWYgKGNhbGxiYWNrT25Jbml0ICYmIHR5cGVvZiBjYWxsYmFja09uSW5pdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2FsbGJhY2tPbkluaXQuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGlmICghdGhpcy5pbml0aWFsaXNlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3JlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgICB0aGlzLnBhc3NlZEVsZW1lbnQucmV2ZWFsKCk7XG4gICAgdGhpcy5jb250YWluZXJPdXRlci51bndyYXAodGhpcy5wYXNzZWRFbGVtZW50LmVsZW1lbnQpO1xuICAgIHRoaXMuY2xlYXJTdG9yZSgpO1xuXG4gICAgaWYgKHRoaXMuX2lzU2VsZWN0RWxlbWVudCkge1xuICAgICAgdGhpcy5wYXNzZWRFbGVtZW50Lm9wdGlvbnMgPSB0aGlzLl9wcmVzZXRPcHRpb25zO1xuICAgIH1cblxuICAgIHRoaXMuX3RlbXBsYXRlcyA9IG51bGw7XG4gICAgdGhpcy5pbml0aWFsaXNlZCA9IGZhbHNlO1xuICB9O1xuXG4gIF9wcm90by5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgaWYgKHRoaXMucGFzc2VkRWxlbWVudC5pc0Rpc2FibGVkKSB7XG4gICAgICB0aGlzLnBhc3NlZEVsZW1lbnQuZW5hYmxlKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29udGFpbmVyT3V0ZXIuaXNEaXNhYmxlZCkge1xuICAgICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKTtcblxuICAgICAgdGhpcy5pbnB1dC5lbmFibGUoKTtcbiAgICAgIHRoaXMuY29udGFpbmVyT3V0ZXIuZW5hYmxlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmRpc2FibGUgPSBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgIGlmICghdGhpcy5wYXNzZWRFbGVtZW50LmlzRGlzYWJsZWQpIHtcbiAgICAgIHRoaXMucGFzc2VkRWxlbWVudC5kaXNhYmxlKCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmNvbnRhaW5lck91dGVyLmlzRGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuX3JlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgICAgIHRoaXMuaW5wdXQuZGlzYWJsZSgpO1xuICAgICAgdGhpcy5jb250YWluZXJPdXRlci5kaXNhYmxlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmhpZ2hsaWdodEl0ZW0gPSBmdW5jdGlvbiBoaWdobGlnaHRJdGVtKGl0ZW0sIHJ1bkV2ZW50KSB7XG4gICAgaWYgKHJ1bkV2ZW50ID09PSB2b2lkIDApIHtcbiAgICAgIHJ1bkV2ZW50ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIWl0ZW0pIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBpZCA9IGl0ZW0uaWQsXG4gICAgICAgIF9pdGVtJGdyb3VwSWQgPSBpdGVtLmdyb3VwSWQsXG4gICAgICAgIGdyb3VwSWQgPSBfaXRlbSRncm91cElkID09PSB2b2lkIDAgPyAtMSA6IF9pdGVtJGdyb3VwSWQsXG4gICAgICAgIF9pdGVtJHZhbHVlID0gaXRlbS52YWx1ZSxcbiAgICAgICAgdmFsdWUgPSBfaXRlbSR2YWx1ZSA9PT0gdm9pZCAwID8gJycgOiBfaXRlbSR2YWx1ZSxcbiAgICAgICAgX2l0ZW0kbGFiZWwgPSBpdGVtLmxhYmVsLFxuICAgICAgICBsYWJlbCA9IF9pdGVtJGxhYmVsID09PSB2b2lkIDAgPyAnJyA6IF9pdGVtJGxhYmVsO1xuICAgIHZhciBncm91cCA9IGdyb3VwSWQgPj0gMCA/IHRoaXMuX3N0b3JlLmdldEdyb3VwQnlJZChncm91cElkKSA6IG51bGw7XG5cbiAgICB0aGlzLl9zdG9yZS5kaXNwYXRjaChpdGVtc19oaWdobGlnaHRJdGVtKGlkLCB0cnVlKSk7XG5cbiAgICBpZiAocnVuRXZlbnQpIHtcbiAgICAgIHRoaXMucGFzc2VkRWxlbWVudC50cmlnZ2VyRXZlbnQoRVZFTlRTLmhpZ2hsaWdodEl0ZW0sIHtcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgZ3JvdXBWYWx1ZTogZ3JvdXAgJiYgZ3JvdXAudmFsdWUgPyBncm91cC52YWx1ZSA6IG51bGxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by51bmhpZ2hsaWdodEl0ZW0gPSBmdW5jdGlvbiB1bmhpZ2hsaWdodEl0ZW0oaXRlbSkge1xuICAgIGlmICghaXRlbSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIGlkID0gaXRlbS5pZCxcbiAgICAgICAgX2l0ZW0kZ3JvdXBJZDIgPSBpdGVtLmdyb3VwSWQsXG4gICAgICAgIGdyb3VwSWQgPSBfaXRlbSRncm91cElkMiA9PT0gdm9pZCAwID8gLTEgOiBfaXRlbSRncm91cElkMixcbiAgICAgICAgX2l0ZW0kdmFsdWUyID0gaXRlbS52YWx1ZSxcbiAgICAgICAgdmFsdWUgPSBfaXRlbSR2YWx1ZTIgPT09IHZvaWQgMCA/ICcnIDogX2l0ZW0kdmFsdWUyLFxuICAgICAgICBfaXRlbSRsYWJlbDIgPSBpdGVtLmxhYmVsLFxuICAgICAgICBsYWJlbCA9IF9pdGVtJGxhYmVsMiA9PT0gdm9pZCAwID8gJycgOiBfaXRlbSRsYWJlbDI7XG4gICAgdmFyIGdyb3VwID0gZ3JvdXBJZCA+PSAwID8gdGhpcy5fc3RvcmUuZ2V0R3JvdXBCeUlkKGdyb3VwSWQpIDogbnVsbDtcblxuICAgIHRoaXMuX3N0b3JlLmRpc3BhdGNoKGl0ZW1zX2hpZ2hsaWdodEl0ZW0oaWQsIGZhbHNlKSk7XG5cbiAgICB0aGlzLnBhc3NlZEVsZW1lbnQudHJpZ2dlckV2ZW50KEVWRU5UUy5oaWdobGlnaHRJdGVtLCB7XG4gICAgICBpZDogaWQsXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBsYWJlbDogbGFiZWwsXG4gICAgICBncm91cFZhbHVlOiBncm91cCAmJiBncm91cC52YWx1ZSA/IGdyb3VwLnZhbHVlIDogbnVsbFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5oaWdobGlnaHRBbGwgPSBmdW5jdGlvbiBoaWdobGlnaHRBbGwoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB0aGlzLl9zdG9yZS5pdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gX3RoaXMyLmhpZ2hsaWdodEl0ZW0oaXRlbSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8udW5oaWdobGlnaHRBbGwgPSBmdW5jdGlvbiB1bmhpZ2hsaWdodEFsbCgpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHRoaXMuX3N0b3JlLml0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBfdGhpczMudW5oaWdobGlnaHRJdGVtKGl0ZW0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZUFjdGl2ZUl0ZW1zQnlWYWx1ZSA9IGZ1bmN0aW9uIHJlbW92ZUFjdGl2ZUl0ZW1zQnlWYWx1ZSh2YWx1ZSkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdGhpcy5fc3RvcmUuYWN0aXZlSXRlbXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gaXRlbS52YWx1ZSA9PT0gdmFsdWU7XG4gICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIF90aGlzNC5fcmVtb3ZlSXRlbShpdGVtKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5yZW1vdmVBY3RpdmVJdGVtcyA9IGZ1bmN0aW9uIHJlbW92ZUFjdGl2ZUl0ZW1zKGV4Y2x1ZGVkSWQpIHtcbiAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgIHRoaXMuX3N0b3JlLmFjdGl2ZUl0ZW1zLmZpbHRlcihmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIGlkID0gX3JlZi5pZDtcbiAgICAgIHJldHVybiBpZCAhPT0gZXhjbHVkZWRJZDtcbiAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gX3RoaXM1Ll9yZW1vdmVJdGVtKGl0ZW0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZUhpZ2hsaWdodGVkSXRlbXMgPSBmdW5jdGlvbiByZW1vdmVIaWdobGlnaHRlZEl0ZW1zKHJ1bkV2ZW50KSB7XG4gICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICBpZiAocnVuRXZlbnQgPT09IHZvaWQgMCkge1xuICAgICAgcnVuRXZlbnQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLl9zdG9yZS5oaWdobGlnaHRlZEFjdGl2ZUl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIF90aGlzNi5fcmVtb3ZlSXRlbShpdGVtKTsgLy8gSWYgdGhpcyBhY3Rpb24gd2FzIHBlcmZvcm1lZCBieSB0aGUgdXNlclxuICAgICAgLy8gdHJpZ2dlciB0aGUgZXZlbnRcblxuXG4gICAgICBpZiAocnVuRXZlbnQpIHtcbiAgICAgICAgX3RoaXM2Ll90cmlnZ2VyQ2hhbmdlKGl0ZW0udmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnNob3dEcm9wZG93biA9IGZ1bmN0aW9uIHNob3dEcm9wZG93bihwcmV2ZW50SW5wdXRGb2N1cykge1xuICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuZHJvcGRvd24uaXNBY3RpdmUpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczcuZHJvcGRvd24uc2hvdygpO1xuXG4gICAgICBfdGhpczcuY29udGFpbmVyT3V0ZXIub3BlbihfdGhpczcuZHJvcGRvd24uZGlzdGFuY2VGcm9tVG9wV2luZG93KTtcblxuICAgICAgaWYgKCFwcmV2ZW50SW5wdXRGb2N1cyAmJiBfdGhpczcuX2NhblNlYXJjaCkge1xuICAgICAgICBfdGhpczcuaW5wdXQuZm9jdXMoKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXM3LnBhc3NlZEVsZW1lbnQudHJpZ2dlckV2ZW50KEVWRU5UUy5zaG93RHJvcGRvd24sIHt9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uaGlkZURyb3Bkb3duID0gZnVuY3Rpb24gaGlkZURyb3Bkb3duKHByZXZlbnRJbnB1dEJsdXIpIHtcbiAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgIGlmICghdGhpcy5kcm9wZG93bi5pc0FjdGl2ZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzOC5kcm9wZG93bi5oaWRlKCk7XG5cbiAgICAgIF90aGlzOC5jb250YWluZXJPdXRlci5jbG9zZSgpO1xuXG4gICAgICBpZiAoIXByZXZlbnRJbnB1dEJsdXIgJiYgX3RoaXM4Ll9jYW5TZWFyY2gpIHtcbiAgICAgICAgX3RoaXM4LmlucHV0LnJlbW92ZUFjdGl2ZURlc2NlbmRhbnQoKTtcblxuICAgICAgICBfdGhpczguaW5wdXQuYmx1cigpO1xuICAgICAgfVxuXG4gICAgICBfdGhpczgucGFzc2VkRWxlbWVudC50cmlnZ2VyRXZlbnQoRVZFTlRTLmhpZGVEcm9wZG93biwge30pO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKHZhbHVlT25seSkge1xuICAgIGlmICh2YWx1ZU9ubHkgPT09IHZvaWQgMCkge1xuICAgICAgdmFsdWVPbmx5ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlcyA9IHRoaXMuX3N0b3JlLmFjdGl2ZUl0ZW1zLnJlZHVjZShmdW5jdGlvbiAoc2VsZWN0ZWRJdGVtcywgaXRlbSkge1xuICAgICAgdmFyIGl0ZW1WYWx1ZSA9IHZhbHVlT25seSA/IGl0ZW0udmFsdWUgOiBpdGVtO1xuICAgICAgc2VsZWN0ZWRJdGVtcy5wdXNoKGl0ZW1WYWx1ZSk7XG4gICAgICByZXR1cm4gc2VsZWN0ZWRJdGVtcztcbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4gdGhpcy5faXNTZWxlY3RPbmVFbGVtZW50ID8gdmFsdWVzWzBdIDogdmFsdWVzO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ1tdIHwgaW1wb3J0KCcuLi8uLi90eXBlcy9pbmRleCcpLkNob2ljZXMuSXRlbVtdfSBpdGVtc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXRWYWx1ZSA9IGZ1bmN0aW9uIHNldFZhbHVlKGl0ZW1zKSB7XG4gICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICBpZiAoIXRoaXMuaW5pdGlhbGlzZWQpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX3RoaXM5Ll9zZXRDaG9pY2VPckl0ZW0odmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5zZXRDaG9pY2VCeVZhbHVlID0gZnVuY3Rpb24gc2V0Q2hvaWNlQnlWYWx1ZSh2YWx1ZSkge1xuICAgIHZhciBfdGhpczEwID0gdGhpcztcblxuICAgIGlmICghdGhpcy5pbml0aWFsaXNlZCB8fCB0aGlzLl9pc1RleHRFbGVtZW50KSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IC8vIElmIG9ubHkgb25lIHZhbHVlIGhhcyBiZWVuIHBhc3NlZCwgY29udmVydCB0byBhcnJheVxuXG5cbiAgICB2YXIgY2hvaWNlVmFsdWUgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTsgLy8gTG9vcCB0aHJvdWdoIGVhY2ggdmFsdWUgYW5kXG5cbiAgICBjaG9pY2VWYWx1ZS5mb3JFYWNoKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHJldHVybiBfdGhpczEwLl9maW5kQW5kU2VsZWN0Q2hvaWNlQnlWYWx1ZSh2YWwpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgY2hvaWNlcyBvZiBzZWxlY3QgaW5wdXQgdmlhIGFuIGFycmF5IG9mIG9iamVjdHMgKG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhcnJheSBvZiBvYmplY3Qgb3IgcHJvbWlzZSBvZiBpdCksXG4gICAqIGEgdmFsdWUgZmllbGQgbmFtZSBhbmQgYSBsYWJlbCBmaWVsZCBuYW1lLlxuICAgKiBUaGlzIGJlaGF2ZXMgdGhlIHNhbWUgYXMgcGFzc2luZyBpdGVtcyB2aWEgdGhlIGNob2ljZXMgb3B0aW9uIGJ1dCBjYW4gYmUgY2FsbGVkIGFmdGVyIGluaXRpYWxpc2luZyBDaG9pY2VzLlxuICAgKiBUaGlzIGNhbiBhbHNvIGJlIHVzZWQgdG8gYWRkIGdyb3VwcyBvZiBjaG9pY2VzIChzZWUgZXhhbXBsZSAyKTsgT3B0aW9uYWxseSBwYXNzIGEgdHJ1ZSBgcmVwbGFjZUNob2ljZXNgIHZhbHVlIHRvIHJlbW92ZSBhbnkgZXhpc3RpbmcgY2hvaWNlcy5cbiAgICogT3B0aW9uYWxseSBwYXNzIGEgYGN1c3RvbVByb3BlcnRpZXNgIG9iamVjdCB0byBhZGQgYWRkaXRpb25hbCBkYXRhIHRvIHlvdXIgY2hvaWNlcyAodXNlZnVsIHdoZW4gc2VhcmNoaW5nL2ZpbHRlcmluZyBldGMpLlxuICAgKlxuICAgKiAqKklucHV0IHR5cGVzIGFmZmVjdGVkOioqIHNlbGVjdC1vbmUsIHNlbGVjdC1tdWx0aXBsZVxuICAgKlxuICAgKiBAdGVtcGxhdGUge0Nob2ljZVtdIHwgKChpbnN0YW5jZTogQ2hvaWNlcykgPT4gb2JqZWN0W10gfCBQcm9taXNlPG9iamVjdFtdPil9IFRcbiAgICogQHBhcmFtIHtUfSBbY2hvaWNlc0FycmF5T3JGZXRjaGVyXVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3ZhbHVlID0gJ3ZhbHVlJ10gLSBuYW1lIG9mIGB2YWx1ZWAgZmllbGRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsYWJlbCA9ICdsYWJlbCddIC0gbmFtZSBvZiAnbGFiZWwnIGZpZWxkXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JlcGxhY2VDaG9pY2VzID0gZmFsc2VdIC0gd2hldGhlciB0byByZXBsYWNlIG9mIGFkZCBjaG9pY2VzXG4gICAqIEByZXR1cm5zIHt0aGlzIHwgUHJvbWlzZTx0aGlzPn1cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBganNcbiAgICogY29uc3QgZXhhbXBsZSA9IG5ldyBDaG9pY2VzKGVsZW1lbnQpO1xuICAgKlxuICAgKiBleGFtcGxlLnNldENob2ljZXMoW1xuICAgKiAgIHt2YWx1ZTogJ09uZScsIGxhYmVsOiAnTGFiZWwgT25lJywgZGlzYWJsZWQ6IHRydWV9LFxuICAgKiAgIHt2YWx1ZTogJ1R3bycsIGxhYmVsOiAnTGFiZWwgVHdvJywgc2VsZWN0ZWQ6IHRydWV9LFxuICAgKiAgIHt2YWx1ZTogJ1RocmVlJywgbGFiZWw6ICdMYWJlbCBUaHJlZSd9LFxuICAgKiBdLCAndmFsdWUnLCAnbGFiZWwnLCBmYWxzZSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqc1xuICAgKiBjb25zdCBleGFtcGxlID0gbmV3IENob2ljZXMoZWxlbWVudCk7XG4gICAqXG4gICAqIGV4YW1wbGUuc2V0Q2hvaWNlcyhhc3luYyAoKSA9PiB7XG4gICAqICAgdHJ5IHtcbiAgICogICAgICBjb25zdCBpdGVtcyA9IGF3YWl0IGZldGNoKCcvaXRlbXMnKTtcbiAgICogICAgICByZXR1cm4gaXRlbXMuanNvbigpXG4gICAqICAgfSBjYXRjaChlcnIpIHtcbiAgICogICAgICBjb25zb2xlLmVycm9yKGVycilcbiAgICogICB9XG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBganNcbiAgICogY29uc3QgZXhhbXBsZSA9IG5ldyBDaG9pY2VzKGVsZW1lbnQpO1xuICAgKlxuICAgKiBleGFtcGxlLnNldENob2ljZXMoW3tcbiAgICogICBsYWJlbDogJ0dyb3VwIG9uZScsXG4gICAqICAgaWQ6IDEsXG4gICAqICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgKiAgIGNob2ljZXM6IFtcbiAgICogICAgIHt2YWx1ZTogJ0NoaWxkIE9uZScsIGxhYmVsOiAnQ2hpbGQgT25lJywgc2VsZWN0ZWQ6IHRydWV9LFxuICAgKiAgICAge3ZhbHVlOiAnQ2hpbGQgVHdvJywgbGFiZWw6ICdDaGlsZCBUd28nLCAgZGlzYWJsZWQ6IHRydWV9LFxuICAgKiAgICAge3ZhbHVlOiAnQ2hpbGQgVGhyZWUnLCBsYWJlbDogJ0NoaWxkIFRocmVlJ30sXG4gICAqICAgXVxuICAgKiB9LFxuICAgKiB7XG4gICAqICAgbGFiZWw6ICdHcm91cCB0d28nLFxuICAgKiAgIGlkOiAyLFxuICAgKiAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICogICBjaG9pY2VzOiBbXG4gICAqICAgICB7dmFsdWU6ICdDaGlsZCBGb3VyJywgbGFiZWw6ICdDaGlsZCBGb3VyJywgZGlzYWJsZWQ6IHRydWV9LFxuICAgKiAgICAge3ZhbHVlOiAnQ2hpbGQgRml2ZScsIGxhYmVsOiAnQ2hpbGQgRml2ZSd9LFxuICAgKiAgICAge3ZhbHVlOiAnQ2hpbGQgU2l4JywgbGFiZWw6ICdDaGlsZCBTaXgnLCBjdXN0b21Qcm9wZXJ0aWVzOiB7XG4gICAqICAgICAgIGRlc2NyaXB0aW9uOiAnQ3VzdG9tIGRlc2NyaXB0aW9uIGFib3V0IGNoaWxkIHNpeCcsXG4gICAqICAgICAgIHJhbmRvbTogJ0Fub3RoZXIgcmFuZG9tIGN1c3RvbSBwcm9wZXJ0eSdcbiAgICogICAgIH19LFxuICAgKiAgIF1cbiAgICogfV0sICd2YWx1ZScsICdsYWJlbCcsIGZhbHNlKTtcbiAgICogYGBgXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldENob2ljZXMgPSBmdW5jdGlvbiBzZXRDaG9pY2VzKGNob2ljZXNBcnJheU9yRmV0Y2hlciwgdmFsdWUsIGxhYmVsLCByZXBsYWNlQ2hvaWNlcykge1xuICAgIHZhciBfdGhpczExID0gdGhpcztcblxuICAgIGlmIChjaG9pY2VzQXJyYXlPckZldGNoZXIgPT09IHZvaWQgMCkge1xuICAgICAgY2hvaWNlc0FycmF5T3JGZXRjaGVyID0gW107XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgIHZhbHVlID0gJ3ZhbHVlJztcbiAgICB9XG5cbiAgICBpZiAobGFiZWwgPT09IHZvaWQgMCkge1xuICAgICAgbGFiZWwgPSAnbGFiZWwnO1xuICAgIH1cblxuICAgIGlmIChyZXBsYWNlQ2hvaWNlcyA9PT0gdm9pZCAwKSB7XG4gICAgICByZXBsYWNlQ2hvaWNlcyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pbml0aWFsaXNlZCkge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwic2V0Q2hvaWNlcyB3YXMgY2FsbGVkIG9uIGEgbm9uLWluaXRpYWxpemVkIGluc3RhbmNlIG9mIENob2ljZXNcIik7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9pc1NlbGVjdEVsZW1lbnQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJzZXRDaG9pY2VzIGNhbid0IGJlIHVzZWQgd2l0aCBJTlBVVCBiYXNlZCBDaG9pY2VzXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnIHx8ICF2YWx1ZSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcInZhbHVlIHBhcmFtZXRlciBtdXN0IGJlIGEgbmFtZSBvZiAndmFsdWUnIGZpZWxkIGluIHBhc3NlZCBvYmplY3RzXCIpO1xuICAgIH0gLy8gQ2xlYXIgY2hvaWNlcyBpZiBuZWVkZWRcblxuXG4gICAgaWYgKHJlcGxhY2VDaG9pY2VzKSB7XG4gICAgICB0aGlzLmNsZWFyQ2hvaWNlcygpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY2hvaWNlc0FycmF5T3JGZXRjaGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBpdCdzIGEgY2hvaWNlcyBmZXRjaGVyIGZ1bmN0aW9uXG4gICAgICB2YXIgZmV0Y2hlciA9IGNob2ljZXNBcnJheU9yRmV0Y2hlcih0aGlzKTtcblxuICAgICAgaWYgKHR5cGVvZiBQcm9taXNlID09PSAnZnVuY3Rpb24nICYmIGZldGNoZXIgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIC8vIHRoYXQncyBhIHByb21pc2VcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBhdC9jb21wYXRcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZXNvbHZlKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMTEuX2hhbmRsZUxvYWRpbmdTdGF0ZSh0cnVlKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGZldGNoZXI7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMxMS5zZXRDaG9pY2VzKGRhdGEsIHZhbHVlLCBsYWJlbCwgcmVwbGFjZUNob2ljZXMpO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgaWYgKCFfdGhpczExLmNvbmZpZy5zaWxlbnQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczExLl9oYW5kbGVMb2FkaW5nU3RhdGUoZmFsc2UpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMxMTtcbiAgICAgICAgfSk7XG4gICAgICB9IC8vIGZ1bmN0aW9uIHJldHVybmVkIHNvbWV0aGluZyBlbHNlIHRoYW4gcHJvbWlzZSwgbGV0J3MgY2hlY2sgaWYgaXQncyBhbiBhcnJheSBvZiBjaG9pY2VzXG5cblxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGZldGNoZXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCIuc2V0Q2hvaWNlcyBmaXJzdCBhcmd1bWVudCBmdW5jdGlvbiBtdXN0IHJldHVybiBlaXRoZXIgYXJyYXkgb2YgY2hvaWNlcyBvciBQcm9taXNlLCBnb3Q6IFwiICsgdHlwZW9mIGZldGNoZXIpO1xuICAgICAgfSAvLyByZWN1cnNpb24gd2l0aCByZXN1bHRzLCBpdCdzIHN5bmMgYW5kIGNob2ljZXMgd2VyZSBjbGVhcmVkIGFscmVhZHlcblxuXG4gICAgICByZXR1cm4gdGhpcy5zZXRDaG9pY2VzKGZldGNoZXIsIHZhbHVlLCBsYWJlbCwgZmFsc2UpO1xuICAgIH1cblxuICAgIGlmICghQXJyYXkuaXNBcnJheShjaG9pY2VzQXJyYXlPckZldGNoZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiLnNldENob2ljZXMgbXVzdCBiZSBjYWxsZWQgZWl0aGVyIHdpdGggYXJyYXkgb2YgY2hvaWNlcyB3aXRoIGEgZnVuY3Rpb24gcmVzdWx0aW5nIGludG8gUHJvbWlzZSBvZiBhcnJheSBvZiBjaG9pY2VzXCIpO1xuICAgIH1cblxuICAgIHRoaXMuY29udGFpbmVyT3V0ZXIucmVtb3ZlTG9hZGluZ1N0YXRlKCk7XG5cbiAgICB0aGlzLl9zdGFydExvYWRpbmcoKTtcblxuICAgIGNob2ljZXNBcnJheU9yRmV0Y2hlci5mb3JFYWNoKGZ1bmN0aW9uIChncm91cE9yQ2hvaWNlKSB7XG4gICAgICBpZiAoZ3JvdXBPckNob2ljZS5jaG9pY2VzKSB7XG4gICAgICAgIF90aGlzMTEuX2FkZEdyb3VwKHtcbiAgICAgICAgICBpZDogcGFyc2VJbnQoZ3JvdXBPckNob2ljZS5pZCwgMTApIHx8IG51bGwsXG4gICAgICAgICAgZ3JvdXA6IGdyb3VwT3JDaG9pY2UsXG4gICAgICAgICAgdmFsdWVLZXk6IHZhbHVlLFxuICAgICAgICAgIGxhYmVsS2V5OiBsYWJlbFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzMTEuX2FkZENob2ljZSh7XG4gICAgICAgICAgdmFsdWU6IGdyb3VwT3JDaG9pY2VbdmFsdWVdLFxuICAgICAgICAgIGxhYmVsOiBncm91cE9yQ2hvaWNlW2xhYmVsXSxcbiAgICAgICAgICBpc1NlbGVjdGVkOiBncm91cE9yQ2hvaWNlLnNlbGVjdGVkLFxuICAgICAgICAgIGlzRGlzYWJsZWQ6IGdyb3VwT3JDaG9pY2UuZGlzYWJsZWQsXG4gICAgICAgICAgY3VzdG9tUHJvcGVydGllczogZ3JvdXBPckNob2ljZS5jdXN0b21Qcm9wZXJ0aWVzLFxuICAgICAgICAgIHBsYWNlaG9sZGVyOiBncm91cE9yQ2hvaWNlLnBsYWNlaG9sZGVyXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5fc3RvcExvYWRpbmcoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5jbGVhckNob2ljZXMgPSBmdW5jdGlvbiBjbGVhckNob2ljZXMoKSB7XG4gICAgdGhpcy5fc3RvcmUuZGlzcGF0Y2goY2hvaWNlc19jbGVhckNob2ljZXMoKSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uY2xlYXJTdG9yZSA9IGZ1bmN0aW9uIGNsZWFyU3RvcmUoKSB7XG4gICAgdGhpcy5fc3RvcmUuZGlzcGF0Y2goY2xlYXJBbGwoKSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uY2xlYXJJbnB1dCA9IGZ1bmN0aW9uIGNsZWFySW5wdXQoKSB7XG4gICAgdmFyIHNob3VsZFNldElucHV0V2lkdGggPSAhdGhpcy5faXNTZWxlY3RPbmVFbGVtZW50O1xuICAgIHRoaXMuaW5wdXQuY2xlYXIoc2hvdWxkU2V0SW5wdXRXaWR0aCk7XG5cbiAgICBpZiAoIXRoaXMuX2lzVGV4dEVsZW1lbnQgJiYgdGhpcy5fY2FuU2VhcmNoKSB7XG4gICAgICB0aGlzLl9pc1NlYXJjaGluZyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLl9zdG9yZS5kaXNwYXRjaChjaG9pY2VzX2FjdGl2YXRlQ2hvaWNlcyh0cnVlKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLl9yZW5kZXIgPSBmdW5jdGlvbiBfcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLl9zdG9yZS5pc0xvYWRpbmcoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2N1cnJlbnRTdGF0ZSA9IHRoaXMuX3N0b3JlLnN0YXRlO1xuICAgIHZhciBzdGF0ZUNoYW5nZWQgPSB0aGlzLl9jdXJyZW50U3RhdGUuY2hvaWNlcyAhPT0gdGhpcy5fcHJldlN0YXRlLmNob2ljZXMgfHwgdGhpcy5fY3VycmVudFN0YXRlLmdyb3VwcyAhPT0gdGhpcy5fcHJldlN0YXRlLmdyb3VwcyB8fCB0aGlzLl9jdXJyZW50U3RhdGUuaXRlbXMgIT09IHRoaXMuX3ByZXZTdGF0ZS5pdGVtcztcbiAgICB2YXIgc2hvdWxkUmVuZGVyQ2hvaWNlcyA9IHRoaXMuX2lzU2VsZWN0RWxlbWVudDtcbiAgICB2YXIgc2hvdWxkUmVuZGVySXRlbXMgPSB0aGlzLl9jdXJyZW50U3RhdGUuaXRlbXMgIT09IHRoaXMuX3ByZXZTdGF0ZS5pdGVtcztcblxuICAgIGlmICghc3RhdGVDaGFuZ2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFJlbmRlckNob2ljZXMpIHtcbiAgICAgIHRoaXMuX3JlbmRlckNob2ljZXMoKTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkUmVuZGVySXRlbXMpIHtcbiAgICAgIHRoaXMuX3JlbmRlckl0ZW1zKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fcHJldlN0YXRlID0gdGhpcy5fY3VycmVudFN0YXRlO1xuICB9O1xuXG4gIF9wcm90by5fcmVuZGVyQ2hvaWNlcyA9IGZ1bmN0aW9uIF9yZW5kZXJDaG9pY2VzKCkge1xuICAgIHZhciBfdGhpczEyID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRfc3RvcmUgPSB0aGlzLl9zdG9yZSxcbiAgICAgICAgYWN0aXZlR3JvdXBzID0gX3RoaXMkX3N0b3JlLmFjdGl2ZUdyb3VwcyxcbiAgICAgICAgYWN0aXZlQ2hvaWNlcyA9IF90aGlzJF9zdG9yZS5hY3RpdmVDaG9pY2VzO1xuICAgIHZhciBjaG9pY2VMaXN0RnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgdGhpcy5jaG9pY2VMaXN0LmNsZWFyKCk7XG5cbiAgICBpZiAodGhpcy5jb25maWcucmVzZXRTY3JvbGxQb3NpdGlvbikge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMTIuY2hvaWNlTGlzdC5zY3JvbGxUb1RvcCgpO1xuICAgICAgfSk7XG4gICAgfSAvLyBJZiB3ZSBoYXZlIGdyb3VwZWQgb3B0aW9uc1xuXG5cbiAgICBpZiAoYWN0aXZlR3JvdXBzLmxlbmd0aCA+PSAxICYmICF0aGlzLl9pc1NlYXJjaGluZykge1xuICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBsYWNlaG9sZGVyIGNob2ljZSBhbG9uZyB3aXRoIGdyb3Vwc1xuICAgICAgdmFyIGFjdGl2ZVBsYWNlaG9sZGVycyA9IGFjdGl2ZUNob2ljZXMuZmlsdGVyKGZ1bmN0aW9uIChhY3RpdmVDaG9pY2UpIHtcbiAgICAgICAgcmV0dXJuIGFjdGl2ZUNob2ljZS5wbGFjZWhvbGRlciA9PT0gdHJ1ZSAmJiBhY3RpdmVDaG9pY2UuZ3JvdXBJZCA9PT0gLTE7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGFjdGl2ZVBsYWNlaG9sZGVycy5sZW5ndGggPj0gMSkge1xuICAgICAgICBjaG9pY2VMaXN0RnJhZ21lbnQgPSB0aGlzLl9jcmVhdGVDaG9pY2VzRnJhZ21lbnQoYWN0aXZlUGxhY2Vob2xkZXJzLCBjaG9pY2VMaXN0RnJhZ21lbnQpO1xuICAgICAgfVxuXG4gICAgICBjaG9pY2VMaXN0RnJhZ21lbnQgPSB0aGlzLl9jcmVhdGVHcm91cHNGcmFnbWVudChhY3RpdmVHcm91cHMsIGFjdGl2ZUNob2ljZXMsIGNob2ljZUxpc3RGcmFnbWVudCk7XG4gICAgfSBlbHNlIGlmIChhY3RpdmVDaG9pY2VzLmxlbmd0aCA+PSAxKSB7XG4gICAgICBjaG9pY2VMaXN0RnJhZ21lbnQgPSB0aGlzLl9jcmVhdGVDaG9pY2VzRnJhZ21lbnQoYWN0aXZlQ2hvaWNlcywgY2hvaWNlTGlzdEZyYWdtZW50KTtcbiAgICB9IC8vIElmIHdlIGhhdmUgY2hvaWNlcyB0byBzaG93XG5cblxuICAgIGlmIChjaG9pY2VMaXN0RnJhZ21lbnQuY2hpbGROb2RlcyAmJiBjaG9pY2VMaXN0RnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgYWN0aXZlSXRlbXMgPSB0aGlzLl9zdG9yZS5hY3RpdmVJdGVtcztcblxuICAgICAgdmFyIGNhbkFkZEl0ZW0gPSB0aGlzLl9jYW5BZGRJdGVtKGFjdGl2ZUl0ZW1zLCB0aGlzLmlucHV0LnZhbHVlKTsgLy8gLi4uYW5kIHdlIGNhbiBzZWxlY3QgdGhlbVxuXG5cbiAgICAgIGlmIChjYW5BZGRJdGVtLnJlc3BvbnNlKSB7XG4gICAgICAgIC8vIC4uLmFwcGVuZCB0aGVtIGFuZCBoaWdobGlnaHQgdGhlIGZpcnN0IGNob2ljZVxuICAgICAgICB0aGlzLmNob2ljZUxpc3QuYXBwZW5kKGNob2ljZUxpc3RGcmFnbWVudCk7XG5cbiAgICAgICAgdGhpcy5faGlnaGxpZ2h0Q2hvaWNlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyAuLi5vdGhlcndpc2Ugc2hvdyBhIG5vdGljZVxuICAgICAgICB0aGlzLmNob2ljZUxpc3QuYXBwZW5kKHRoaXMuX2dldFRlbXBsYXRlKCdub3RpY2UnLCBjYW5BZGRJdGVtLm5vdGljZSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPdGhlcndpc2Ugc2hvdyBhIG5vdGljZVxuICAgICAgdmFyIGRyb3Bkb3duSXRlbTtcbiAgICAgIHZhciBub3RpY2U7XG5cbiAgICAgIGlmICh0aGlzLl9pc1NlYXJjaGluZykge1xuICAgICAgICBub3RpY2UgPSB0eXBlb2YgdGhpcy5jb25maWcubm9SZXN1bHRzVGV4dCA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuY29uZmlnLm5vUmVzdWx0c1RleHQoKSA6IHRoaXMuY29uZmlnLm5vUmVzdWx0c1RleHQ7XG4gICAgICAgIGRyb3Bkb3duSXRlbSA9IHRoaXMuX2dldFRlbXBsYXRlKCdub3RpY2UnLCBub3RpY2UsICduby1yZXN1bHRzJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub3RpY2UgPSB0eXBlb2YgdGhpcy5jb25maWcubm9DaG9pY2VzVGV4dCA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuY29uZmlnLm5vQ2hvaWNlc1RleHQoKSA6IHRoaXMuY29uZmlnLm5vQ2hvaWNlc1RleHQ7XG4gICAgICAgIGRyb3Bkb3duSXRlbSA9IHRoaXMuX2dldFRlbXBsYXRlKCdub3RpY2UnLCBub3RpY2UsICduby1jaG9pY2VzJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2hvaWNlTGlzdC5hcHBlbmQoZHJvcGRvd25JdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9yZW5kZXJJdGVtcyA9IGZ1bmN0aW9uIF9yZW5kZXJJdGVtcygpIHtcbiAgICB2YXIgYWN0aXZlSXRlbXMgPSB0aGlzLl9zdG9yZS5hY3RpdmVJdGVtcyB8fCBbXTtcbiAgICB0aGlzLml0ZW1MaXN0LmNsZWFyKCk7IC8vIENyZWF0ZSBhIGZyYWdtZW50IHRvIHN0b3JlIG91ciBsaXN0IGl0ZW1zXG4gICAgLy8gKHNvIHdlIGRvbid0IGhhdmUgdG8gdXBkYXRlIHRoZSBET00gZm9yIGVhY2ggaXRlbSlcblxuICAgIHZhciBpdGVtTGlzdEZyYWdtZW50ID0gdGhpcy5fY3JlYXRlSXRlbXNGcmFnbWVudChhY3RpdmVJdGVtcyk7IC8vIElmIHdlIGhhdmUgaXRlbXMgdG8gYWRkLCBhcHBlbmQgdGhlbVxuXG5cbiAgICBpZiAoaXRlbUxpc3RGcmFnbWVudC5jaGlsZE5vZGVzKSB7XG4gICAgICB0aGlzLml0ZW1MaXN0LmFwcGVuZChpdGVtTGlzdEZyYWdtZW50KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9jcmVhdGVHcm91cHNGcmFnbWVudCA9IGZ1bmN0aW9uIF9jcmVhdGVHcm91cHNGcmFnbWVudChncm91cHMsIGNob2ljZXMsIGZyYWdtZW50KSB7XG4gICAgdmFyIF90aGlzMTMgPSB0aGlzO1xuXG4gICAgaWYgKGZyYWdtZW50ID09PSB2b2lkIDApIHtcbiAgICAgIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgIH1cblxuICAgIHZhciBnZXRHcm91cENob2ljZXMgPSBmdW5jdGlvbiBnZXRHcm91cENob2ljZXMoZ3JvdXApIHtcbiAgICAgIHJldHVybiBjaG9pY2VzLmZpbHRlcihmdW5jdGlvbiAoY2hvaWNlKSB7XG4gICAgICAgIGlmIChfdGhpczEzLl9pc1NlbGVjdE9uZUVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gY2hvaWNlLmdyb3VwSWQgPT09IGdyb3VwLmlkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNob2ljZS5ncm91cElkID09PSBncm91cC5pZCAmJiAoX3RoaXMxMy5jb25maWcucmVuZGVyU2VsZWN0ZWRDaG9pY2VzID09PSAnYWx3YXlzJyB8fCAhY2hvaWNlLnNlbGVjdGVkKTtcbiAgICAgIH0pO1xuICAgIH07IC8vIElmIHNvcnRpbmcgaXMgZW5hYmxlZCwgZmlsdGVyIGdyb3Vwc1xuXG5cbiAgICBpZiAodGhpcy5jb25maWcuc2hvdWxkU29ydCkge1xuICAgICAgZ3JvdXBzLnNvcnQodGhpcy5jb25maWcuc29ydGVyKTtcbiAgICB9XG5cbiAgICBncm91cHMuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXApIHtcbiAgICAgIHZhciBncm91cENob2ljZXMgPSBnZXRHcm91cENob2ljZXMoZ3JvdXApO1xuXG4gICAgICBpZiAoZ3JvdXBDaG9pY2VzLmxlbmd0aCA+PSAxKSB7XG4gICAgICAgIHZhciBkcm9wZG93bkdyb3VwID0gX3RoaXMxMy5fZ2V0VGVtcGxhdGUoJ2Nob2ljZUdyb3VwJywgZ3JvdXApO1xuXG4gICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGRyb3Bkb3duR3JvdXApO1xuXG4gICAgICAgIF90aGlzMTMuX2NyZWF0ZUNob2ljZXNGcmFnbWVudChncm91cENob2ljZXMsIGZyYWdtZW50LCB0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZnJhZ21lbnQ7XG4gIH07XG5cbiAgX3Byb3RvLl9jcmVhdGVDaG9pY2VzRnJhZ21lbnQgPSBmdW5jdGlvbiBfY3JlYXRlQ2hvaWNlc0ZyYWdtZW50KGNob2ljZXMsIGZyYWdtZW50LCB3aXRoaW5Hcm91cCkge1xuICAgIHZhciBfdGhpczE0ID0gdGhpcztcblxuICAgIGlmIChmcmFnbWVudCA9PT0gdm9pZCAwKSB7XG4gICAgICBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICB9XG5cbiAgICBpZiAod2l0aGluR3JvdXAgPT09IHZvaWQgMCkge1xuICAgICAgd2l0aGluR3JvdXAgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgYSBmcmFnbWVudCB0byBzdG9yZSBvdXIgbGlzdCBpdGVtcyAoc28gd2UgZG9uJ3QgaGF2ZSB0byB1cGRhdGUgdGhlIERPTSBmb3IgZWFjaCBpdGVtKVxuICAgIHZhciBfdGhpcyRjb25maWcgPSB0aGlzLmNvbmZpZyxcbiAgICAgICAgcmVuZGVyU2VsZWN0ZWRDaG9pY2VzID0gX3RoaXMkY29uZmlnLnJlbmRlclNlbGVjdGVkQ2hvaWNlcyxcbiAgICAgICAgc2VhcmNoUmVzdWx0TGltaXQgPSBfdGhpcyRjb25maWcuc2VhcmNoUmVzdWx0TGltaXQsXG4gICAgICAgIHJlbmRlckNob2ljZUxpbWl0ID0gX3RoaXMkY29uZmlnLnJlbmRlckNob2ljZUxpbWl0O1xuICAgIHZhciBmaWx0ZXIgPSB0aGlzLl9pc1NlYXJjaGluZyA/IHNvcnRCeVNjb3JlIDogdGhpcy5jb25maWcuc29ydGVyO1xuXG4gICAgdmFyIGFwcGVuZENob2ljZSA9IGZ1bmN0aW9uIGFwcGVuZENob2ljZShjaG9pY2UpIHtcbiAgICAgIHZhciBzaG91bGRSZW5kZXIgPSByZW5kZXJTZWxlY3RlZENob2ljZXMgPT09ICdhdXRvJyA/IF90aGlzMTQuX2lzU2VsZWN0T25lRWxlbWVudCB8fCAhY2hvaWNlLnNlbGVjdGVkIDogdHJ1ZTtcblxuICAgICAgaWYgKHNob3VsZFJlbmRlcikge1xuICAgICAgICB2YXIgZHJvcGRvd25JdGVtID0gX3RoaXMxNC5fZ2V0VGVtcGxhdGUoJ2Nob2ljZScsIGNob2ljZSwgX3RoaXMxNC5jb25maWcuaXRlbVNlbGVjdFRleHQpO1xuXG4gICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGRyb3Bkb3duSXRlbSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZW5kZXJlcmFibGVDaG9pY2VzID0gY2hvaWNlcztcblxuICAgIGlmIChyZW5kZXJTZWxlY3RlZENob2ljZXMgPT09ICdhdXRvJyAmJiAhdGhpcy5faXNTZWxlY3RPbmVFbGVtZW50KSB7XG4gICAgICByZW5kZXJlcmFibGVDaG9pY2VzID0gY2hvaWNlcy5maWx0ZXIoZnVuY3Rpb24gKGNob2ljZSkge1xuICAgICAgICByZXR1cm4gIWNob2ljZS5zZWxlY3RlZDtcbiAgICAgIH0pO1xuICAgIH0gLy8gU3BsaXQgYXJyYXkgaW50byBwbGFjZWhvbGRlcnMgYW5kIFwibm9ybWFsXCIgY2hvaWNlc1xuXG5cbiAgICB2YXIgX3JlbmRlcmVyYWJsZUNob2ljZXMkID0gcmVuZGVyZXJhYmxlQ2hvaWNlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY2hvaWNlKSB7XG4gICAgICBpZiAoY2hvaWNlLnBsYWNlaG9sZGVyKSB7XG4gICAgICAgIGFjYy5wbGFjZWhvbGRlckNob2ljZXMucHVzaChjaG9pY2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWNjLm5vcm1hbENob2ljZXMucHVzaChjaG9pY2UpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHtcbiAgICAgIHBsYWNlaG9sZGVyQ2hvaWNlczogW10sXG4gICAgICBub3JtYWxDaG9pY2VzOiBbXVxuICAgIH0pLFxuICAgICAgICBwbGFjZWhvbGRlckNob2ljZXMgPSBfcmVuZGVyZXJhYmxlQ2hvaWNlcyQucGxhY2Vob2xkZXJDaG9pY2VzLFxuICAgICAgICBub3JtYWxDaG9pY2VzID0gX3JlbmRlcmVyYWJsZUNob2ljZXMkLm5vcm1hbENob2ljZXM7IC8vIElmIHNvcnRpbmcgaXMgZW5hYmxlZCBvciB0aGUgdXNlciBpcyBzZWFyY2hpbmcsIGZpbHRlciBjaG9pY2VzXG5cblxuICAgIGlmICh0aGlzLmNvbmZpZy5zaG91bGRTb3J0IHx8IHRoaXMuX2lzU2VhcmNoaW5nKSB7XG4gICAgICBub3JtYWxDaG9pY2VzLnNvcnQoZmlsdGVyKTtcbiAgICB9XG5cbiAgICB2YXIgY2hvaWNlTGltaXQgPSByZW5kZXJlcmFibGVDaG9pY2VzLmxlbmd0aDsgLy8gUHJlcGVuZCBwbGFjZWhvbGVkZXJcblxuICAgIHZhciBzb3J0ZWRDaG9pY2VzID0gdGhpcy5faXNTZWxlY3RPbmVFbGVtZW50ID8gW10uY29uY2F0KHBsYWNlaG9sZGVyQ2hvaWNlcywgbm9ybWFsQ2hvaWNlcykgOiBub3JtYWxDaG9pY2VzO1xuXG4gICAgaWYgKHRoaXMuX2lzU2VhcmNoaW5nKSB7XG4gICAgICBjaG9pY2VMaW1pdCA9IHNlYXJjaFJlc3VsdExpbWl0O1xuICAgIH0gZWxzZSBpZiAocmVuZGVyQ2hvaWNlTGltaXQgJiYgcmVuZGVyQ2hvaWNlTGltaXQgPiAwICYmICF3aXRoaW5Hcm91cCkge1xuICAgICAgY2hvaWNlTGltaXQgPSByZW5kZXJDaG9pY2VMaW1pdDtcbiAgICB9IC8vIEFkZCBlYWNoIGNob2ljZSB0byBkcm9wZG93biB3aXRoaW4gcmFuZ2VcblxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaG9pY2VMaW1pdDsgaSArPSAxKSB7XG4gICAgICBpZiAoc29ydGVkQ2hvaWNlc1tpXSkge1xuICAgICAgICBhcHBlbmRDaG9pY2Uoc29ydGVkQ2hvaWNlc1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZyYWdtZW50O1xuICB9O1xuXG4gIF9wcm90by5fY3JlYXRlSXRlbXNGcmFnbWVudCA9IGZ1bmN0aW9uIF9jcmVhdGVJdGVtc0ZyYWdtZW50KGl0ZW1zLCBmcmFnbWVudCkge1xuICAgIHZhciBfdGhpczE1ID0gdGhpcztcblxuICAgIGlmIChmcmFnbWVudCA9PT0gdm9pZCAwKSB7XG4gICAgICBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgZnJhZ21lbnQgdG8gYWRkIGVsZW1lbnRzIHRvXG4gICAgdmFyIF90aGlzJGNvbmZpZzIgPSB0aGlzLmNvbmZpZyxcbiAgICAgICAgc2hvdWxkU29ydEl0ZW1zID0gX3RoaXMkY29uZmlnMi5zaG91bGRTb3J0SXRlbXMsXG4gICAgICAgIHNvcnRlciA9IF90aGlzJGNvbmZpZzIuc29ydGVyLFxuICAgICAgICByZW1vdmVJdGVtQnV0dG9uID0gX3RoaXMkY29uZmlnMi5yZW1vdmVJdGVtQnV0dG9uOyAvLyBJZiBzb3J0aW5nIGlzIGVuYWJsZWQsIGZpbHRlciBpdGVtc1xuXG4gICAgaWYgKHNob3VsZFNvcnRJdGVtcyAmJiAhdGhpcy5faXNTZWxlY3RPbmVFbGVtZW50KSB7XG4gICAgICBpdGVtcy5zb3J0KHNvcnRlcik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2lzVGV4dEVsZW1lbnQpIHtcbiAgICAgIC8vIFVwZGF0ZSB0aGUgdmFsdWUgb2YgdGhlIGhpZGRlbiBpbnB1dFxuICAgICAgdGhpcy5wYXNzZWRFbGVtZW50LnZhbHVlID0gaXRlbXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFVwZGF0ZSB0aGUgb3B0aW9ucyBvZiB0aGUgaGlkZGVuIGlucHV0XG4gICAgICB0aGlzLnBhc3NlZEVsZW1lbnQub3B0aW9ucyA9IGl0ZW1zO1xuICAgIH1cblxuICAgIHZhciBhZGRJdGVtVG9GcmFnbWVudCA9IGZ1bmN0aW9uIGFkZEl0ZW1Ub0ZyYWdtZW50KGl0ZW0pIHtcbiAgICAgIC8vIENyZWF0ZSBuZXcgbGlzdCBlbGVtZW50XG4gICAgICB2YXIgbGlzdEl0ZW0gPSBfdGhpczE1Ll9nZXRUZW1wbGF0ZSgnaXRlbScsIGl0ZW0sIHJlbW92ZUl0ZW1CdXR0b24pOyAvLyBBcHBlbmQgaXQgdG8gbGlzdFxuXG5cbiAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGxpc3RJdGVtKTtcbiAgICB9OyAvLyBBZGQgZWFjaCBsaXN0IGl0ZW0gdG8gbGlzdFxuXG5cbiAgICBpdGVtcy5mb3JFYWNoKGFkZEl0ZW1Ub0ZyYWdtZW50KTtcbiAgICByZXR1cm4gZnJhZ21lbnQ7XG4gIH07XG5cbiAgX3Byb3RvLl90cmlnZ2VyQ2hhbmdlID0gZnVuY3Rpb24gX3RyaWdnZXJDaGFuZ2UodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucGFzc2VkRWxlbWVudC50cmlnZ2VyRXZlbnQoRVZFTlRTLmNoYW5nZSwge1xuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLl9zZWxlY3RQbGFjZWhvbGRlckNob2ljZSA9IGZ1bmN0aW9uIF9zZWxlY3RQbGFjZWhvbGRlckNob2ljZSgpIHtcbiAgICB2YXIgcGxhY2Vob2xkZXJDaG9pY2UgPSB0aGlzLl9zdG9yZS5wbGFjZWhvbGRlckNob2ljZTtcblxuICAgIGlmIChwbGFjZWhvbGRlckNob2ljZSkge1xuICAgICAgdGhpcy5fYWRkSXRlbSh7XG4gICAgICAgIHZhbHVlOiBwbGFjZWhvbGRlckNob2ljZS52YWx1ZSxcbiAgICAgICAgbGFiZWw6IHBsYWNlaG9sZGVyQ2hvaWNlLmxhYmVsLFxuICAgICAgICBjaG9pY2VJZDogcGxhY2Vob2xkZXJDaG9pY2UuaWQsXG4gICAgICAgIGdyb3VwSWQ6IHBsYWNlaG9sZGVyQ2hvaWNlLmdyb3VwSWQsXG4gICAgICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlckNob2ljZS5wbGFjZWhvbGRlclxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX3RyaWdnZXJDaGFuZ2UocGxhY2Vob2xkZXJDaG9pY2UudmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX2hhbmRsZUJ1dHRvbkFjdGlvbiA9IGZ1bmN0aW9uIF9oYW5kbGVCdXR0b25BY3Rpb24oYWN0aXZlSXRlbXMsIGVsZW1lbnQpIHtcbiAgICBpZiAoIWFjdGl2ZUl0ZW1zIHx8ICFlbGVtZW50IHx8ICF0aGlzLmNvbmZpZy5yZW1vdmVJdGVtcyB8fCAhdGhpcy5jb25maWcucmVtb3ZlSXRlbUJ1dHRvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBpdGVtSWQgPSBlbGVtZW50LnBhcmVudE5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyk7XG4gICAgdmFyIGl0ZW1Ub1JlbW92ZSA9IGFjdGl2ZUl0ZW1zLmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLmlkID09PSBwYXJzZUludChpdGVtSWQsIDEwKTtcbiAgICB9KTsgLy8gUmVtb3ZlIGl0ZW0gYXNzb2NpYXRlZCB3aXRoIGJ1dHRvblxuXG4gICAgdGhpcy5fcmVtb3ZlSXRlbShpdGVtVG9SZW1vdmUpO1xuXG4gICAgdGhpcy5fdHJpZ2dlckNoYW5nZShpdGVtVG9SZW1vdmUudmFsdWUpO1xuXG4gICAgaWYgKHRoaXMuX2lzU2VsZWN0T25lRWxlbWVudCkge1xuICAgICAgdGhpcy5fc2VsZWN0UGxhY2Vob2xkZXJDaG9pY2UoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9oYW5kbGVJdGVtQWN0aW9uID0gZnVuY3Rpb24gX2hhbmRsZUl0ZW1BY3Rpb24oYWN0aXZlSXRlbXMsIGVsZW1lbnQsIGhhc1NoaWZ0S2V5KSB7XG4gICAgdmFyIF90aGlzMTYgPSB0aGlzO1xuXG4gICAgaWYgKGhhc1NoaWZ0S2V5ID09PSB2b2lkIDApIHtcbiAgICAgIGhhc1NoaWZ0S2V5ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFhY3RpdmVJdGVtcyB8fCAhZWxlbWVudCB8fCAhdGhpcy5jb25maWcucmVtb3ZlSXRlbXMgfHwgdGhpcy5faXNTZWxlY3RPbmVFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHBhc3NlZElkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKTsgLy8gV2Ugb25seSB3YW50IHRvIHNlbGVjdCBvbmUgaXRlbSB3aXRoIGEgY2xpY2tcbiAgICAvLyBzbyB3ZSBkZXNlbGVjdCBhbnkgaXRlbXMgdGhhdCBhcmVuJ3QgdGhlIHRhcmdldFxuICAgIC8vIHVubGVzcyBzaGlmdCBpcyBiZWluZyBwcmVzc2VkXG5cbiAgICBhY3RpdmVJdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICBpZiAoaXRlbS5pZCA9PT0gcGFyc2VJbnQocGFzc2VkSWQsIDEwKSAmJiAhaXRlbS5oaWdobGlnaHRlZCkge1xuICAgICAgICBfdGhpczE2LmhpZ2hsaWdodEl0ZW0oaXRlbSk7XG4gICAgICB9IGVsc2UgaWYgKCFoYXNTaGlmdEtleSAmJiBpdGVtLmhpZ2hsaWdodGVkKSB7XG4gICAgICAgIF90aGlzMTYudW5oaWdobGlnaHRJdGVtKGl0ZW0pO1xuICAgICAgfVxuICAgIH0pOyAvLyBGb2N1cyBpbnB1dCBhcyB3aXRob3V0IGZvY3VzLCBhIHVzZXIgY2Fubm90IGRvIGFueXRoaW5nIHdpdGggYVxuICAgIC8vIGhpZ2hsaWdodGVkIGl0ZW1cblxuICAgIHRoaXMuaW5wdXQuZm9jdXMoKTtcbiAgfTtcblxuICBfcHJvdG8uX2hhbmRsZUNob2ljZUFjdGlvbiA9IGZ1bmN0aW9uIF9oYW5kbGVDaG9pY2VBY3Rpb24oYWN0aXZlSXRlbXMsIGVsZW1lbnQpIHtcbiAgICBpZiAoIWFjdGl2ZUl0ZW1zIHx8ICFlbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBJZiB3ZSBhcmUgY2xpY2tpbmcgb24gYW4gb3B0aW9uXG5cblxuICAgIHZhciBpZCA9IGVsZW1lbnQuZGF0YXNldC5pZDtcblxuICAgIHZhciBjaG9pY2UgPSB0aGlzLl9zdG9yZS5nZXRDaG9pY2VCeUlkKGlkKTtcblxuICAgIGlmICghY2hvaWNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHBhc3NlZEtleUNvZGUgPSBhY3RpdmVJdGVtc1swXSAmJiBhY3RpdmVJdGVtc1swXS5rZXlDb2RlID8gYWN0aXZlSXRlbXNbMF0ua2V5Q29kZSA6IG51bGw7XG4gICAgdmFyIGhhc0FjdGl2ZURyb3Bkb3duID0gdGhpcy5kcm9wZG93bi5pc0FjdGl2ZTsgLy8gVXBkYXRlIGNob2ljZSBrZXlDb2RlXG5cbiAgICBjaG9pY2Uua2V5Q29kZSA9IHBhc3NlZEtleUNvZGU7XG4gICAgdGhpcy5wYXNzZWRFbGVtZW50LnRyaWdnZXJFdmVudChFVkVOVFMuY2hvaWNlLCB7XG4gICAgICBjaG9pY2U6IGNob2ljZVxuICAgIH0pO1xuXG4gICAgaWYgKCFjaG9pY2Uuc2VsZWN0ZWQgJiYgIWNob2ljZS5kaXNhYmxlZCkge1xuICAgICAgdmFyIGNhbkFkZEl0ZW0gPSB0aGlzLl9jYW5BZGRJdGVtKGFjdGl2ZUl0ZW1zLCBjaG9pY2UudmFsdWUpO1xuXG4gICAgICBpZiAoY2FuQWRkSXRlbS5yZXNwb25zZSkge1xuICAgICAgICB0aGlzLl9hZGRJdGVtKHtcbiAgICAgICAgICB2YWx1ZTogY2hvaWNlLnZhbHVlLFxuICAgICAgICAgIGxhYmVsOiBjaG9pY2UubGFiZWwsXG4gICAgICAgICAgY2hvaWNlSWQ6IGNob2ljZS5pZCxcbiAgICAgICAgICBncm91cElkOiBjaG9pY2UuZ3JvdXBJZCxcbiAgICAgICAgICBjdXN0b21Qcm9wZXJ0aWVzOiBjaG9pY2UuY3VzdG9tUHJvcGVydGllcyxcbiAgICAgICAgICBwbGFjZWhvbGRlcjogY2hvaWNlLnBsYWNlaG9sZGVyLFxuICAgICAgICAgIGtleUNvZGU6IGNob2ljZS5rZXlDb2RlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX3RyaWdnZXJDaGFuZ2UoY2hvaWNlLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmNsZWFySW5wdXQoKTsgLy8gV2Ugd2FudCB0byBjbG9zZSB0aGUgZHJvcGRvd24gaWYgd2UgYXJlIGRlYWxpbmcgd2l0aCBhIHNpbmdsZSBzZWxlY3QgYm94XG5cbiAgICBpZiAoaGFzQWN0aXZlRHJvcGRvd24gJiYgdGhpcy5faXNTZWxlY3RPbmVFbGVtZW50KSB7XG4gICAgICB0aGlzLmhpZGVEcm9wZG93bih0cnVlKTtcbiAgICAgIHRoaXMuY29udGFpbmVyT3V0ZXIuZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9oYW5kbGVCYWNrc3BhY2UgPSBmdW5jdGlvbiBfaGFuZGxlQmFja3NwYWNlKGFjdGl2ZUl0ZW1zKSB7XG4gICAgaWYgKCF0aGlzLmNvbmZpZy5yZW1vdmVJdGVtcyB8fCAhYWN0aXZlSXRlbXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbGFzdEl0ZW0gPSBhY3RpdmVJdGVtc1thY3RpdmVJdGVtcy5sZW5ndGggLSAxXTtcbiAgICB2YXIgaGFzSGlnaGxpZ2h0ZWRJdGVtcyA9IGFjdGl2ZUl0ZW1zLnNvbWUoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLmhpZ2hsaWdodGVkO1xuICAgIH0pOyAvLyBJZiBlZGl0aW5nIHRoZSBsYXN0IGl0ZW0gaXMgYWxsb3dlZCBhbmQgdGhlcmUgYXJlIG5vdCBvdGhlciBzZWxlY3RlZCBpdGVtcyxcbiAgICAvLyB3ZSBjYW4gZWRpdCB0aGUgaXRlbSB2YWx1ZS4gT3RoZXJ3aXNlIGlmIHdlIGNhbiByZW1vdmUgaXRlbXMsIHJlbW92ZSBhbGwgc2VsZWN0ZWQgaXRlbXNcblxuICAgIGlmICh0aGlzLmNvbmZpZy5lZGl0SXRlbXMgJiYgIWhhc0hpZ2hsaWdodGVkSXRlbXMgJiYgbGFzdEl0ZW0pIHtcbiAgICAgIHRoaXMuaW5wdXQudmFsdWUgPSBsYXN0SXRlbS52YWx1ZTtcbiAgICAgIHRoaXMuaW5wdXQuc2V0V2lkdGgoKTtcblxuICAgICAgdGhpcy5fcmVtb3ZlSXRlbShsYXN0SXRlbSk7XG5cbiAgICAgIHRoaXMuX3RyaWdnZXJDaGFuZ2UobGFzdEl0ZW0udmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWhhc0hpZ2hsaWdodGVkSXRlbXMpIHtcbiAgICAgICAgLy8gSGlnaGxpZ2h0IGxhc3QgaXRlbSBpZiBub25lIGFscmVhZHkgaGlnaGxpZ2h0ZWRcbiAgICAgICAgdGhpcy5oaWdobGlnaHRJdGVtKGxhc3RJdGVtLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVtb3ZlSGlnaGxpZ2h0ZWRJdGVtcyh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9zdGFydExvYWRpbmcgPSBmdW5jdGlvbiBfc3RhcnRMb2FkaW5nKCkge1xuICAgIHRoaXMuX3N0b3JlLmRpc3BhdGNoKHNldElzTG9hZGluZyh0cnVlKSk7XG4gIH07XG5cbiAgX3Byb3RvLl9zdG9wTG9hZGluZyA9IGZ1bmN0aW9uIF9zdG9wTG9hZGluZygpIHtcbiAgICB0aGlzLl9zdG9yZS5kaXNwYXRjaChzZXRJc0xvYWRpbmcoZmFsc2UpKTtcbiAgfTtcblxuICBfcHJvdG8uX2hhbmRsZUxvYWRpbmdTdGF0ZSA9IGZ1bmN0aW9uIF9oYW5kbGVMb2FkaW5nU3RhdGUoc2V0TG9hZGluZykge1xuICAgIGlmIChzZXRMb2FkaW5nID09PSB2b2lkIDApIHtcbiAgICAgIHNldExvYWRpbmcgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBwbGFjZWhvbGRlckl0ZW0gPSB0aGlzLml0ZW1MaXN0LmdldENoaWxkKFwiLlwiICsgdGhpcy5jb25maWcuY2xhc3NOYW1lcy5wbGFjZWhvbGRlcik7XG5cbiAgICBpZiAoc2V0TG9hZGluZykge1xuICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgICB0aGlzLmNvbnRhaW5lck91dGVyLmFkZExvYWRpbmdTdGF0ZSgpO1xuXG4gICAgICBpZiAodGhpcy5faXNTZWxlY3RPbmVFbGVtZW50KSB7XG4gICAgICAgIGlmICghcGxhY2Vob2xkZXJJdGVtKSB7XG4gICAgICAgICAgcGxhY2Vob2xkZXJJdGVtID0gdGhpcy5fZ2V0VGVtcGxhdGUoJ3BsYWNlaG9sZGVyJywgdGhpcy5jb25maWcubG9hZGluZ1RleHQpO1xuICAgICAgICAgIHRoaXMuaXRlbUxpc3QuYXBwZW5kKHBsYWNlaG9sZGVySXRlbSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGxhY2Vob2xkZXJJdGVtLmlubmVySFRNTCA9IHRoaXMuY29uZmlnLmxvYWRpbmdUZXh0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmlucHV0LnBsYWNlaG9sZGVyID0gdGhpcy5jb25maWcubG9hZGluZ1RleHQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZW5hYmxlKCk7XG4gICAgICB0aGlzLmNvbnRhaW5lck91dGVyLnJlbW92ZUxvYWRpbmdTdGF0ZSgpO1xuXG4gICAgICBpZiAodGhpcy5faXNTZWxlY3RPbmVFbGVtZW50KSB7XG4gICAgICAgIHBsYWNlaG9sZGVySXRlbS5pbm5lckhUTUwgPSB0aGlzLl9wbGFjZWhvbGRlclZhbHVlIHx8ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pbnB1dC5wbGFjZWhvbGRlciA9IHRoaXMuX3BsYWNlaG9sZGVyVmFsdWUgfHwgJyc7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5faGFuZGxlU2VhcmNoID0gZnVuY3Rpb24gX2hhbmRsZVNlYXJjaCh2YWx1ZSkge1xuICAgIGlmICghdmFsdWUgfHwgIXRoaXMuaW5wdXQuaXNGb2N1c3NlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjaG9pY2VzID0gdGhpcy5fc3RvcmUuY2hvaWNlcztcbiAgICB2YXIgX3RoaXMkY29uZmlnMyA9IHRoaXMuY29uZmlnLFxuICAgICAgICBzZWFyY2hGbG9vciA9IF90aGlzJGNvbmZpZzMuc2VhcmNoRmxvb3IsXG4gICAgICAgIHNlYXJjaENob2ljZXMgPSBfdGhpcyRjb25maWczLnNlYXJjaENob2ljZXM7XG4gICAgdmFyIGhhc1VuYWN0aXZlQ2hvaWNlcyA9IGNob2ljZXMuc29tZShmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICByZXR1cm4gIW9wdGlvbi5hY3RpdmU7XG4gICAgfSk7IC8vIENoZWNrIHRoYXQgd2UgaGF2ZSBhIHZhbHVlIHRvIHNlYXJjaCBhbmQgdGhlIGlucHV0IHdhcyBhbiBhbHBoYW51bWVyaWMgY2hhcmFjdGVyXG5cbiAgICBpZiAodmFsdWUgJiYgdmFsdWUubGVuZ3RoID49IHNlYXJjaEZsb29yKSB7XG4gICAgICB2YXIgcmVzdWx0Q291bnQgPSBzZWFyY2hDaG9pY2VzID8gdGhpcy5fc2VhcmNoQ2hvaWNlcyh2YWx1ZSkgOiAwOyAvLyBUcmlnZ2VyIHNlYXJjaCBldmVudFxuXG4gICAgICB0aGlzLnBhc3NlZEVsZW1lbnQudHJpZ2dlckV2ZW50KEVWRU5UUy5zZWFyY2gsIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICByZXN1bHRDb3VudDogcmVzdWx0Q291bnRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaGFzVW5hY3RpdmVDaG9pY2VzKSB7XG4gICAgICAvLyBPdGhlcndpc2UgcmVzZXQgY2hvaWNlcyB0byBhY3RpdmVcbiAgICAgIHRoaXMuX2lzU2VhcmNoaW5nID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuX3N0b3JlLmRpc3BhdGNoKGNob2ljZXNfYWN0aXZhdGVDaG9pY2VzKHRydWUpKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9jYW5BZGRJdGVtID0gZnVuY3Rpb24gX2NhbkFkZEl0ZW0oYWN0aXZlSXRlbXMsIHZhbHVlKSB7XG4gICAgdmFyIGNhbkFkZEl0ZW0gPSB0cnVlO1xuICAgIHZhciBub3RpY2UgPSB0eXBlb2YgdGhpcy5jb25maWcuYWRkSXRlbVRleHQgPT09ICdmdW5jdGlvbicgPyB0aGlzLmNvbmZpZy5hZGRJdGVtVGV4dCh2YWx1ZSkgOiB0aGlzLmNvbmZpZy5hZGRJdGVtVGV4dDtcblxuICAgIGlmICghdGhpcy5faXNTZWxlY3RPbmVFbGVtZW50KSB7XG4gICAgICB2YXIgaXNEdXBsaWNhdGVWYWx1ZSA9IGV4aXN0c0luQXJyYXkoYWN0aXZlSXRlbXMsIHZhbHVlKTtcblxuICAgICAgaWYgKHRoaXMuY29uZmlnLm1heEl0ZW1Db3VudCA+IDAgJiYgdGhpcy5jb25maWcubWF4SXRlbUNvdW50IDw9IGFjdGl2ZUl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIG1heCBlbnRyeSBsaW1pdCBhbmQgd2UgaGF2ZSByZWFjaGVkIHRoYXQgbGltaXRcbiAgICAgICAgLy8gZG9uJ3QgdXBkYXRlXG4gICAgICAgIGNhbkFkZEl0ZW0gPSBmYWxzZTtcbiAgICAgICAgbm90aWNlID0gdHlwZW9mIHRoaXMuY29uZmlnLm1heEl0ZW1UZXh0ID09PSAnZnVuY3Rpb24nID8gdGhpcy5jb25maWcubWF4SXRlbVRleHQodGhpcy5jb25maWcubWF4SXRlbUNvdW50KSA6IHRoaXMuY29uZmlnLm1heEl0ZW1UZXh0O1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuY29uZmlnLmR1cGxpY2F0ZUl0ZW1zQWxsb3dlZCAmJiBpc0R1cGxpY2F0ZVZhbHVlICYmIGNhbkFkZEl0ZW0pIHtcbiAgICAgICAgY2FuQWRkSXRlbSA9IGZhbHNlO1xuICAgICAgICBub3RpY2UgPSB0eXBlb2YgdGhpcy5jb25maWcudW5pcXVlSXRlbVRleHQgPT09ICdmdW5jdGlvbicgPyB0aGlzLmNvbmZpZy51bmlxdWVJdGVtVGV4dCh2YWx1ZSkgOiB0aGlzLmNvbmZpZy51bmlxdWVJdGVtVGV4dDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2lzVGV4dEVsZW1lbnQgJiYgdGhpcy5jb25maWcuYWRkSXRlbXMgJiYgY2FuQWRkSXRlbSAmJiB0eXBlb2YgdGhpcy5jb25maWcuYWRkSXRlbUZpbHRlciA9PT0gJ2Z1bmN0aW9uJyAmJiAhdGhpcy5jb25maWcuYWRkSXRlbUZpbHRlcih2YWx1ZSkpIHtcbiAgICAgICAgY2FuQWRkSXRlbSA9IGZhbHNlO1xuICAgICAgICBub3RpY2UgPSB0eXBlb2YgdGhpcy5jb25maWcuY3VzdG9tQWRkSXRlbVRleHQgPT09ICdmdW5jdGlvbicgPyB0aGlzLmNvbmZpZy5jdXN0b21BZGRJdGVtVGV4dCh2YWx1ZSkgOiB0aGlzLmNvbmZpZy5jdXN0b21BZGRJdGVtVGV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcmVzcG9uc2U6IGNhbkFkZEl0ZW0sXG4gICAgICBub3RpY2U6IG5vdGljZVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLl9zZWFyY2hDaG9pY2VzID0gZnVuY3Rpb24gX3NlYXJjaENob2ljZXModmFsdWUpIHtcbiAgICB2YXIgbmV3VmFsdWUgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUudHJpbSgpIDogdmFsdWU7XG4gICAgdmFyIGN1cnJlbnRWYWx1ZSA9IHR5cGVvZiB0aGlzLl9jdXJyZW50VmFsdWUgPT09ICdzdHJpbmcnID8gdGhpcy5fY3VycmVudFZhbHVlLnRyaW0oKSA6IHRoaXMuX2N1cnJlbnRWYWx1ZTtcblxuICAgIGlmIChuZXdWYWx1ZS5sZW5ndGggPCAxICYmIG5ld1ZhbHVlID09PSBjdXJyZW50VmFsdWUgKyBcIiBcIikge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSAvLyBJZiBuZXcgdmFsdWUgbWF0Y2hlcyB0aGUgZGVzaXJlZCBsZW5ndGggYW5kIGlzIG5vdCB0aGUgc2FtZSBhcyB0aGUgY3VycmVudCB2YWx1ZSB3aXRoIGEgc3BhY2VcblxuXG4gICAgdmFyIGhheXN0YWNrID0gdGhpcy5fc3RvcmUuc2VhcmNoYWJsZUNob2ljZXM7XG4gICAgdmFyIG5lZWRsZSA9IG5ld1ZhbHVlO1xuICAgIHZhciBrZXlzID0gW10uY29uY2F0KHRoaXMuY29uZmlnLnNlYXJjaEZpZWxkcyk7XG4gICAgdmFyIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHRoaXMuY29uZmlnLmZ1c2VPcHRpb25zLCB7XG4gICAgICBrZXlzOiBrZXlzXG4gICAgfSk7XG4gICAgdmFyIGZ1c2UgPSBuZXcgZnVzZV9kZWZhdWx0LmEoaGF5c3RhY2ssIG9wdGlvbnMpO1xuICAgIHZhciByZXN1bHRzID0gZnVzZS5zZWFyY2gobmVlZGxlKTtcbiAgICB0aGlzLl9jdXJyZW50VmFsdWUgPSBuZXdWYWx1ZTtcbiAgICB0aGlzLl9oaWdobGlnaHRQb3NpdGlvbiA9IDA7XG4gICAgdGhpcy5faXNTZWFyY2hpbmcgPSB0cnVlO1xuXG4gICAgdGhpcy5fc3RvcmUuZGlzcGF0Y2goY2hvaWNlc19maWx0ZXJDaG9pY2VzKHJlc3VsdHMpKTtcblxuICAgIHJldHVybiByZXN1bHRzLmxlbmd0aDtcbiAgfTtcblxuICBfcHJvdG8uX2FkZEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gX2FkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHZhciBfZG9jdW1lbnQgPSBkb2N1bWVudCxcbiAgICAgICAgZG9jdW1lbnRFbGVtZW50ID0gX2RvY3VtZW50LmRvY3VtZW50RWxlbWVudDsgLy8gY2FwdHVyZSBldmVudHMgLSBjYW4gY2FuY2VsIGV2ZW50IHByb2Nlc3Npbmcgb3IgcHJvcGFnYXRpb25cblxuICAgIGRvY3VtZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMuX29uVG91Y2hFbmQsIHRydWUpO1xuICAgIHRoaXMuY29udGFpbmVyT3V0ZXIuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fb25LZXlEb3duLCB0cnVlKTtcbiAgICB0aGlzLmNvbnRhaW5lck91dGVyLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5fb25Nb3VzZURvd24sIHRydWUpOyAvLyBwYXNzaXZlIGV2ZW50cyAtIGRvZXNuJ3QgY2FsbCBgcHJldmVudERlZmF1bHRgIG9yIGBzdG9wUHJvcGFnYXRpb25gXG5cbiAgICBkb2N1bWVudEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9vbkNsaWNrLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gICAgZG9jdW1lbnRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gICAgdGhpcy5kcm9wZG93bi5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIHRoaXMuX29uTW91c2VPdmVyLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5faXNTZWxlY3RPbmVFbGVtZW50KSB7XG4gICAgICB0aGlzLmNvbnRhaW5lck91dGVyLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLl9vbkZvY3VzLCB7XG4gICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jb250YWluZXJPdXRlci5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCB0aGlzLl9vbkJsdXIsIHtcbiAgICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5pbnB1dC5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5fb25LZXlVcCwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICAgIHRoaXMuaW5wdXQuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMuX29uRm9jdXMsIHtcbiAgICAgIHBhc3NpdmU6IHRydWVcbiAgICB9KTtcbiAgICB0aGlzLmlucHV0LmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMuX29uQmx1ciwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuaW5wdXQuZWxlbWVudC5mb3JtKSB7XG4gICAgICB0aGlzLmlucHV0LmVsZW1lbnQuZm9ybS5hZGRFdmVudExpc3RlbmVyKCdyZXNldCcsIHRoaXMuX29uRm9ybVJlc2V0LCB7XG4gICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfTtcblxuICBfcHJvdG8uX3JlbW92ZUV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gX3JlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHZhciBfZG9jdW1lbnQyID0gZG9jdW1lbnQsXG4gICAgICAgIGRvY3VtZW50RWxlbWVudCA9IF9kb2N1bWVudDIuZG9jdW1lbnRFbGVtZW50O1xuICAgIGRvY3VtZW50RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMuX29uVG91Y2hFbmQsIHRydWUpO1xuICAgIHRoaXMuY29udGFpbmVyT3V0ZXIuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fb25LZXlEb3duLCB0cnVlKTtcbiAgICB0aGlzLmNvbnRhaW5lck91dGVyLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5fb25Nb3VzZURvd24sIHRydWUpO1xuICAgIGRvY3VtZW50RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX29uQ2xpY2spO1xuICAgIGRvY3VtZW50RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgdGhpcy5kcm9wZG93bi5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIHRoaXMuX29uTW91c2VPdmVyKTtcblxuICAgIGlmICh0aGlzLl9pc1NlbGVjdE9uZUVsZW1lbnQpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyT3V0ZXIuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMuX29uRm9jdXMpO1xuICAgICAgdGhpcy5jb250YWluZXJPdXRlci5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JsdXInLCB0aGlzLl9vbkJsdXIpO1xuICAgIH1cblxuICAgIHRoaXMuaW5wdXQuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuX29uS2V5VXApO1xuICAgIHRoaXMuaW5wdXQuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMuX29uRm9jdXMpO1xuICAgIHRoaXMuaW5wdXQuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdibHVyJywgdGhpcy5fb25CbHVyKTtcblxuICAgIGlmICh0aGlzLmlucHV0LmVsZW1lbnQuZm9ybSkge1xuICAgICAgdGhpcy5pbnB1dC5lbGVtZW50LmZvcm0ucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzZXQnLCB0aGlzLl9vbkZvcm1SZXNldCk7XG4gICAgfVxuXG4gICAgdGhpcy5pbnB1dC5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLl9vbktleURvd24gPSBmdW5jdGlvbiBfb25LZXlEb3duKGV2ZW50KSB7XG4gICAgdmFyIF9rZXlEb3duQWN0aW9ucztcblxuICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQsXG4gICAgICAgIGtleUNvZGUgPSBldmVudC5rZXlDb2RlLFxuICAgICAgICBjdHJsS2V5ID0gZXZlbnQuY3RybEtleSxcbiAgICAgICAgbWV0YUtleSA9IGV2ZW50Lm1ldGFLZXk7XG4gICAgdmFyIGFjdGl2ZUl0ZW1zID0gdGhpcy5fc3RvcmUuYWN0aXZlSXRlbXM7XG4gICAgdmFyIGhhc0ZvY3VzZWRJbnB1dCA9IHRoaXMuaW5wdXQuaXNGb2N1c3NlZDtcbiAgICB2YXIgaGFzQWN0aXZlRHJvcGRvd24gPSB0aGlzLmRyb3Bkb3duLmlzQWN0aXZlO1xuICAgIHZhciBoYXNJdGVtcyA9IHRoaXMuaXRlbUxpc3QuaGFzQ2hpbGRyZW4oKTtcbiAgICB2YXIga2V5U3RyaW5nID0gU3RyaW5nLmZyb21DaGFyQ29kZShrZXlDb2RlKTtcbiAgICB2YXIgQkFDS19LRVkgPSBLRVlfQ09ERVMuQkFDS19LRVksXG4gICAgICAgIERFTEVURV9LRVkgPSBLRVlfQ09ERVMuREVMRVRFX0tFWSxcbiAgICAgICAgRU5URVJfS0VZID0gS0VZX0NPREVTLkVOVEVSX0tFWSxcbiAgICAgICAgQV9LRVkgPSBLRVlfQ09ERVMuQV9LRVksXG4gICAgICAgIEVTQ19LRVkgPSBLRVlfQ09ERVMuRVNDX0tFWSxcbiAgICAgICAgVVBfS0VZID0gS0VZX0NPREVTLlVQX0tFWSxcbiAgICAgICAgRE9XTl9LRVkgPSBLRVlfQ09ERVMuRE9XTl9LRVksXG4gICAgICAgIFBBR0VfVVBfS0VZID0gS0VZX0NPREVTLlBBR0VfVVBfS0VZLFxuICAgICAgICBQQUdFX0RPV05fS0VZID0gS0VZX0NPREVTLlBBR0VfRE9XTl9LRVk7XG4gICAgdmFyIGhhc0N0cmxEb3duS2V5UHJlc3NlZCA9IGN0cmxLZXkgfHwgbWV0YUtleTsgLy8gSWYgYSB1c2VyIGlzIHR5cGluZyBhbmQgdGhlIGRyb3Bkb3duIGlzIG5vdCBhY3RpdmVcblxuICAgIGlmICghdGhpcy5faXNUZXh0RWxlbWVudCAmJiAvW2EtekEtWjAtOS1fIF0vLnRlc3Qoa2V5U3RyaW5nKSkge1xuICAgICAgdGhpcy5zaG93RHJvcGRvd24oKTtcbiAgICB9IC8vIE1hcCBrZXlzIHRvIGtleSBhY3Rpb25zXG5cblxuICAgIHZhciBrZXlEb3duQWN0aW9ucyA9IChfa2V5RG93bkFjdGlvbnMgPSB7fSwgX2tleURvd25BY3Rpb25zW0FfS0VZXSA9IHRoaXMuX29uQUtleSwgX2tleURvd25BY3Rpb25zW0VOVEVSX0tFWV0gPSB0aGlzLl9vbkVudGVyS2V5LCBfa2V5RG93bkFjdGlvbnNbRVNDX0tFWV0gPSB0aGlzLl9vbkVzY2FwZUtleSwgX2tleURvd25BY3Rpb25zW1VQX0tFWV0gPSB0aGlzLl9vbkRpcmVjdGlvbktleSwgX2tleURvd25BY3Rpb25zW1BBR0VfVVBfS0VZXSA9IHRoaXMuX29uRGlyZWN0aW9uS2V5LCBfa2V5RG93bkFjdGlvbnNbRE9XTl9LRVldID0gdGhpcy5fb25EaXJlY3Rpb25LZXksIF9rZXlEb3duQWN0aW9uc1tQQUdFX0RPV05fS0VZXSA9IHRoaXMuX29uRGlyZWN0aW9uS2V5LCBfa2V5RG93bkFjdGlvbnNbREVMRVRFX0tFWV0gPSB0aGlzLl9vbkRlbGV0ZUtleSwgX2tleURvd25BY3Rpb25zW0JBQ0tfS0VZXSA9IHRoaXMuX29uRGVsZXRlS2V5LCBfa2V5RG93bkFjdGlvbnMpOyAvLyBJZiBrZXljb2RlIGhhcyBhIGZ1bmN0aW9uLCBydW4gaXRcblxuICAgIGlmIChrZXlEb3duQWN0aW9uc1trZXlDb2RlXSkge1xuICAgICAga2V5RG93bkFjdGlvbnNba2V5Q29kZV0oe1xuICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgICBrZXlDb2RlOiBrZXlDb2RlLFxuICAgICAgICBtZXRhS2V5OiBtZXRhS2V5LFxuICAgICAgICBhY3RpdmVJdGVtczogYWN0aXZlSXRlbXMsXG4gICAgICAgIGhhc0ZvY3VzZWRJbnB1dDogaGFzRm9jdXNlZElucHV0LFxuICAgICAgICBoYXNBY3RpdmVEcm9wZG93bjogaGFzQWN0aXZlRHJvcGRvd24sXG4gICAgICAgIGhhc0l0ZW1zOiBoYXNJdGVtcyxcbiAgICAgICAgaGFzQ3RybERvd25LZXlQcmVzc2VkOiBoYXNDdHJsRG93bktleVByZXNzZWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX29uS2V5VXAgPSBmdW5jdGlvbiBfb25LZXlVcChfcmVmMikge1xuICAgIHZhciB0YXJnZXQgPSBfcmVmMi50YXJnZXQsXG4gICAgICAgIGtleUNvZGUgPSBfcmVmMi5rZXlDb2RlO1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuaW5wdXQudmFsdWU7XG4gICAgdmFyIGFjdGl2ZUl0ZW1zID0gdGhpcy5fc3RvcmUuYWN0aXZlSXRlbXM7XG5cbiAgICB2YXIgY2FuQWRkSXRlbSA9IHRoaXMuX2NhbkFkZEl0ZW0oYWN0aXZlSXRlbXMsIHZhbHVlKTtcblxuICAgIHZhciBiYWNrS2V5ID0gS0VZX0NPREVTLkJBQ0tfS0VZLFxuICAgICAgICBkZWxldGVLZXkgPSBLRVlfQ09ERVMuREVMRVRFX0tFWTsgLy8gV2UgYXJlIHR5cGluZyBpbnRvIGEgdGV4dCBpbnB1dCBhbmQgaGF2ZSBhIHZhbHVlLCB3ZSB3YW50IHRvIHNob3cgYSBkcm9wZG93blxuICAgIC8vIG5vdGljZS4gT3RoZXJ3aXNlIGhpZGUgdGhlIGRyb3Bkb3duXG5cbiAgICBpZiAodGhpcy5faXNUZXh0RWxlbWVudCkge1xuICAgICAgdmFyIGNhblNob3dEcm9wZG93bk5vdGljZSA9IGNhbkFkZEl0ZW0ubm90aWNlICYmIHZhbHVlO1xuXG4gICAgICBpZiAoY2FuU2hvd0Ryb3Bkb3duTm90aWNlKSB7XG4gICAgICAgIHZhciBkcm9wZG93bkl0ZW0gPSB0aGlzLl9nZXRUZW1wbGF0ZSgnbm90aWNlJywgY2FuQWRkSXRlbS5ub3RpY2UpO1xuXG4gICAgICAgIHRoaXMuZHJvcGRvd24uZWxlbWVudC5pbm5lckhUTUwgPSBkcm9wZG93bkl0ZW0ub3V0ZXJIVE1MO1xuICAgICAgICB0aGlzLnNob3dEcm9wZG93bih0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGlkZURyb3Bkb3duKHRydWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXNlckhhc1JlbW92ZWRWYWx1ZSA9IChrZXlDb2RlID09PSBiYWNrS2V5IHx8IGtleUNvZGUgPT09IGRlbGV0ZUtleSkgJiYgIXRhcmdldC52YWx1ZTtcbiAgICAgIHZhciBjYW5SZWFjdGl2YXRlQ2hvaWNlcyA9ICF0aGlzLl9pc1RleHRFbGVtZW50ICYmIHRoaXMuX2lzU2VhcmNoaW5nO1xuICAgICAgdmFyIGNhblNlYXJjaCA9IHRoaXMuX2NhblNlYXJjaCAmJiBjYW5BZGRJdGVtLnJlc3BvbnNlO1xuXG4gICAgICBpZiAodXNlckhhc1JlbW92ZWRWYWx1ZSAmJiBjYW5SZWFjdGl2YXRlQ2hvaWNlcykge1xuICAgICAgICB0aGlzLl9pc1NlYXJjaGluZyA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuX3N0b3JlLmRpc3BhdGNoKGNob2ljZXNfYWN0aXZhdGVDaG9pY2VzKHRydWUpKTtcbiAgICAgIH0gZWxzZSBpZiAoY2FuU2VhcmNoKSB7XG4gICAgICAgIHRoaXMuX2hhbmRsZVNlYXJjaCh0aGlzLmlucHV0LnZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9jYW5TZWFyY2ggPSB0aGlzLmNvbmZpZy5zZWFyY2hFbmFibGVkO1xuICB9O1xuXG4gIF9wcm90by5fb25BS2V5ID0gZnVuY3Rpb24gX29uQUtleShfcmVmMykge1xuICAgIHZhciBoYXNJdGVtcyA9IF9yZWYzLmhhc0l0ZW1zLFxuICAgICAgICBoYXNDdHJsRG93bktleVByZXNzZWQgPSBfcmVmMy5oYXNDdHJsRG93bktleVByZXNzZWQ7XG5cbiAgICAvLyBJZiBDVFJMICsgQSBvciBDTUQgKyBBIGhhdmUgYmVlbiBwcmVzc2VkIGFuZCB0aGVyZSBhcmUgaXRlbXMgdG8gc2VsZWN0XG4gICAgaWYgKGhhc0N0cmxEb3duS2V5UHJlc3NlZCAmJiBoYXNJdGVtcykge1xuICAgICAgdGhpcy5fY2FuU2VhcmNoID0gZmFsc2U7XG4gICAgICB2YXIgc2hvdWxkSGlnaHRsaWdodEFsbCA9IHRoaXMuY29uZmlnLnJlbW92ZUl0ZW1zICYmICF0aGlzLmlucHV0LnZhbHVlICYmIHRoaXMuaW5wdXQuZWxlbWVudCA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblxuICAgICAgaWYgKHNob3VsZEhpZ2h0bGlnaHRBbGwpIHtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRBbGwoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9vbkVudGVyS2V5ID0gZnVuY3Rpb24gX29uRW50ZXJLZXkoX3JlZjQpIHtcbiAgICB2YXIgZXZlbnQgPSBfcmVmNC5ldmVudCxcbiAgICAgICAgdGFyZ2V0ID0gX3JlZjQudGFyZ2V0LFxuICAgICAgICBhY3RpdmVJdGVtcyA9IF9yZWY0LmFjdGl2ZUl0ZW1zLFxuICAgICAgICBoYXNBY3RpdmVEcm9wZG93biA9IF9yZWY0Lmhhc0FjdGl2ZURyb3Bkb3duO1xuICAgIHZhciBlbnRlcktleSA9IEtFWV9DT0RFUy5FTlRFUl9LRVk7XG4gICAgdmFyIHRhcmdldFdhc0J1dHRvbiA9IHRhcmdldC5oYXNBdHRyaWJ1dGUoJ2RhdGEtYnV0dG9uJyk7XG5cbiAgICBpZiAodGhpcy5faXNUZXh0RWxlbWVudCAmJiB0YXJnZXQudmFsdWUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuaW5wdXQudmFsdWU7XG5cbiAgICAgIHZhciBjYW5BZGRJdGVtID0gdGhpcy5fY2FuQWRkSXRlbShhY3RpdmVJdGVtcywgdmFsdWUpO1xuXG4gICAgICBpZiAoY2FuQWRkSXRlbS5yZXNwb25zZSkge1xuICAgICAgICB0aGlzLmhpZGVEcm9wZG93bih0cnVlKTtcblxuICAgICAgICB0aGlzLl9hZGRJdGVtKHtcbiAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fdHJpZ2dlckNoYW5nZSh2YWx1ZSk7XG5cbiAgICAgICAgdGhpcy5jbGVhcklucHV0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRhcmdldFdhc0J1dHRvbikge1xuICAgICAgdGhpcy5faGFuZGxlQnV0dG9uQWN0aW9uKGFjdGl2ZUl0ZW1zLCB0YXJnZXQpO1xuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmIChoYXNBY3RpdmVEcm9wZG93bikge1xuICAgICAgdmFyIGhpZ2hsaWdodGVkQ2hvaWNlID0gdGhpcy5kcm9wZG93bi5nZXRDaGlsZChcIi5cIiArIHRoaXMuY29uZmlnLmNsYXNzTmFtZXMuaGlnaGxpZ2h0ZWRTdGF0ZSk7XG5cbiAgICAgIGlmIChoaWdobGlnaHRlZENob2ljZSkge1xuICAgICAgICAvLyBhZGQgZW50ZXIga2V5Q29kZSB2YWx1ZVxuICAgICAgICBpZiAoYWN0aXZlSXRlbXNbMF0pIHtcbiAgICAgICAgICBhY3RpdmVJdGVtc1swXS5rZXlDb2RlID0gZW50ZXJLZXk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2hhbmRsZUNob2ljZUFjdGlvbihhY3RpdmVJdGVtcywgaGlnaGxpZ2h0ZWRDaG9pY2UpO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5faXNTZWxlY3RPbmVFbGVtZW50KSB7XG4gICAgICB0aGlzLnNob3dEcm9wZG93bigpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9vbkVzY2FwZUtleSA9IGZ1bmN0aW9uIF9vbkVzY2FwZUtleShfcmVmNSkge1xuICAgIHZhciBoYXNBY3RpdmVEcm9wZG93biA9IF9yZWY1Lmhhc0FjdGl2ZURyb3Bkb3duO1xuXG4gICAgaWYgKGhhc0FjdGl2ZURyb3Bkb3duKSB7XG4gICAgICB0aGlzLmhpZGVEcm9wZG93bih0cnVlKTtcbiAgICAgIHRoaXMuY29udGFpbmVyT3V0ZXIuZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9vbkRpcmVjdGlvbktleSA9IGZ1bmN0aW9uIF9vbkRpcmVjdGlvbktleShfcmVmNikge1xuICAgIHZhciBldmVudCA9IF9yZWY2LmV2ZW50LFxuICAgICAgICBoYXNBY3RpdmVEcm9wZG93biA9IF9yZWY2Lmhhc0FjdGl2ZURyb3Bkb3duLFxuICAgICAgICBrZXlDb2RlID0gX3JlZjYua2V5Q29kZSxcbiAgICAgICAgbWV0YUtleSA9IF9yZWY2Lm1ldGFLZXk7XG4gICAgdmFyIGRvd25LZXkgPSBLRVlfQ09ERVMuRE9XTl9LRVksXG4gICAgICAgIHBhZ2VVcEtleSA9IEtFWV9DT0RFUy5QQUdFX1VQX0tFWSxcbiAgICAgICAgcGFnZURvd25LZXkgPSBLRVlfQ09ERVMuUEFHRV9ET1dOX0tFWTsgLy8gSWYgdXAgb3IgZG93biBrZXkgaXMgcHJlc3NlZCwgdHJhdmVyc2UgdGhyb3VnaCBvcHRpb25zXG5cbiAgICBpZiAoaGFzQWN0aXZlRHJvcGRvd24gfHwgdGhpcy5faXNTZWxlY3RPbmVFbGVtZW50KSB7XG4gICAgICB0aGlzLnNob3dEcm9wZG93bigpO1xuICAgICAgdGhpcy5fY2FuU2VhcmNoID0gZmFsc2U7XG4gICAgICB2YXIgZGlyZWN0aW9uSW50ID0ga2V5Q29kZSA9PT0gZG93bktleSB8fCBrZXlDb2RlID09PSBwYWdlRG93bktleSA/IDEgOiAtMTtcbiAgICAgIHZhciBza2lwS2V5ID0gbWV0YUtleSB8fCBrZXlDb2RlID09PSBwYWdlRG93bktleSB8fCBrZXlDb2RlID09PSBwYWdlVXBLZXk7XG4gICAgICB2YXIgc2VsZWN0YWJsZUNob2ljZUlkZW50aWZpZXIgPSAnW2RhdGEtY2hvaWNlLXNlbGVjdGFibGVdJztcbiAgICAgIHZhciBuZXh0RWw7XG5cbiAgICAgIGlmIChza2lwS2V5KSB7XG4gICAgICAgIGlmIChkaXJlY3Rpb25JbnQgPiAwKSB7XG4gICAgICAgICAgbmV4dEVsID0gdGhpcy5kcm9wZG93bi5lbGVtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0YWJsZUNob2ljZUlkZW50aWZpZXIgKyBcIjpsYXN0LW9mLXR5cGVcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dEVsID0gdGhpcy5kcm9wZG93bi5lbGVtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0YWJsZUNob2ljZUlkZW50aWZpZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY3VycmVudEVsID0gdGhpcy5kcm9wZG93bi5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyB0aGlzLmNvbmZpZy5jbGFzc05hbWVzLmhpZ2hsaWdodGVkU3RhdGUpO1xuXG4gICAgICAgIGlmIChjdXJyZW50RWwpIHtcbiAgICAgICAgICBuZXh0RWwgPSBnZXRBZGphY2VudEVsKGN1cnJlbnRFbCwgc2VsZWN0YWJsZUNob2ljZUlkZW50aWZpZXIsIGRpcmVjdGlvbkludCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dEVsID0gdGhpcy5kcm9wZG93bi5lbGVtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0YWJsZUNob2ljZUlkZW50aWZpZXIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXh0RWwpIHtcbiAgICAgICAgLy8gV2UgcHJldmVudCBkZWZhdWx0IHRvIHN0b3AgdGhlIGN1cnNvciBtb3ZpbmdcbiAgICAgICAgLy8gd2hlbiBwcmVzc2luZyB0aGUgYXJyb3dcbiAgICAgICAgaWYgKCFpc1Njcm9sbGVkSW50b1ZpZXcobmV4dEVsLCB0aGlzLmNob2ljZUxpc3QuZWxlbWVudCwgZGlyZWN0aW9uSW50KSkge1xuICAgICAgICAgIHRoaXMuY2hvaWNlTGlzdC5zY3JvbGxUb0NoaWxkRWxlbWVudChuZXh0RWwsIGRpcmVjdGlvbkludCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9oaWdobGlnaHRDaG9pY2UobmV4dEVsKTtcbiAgICAgIH0gLy8gUHJldmVudCBkZWZhdWx0IHRvIG1haW50YWluIGN1cnNvciBwb3NpdGlvbiB3aGlsc3RcbiAgICAgIC8vIHRyYXZlcnNpbmcgZHJvcGRvd24gb3B0aW9uc1xuXG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fb25EZWxldGVLZXkgPSBmdW5jdGlvbiBfb25EZWxldGVLZXkoX3JlZjcpIHtcbiAgICB2YXIgZXZlbnQgPSBfcmVmNy5ldmVudCxcbiAgICAgICAgdGFyZ2V0ID0gX3JlZjcudGFyZ2V0LFxuICAgICAgICBoYXNGb2N1c2VkSW5wdXQgPSBfcmVmNy5oYXNGb2N1c2VkSW5wdXQsXG4gICAgICAgIGFjdGl2ZUl0ZW1zID0gX3JlZjcuYWN0aXZlSXRlbXM7XG5cbiAgICAvLyBJZiBiYWNrc3BhY2Ugb3IgZGVsZXRlIGtleSBpcyBwcmVzc2VkIGFuZCB0aGUgaW5wdXQgaGFzIG5vIHZhbHVlXG4gICAgaWYgKGhhc0ZvY3VzZWRJbnB1dCAmJiAhdGFyZ2V0LnZhbHVlICYmICF0aGlzLl9pc1NlbGVjdE9uZUVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2hhbmRsZUJhY2tzcGFjZShhY3RpdmVJdGVtcyk7XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fb25Ub3VjaE1vdmUgPSBmdW5jdGlvbiBfb25Ub3VjaE1vdmUoKSB7XG4gICAgaWYgKHRoaXMuX3dhc1RhcCkge1xuICAgICAgdGhpcy5fd2FzVGFwID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fb25Ub3VjaEVuZCA9IGZ1bmN0aW9uIF9vblRvdWNoRW5kKGV2ZW50KSB7XG4gICAgdmFyIF9yZWY4ID0gZXZlbnQgfHwgZXZlbnQudG91Y2hlc1swXSxcbiAgICAgICAgdGFyZ2V0ID0gX3JlZjgudGFyZ2V0O1xuXG4gICAgdmFyIHRvdWNoV2FzV2l0aGluQ29udGFpbmVyID0gdGhpcy5fd2FzVGFwICYmIHRoaXMuY29udGFpbmVyT3V0ZXIuZWxlbWVudC5jb250YWlucyh0YXJnZXQpO1xuXG4gICAgaWYgKHRvdWNoV2FzV2l0aGluQ29udGFpbmVyKSB7XG4gICAgICB2YXIgY29udGFpbmVyV2FzRXhhY3RUYXJnZXQgPSB0YXJnZXQgPT09IHRoaXMuY29udGFpbmVyT3V0ZXIuZWxlbWVudCB8fCB0YXJnZXQgPT09IHRoaXMuY29udGFpbmVySW5uZXIuZWxlbWVudDtcblxuICAgICAgaWYgKGNvbnRhaW5lcldhc0V4YWN0VGFyZ2V0KSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1RleHRFbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy5pbnB1dC5mb2N1cygpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2lzU2VsZWN0TXVsdGlwbGVFbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy5zaG93RHJvcGRvd24oKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBQcmV2ZW50cyBmb2N1cyBldmVudCBmaXJpbmdcblxuXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG5cbiAgICB0aGlzLl93YXNUYXAgPSB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGVzIG1vdXNlZG93biBldmVudCBpbiBjYXB0dXJlIG1vZGUgZm9yIGNvbnRhaW5ldE91dGVyLmVsZW1lbnRcbiAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldmVudFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5fb25Nb3VzZURvd24gPSBmdW5jdGlvbiBfb25Nb3VzZURvd24oZXZlbnQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXG4gICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBJZiB3ZSBoYXZlIG91ciBtb3VzZSBkb3duIG9uIHRoZSBzY3JvbGxiYXIgYW5kIGFyZSBvbiBJRTExLi4uXG5cblxuICAgIGlmIChJU19JRTExICYmIHRoaXMuY2hvaWNlTGlzdC5lbGVtZW50LmNvbnRhaW5zKHRhcmdldCkpIHtcbiAgICAgIC8vIGNoZWNrIGlmIGNsaWNrIHdhcyBvbiBhIHNjcm9sbGJhciBhcmVhXG4gICAgICB2YXIgZmlyc3RDaG9pY2UgPVxuICAgICAgLyoqIEB0eXBlIHtIVE1MRWxlbWVudH0gKi9cbiAgICAgIHRoaXMuY2hvaWNlTGlzdC5lbGVtZW50LmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgdmFyIGlzT25TY3JvbGxiYXIgPSB0aGlzLl9kaXJlY3Rpb24gPT09ICdsdHInID8gZXZlbnQub2Zmc2V0WCA+PSBmaXJzdENob2ljZS5vZmZzZXRXaWR0aCA6IGV2ZW50Lm9mZnNldFggPCBmaXJzdENob2ljZS5vZmZzZXRMZWZ0O1xuICAgICAgdGhpcy5faXNTY3JvbGxpbmdPbkllID0gaXNPblNjcm9sbGJhcjtcbiAgICB9XG5cbiAgICBpZiAodGFyZ2V0ID09PSB0aGlzLmlucHV0LmVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaXRlbSA9IHRhcmdldC5jbG9zZXN0KCdbZGF0YS1idXR0b25dLFtkYXRhLWl0ZW1dLFtkYXRhLWNob2ljZV0nKTtcblxuICAgIGlmIChpdGVtIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgIHZhciBoYXNTaGlmdEtleSA9IGV2ZW50LnNoaWZ0S2V5O1xuICAgICAgdmFyIGFjdGl2ZUl0ZW1zID0gdGhpcy5fc3RvcmUuYWN0aXZlSXRlbXM7XG4gICAgICB2YXIgZGF0YXNldCA9IGl0ZW0uZGF0YXNldDtcblxuICAgICAgaWYgKCdidXR0b24nIGluIGRhdGFzZXQpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlQnV0dG9uQWN0aW9uKGFjdGl2ZUl0ZW1zLCBpdGVtKTtcbiAgICAgIH0gZWxzZSBpZiAoJ2l0ZW0nIGluIGRhdGFzZXQpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlSXRlbUFjdGlvbihhY3RpdmVJdGVtcywgaXRlbSwgaGFzU2hpZnRLZXkpO1xuICAgICAgfSBlbHNlIGlmICgnY2hvaWNlJyBpbiBkYXRhc2V0KSB7XG4gICAgICAgIHRoaXMuX2hhbmRsZUNob2ljZUFjdGlvbihhY3RpdmVJdGVtcywgaXRlbSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlcyBtb3VzZW92ZXIgZXZlbnQgb3ZlciB0aGlzLmRyb3Bkb3duXG4gICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uX29uTW91c2VPdmVyID0gZnVuY3Rpb24gX29uTW91c2VPdmVyKF9yZWY5KSB7XG4gICAgdmFyIHRhcmdldCA9IF9yZWY5LnRhcmdldDtcblxuICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiAnY2hvaWNlJyBpbiB0YXJnZXQuZGF0YXNldCkge1xuICAgICAgdGhpcy5faGlnaGxpZ2h0Q2hvaWNlKHRhcmdldCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fb25DbGljayA9IGZ1bmN0aW9uIF9vbkNsaWNrKF9yZWYxMCkge1xuICAgIHZhciB0YXJnZXQgPSBfcmVmMTAudGFyZ2V0O1xuICAgIHZhciBjbGlja1dhc1dpdGhpbkNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyT3V0ZXIuZWxlbWVudC5jb250YWlucyh0YXJnZXQpO1xuXG4gICAgaWYgKGNsaWNrV2FzV2l0aGluQ29udGFpbmVyKSB7XG4gICAgICBpZiAoIXRoaXMuZHJvcGRvd24uaXNBY3RpdmUgJiYgIXRoaXMuY29udGFpbmVyT3V0ZXIuaXNEaXNhYmxlZCkge1xuICAgICAgICBpZiAodGhpcy5faXNUZXh0RWxlbWVudCkge1xuICAgICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSB0aGlzLmlucHV0LmVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zaG93RHJvcGRvd24oKTtcbiAgICAgICAgICB0aGlzLmNvbnRhaW5lck91dGVyLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5faXNTZWxlY3RPbmVFbGVtZW50ICYmIHRhcmdldCAhPT0gdGhpcy5pbnB1dC5lbGVtZW50ICYmICF0aGlzLmRyb3Bkb3duLmVsZW1lbnQuY29udGFpbnModGFyZ2V0KSkge1xuICAgICAgICB0aGlzLmhpZGVEcm9wZG93bigpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaGFzSGlnaGxpZ2h0ZWRJdGVtcyA9IHRoaXMuX3N0b3JlLmhpZ2hsaWdodGVkQWN0aXZlSXRlbXMubGVuZ3RoID4gMDtcblxuICAgICAgaWYgKGhhc0hpZ2hsaWdodGVkSXRlbXMpIHtcbiAgICAgICAgdGhpcy51bmhpZ2hsaWdodEFsbCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnRhaW5lck91dGVyLnJlbW92ZUZvY3VzU3RhdGUoKTtcbiAgICAgIHRoaXMuaGlkZURyb3Bkb3duKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX29uRm9jdXMgPSBmdW5jdGlvbiBfb25Gb2N1cyhfcmVmMTEpIHtcbiAgICB2YXIgX3RoaXMxNyA9IHRoaXMsXG4gICAgICAgIF9mb2N1c0FjdGlvbnM7XG5cbiAgICB2YXIgdGFyZ2V0ID0gX3JlZjExLnRhcmdldDtcbiAgICB2YXIgZm9jdXNXYXNXaXRoaW5Db250YWluZXIgPSB0aGlzLmNvbnRhaW5lck91dGVyLmVsZW1lbnQuY29udGFpbnModGFyZ2V0KTtcblxuICAgIGlmICghZm9jdXNXYXNXaXRoaW5Db250YWluZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZm9jdXNBY3Rpb25zID0gKF9mb2N1c0FjdGlvbnMgPSB7fSwgX2ZvY3VzQWN0aW9uc1tURVhUX1RZUEVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRhcmdldCA9PT0gX3RoaXMxNy5pbnB1dC5lbGVtZW50KSB7XG4gICAgICAgIF90aGlzMTcuY29udGFpbmVyT3V0ZXIuYWRkRm9jdXNTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0sIF9mb2N1c0FjdGlvbnNbU0VMRUNUX09ORV9UWVBFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMTcuY29udGFpbmVyT3V0ZXIuYWRkRm9jdXNTdGF0ZSgpO1xuXG4gICAgICBpZiAodGFyZ2V0ID09PSBfdGhpczE3LmlucHV0LmVsZW1lbnQpIHtcbiAgICAgICAgX3RoaXMxNy5zaG93RHJvcGRvd24odHJ1ZSk7XG4gICAgICB9XG4gICAgfSwgX2ZvY3VzQWN0aW9uc1tTRUxFQ1RfTVVMVElQTEVfVFlQRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGFyZ2V0ID09PSBfdGhpczE3LmlucHV0LmVsZW1lbnQpIHtcbiAgICAgICAgX3RoaXMxNy5zaG93RHJvcGRvd24odHJ1ZSk7IC8vIElmIGVsZW1lbnQgaXMgYSBzZWxlY3QgYm94LCB0aGUgZm9jdXNlZCBlbGVtZW50IGlzIHRoZSBjb250YWluZXIgYW5kIHRoZSBkcm9wZG93blxuICAgICAgICAvLyBpc24ndCBhbHJlYWR5IG9wZW4sIGZvY3VzIGFuZCBzaG93IGRyb3Bkb3duXG5cblxuICAgICAgICBfdGhpczE3LmNvbnRhaW5lck91dGVyLmFkZEZvY3VzU3RhdGUoKTtcbiAgICAgIH1cbiAgICB9LCBfZm9jdXNBY3Rpb25zKTtcbiAgICBmb2N1c0FjdGlvbnNbdGhpcy5wYXNzZWRFbGVtZW50LmVsZW1lbnQudHlwZV0oKTtcbiAgfTtcblxuICBfcHJvdG8uX29uQmx1ciA9IGZ1bmN0aW9uIF9vbkJsdXIoX3JlZjEyKSB7XG4gICAgdmFyIF90aGlzMTggPSB0aGlzO1xuXG4gICAgdmFyIHRhcmdldCA9IF9yZWYxMi50YXJnZXQ7XG4gICAgdmFyIGJsdXJXYXNXaXRoaW5Db250YWluZXIgPSB0aGlzLmNvbnRhaW5lck91dGVyLmVsZW1lbnQuY29udGFpbnModGFyZ2V0KTtcblxuICAgIGlmIChibHVyV2FzV2l0aGluQ29udGFpbmVyICYmICF0aGlzLl9pc1Njcm9sbGluZ09uSWUpIHtcbiAgICAgIHZhciBfYmx1ckFjdGlvbnM7XG5cbiAgICAgIHZhciBhY3RpdmVJdGVtcyA9IHRoaXMuX3N0b3JlLmFjdGl2ZUl0ZW1zO1xuICAgICAgdmFyIGhhc0hpZ2hsaWdodGVkSXRlbXMgPSBhY3RpdmVJdGVtcy5zb21lKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtLmhpZ2hsaWdodGVkO1xuICAgICAgfSk7XG4gICAgICB2YXIgYmx1ckFjdGlvbnMgPSAoX2JsdXJBY3Rpb25zID0ge30sIF9ibHVyQWN0aW9uc1tURVhUX1RZUEVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGFyZ2V0ID09PSBfdGhpczE4LmlucHV0LmVsZW1lbnQpIHtcbiAgICAgICAgICBfdGhpczE4LmNvbnRhaW5lck91dGVyLnJlbW92ZUZvY3VzU3RhdGUoKTtcblxuICAgICAgICAgIGlmIChoYXNIaWdobGlnaHRlZEl0ZW1zKSB7XG4gICAgICAgICAgICBfdGhpczE4LnVuaGlnaGxpZ2h0QWxsKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMxOC5oaWRlRHJvcGRvd24odHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIF9ibHVyQWN0aW9uc1tTRUxFQ1RfT05FX1RZUEVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczE4LmNvbnRhaW5lck91dGVyLnJlbW92ZUZvY3VzU3RhdGUoKTtcblxuICAgICAgICBpZiAodGFyZ2V0ID09PSBfdGhpczE4LmlucHV0LmVsZW1lbnQgfHwgdGFyZ2V0ID09PSBfdGhpczE4LmNvbnRhaW5lck91dGVyLmVsZW1lbnQgJiYgIV90aGlzMTguX2NhblNlYXJjaCkge1xuICAgICAgICAgIF90aGlzMTguaGlkZURyb3Bkb3duKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9LCBfYmx1ckFjdGlvbnNbU0VMRUNUX01VTFRJUExFX1RZUEVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGFyZ2V0ID09PSBfdGhpczE4LmlucHV0LmVsZW1lbnQpIHtcbiAgICAgICAgICBfdGhpczE4LmNvbnRhaW5lck91dGVyLnJlbW92ZUZvY3VzU3RhdGUoKTtcblxuICAgICAgICAgIF90aGlzMTguaGlkZURyb3Bkb3duKHRydWUpO1xuXG4gICAgICAgICAgaWYgKGhhc0hpZ2hsaWdodGVkSXRlbXMpIHtcbiAgICAgICAgICAgIF90aGlzMTgudW5oaWdobGlnaHRBbGwoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIF9ibHVyQWN0aW9ucyk7XG4gICAgICBibHVyQWN0aW9uc1t0aGlzLnBhc3NlZEVsZW1lbnQuZWxlbWVudC50eXBlXSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPbiBJRTExLCBjbGlja2luZyB0aGUgc2NvbGxiYXIgYmx1cnMgb3VyIGlucHV0IGFuZCB0aHVzXG4gICAgICAvLyBjbG9zZXMgdGhlIGRyb3Bkb3duLiBUbyBzdG9wIHRoaXMsIHdlIHJlZm9jdXMgb3VyIGlucHV0XG4gICAgICAvLyBpZiB3ZSBrbm93IHdlIGFyZSBvbiBJRSAqYW5kKiBhcmUgc2Nyb2xsaW5nLlxuICAgICAgdGhpcy5faXNTY3JvbGxpbmdPbkllID0gZmFsc2U7XG4gICAgICB0aGlzLmlucHV0LmVsZW1lbnQuZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9vbkZvcm1SZXNldCA9IGZ1bmN0aW9uIF9vbkZvcm1SZXNldCgpIHtcbiAgICB0aGlzLl9zdG9yZS5kaXNwYXRjaChyZXNldFRvKHRoaXMuX2luaXRpYWxTdGF0ZSkpO1xuICB9O1xuXG4gIF9wcm90by5faGlnaGxpZ2h0Q2hvaWNlID0gZnVuY3Rpb24gX2hpZ2hsaWdodENob2ljZShlbCkge1xuICAgIHZhciBfdGhpczE5ID0gdGhpcztcblxuICAgIGlmIChlbCA9PT0gdm9pZCAwKSB7XG4gICAgICBlbCA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGNob2ljZXMgPSBBcnJheS5mcm9tKHRoaXMuZHJvcGRvd24uZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1jaG9pY2Utc2VsZWN0YWJsZV0nKSk7XG5cbiAgICBpZiAoIWNob2ljZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHBhc3NlZEVsID0gZWw7XG4gICAgdmFyIGhpZ2hsaWdodGVkQ2hvaWNlcyA9IEFycmF5LmZyb20odGhpcy5kcm9wZG93bi5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIgKyB0aGlzLmNvbmZpZy5jbGFzc05hbWVzLmhpZ2hsaWdodGVkU3RhdGUpKTsgLy8gUmVtb3ZlIGFueSBoaWdobGlnaHRlZCBjaG9pY2VzXG5cbiAgICBoaWdobGlnaHRlZENob2ljZXMuZm9yRWFjaChmdW5jdGlvbiAoY2hvaWNlKSB7XG4gICAgICBjaG9pY2UuY2xhc3NMaXN0LnJlbW92ZShfdGhpczE5LmNvbmZpZy5jbGFzc05hbWVzLmhpZ2hsaWdodGVkU3RhdGUpO1xuICAgICAgY2hvaWNlLnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsICdmYWxzZScpO1xuICAgIH0pO1xuXG4gICAgaWYgKHBhc3NlZEVsKSB7XG4gICAgICB0aGlzLl9oaWdobGlnaHRQb3NpdGlvbiA9IGNob2ljZXMuaW5kZXhPZihwYXNzZWRFbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEhpZ2hsaWdodCBjaG9pY2UgYmFzZWQgb24gbGFzdCBrbm93biBoaWdobGlnaHQgbG9jYXRpb25cbiAgICAgIGlmIChjaG9pY2VzLmxlbmd0aCA+IHRoaXMuX2hpZ2hsaWdodFBvc2l0aW9uKSB7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgYW4gb3B0aW9uIHRvIGhpZ2hsaWdodFxuICAgICAgICBwYXNzZWRFbCA9IGNob2ljZXNbdGhpcy5faGlnaGxpZ2h0UG9zaXRpb25dO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlIGhpZ2hsaWdodCB0aGUgb3B0aW9uIGJlZm9yZVxuICAgICAgICBwYXNzZWRFbCA9IGNob2ljZXNbY2hvaWNlcy5sZW5ndGggLSAxXTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFwYXNzZWRFbCkge1xuICAgICAgICBwYXNzZWRFbCA9IGNob2ljZXNbMF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGFzc2VkRWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNvbmZpZy5jbGFzc05hbWVzLmhpZ2hsaWdodGVkU3RhdGUpO1xuICAgIHBhc3NlZEVsLnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsICd0cnVlJyk7XG4gICAgdGhpcy5wYXNzZWRFbGVtZW50LnRyaWdnZXJFdmVudChFVkVOVFMuaGlnaGxpZ2h0Q2hvaWNlLCB7XG4gICAgICBlbDogcGFzc2VkRWxcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLmRyb3Bkb3duLmlzQWN0aXZlKSB7XG4gICAgICAvLyBJRTExIGlnbm9yZXMgYXJpYS1sYWJlbCBhbmQgYmxvY2tzIHZpcnR1YWwga2V5Ym9hcmRcbiAgICAgIC8vIGlmIGFyaWEtYWN0aXZlZGVzY2VuZGFudCBpcyBzZXQgd2l0aG91dCBhIGRyb3Bkb3duXG4gICAgICB0aGlzLmlucHV0LnNldEFjdGl2ZURlc2NlbmRhbnQocGFzc2VkRWwuaWQpO1xuICAgICAgdGhpcy5jb250YWluZXJPdXRlci5zZXRBY3RpdmVEZXNjZW5kYW50KHBhc3NlZEVsLmlkKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9hZGRJdGVtID0gZnVuY3Rpb24gX2FkZEl0ZW0oX3JlZjEzKSB7XG4gICAgdmFyIHZhbHVlID0gX3JlZjEzLnZhbHVlLFxuICAgICAgICBfcmVmMTMkbGFiZWwgPSBfcmVmMTMubGFiZWwsXG4gICAgICAgIGxhYmVsID0gX3JlZjEzJGxhYmVsID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjEzJGxhYmVsLFxuICAgICAgICBfcmVmMTMkY2hvaWNlSWQgPSBfcmVmMTMuY2hvaWNlSWQsXG4gICAgICAgIGNob2ljZUlkID0gX3JlZjEzJGNob2ljZUlkID09PSB2b2lkIDAgPyAtMSA6IF9yZWYxMyRjaG9pY2VJZCxcbiAgICAgICAgX3JlZjEzJGdyb3VwSWQgPSBfcmVmMTMuZ3JvdXBJZCxcbiAgICAgICAgZ3JvdXBJZCA9IF9yZWYxMyRncm91cElkID09PSB2b2lkIDAgPyAtMSA6IF9yZWYxMyRncm91cElkLFxuICAgICAgICBfcmVmMTMkY3VzdG9tUHJvcGVydGkgPSBfcmVmMTMuY3VzdG9tUHJvcGVydGllcyxcbiAgICAgICAgY3VzdG9tUHJvcGVydGllcyA9IF9yZWYxMyRjdXN0b21Qcm9wZXJ0aSA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWYxMyRjdXN0b21Qcm9wZXJ0aSxcbiAgICAgICAgX3JlZjEzJHBsYWNlaG9sZGVyID0gX3JlZjEzLnBsYWNlaG9sZGVyLFxuICAgICAgICBwbGFjZWhvbGRlciA9IF9yZWYxMyRwbGFjZWhvbGRlciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMTMkcGxhY2Vob2xkZXIsXG4gICAgICAgIF9yZWYxMyRrZXlDb2RlID0gX3JlZjEzLmtleUNvZGUsXG4gICAgICAgIGtleUNvZGUgPSBfcmVmMTMka2V5Q29kZSA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWYxMyRrZXlDb2RlO1xuICAgIHZhciBwYXNzZWRWYWx1ZSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTtcbiAgICB2YXIgcGFzc2VkS2V5Q29kZSA9IGtleUNvZGU7XG4gICAgdmFyIHBhc3NlZEN1c3RvbVByb3BlcnRpZXMgPSBjdXN0b21Qcm9wZXJ0aWVzO1xuICAgIHZhciBpdGVtcyA9IHRoaXMuX3N0b3JlLml0ZW1zO1xuICAgIHZhciBwYXNzZWRMYWJlbCA9IGxhYmVsIHx8IHBhc3NlZFZhbHVlO1xuICAgIHZhciBwYXNzZWRPcHRpb25JZCA9IGNob2ljZUlkIHx8IC0xO1xuICAgIHZhciBncm91cCA9IGdyb3VwSWQgPj0gMCA/IHRoaXMuX3N0b3JlLmdldEdyb3VwQnlJZChncm91cElkKSA6IG51bGw7XG4gICAgdmFyIGlkID0gaXRlbXMgPyBpdGVtcy5sZW5ndGggKyAxIDogMTsgLy8gSWYgYSBwcmVwZW5kZWQgdmFsdWUgaGFzIGJlZW4gcGFzc2VkLCBwcmVwZW5kIGl0XG5cbiAgICBpZiAodGhpcy5jb25maWcucHJlcGVuZFZhbHVlKSB7XG4gICAgICBwYXNzZWRWYWx1ZSA9IHRoaXMuY29uZmlnLnByZXBlbmRWYWx1ZSArIHBhc3NlZFZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfSAvLyBJZiBhbiBhcHBlbmRlZCB2YWx1ZSBoYXMgYmVlbiBwYXNzZWQsIGFwcGVuZCBpdFxuXG5cbiAgICBpZiAodGhpcy5jb25maWcuYXBwZW5kVmFsdWUpIHtcbiAgICAgIHBhc3NlZFZhbHVlICs9IHRoaXMuY29uZmlnLmFwcGVuZFZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fc3RvcmUuZGlzcGF0Y2goaXRlbXNfYWRkSXRlbSh7XG4gICAgICB2YWx1ZTogcGFzc2VkVmFsdWUsXG4gICAgICBsYWJlbDogcGFzc2VkTGFiZWwsXG4gICAgICBpZDogaWQsXG4gICAgICBjaG9pY2VJZDogcGFzc2VkT3B0aW9uSWQsXG4gICAgICBncm91cElkOiBncm91cElkLFxuICAgICAgY3VzdG9tUHJvcGVydGllczogY3VzdG9tUHJvcGVydGllcyxcbiAgICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICAgIGtleUNvZGU6IHBhc3NlZEtleUNvZGVcbiAgICB9KSk7XG5cbiAgICBpZiAodGhpcy5faXNTZWxlY3RPbmVFbGVtZW50KSB7XG4gICAgICB0aGlzLnJlbW92ZUFjdGl2ZUl0ZW1zKGlkKTtcbiAgICB9IC8vIFRyaWdnZXIgY2hhbmdlIGV2ZW50XG5cblxuICAgIHRoaXMucGFzc2VkRWxlbWVudC50cmlnZ2VyRXZlbnQoRVZFTlRTLmFkZEl0ZW0sIHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIHZhbHVlOiBwYXNzZWRWYWx1ZSxcbiAgICAgIGxhYmVsOiBwYXNzZWRMYWJlbCxcbiAgICAgIGN1c3RvbVByb3BlcnRpZXM6IHBhc3NlZEN1c3RvbVByb3BlcnRpZXMsXG4gICAgICBncm91cFZhbHVlOiBncm91cCAmJiBncm91cC52YWx1ZSA/IGdyb3VwLnZhbHVlIDogdW5kZWZpbmVkLFxuICAgICAga2V5Q29kZTogcGFzc2VkS2V5Q29kZVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5fcmVtb3ZlSXRlbSA9IGZ1bmN0aW9uIF9yZW1vdmVJdGVtKGl0ZW0pIHtcbiAgICBpZiAoIWl0ZW0gfHwgIWlzVHlwZSgnT2JqZWN0JywgaXRlbSkpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBpZCA9IGl0ZW0uaWQsXG4gICAgICAgIHZhbHVlID0gaXRlbS52YWx1ZSxcbiAgICAgICAgbGFiZWwgPSBpdGVtLmxhYmVsLFxuICAgICAgICBjaG9pY2VJZCA9IGl0ZW0uY2hvaWNlSWQsXG4gICAgICAgIGdyb3VwSWQgPSBpdGVtLmdyb3VwSWQ7XG4gICAgdmFyIGdyb3VwID0gZ3JvdXBJZCA+PSAwID8gdGhpcy5fc3RvcmUuZ2V0R3JvdXBCeUlkKGdyb3VwSWQpIDogbnVsbDtcblxuICAgIHRoaXMuX3N0b3JlLmRpc3BhdGNoKGl0ZW1zX3JlbW92ZUl0ZW0oaWQsIGNob2ljZUlkKSk7XG5cbiAgICBpZiAoZ3JvdXAgJiYgZ3JvdXAudmFsdWUpIHtcbiAgICAgIHRoaXMucGFzc2VkRWxlbWVudC50cmlnZ2VyRXZlbnQoRVZFTlRTLnJlbW92ZUl0ZW0sIHtcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgZ3JvdXBWYWx1ZTogZ3JvdXAudmFsdWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhc3NlZEVsZW1lbnQudHJpZ2dlckV2ZW50KEVWRU5UUy5yZW1vdmVJdGVtLCB7XG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBsYWJlbDogbGFiZWxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5fYWRkQ2hvaWNlID0gZnVuY3Rpb24gX2FkZENob2ljZShfcmVmMTQpIHtcbiAgICB2YXIgdmFsdWUgPSBfcmVmMTQudmFsdWUsXG4gICAgICAgIF9yZWYxNCRsYWJlbCA9IF9yZWYxNC5sYWJlbCxcbiAgICAgICAgbGFiZWwgPSBfcmVmMTQkbGFiZWwgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmMTQkbGFiZWwsXG4gICAgICAgIF9yZWYxNCRpc1NlbGVjdGVkID0gX3JlZjE0LmlzU2VsZWN0ZWQsXG4gICAgICAgIGlzU2VsZWN0ZWQgPSBfcmVmMTQkaXNTZWxlY3RlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMTQkaXNTZWxlY3RlZCxcbiAgICAgICAgX3JlZjE0JGlzRGlzYWJsZWQgPSBfcmVmMTQuaXNEaXNhYmxlZCxcbiAgICAgICAgaXNEaXNhYmxlZCA9IF9yZWYxNCRpc0Rpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYxNCRpc0Rpc2FibGVkLFxuICAgICAgICBfcmVmMTQkZ3JvdXBJZCA9IF9yZWYxNC5ncm91cElkLFxuICAgICAgICBncm91cElkID0gX3JlZjE0JGdyb3VwSWQgPT09IHZvaWQgMCA/IC0xIDogX3JlZjE0JGdyb3VwSWQsXG4gICAgICAgIF9yZWYxNCRjdXN0b21Qcm9wZXJ0aSA9IF9yZWYxNC5jdXN0b21Qcm9wZXJ0aWVzLFxuICAgICAgICBjdXN0b21Qcm9wZXJ0aWVzID0gX3JlZjE0JGN1c3RvbVByb3BlcnRpID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjE0JGN1c3RvbVByb3BlcnRpLFxuICAgICAgICBfcmVmMTQkcGxhY2Vob2xkZXIgPSBfcmVmMTQucGxhY2Vob2xkZXIsXG4gICAgICAgIHBsYWNlaG9sZGVyID0gX3JlZjE0JHBsYWNlaG9sZGVyID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYxNCRwbGFjZWhvbGRlcixcbiAgICAgICAgX3JlZjE0JGtleUNvZGUgPSBfcmVmMTQua2V5Q29kZSxcbiAgICAgICAga2V5Q29kZSA9IF9yZWYxNCRrZXlDb2RlID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjE0JGtleUNvZGU7XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gR2VuZXJhdGUgdW5pcXVlIGlkXG5cblxuICAgIHZhciBjaG9pY2VzID0gdGhpcy5fc3RvcmUuY2hvaWNlcztcbiAgICB2YXIgY2hvaWNlTGFiZWwgPSBsYWJlbCB8fCB2YWx1ZTtcbiAgICB2YXIgY2hvaWNlSWQgPSBjaG9pY2VzID8gY2hvaWNlcy5sZW5ndGggKyAxIDogMTtcbiAgICB2YXIgY2hvaWNlRWxlbWVudElkID0gdGhpcy5fYmFzZUlkICsgXCItXCIgKyB0aGlzLl9pZE5hbWVzLml0ZW1DaG9pY2UgKyBcIi1cIiArIGNob2ljZUlkO1xuXG4gICAgdGhpcy5fc3RvcmUuZGlzcGF0Y2goY2hvaWNlc19hZGRDaG9pY2Uoe1xuICAgICAgaWQ6IGNob2ljZUlkLFxuICAgICAgZ3JvdXBJZDogZ3JvdXBJZCxcbiAgICAgIGVsZW1lbnRJZDogY2hvaWNlRWxlbWVudElkLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgbGFiZWw6IGNob2ljZUxhYmVsLFxuICAgICAgZGlzYWJsZWQ6IGlzRGlzYWJsZWQsXG4gICAgICBjdXN0b21Qcm9wZXJ0aWVzOiBjdXN0b21Qcm9wZXJ0aWVzLFxuICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgICAga2V5Q29kZToga2V5Q29kZVxuICAgIH0pKTtcblxuICAgIGlmIChpc1NlbGVjdGVkKSB7XG4gICAgICB0aGlzLl9hZGRJdGVtKHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBsYWJlbDogY2hvaWNlTGFiZWwsXG4gICAgICAgIGNob2ljZUlkOiBjaG9pY2VJZCxcbiAgICAgICAgY3VzdG9tUHJvcGVydGllczogY3VzdG9tUHJvcGVydGllcyxcbiAgICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgICAgICBrZXlDb2RlOiBrZXlDb2RlXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9hZGRHcm91cCA9IGZ1bmN0aW9uIF9hZGRHcm91cChfcmVmMTUpIHtcbiAgICB2YXIgX3RoaXMyMCA9IHRoaXM7XG5cbiAgICB2YXIgZ3JvdXAgPSBfcmVmMTUuZ3JvdXAsXG4gICAgICAgIGlkID0gX3JlZjE1LmlkLFxuICAgICAgICBfcmVmMTUkdmFsdWVLZXkgPSBfcmVmMTUudmFsdWVLZXksXG4gICAgICAgIHZhbHVlS2V5ID0gX3JlZjE1JHZhbHVlS2V5ID09PSB2b2lkIDAgPyAndmFsdWUnIDogX3JlZjE1JHZhbHVlS2V5LFxuICAgICAgICBfcmVmMTUkbGFiZWxLZXkgPSBfcmVmMTUubGFiZWxLZXksXG4gICAgICAgIGxhYmVsS2V5ID0gX3JlZjE1JGxhYmVsS2V5ID09PSB2b2lkIDAgPyAnbGFiZWwnIDogX3JlZjE1JGxhYmVsS2V5O1xuICAgIHZhciBncm91cENob2ljZXMgPSBpc1R5cGUoJ09iamVjdCcsIGdyb3VwKSA/IGdyb3VwLmNob2ljZXMgOiBBcnJheS5mcm9tKGdyb3VwLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdPUFRJT04nKSk7XG4gICAgdmFyIGdyb3VwSWQgPSBpZCB8fCBNYXRoLmZsb29yKG5ldyBEYXRlKCkudmFsdWVPZigpICogTWF0aC5yYW5kb20oKSk7XG4gICAgdmFyIGlzRGlzYWJsZWQgPSBncm91cC5kaXNhYmxlZCA/IGdyb3VwLmRpc2FibGVkIDogZmFsc2U7XG5cbiAgICBpZiAoZ3JvdXBDaG9pY2VzKSB7XG4gICAgICB0aGlzLl9zdG9yZS5kaXNwYXRjaChncm91cHNfYWRkR3JvdXAoe1xuICAgICAgICB2YWx1ZTogZ3JvdXAubGFiZWwsXG4gICAgICAgIGlkOiBncm91cElkLFxuICAgICAgICBhY3RpdmU6IHRydWUsXG4gICAgICAgIGRpc2FibGVkOiBpc0Rpc2FibGVkXG4gICAgICB9KSk7XG5cbiAgICAgIHZhciBhZGRHcm91cENob2ljZXMgPSBmdW5jdGlvbiBhZGRHcm91cENob2ljZXMoY2hvaWNlKSB7XG4gICAgICAgIHZhciBpc09wdERpc2FibGVkID0gY2hvaWNlLmRpc2FibGVkIHx8IGNob2ljZS5wYXJlbnROb2RlICYmIGNob2ljZS5wYXJlbnROb2RlLmRpc2FibGVkO1xuXG4gICAgICAgIF90aGlzMjAuX2FkZENob2ljZSh7XG4gICAgICAgICAgdmFsdWU6IGNob2ljZVt2YWx1ZUtleV0sXG4gICAgICAgICAgbGFiZWw6IGlzVHlwZSgnT2JqZWN0JywgY2hvaWNlKSA/IGNob2ljZVtsYWJlbEtleV0gOiBjaG9pY2UuaW5uZXJIVE1MLFxuICAgICAgICAgIGlzU2VsZWN0ZWQ6IGNob2ljZS5zZWxlY3RlZCxcbiAgICAgICAgICBpc0Rpc2FibGVkOiBpc09wdERpc2FibGVkLFxuICAgICAgICAgIGdyb3VwSWQ6IGdyb3VwSWQsXG4gICAgICAgICAgY3VzdG9tUHJvcGVydGllczogY2hvaWNlLmN1c3RvbVByb3BlcnRpZXMsXG4gICAgICAgICAgcGxhY2Vob2xkZXI6IGNob2ljZS5wbGFjZWhvbGRlclxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGdyb3VwQ2hvaWNlcy5mb3JFYWNoKGFkZEdyb3VwQ2hvaWNlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3N0b3JlLmRpc3BhdGNoKGdyb3Vwc19hZGRHcm91cCh7XG4gICAgICAgIHZhbHVlOiBncm91cC5sYWJlbCxcbiAgICAgICAgaWQ6IGdyb3VwLmlkLFxuICAgICAgICBhY3RpdmU6IGZhbHNlLFxuICAgICAgICBkaXNhYmxlZDogZ3JvdXAuZGlzYWJsZWRcbiAgICAgIH0pKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLl9nZXRUZW1wbGF0ZSA9IGZ1bmN0aW9uIF9nZXRUZW1wbGF0ZSh0ZW1wbGF0ZSkge1xuICAgIHZhciBfdGhpcyRfdGVtcGxhdGVzJHRlbXA7XG5cbiAgICBpZiAoIXRlbXBsYXRlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NOYW1lcyA9IHRoaXMuY29uZmlnLmNsYXNzTmFtZXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gKF90aGlzJF90ZW1wbGF0ZXMkdGVtcCA9IHRoaXMuX3RlbXBsYXRlc1t0ZW1wbGF0ZV0pLmNhbGwuYXBwbHkoX3RoaXMkX3RlbXBsYXRlcyR0ZW1wLCBbdGhpcywgY2xhc3NOYW1lc10uY29uY2F0KGFyZ3MpKTtcbiAgfTtcblxuICBfcHJvdG8uX2NyZWF0ZVRlbXBsYXRlcyA9IGZ1bmN0aW9uIF9jcmVhdGVUZW1wbGF0ZXMoKSB7XG4gICAgdmFyIGNhbGxiYWNrT25DcmVhdGVUZW1wbGF0ZXMgPSB0aGlzLmNvbmZpZy5jYWxsYmFja09uQ3JlYXRlVGVtcGxhdGVzO1xuICAgIHZhciB1c2VyVGVtcGxhdGVzID0ge307XG5cbiAgICBpZiAoY2FsbGJhY2tPbkNyZWF0ZVRlbXBsYXRlcyAmJiB0eXBlb2YgY2FsbGJhY2tPbkNyZWF0ZVRlbXBsYXRlcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdXNlclRlbXBsYXRlcyA9IGNhbGxiYWNrT25DcmVhdGVUZW1wbGF0ZXMuY2FsbCh0aGlzLCBzdHJUb0VsKTtcbiAgICB9XG5cbiAgICB0aGlzLl90ZW1wbGF0ZXMgPSBjanNfZGVmYXVsdCgpKFRFTVBMQVRFUywgdXNlclRlbXBsYXRlcyk7XG4gIH07XG5cbiAgX3Byb3RvLl9jcmVhdGVFbGVtZW50cyA9IGZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50cygpIHtcbiAgICB0aGlzLmNvbnRhaW5lck91dGVyID0gbmV3IGNvbnRhaW5lcl9Db250YWluZXIoe1xuICAgICAgZWxlbWVudDogdGhpcy5fZ2V0VGVtcGxhdGUoJ2NvbnRhaW5lck91dGVyJywgdGhpcy5fZGlyZWN0aW9uLCB0aGlzLl9pc1NlbGVjdEVsZW1lbnQsIHRoaXMuX2lzU2VsZWN0T25lRWxlbWVudCwgdGhpcy5jb25maWcuc2VhcmNoRW5hYmxlZCwgdGhpcy5wYXNzZWRFbGVtZW50LmVsZW1lbnQudHlwZSksXG4gICAgICBjbGFzc05hbWVzOiB0aGlzLmNvbmZpZy5jbGFzc05hbWVzLFxuICAgICAgdHlwZTogdGhpcy5wYXNzZWRFbGVtZW50LmVsZW1lbnQudHlwZSxcbiAgICAgIHBvc2l0aW9uOiB0aGlzLmNvbmZpZy5wb3NpdGlvblxuICAgIH0pO1xuICAgIHRoaXMuY29udGFpbmVySW5uZXIgPSBuZXcgY29udGFpbmVyX0NvbnRhaW5lcih7XG4gICAgICBlbGVtZW50OiB0aGlzLl9nZXRUZW1wbGF0ZSgnY29udGFpbmVySW5uZXInKSxcbiAgICAgIGNsYXNzTmFtZXM6IHRoaXMuY29uZmlnLmNsYXNzTmFtZXMsXG4gICAgICB0eXBlOiB0aGlzLnBhc3NlZEVsZW1lbnQuZWxlbWVudC50eXBlLFxuICAgICAgcG9zaXRpb246IHRoaXMuY29uZmlnLnBvc2l0aW9uXG4gICAgfSk7XG4gICAgdGhpcy5pbnB1dCA9IG5ldyBpbnB1dF9JbnB1dCh7XG4gICAgICBlbGVtZW50OiB0aGlzLl9nZXRUZW1wbGF0ZSgnaW5wdXQnLCB0aGlzLl9wbGFjZWhvbGRlclZhbHVlKSxcbiAgICAgIGNsYXNzTmFtZXM6IHRoaXMuY29uZmlnLmNsYXNzTmFtZXMsXG4gICAgICB0eXBlOiB0aGlzLnBhc3NlZEVsZW1lbnQuZWxlbWVudC50eXBlLFxuICAgICAgcHJldmVudFBhc3RlOiAhdGhpcy5jb25maWcucGFzdGVcbiAgICB9KTtcbiAgICB0aGlzLmNob2ljZUxpc3QgPSBuZXcgbGlzdF9MaXN0KHtcbiAgICAgIGVsZW1lbnQ6IHRoaXMuX2dldFRlbXBsYXRlKCdjaG9pY2VMaXN0JywgdGhpcy5faXNTZWxlY3RPbmVFbGVtZW50KVxuICAgIH0pO1xuICAgIHRoaXMuaXRlbUxpc3QgPSBuZXcgbGlzdF9MaXN0KHtcbiAgICAgIGVsZW1lbnQ6IHRoaXMuX2dldFRlbXBsYXRlKCdpdGVtTGlzdCcsIHRoaXMuX2lzU2VsZWN0T25lRWxlbWVudClcbiAgICB9KTtcbiAgICB0aGlzLmRyb3Bkb3duID0gbmV3IERyb3Bkb3duKHtcbiAgICAgIGVsZW1lbnQ6IHRoaXMuX2dldFRlbXBsYXRlKCdkcm9wZG93bicpLFxuICAgICAgY2xhc3NOYW1lczogdGhpcy5jb25maWcuY2xhc3NOYW1lcyxcbiAgICAgIHR5cGU6IHRoaXMucGFzc2VkRWxlbWVudC5lbGVtZW50LnR5cGVcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uX2NyZWF0ZVN0cnVjdHVyZSA9IGZ1bmN0aW9uIF9jcmVhdGVTdHJ1Y3R1cmUoKSB7XG4gICAgLy8gSGlkZSBvcmlnaW5hbCBlbGVtZW50XG4gICAgdGhpcy5wYXNzZWRFbGVtZW50LmNvbmNlYWwoKTsgLy8gV3JhcCBpbnB1dCBpbiBjb250YWluZXIgcHJlc2VydmluZyBET00gb3JkZXJpbmdcblxuICAgIHRoaXMuY29udGFpbmVySW5uZXIud3JhcCh0aGlzLnBhc3NlZEVsZW1lbnQuZWxlbWVudCk7IC8vIFdyYXBwZXIgaW5uZXIgY29udGFpbmVyIHdpdGggb3V0ZXIgY29udGFpbmVyXG5cbiAgICB0aGlzLmNvbnRhaW5lck91dGVyLndyYXAodGhpcy5jb250YWluZXJJbm5lci5lbGVtZW50KTtcblxuICAgIGlmICh0aGlzLl9pc1NlbGVjdE9uZUVsZW1lbnQpIHtcbiAgICAgIHRoaXMuaW5wdXQucGxhY2Vob2xkZXIgPSB0aGlzLmNvbmZpZy5zZWFyY2hQbGFjZWhvbGRlclZhbHVlIHx8ICcnO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fcGxhY2Vob2xkZXJWYWx1ZSkge1xuICAgICAgdGhpcy5pbnB1dC5wbGFjZWhvbGRlciA9IHRoaXMuX3BsYWNlaG9sZGVyVmFsdWU7XG4gICAgICB0aGlzLmlucHV0LnNldFdpZHRoKCk7XG4gICAgfVxuXG4gICAgdGhpcy5jb250YWluZXJPdXRlci5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuY29udGFpbmVySW5uZXIuZWxlbWVudCk7XG4gICAgdGhpcy5jb250YWluZXJPdXRlci5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuZHJvcGRvd24uZWxlbWVudCk7XG4gICAgdGhpcy5jb250YWluZXJJbm5lci5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuaXRlbUxpc3QuZWxlbWVudCk7XG5cbiAgICBpZiAoIXRoaXMuX2lzVGV4dEVsZW1lbnQpIHtcbiAgICAgIHRoaXMuZHJvcGRvd24uZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmNob2ljZUxpc3QuZWxlbWVudCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9pc1NlbGVjdE9uZUVsZW1lbnQpIHtcbiAgICAgIHRoaXMuY29udGFpbmVySW5uZXIuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmlucHV0LmVsZW1lbnQpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jb25maWcuc2VhcmNoRW5hYmxlZCkge1xuICAgICAgdGhpcy5kcm9wZG93bi5lbGVtZW50Lmluc2VydEJlZm9yZSh0aGlzLmlucHV0LmVsZW1lbnQsIHRoaXMuZHJvcGRvd24uZWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5faXNTZWxlY3RFbGVtZW50KSB7XG4gICAgICB0aGlzLl9oaWdobGlnaHRQb3NpdGlvbiA9IDA7XG4gICAgICB0aGlzLl9pc1NlYXJjaGluZyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLl9zdGFydExvYWRpbmcoKTtcblxuICAgICAgaWYgKHRoaXMuX3ByZXNldEdyb3Vwcy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5fYWRkUHJlZGVmaW5lZEdyb3Vwcyh0aGlzLl9wcmVzZXRHcm91cHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fYWRkUHJlZGVmaW5lZENob2ljZXModGhpcy5fcHJlc2V0Q2hvaWNlcyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3N0b3BMb2FkaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2lzVGV4dEVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2FkZFByZWRlZmluZWRJdGVtcyh0aGlzLl9wcmVzZXRJdGVtcyk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fYWRkUHJlZGVmaW5lZEdyb3VwcyA9IGZ1bmN0aW9uIF9hZGRQcmVkZWZpbmVkR3JvdXBzKGdyb3Vwcykge1xuICAgIHZhciBfdGhpczIxID0gdGhpcztcblxuICAgIC8vIElmIHdlIGhhdmUgYSBwbGFjZWhvbGRlciBvcHRpb25cbiAgICB2YXIgcGxhY2Vob2xkZXJDaG9pY2UgPSB0aGlzLnBhc3NlZEVsZW1lbnQucGxhY2Vob2xkZXJPcHRpb247XG5cbiAgICBpZiAocGxhY2Vob2xkZXJDaG9pY2UgJiYgcGxhY2Vob2xkZXJDaG9pY2UucGFyZW50Tm9kZS50YWdOYW1lID09PSAnU0VMRUNUJykge1xuICAgICAgdGhpcy5fYWRkQ2hvaWNlKHtcbiAgICAgICAgdmFsdWU6IHBsYWNlaG9sZGVyQ2hvaWNlLnZhbHVlLFxuICAgICAgICBsYWJlbDogcGxhY2Vob2xkZXJDaG9pY2UuaW5uZXJIVE1MLFxuICAgICAgICBpc1NlbGVjdGVkOiBwbGFjZWhvbGRlckNob2ljZS5zZWxlY3RlZCxcbiAgICAgICAgaXNEaXNhYmxlZDogcGxhY2Vob2xkZXJDaG9pY2UuZGlzYWJsZWQsXG4gICAgICAgIHBsYWNlaG9sZGVyOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBncm91cHMuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXApIHtcbiAgICAgIHJldHVybiBfdGhpczIxLl9hZGRHcm91cCh7XG4gICAgICAgIGdyb3VwOiBncm91cCxcbiAgICAgICAgaWQ6IGdyb3VwLmlkIHx8IG51bGxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5fYWRkUHJlZGVmaW5lZENob2ljZXMgPSBmdW5jdGlvbiBfYWRkUHJlZGVmaW5lZENob2ljZXMoY2hvaWNlcykge1xuICAgIHZhciBfdGhpczIyID0gdGhpcztcblxuICAgIC8vIElmIHNvcnRpbmcgaXMgZW5hYmxlZCBvciB0aGUgdXNlciBpcyBzZWFyY2hpbmcsIGZpbHRlciBjaG9pY2VzXG4gICAgaWYgKHRoaXMuY29uZmlnLnNob3VsZFNvcnQpIHtcbiAgICAgIGNob2ljZXMuc29ydCh0aGlzLmNvbmZpZy5zb3J0ZXIpO1xuICAgIH1cblxuICAgIHZhciBoYXNTZWxlY3RlZENob2ljZSA9IGNob2ljZXMuc29tZShmdW5jdGlvbiAoY2hvaWNlKSB7XG4gICAgICByZXR1cm4gY2hvaWNlLnNlbGVjdGVkO1xuICAgIH0pO1xuICAgIHZhciBmaXJzdEVuYWJsZWRDaG9pY2VJbmRleCA9IGNob2ljZXMuZmluZEluZGV4KGZ1bmN0aW9uIChjaG9pY2UpIHtcbiAgICAgIHJldHVybiBjaG9pY2UuZGlzYWJsZWQgPT09IHVuZGVmaW5lZCB8fCAhY2hvaWNlLmRpc2FibGVkO1xuICAgIH0pO1xuICAgIGNob2ljZXMuZm9yRWFjaChmdW5jdGlvbiAoY2hvaWNlLCBpbmRleCkge1xuICAgICAgdmFyIHZhbHVlID0gY2hvaWNlLnZhbHVlLFxuICAgICAgICAgIGxhYmVsID0gY2hvaWNlLmxhYmVsLFxuICAgICAgICAgIGN1c3RvbVByb3BlcnRpZXMgPSBjaG9pY2UuY3VzdG9tUHJvcGVydGllcyxcbiAgICAgICAgICBwbGFjZWhvbGRlciA9IGNob2ljZS5wbGFjZWhvbGRlcjtcblxuICAgICAgaWYgKF90aGlzMjIuX2lzU2VsZWN0RWxlbWVudCkge1xuICAgICAgICAvLyBJZiB0aGUgY2hvaWNlIGlzIGFjdHVhbGx5IGEgZ3JvdXBcbiAgICAgICAgaWYgKGNob2ljZS5jaG9pY2VzKSB7XG4gICAgICAgICAgX3RoaXMyMi5fYWRkR3JvdXAoe1xuICAgICAgICAgICAgZ3JvdXA6IGNob2ljZSxcbiAgICAgICAgICAgIGlkOiBjaG9pY2UuaWQgfHwgbnVsbFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIElmIHRoZXJlIGlzIGEgc2VsZWN0ZWQgY2hvaWNlIGFscmVhZHkgb3IgdGhlIGNob2ljZSBpcyBub3QgdGhlIGZpcnN0IGluXG4gICAgICAgICAgICogdGhlIGFycmF5LCBhZGQgZWFjaCBjaG9pY2Ugbm9ybWFsbHkuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBPdGhlcndpc2Ugd2UgcHJlLXNlbGVjdCB0aGUgZmlyc3QgZW5hYmxlZCBjaG9pY2UgaW4gdGhlIGFycmF5IChcInNlbGVjdC1vbmVcIiBvbmx5KVxuICAgICAgICAgICAqL1xuICAgICAgICAgIHZhciBzaG91bGRQcmVzZWxlY3QgPSBfdGhpczIyLl9pc1NlbGVjdE9uZUVsZW1lbnQgJiYgIWhhc1NlbGVjdGVkQ2hvaWNlICYmIGluZGV4ID09PSBmaXJzdEVuYWJsZWRDaG9pY2VJbmRleDtcbiAgICAgICAgICB2YXIgaXNTZWxlY3RlZCA9IHNob3VsZFByZXNlbGVjdCA/IHRydWUgOiBjaG9pY2Uuc2VsZWN0ZWQ7XG4gICAgICAgICAgdmFyIGlzRGlzYWJsZWQgPSBjaG9pY2UuZGlzYWJsZWQ7XG5cbiAgICAgICAgICBfdGhpczIyLl9hZGRDaG9pY2Uoe1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICAgICAgaXNTZWxlY3RlZDogaXNTZWxlY3RlZCxcbiAgICAgICAgICAgIGlzRGlzYWJsZWQ6IGlzRGlzYWJsZWQsXG4gICAgICAgICAgICBjdXN0b21Qcm9wZXJ0aWVzOiBjdXN0b21Qcm9wZXJ0aWVzLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzMjIuX2FkZENob2ljZSh7XG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgICBpc1NlbGVjdGVkOiBjaG9pY2Uuc2VsZWN0ZWQsXG4gICAgICAgICAgaXNEaXNhYmxlZDogY2hvaWNlLmRpc2FibGVkLFxuICAgICAgICAgIGN1c3RvbVByb3BlcnRpZXM6IGN1c3RvbVByb3BlcnRpZXMsXG4gICAgICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge0l0ZW1bXX0gaXRlbXNcbiAgICovXG4gIDtcblxuICBfcHJvdG8uX2FkZFByZWRlZmluZWRJdGVtcyA9IGZ1bmN0aW9uIF9hZGRQcmVkZWZpbmVkSXRlbXMoaXRlbXMpIHtcbiAgICB2YXIgX3RoaXMyMyA9IHRoaXM7XG5cbiAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnICYmIGl0ZW0udmFsdWUpIHtcbiAgICAgICAgX3RoaXMyMy5fYWRkSXRlbSh7XG4gICAgICAgICAgdmFsdWU6IGl0ZW0udmFsdWUsXG4gICAgICAgICAgbGFiZWw6IGl0ZW0ubGFiZWwsXG4gICAgICAgICAgY2hvaWNlSWQ6IGl0ZW0uaWQsXG4gICAgICAgICAgY3VzdG9tUHJvcGVydGllczogaXRlbS5jdXN0b21Qcm9wZXJ0aWVzLFxuICAgICAgICAgIHBsYWNlaG9sZGVyOiBpdGVtLnBsYWNlaG9sZGVyXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIF90aGlzMjMuX2FkZEl0ZW0oe1xuICAgICAgICAgIHZhbHVlOiBpdGVtXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5fc2V0Q2hvaWNlT3JJdGVtID0gZnVuY3Rpb24gX3NldENob2ljZU9ySXRlbShpdGVtKSB7XG4gICAgdmFyIF90aGlzMjQgPSB0aGlzO1xuXG4gICAgdmFyIGl0ZW1UeXBlID0gZ2V0VHlwZShpdGVtKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciBoYW5kbGVUeXBlID0ge1xuICAgICAgb2JqZWN0OiBmdW5jdGlvbiBvYmplY3QoKSB7XG4gICAgICAgIGlmICghaXRlbS52YWx1ZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBJZiB3ZSBhcmUgZGVhbGluZyB3aXRoIGEgc2VsZWN0IGlucHV0LCB3ZSBuZWVkIHRvIGNyZWF0ZSBhbiBvcHRpb24gZmlyc3RcbiAgICAgICAgLy8gdGhhdCBpcyB0aGVuIHNlbGVjdGVkLiBGb3IgdGV4dCBpbnB1dHMgd2UgY2FuIGp1c3QgYWRkIGl0ZW1zIG5vcm1hbGx5LlxuXG5cbiAgICAgICAgaWYgKCFfdGhpczI0Ll9pc1RleHRFbGVtZW50KSB7XG4gICAgICAgICAgX3RoaXMyNC5fYWRkQ2hvaWNlKHtcbiAgICAgICAgICAgIHZhbHVlOiBpdGVtLnZhbHVlLFxuICAgICAgICAgICAgbGFiZWw6IGl0ZW0ubGFiZWwsXG4gICAgICAgICAgICBpc1NlbGVjdGVkOiB0cnVlLFxuICAgICAgICAgICAgaXNEaXNhYmxlZDogZmFsc2UsXG4gICAgICAgICAgICBjdXN0b21Qcm9wZXJ0aWVzOiBpdGVtLmN1c3RvbVByb3BlcnRpZXMsXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogaXRlbS5wbGFjZWhvbGRlclxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzMjQuX2FkZEl0ZW0oe1xuICAgICAgICAgICAgdmFsdWU6IGl0ZW0udmFsdWUsXG4gICAgICAgICAgICBsYWJlbDogaXRlbS5sYWJlbCxcbiAgICAgICAgICAgIGNob2ljZUlkOiBpdGVtLmlkLFxuICAgICAgICAgICAgY3VzdG9tUHJvcGVydGllczogaXRlbS5jdXN0b21Qcm9wZXJ0aWVzLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IGl0ZW0ucGxhY2Vob2xkZXJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHN0cmluZzogZnVuY3Rpb24gc3RyaW5nKCkge1xuICAgICAgICBpZiAoIV90aGlzMjQuX2lzVGV4dEVsZW1lbnQpIHtcbiAgICAgICAgICBfdGhpczI0Ll9hZGRDaG9pY2Uoe1xuICAgICAgICAgICAgdmFsdWU6IGl0ZW0sXG4gICAgICAgICAgICBsYWJlbDogaXRlbSxcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQ6IHRydWUsXG4gICAgICAgICAgICBpc0Rpc2FibGVkOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzMjQuX2FkZEl0ZW0oe1xuICAgICAgICAgICAgdmFsdWU6IGl0ZW1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgaGFuZGxlVHlwZVtpdGVtVHlwZV0oKTtcbiAgfTtcblxuICBfcHJvdG8uX2ZpbmRBbmRTZWxlY3RDaG9pY2VCeVZhbHVlID0gZnVuY3Rpb24gX2ZpbmRBbmRTZWxlY3RDaG9pY2VCeVZhbHVlKHZhbCkge1xuICAgIHZhciBfdGhpczI1ID0gdGhpcztcblxuICAgIHZhciBjaG9pY2VzID0gdGhpcy5fc3RvcmUuY2hvaWNlczsgLy8gQ2hlY2sgJ3ZhbHVlJyBwcm9wZXJ0eSBleGlzdHMgYW5kIHRoZSBjaG9pY2UgaXNuJ3QgYWxyZWFkeSBzZWxlY3RlZFxuXG4gICAgdmFyIGZvdW5kQ2hvaWNlID0gY2hvaWNlcy5maW5kKGZ1bmN0aW9uIChjaG9pY2UpIHtcbiAgICAgIHJldHVybiBfdGhpczI1LmNvbmZpZy52YWx1ZUNvbXBhcmVyKGNob2ljZS52YWx1ZSwgdmFsKTtcbiAgICB9KTtcblxuICAgIGlmIChmb3VuZENob2ljZSAmJiAhZm91bmRDaG9pY2Uuc2VsZWN0ZWQpIHtcbiAgICAgIHRoaXMuX2FkZEl0ZW0oe1xuICAgICAgICB2YWx1ZTogZm91bmRDaG9pY2UudmFsdWUsXG4gICAgICAgIGxhYmVsOiBmb3VuZENob2ljZS5sYWJlbCxcbiAgICAgICAgY2hvaWNlSWQ6IGZvdW5kQ2hvaWNlLmlkLFxuICAgICAgICBncm91cElkOiBmb3VuZENob2ljZS5ncm91cElkLFxuICAgICAgICBjdXN0b21Qcm9wZXJ0aWVzOiBmb3VuZENob2ljZS5jdXN0b21Qcm9wZXJ0aWVzLFxuICAgICAgICBwbGFjZWhvbGRlcjogZm91bmRDaG9pY2UucGxhY2Vob2xkZXIsXG4gICAgICAgIGtleUNvZGU6IGZvdW5kQ2hvaWNlLmtleUNvZGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX2dlbmVyYXRlUGxhY2Vob2xkZXJWYWx1ZSA9IGZ1bmN0aW9uIF9nZW5lcmF0ZVBsYWNlaG9sZGVyVmFsdWUoKSB7XG4gICAgaWYgKHRoaXMuX2lzU2VsZWN0RWxlbWVudCkge1xuICAgICAgdmFyIHBsYWNlaG9sZGVyT3B0aW9uID0gdGhpcy5wYXNzZWRFbGVtZW50LnBsYWNlaG9sZGVyT3B0aW9uO1xuICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyT3B0aW9uID8gcGxhY2Vob2xkZXJPcHRpb24udGV4dCA6IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyRjb25maWc0ID0gdGhpcy5jb25maWcsXG4gICAgICAgIHBsYWNlaG9sZGVyID0gX3RoaXMkY29uZmlnNC5wbGFjZWhvbGRlcixcbiAgICAgICAgcGxhY2Vob2xkZXJWYWx1ZSA9IF90aGlzJGNvbmZpZzQucGxhY2Vob2xkZXJWYWx1ZTtcbiAgICB2YXIgZGF0YXNldCA9IHRoaXMucGFzc2VkRWxlbWVudC5lbGVtZW50LmRhdGFzZXQ7XG5cbiAgICBpZiAocGxhY2Vob2xkZXIpIHtcbiAgICAgIGlmIChwbGFjZWhvbGRlclZhbHVlKSB7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlclZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YXNldC5wbGFjZWhvbGRlcikge1xuICAgICAgICByZXR1cm4gZGF0YXNldC5wbGFjZWhvbGRlcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgcmV0dXJuIENob2ljZXM7XG59KCk7XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHNjcmlwdHNfY2hvaWNlcyA9IF9fd2VicGFja19leHBvcnRzX19bXCJkZWZhdWx0XCJdID0gKGNob2ljZXNfQ2hvaWNlcyk7XG5cbi8qKiovIH0pXG4vKioqKioqLyBdKVtcImRlZmF1bHRcIl07XG59KTsiLCJ2YXIgX19hc3NpZ249dGhpcyYmdGhpcy5fX2Fzc2lnbnx8ZnVuY3Rpb24oKXtyZXR1cm4oX19hc3NpZ249T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odCl7Zm9yKHZhciBpLGE9MSxzPWFyZ3VtZW50cy5sZW5ndGg7YTxzO2ErKylmb3IodmFyIG4gaW4gaT1hcmd1bWVudHNbYV0pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGksbikmJih0W25dPWlbbl0pO3JldHVybiB0fSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxDb3VudFVwPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGksYSl7dmFyIHM9dGhpczt0aGlzLnRhcmdldD10LHRoaXMuZW5kVmFsPWksdGhpcy5vcHRpb25zPWEsdGhpcy52ZXJzaW9uPVwiMi4wLjdcIix0aGlzLmRlZmF1bHRzPXtzdGFydFZhbDowLGRlY2ltYWxQbGFjZXM6MCxkdXJhdGlvbjoyLHVzZUVhc2luZzohMCx1c2VHcm91cGluZzohMCxzbWFydEVhc2luZ1RocmVzaG9sZDo5OTksc21hcnRFYXNpbmdBbW91bnQ6MzMzLHNlcGFyYXRvcjpcIixcIixkZWNpbWFsOlwiLlwiLHByZWZpeDpcIlwiLHN1ZmZpeDpcIlwifSx0aGlzLmZpbmFsRW5kVmFsPW51bGwsdGhpcy51c2VFYXNpbmc9ITAsdGhpcy5jb3VudERvd249ITEsdGhpcy5lcnJvcj1cIlwiLHRoaXMuc3RhcnRWYWw9MCx0aGlzLnBhdXNlZD0hMCx0aGlzLmNvdW50PWZ1bmN0aW9uKHQpe3Muc3RhcnRUaW1lfHwocy5zdGFydFRpbWU9dCk7dmFyIGk9dC1zLnN0YXJ0VGltZTtzLnJlbWFpbmluZz1zLmR1cmF0aW9uLWkscy51c2VFYXNpbmc/cy5jb3VudERvd24/cy5mcmFtZVZhbD1zLnN0YXJ0VmFsLXMuZWFzaW5nRm4oaSwwLHMuc3RhcnRWYWwtcy5lbmRWYWwscy5kdXJhdGlvbik6cy5mcmFtZVZhbD1zLmVhc2luZ0ZuKGkscy5zdGFydFZhbCxzLmVuZFZhbC1zLnN0YXJ0VmFsLHMuZHVyYXRpb24pOnMuY291bnREb3duP3MuZnJhbWVWYWw9cy5zdGFydFZhbC0ocy5zdGFydFZhbC1zLmVuZFZhbCkqKGkvcy5kdXJhdGlvbik6cy5mcmFtZVZhbD1zLnN0YXJ0VmFsKyhzLmVuZFZhbC1zLnN0YXJ0VmFsKSooaS9zLmR1cmF0aW9uKSxzLmNvdW50RG93bj9zLmZyYW1lVmFsPXMuZnJhbWVWYWw8cy5lbmRWYWw/cy5lbmRWYWw6cy5mcmFtZVZhbDpzLmZyYW1lVmFsPXMuZnJhbWVWYWw+cy5lbmRWYWw/cy5lbmRWYWw6cy5mcmFtZVZhbCxzLmZyYW1lVmFsPU51bWJlcihzLmZyYW1lVmFsLnRvRml4ZWQocy5vcHRpb25zLmRlY2ltYWxQbGFjZXMpKSxzLnByaW50VmFsdWUocy5mcmFtZVZhbCksaTxzLmR1cmF0aW9uP3MuckFGPXJlcXVlc3RBbmltYXRpb25GcmFtZShzLmNvdW50KTpudWxsIT09cy5maW5hbEVuZFZhbD9zLnVwZGF0ZShzLmZpbmFsRW5kVmFsKTpzLmNhbGxiYWNrJiZzLmNhbGxiYWNrKCl9LHRoaXMuZm9ybWF0TnVtYmVyPWZ1bmN0aW9uKHQpe3ZhciBpLGEsbixlLHIsbz10PDA/XCItXCI6XCJcIjtpZihpPU1hdGguYWJzKHQpLnRvRml4ZWQocy5vcHRpb25zLmRlY2ltYWxQbGFjZXMpLG49KGE9KGkrPVwiXCIpLnNwbGl0KFwiLlwiKSlbMF0sZT1hLmxlbmd0aD4xP3Mub3B0aW9ucy5kZWNpbWFsK2FbMV06XCJcIixzLm9wdGlvbnMudXNlR3JvdXBpbmcpe3I9XCJcIjtmb3IodmFyIGw9MCxoPW4ubGVuZ3RoO2w8aDsrK2wpMCE9PWwmJmwlMz09MCYmKHI9cy5vcHRpb25zLnNlcGFyYXRvcityKSxyPW5baC1sLTFdK3I7bj1yfXJldHVybiBzLm9wdGlvbnMubnVtZXJhbHMmJnMub3B0aW9ucy5udW1lcmFscy5sZW5ndGgmJihuPW4ucmVwbGFjZSgvWzAtOV0vZyxmdW5jdGlvbih0KXtyZXR1cm4gcy5vcHRpb25zLm51bWVyYWxzWyt0XX0pLGU9ZS5yZXBsYWNlKC9bMC05XS9nLGZ1bmN0aW9uKHQpe3JldHVybiBzLm9wdGlvbnMubnVtZXJhbHNbK3RdfSkpLG8rcy5vcHRpb25zLnByZWZpeCtuK2Urcy5vcHRpb25zLnN1ZmZpeH0sdGhpcy5lYXNlT3V0RXhwbz1mdW5jdGlvbih0LGksYSxzKXtyZXR1cm4gYSooMS1NYXRoLnBvdygyLC0xMCp0L3MpKSoxMDI0LzEwMjMraX0sdGhpcy5vcHRpb25zPV9fYXNzaWduKF9fYXNzaWduKHt9LHRoaXMuZGVmYXVsdHMpLGEpLHRoaXMuZm9ybWF0dGluZ0ZuPXRoaXMub3B0aW9ucy5mb3JtYXR0aW5nRm4/dGhpcy5vcHRpb25zLmZvcm1hdHRpbmdGbjp0aGlzLmZvcm1hdE51bWJlcix0aGlzLmVhc2luZ0ZuPXRoaXMub3B0aW9ucy5lYXNpbmdGbj90aGlzLm9wdGlvbnMuZWFzaW5nRm46dGhpcy5lYXNlT3V0RXhwbyx0aGlzLnN0YXJ0VmFsPXRoaXMudmFsaWRhdGVWYWx1ZSh0aGlzLm9wdGlvbnMuc3RhcnRWYWwpLHRoaXMuZnJhbWVWYWw9dGhpcy5zdGFydFZhbCx0aGlzLmVuZFZhbD10aGlzLnZhbGlkYXRlVmFsdWUoaSksdGhpcy5vcHRpb25zLmRlY2ltYWxQbGFjZXM9TWF0aC5tYXgodGhpcy5vcHRpb25zLmRlY2ltYWxQbGFjZXMpLHRoaXMucmVzZXREdXJhdGlvbigpLHRoaXMub3B0aW9ucy5zZXBhcmF0b3I9U3RyaW5nKHRoaXMub3B0aW9ucy5zZXBhcmF0b3IpLHRoaXMudXNlRWFzaW5nPXRoaXMub3B0aW9ucy51c2VFYXNpbmcsXCJcIj09PXRoaXMub3B0aW9ucy5zZXBhcmF0b3ImJih0aGlzLm9wdGlvbnMudXNlR3JvdXBpbmc9ITEpLHRoaXMuZWw9XCJzdHJpbmdcIj09dHlwZW9mIHQ/ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodCk6dCx0aGlzLmVsP3RoaXMucHJpbnRWYWx1ZSh0aGlzLnN0YXJ0VmFsKTp0aGlzLmVycm9yPVwiW0NvdW50VXBdIHRhcmdldCBpcyBudWxsIG9yIHVuZGVmaW5lZFwifXJldHVybiB0LnByb3RvdHlwZS5kZXRlcm1pbmVEaXJlY3Rpb25BbmRTbWFydEVhc2luZz1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZmluYWxFbmRWYWw/dGhpcy5maW5hbEVuZFZhbDp0aGlzLmVuZFZhbDt0aGlzLmNvdW50RG93bj10aGlzLnN0YXJ0VmFsPnQ7dmFyIGk9dC10aGlzLnN0YXJ0VmFsO2lmKE1hdGguYWJzKGkpPnRoaXMub3B0aW9ucy5zbWFydEVhc2luZ1RocmVzaG9sZCl7dGhpcy5maW5hbEVuZFZhbD10O3ZhciBhPXRoaXMuY291bnREb3duPzE6LTE7dGhpcy5lbmRWYWw9dCthKnRoaXMub3B0aW9ucy5zbWFydEVhc2luZ0Ftb3VudCx0aGlzLmR1cmF0aW9uPXRoaXMuZHVyYXRpb24vMn1lbHNlIHRoaXMuZW5kVmFsPXQsdGhpcy5maW5hbEVuZFZhbD1udWxsO3RoaXMuZmluYWxFbmRWYWw/dGhpcy51c2VFYXNpbmc9ITE6dGhpcy51c2VFYXNpbmc9dGhpcy5vcHRpb25zLnVzZUVhc2luZ30sdC5wcm90b3R5cGUuc3RhcnQ9ZnVuY3Rpb24odCl7dGhpcy5lcnJvcnx8KHRoaXMuY2FsbGJhY2s9dCx0aGlzLmR1cmF0aW9uPjA/KHRoaXMuZGV0ZXJtaW5lRGlyZWN0aW9uQW5kU21hcnRFYXNpbmcoKSx0aGlzLnBhdXNlZD0hMSx0aGlzLnJBRj1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5jb3VudCkpOnRoaXMucHJpbnRWYWx1ZSh0aGlzLmVuZFZhbCkpfSx0LnByb3RvdHlwZS5wYXVzZVJlc3VtZT1mdW5jdGlvbigpe3RoaXMucGF1c2VkPyh0aGlzLnN0YXJ0VGltZT1udWxsLHRoaXMuZHVyYXRpb249dGhpcy5yZW1haW5pbmcsdGhpcy5zdGFydFZhbD10aGlzLmZyYW1lVmFsLHRoaXMuZGV0ZXJtaW5lRGlyZWN0aW9uQW5kU21hcnRFYXNpbmcoKSx0aGlzLnJBRj1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5jb3VudCkpOmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuckFGKSx0aGlzLnBhdXNlZD0hdGhpcy5wYXVzZWR9LHQucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7Y2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5yQUYpLHRoaXMucGF1c2VkPSEwLHRoaXMucmVzZXREdXJhdGlvbigpLHRoaXMuc3RhcnRWYWw9dGhpcy52YWxpZGF0ZVZhbHVlKHRoaXMub3B0aW9ucy5zdGFydFZhbCksdGhpcy5mcmFtZVZhbD10aGlzLnN0YXJ0VmFsLHRoaXMucHJpbnRWYWx1ZSh0aGlzLnN0YXJ0VmFsKX0sdC5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKHQpe2NhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuckFGKSx0aGlzLnN0YXJ0VGltZT1udWxsLHRoaXMuZW5kVmFsPXRoaXMudmFsaWRhdGVWYWx1ZSh0KSx0aGlzLmVuZFZhbCE9PXRoaXMuZnJhbWVWYWwmJih0aGlzLnN0YXJ0VmFsPXRoaXMuZnJhbWVWYWwsdGhpcy5maW5hbEVuZFZhbHx8dGhpcy5yZXNldER1cmF0aW9uKCksdGhpcy5maW5hbEVuZFZhbD1udWxsLHRoaXMuZGV0ZXJtaW5lRGlyZWN0aW9uQW5kU21hcnRFYXNpbmcoKSx0aGlzLnJBRj1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5jb3VudCkpfSx0LnByb3RvdHlwZS5wcmludFZhbHVlPWZ1bmN0aW9uKHQpe3ZhciBpPXRoaXMuZm9ybWF0dGluZ0ZuKHQpO1wiSU5QVVRcIj09PXRoaXMuZWwudGFnTmFtZT90aGlzLmVsLnZhbHVlPWk6XCJ0ZXh0XCI9PT10aGlzLmVsLnRhZ05hbWV8fFwidHNwYW5cIj09PXRoaXMuZWwudGFnTmFtZT90aGlzLmVsLnRleHRDb250ZW50PWk6dGhpcy5lbC5pbm5lckhUTUw9aX0sdC5wcm90b3R5cGUuZW5zdXJlTnVtYmVyPWZ1bmN0aW9uKHQpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiB0JiYhaXNOYU4odCl9LHQucHJvdG90eXBlLnZhbGlkYXRlVmFsdWU9ZnVuY3Rpb24odCl7dmFyIGk9TnVtYmVyKHQpO3JldHVybiB0aGlzLmVuc3VyZU51bWJlcihpKT9pOih0aGlzLmVycm9yPVwiW0NvdW50VXBdIGludmFsaWQgc3RhcnQgb3IgZW5kIHZhbHVlOiBcIit0LG51bGwpfSx0LnByb3RvdHlwZS5yZXNldER1cmF0aW9uPWZ1bmN0aW9uKCl7dGhpcy5zdGFydFRpbWU9bnVsbCx0aGlzLmR1cmF0aW9uPTFlMypOdW1iZXIodGhpcy5vcHRpb25zLmR1cmF0aW9uKSx0aGlzLnJlbWFpbmluZz10aGlzLmR1cmF0aW9ufSx0fSgpO2V4cG9ydHtDb3VudFVwfTsiLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuNi4wXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgT3BlbkpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMjEtMDMtMDJUMTc6MDhaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGZsYXQgPSBhcnIuZmxhdCA/IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5mbGF0LmNhbGwoIGFycmF5ICk7XG59IDogZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmNvbmNhdC5hcHBseSggW10sIGFycmF5ICk7XG59O1xuXG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG5cdFx0Ly8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG5cdFx0Ly8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cblx0XHQvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG5cdFx0Ly8gU3VwcG9ydDogUXRXZWIgPD0zLjguNSwgV2ViS2l0IDw9NTM0LjM0LCB3a2h0bWx0b3BkZiB0b29sIDw9MC4xMi41XG5cdFx0Ly8gUGx1cyBmb3Igb2xkIFdlYktpdCwgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIGNvbGxlY3Rpb25zXG5cdFx0Ly8gKGUuZy4sIGB0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJkaXZcIikgPT09IFwiZnVuY3Rpb25cImApLiAoZ2gtNDc1Nilcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCIgJiZcblx0XHRcdHR5cGVvZiBvYmouaXRlbSAhPT0gXCJmdW5jdGlvblwiO1xuXHR9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy42LjBcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGV2ZW46IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAoIGkgKyAxICkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdG9kZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBPYmplY3QucHJvdG90eXBlIHBvbGx1dGlvblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggbmFtZSA9PT0gXCJfX3Byb3RvX19cIiB8fCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cdFx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cblx0XHRcdFx0XHQvLyBFbnN1cmUgcHJvcGVyIHR5cGUgZm9yIHRoZSBzb3VyY2UgdmFsdWVcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICYmICFBcnJheS5pc0FycmF5KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0gW107XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggIWNvcHlJc0FycmF5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHt9O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBwcm92aWRlZCBjb250ZXh0OyBmYWxscyBiYWNrIHRvIHRoZSBnbG9iYWwgb25lXG5cdC8vIGlmIG5vdCBzcGVjaWZpZWQuXG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlLCBvcHRpb25zLCBkb2MgKSB7XG5cdFx0RE9NRXZhbCggY29kZSwgeyBub25jZTogb3B0aW9ucyAmJiBvcHRpb25zLm5vbmNlIH0sIGRvYyApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGZsYXQoIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdFx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdH0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IHRvVHlwZSggb2JqICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBvYmogKSB8fCBpc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuNlxuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pzLmZvdW5kYXRpb24vXG4gKlxuICogRGF0ZTogMjAyMS0wMi0xNlxuICovXG4oIGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRub25uYXRpdmVTZWxlY3RvckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoIHt9ICkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoTmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0WyBpIF0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxcIiArXG5cdFx0XCJpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zeW50YXgtMy8jaWRlbnQtdG9rZW4tZGlhZ3JhbVxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCI/fFxcXFxcXFxcW15cXFxcclxcXFxuXFxcXGZdfFtcXFxcdy1dfFteXFwwLVxcXFx4N2ZdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XVxuXHRcdC8vIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblxuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlwiICksXG5cdHJkZXNjZW5kID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwifD5cIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJodG1sID0gL0hUTUwkL2ksXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fFxcXFxcXFxcKFteXFxcXHJcXFxcblxcXFxmXSlcIiwgXCJnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIGVzY2FwZSwgbm9uSGV4ICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlLnNsaWNlKCAxICkgLSAweDEwMDAwO1xuXG5cdFx0cmV0dXJuIG5vbkhleCA/XG5cblx0XHRcdC8vIFN0cmlwIHRoZSBiYWNrc2xhc2ggcHJlZml4IGZyb20gYSBub24taGV4IGVzY2FwZSBzZXF1ZW5jZVxuXHRcdFx0bm9uSGV4IDpcblxuXHRcdFx0Ly8gUmVwbGFjZSBhIGhleGFkZWNpbWFsIGVzY2FwZSBzZXF1ZW5jZSB3aXRoIHRoZSBlbmNvZGVkIFVuaWNvZGUgY29kZSBwb2ludFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMStcblx0XHRcdC8vIEZvciB2YWx1ZXMgb3V0c2lkZSB0aGUgQmFzaWMgTXVsdGlsaW5ndWFsIFBsYW5lIChCTVApLCBtYW51YWxseSBjb25zdHJ1Y3QgYVxuXHRcdFx0Ly8gc3Vycm9nYXRlIHBhaXJcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgK1xuXHRcdFx0XHRjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0aW5EaXNhYmxlZEZpZWxkc2V0ID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmaWVsZHNldFwiO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KCBhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApICksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hOYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbCggZWxzICkgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICggdGFyZ2V0WyBqKysgXSA9IGVsc1sgaSsrIF0gKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAoIG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAoIG0gPSBtYXRjaFsgMSBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKCBlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsgMiBdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIG0gPSBtYXRjaFsgMyBdICkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCAhcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSApICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOCBvbmx5XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdCggbm9kZVR5cGUgIT09IDEgfHwgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkgKSB7XG5cblx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cblx0XHRcdFx0Ly8gcVNBIGNvbnNpZGVycyBlbGVtZW50cyBvdXRzaWRlIGEgc2NvcGluZyByb290IHdoZW4gZXZhbHVhdGluZyBjaGlsZCBvclxuXHRcdFx0XHQvLyBkZXNjZW5kYW50IGNvbWJpbmF0b3JzLCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50LlxuXHRcdFx0XHQvLyBJbiBzdWNoIGNhc2VzLCB3ZSB3b3JrIGFyb3VuZCB0aGUgYmVoYXZpb3IgYnkgcHJlZml4aW5nIGV2ZXJ5IHNlbGVjdG9yIGluIHRoZVxuXHRcdFx0XHQvLyBsaXN0IHdpdGggYW4gSUQgc2VsZWN0b3IgcmVmZXJlbmNpbmcgdGhlIHNjb3BlIGNvbnRleHQuXG5cdFx0XHRcdC8vIFRoZSB0ZWNobmlxdWUgaGFzIHRvIGJlIHVzZWQgYXMgd2VsbCB3aGVuIGEgbGVhZGluZyBjb21iaW5hdG9yIGlzIHVzZWRcblx0XHRcdFx0Ly8gYXMgc3VjaCBzZWxlY3RvcnMgYXJlIG5vdCByZWNvZ25pemVkIGJ5IHF1ZXJ5U2VsZWN0b3JBbGwuXG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHRlY2huaXF1ZS5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdCggcmRlc2NlbmQudGVzdCggc2VsZWN0b3IgKSB8fCByY29tYmluYXRvcnMudGVzdCggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gV2UgY2FuIHVzZSA6c2NvcGUgaW5zdGVhZCBvZiB0aGUgSUQgaGFjayBpZiB0aGUgYnJvd3NlclxuXHRcdFx0XHRcdC8vIHN1cHBvcnRzIGl0ICYgaWYgd2UncmUgbm90IGNoYW5naW5nIHRoZSBjb250ZXh0LlxuXHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAhPT0gY29udGV4dCB8fCAhc3VwcG9ydC5zY29wZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRcdGlmICggKCBuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkgKSApIHtcblx0XHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsICggbmlkID0gZXhwYW5kbyApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbIGkgXSA9ICggbmlkID8gXCIjXCIgKyBuaWQgOiBcIjpzY29wZVwiICkgKyBcIiBcIiArXG5cdFx0XHRcdFx0XHRcdHRvU2VsZWN0b3IoIGdyb3Vwc1sgaSBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoIGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUgKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICk7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoIFwifFwiICksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbIGkgXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5uZXh0U2libGluZyApICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuICggbmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIgKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRpbkRpc2FibGVkRmllbGRzZXQoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbICggaiA9IG1hdGNoSW5kZXhlc1sgaSBdICkgXSApIHtcblx0XHRcdFx0XHRzZWVkWyBqIF0gPSAhKCBtYXRjaGVzWyBqIF0gPSBzZWVkWyBqIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSApO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5hbWVzcGFjZSA9IGVsZW0gJiYgZWxlbS5uYW1lc3BhY2VVUkksXG5cdFx0ZG9jRWxlbSA9IGVsZW0gJiYgKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApLmRvY3VtZW50RWxlbWVudDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PThcblx0Ly8gQXNzdW1lIEhUTUwgd2hlbiBkb2N1bWVudEVsZW1lbnQgZG9lc24ndCB5ZXQgZXhpc3QsIHN1Y2ggYXMgaW5zaWRlIGxvYWRpbmcgaWZyYW1lc1xuXHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvNDgzM1xuXHRyZXR1cm4gIXJodG1sLnRlc3QoIG5hbWVzcGFjZSB8fCBkb2NFbGVtICYmIGRvY0VsZW0ubm9kZU5hbWUgfHwgXCJIVE1MXCIgKTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIGRvYyA9PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCtcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPSBkb2N1bWVudCAmJlxuXHRcdCggc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcgKSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBDaHJvbWUgPD0xNiAtIDI1IG9ubHksIEZpcmVmb3ggPD0zLjYgLSAzMSBvbmx5LFxuXHQvLyBTYWZhcmkgNCAtIDUgb25seSwgT3BlcmEgPD0xMS42IC0gMTIueCBvbmx5XG5cdC8vIElFL0VkZ2UgJiBvbGRlciBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSA6c2NvcGUgcHNldWRvLWNsYXNzLlxuXHQvLyBTdXBwb3J0OiBTYWZhcmkgNi4wIG9ubHlcblx0Ly8gU2FmYXJpIDYuMCBzdXBwb3J0cyA6c2NvcGUgYnV0IGl0J3MgYW4gYWxpYXMgb2YgOnJvb3QgdGhlcmUuXG5cdHN1cHBvcnQuc2NvcGUgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblx0XHRyZXR1cm4gdHlwZW9mIGVsLnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdCFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpzY29wZSBmaWVsZHNldCBkaXZcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZSggXCJjbGFzc05hbWVcIiApO1xuXHR9ICk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoIFwiXCIgKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwiKlwiICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcImlkXCIgKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyWyBcIklEXCIgXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1zWyBpKysgXSApICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbIFwiVEFHXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kWyBcIkNMQVNTXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoIHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkgKSApIHtcblxuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0dmFyIGlucHV0O1xuXG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW3NlbGVjdGVkXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIn49XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0XHQvLyBJRSAxMS9FZGdlIGRvbid0IGZpbmQgZWxlbWVudHMgb24gYSBgW25hbWU9JyddYCBxdWVyeSBpbiBzb21lIGNhc2VzLlxuXHRcdFx0Ly8gQWRkaW5nIGEgdGVtcG9yYXJ5IGF0dHJpYnV0ZSB0byB0aGUgZG9jdW1lbnQgYmVmb3JlIHRoZSBzZWxlY3Rpb24gd29ya3Ncblx0XHRcdC8vIGFyb3VuZCB0aGUgaXNzdWUuXG5cdFx0XHQvLyBJbnRlcmVzdGluZ2x5LCBJRSAxMCAmIG9sZGVyIGRvbid0IHNlZW0gdG8gaGF2ZSB0aGUgaXNzdWUuXG5cdFx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJcIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIio9XCIgK1xuXHRcdFx0XHRcdHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpjaGVja2VkXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjpjaGVja2VkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIi4jLitbK35dXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTMuNiAtIDUgb25seVxuXHRcdFx0Ly8gT2xkIEZpcmVmb3ggZG9lc24ndCB0aHJvdyBvbiBhIGJhZGx5LWVzY2FwZWQgaWRlbnRpZmllci5cblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiXFxcXFxcZlwiICk7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbXFxcXHJcXFxcblxcXFxmXVwiICk7XG5cdFx0fSApO1xuXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT1kXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjplbmFibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZGlzYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBPcGVyYSAxMCAtIDExIG9ubHlcblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIiosOnhcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLC4qOlwiICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAoIG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvciApICkgKSApIHtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKCBcInxcIiApICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oIFwifFwiICkgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkgKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGIgPSBiLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoICFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUgKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBhID09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYSApICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGIgPT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRjb250YWlucyggcHJlZmVycmVkRG9jLCBiICkgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRyZXR1cm4gYSA9PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwWyBpIF0gPT09IGJwWyBpIF0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbIGkgXSwgYnBbIGkgXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRhcFsgaSBdID09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwWyBpIF0gPT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblxuXHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBleHByLCB0cnVlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KCB2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSApICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoIHNlbCArIFwiXCIgKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoICggbm9kZSA9IGVsZW1bIGkrKyBdICkgKSB7XG5cblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFsgMyBdID0gKCBtYXRjaFsgMyBdIHx8IG1hdGNoWyA0IF0gfHxcblx0XHRcdFx0bWF0Y2hbIDUgXSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMiBdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWyAzIF0gPSBcIiBcIiArIG1hdGNoWyAzIF0gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMSBdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWyA0IF0gPSArKCBtYXRjaFsgNCBdID9cblx0XHRcdFx0XHRtYXRjaFsgNSBdICsgKCBtYXRjaFsgNiBdIHx8IDEgKSA6XG5cdFx0XHRcdFx0MiAqICggbWF0Y2hbIDMgXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWyA1IF0gPSArKCAoIG1hdGNoWyA3IF0gKyBtYXRjaFsgOCBdICkgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbIDYgXSAmJiBtYXRjaFsgMiBdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwclsgXCJDSElMRFwiIF0udGVzdCggbWF0Y2hbIDAgXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IG1hdGNoWyA0IF0gfHwgbWF0Y2hbIDUgXSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KCBleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSApICYmXG5cblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdCggZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoICkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KCBwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XHRcdFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApICkgJiYgY2xhc3NDYWNoZShcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoXG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8XG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHxcblx0XHRcdFx0XHRcdFx0XHRcIlwiXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBfYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gbm9kZVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblxuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGkgXSA9ICEoIG1hdGNoZXNbIGkgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QoIGxhbmcgfHwgXCJcIiApICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJ4bWw6bGFuZ1wiICkgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoIFwibGFuZ1wiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoICggZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSApICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJlxuXHRcdFx0XHQoICFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpICkgJiZcblx0XHRcdFx0ISEoIGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXggKTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCApIHx8XG5cdFx0XHRcdCggbm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkICk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbIFwiZW1wdHlcIiBdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKCBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgKSA9PSBudWxsIHx8XG5cdFx0XHRcdFx0YXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9ICksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9ICksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0gKSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID9cblx0XHRcdFx0YXJndW1lbnQgKyBsZW5ndGggOlxuXHRcdFx0XHRhcmd1bWVudCA+IGxlbmd0aCA/XG5cdFx0XHRcdFx0bGVuZ3RoIDpcblx0XHRcdFx0XHRhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbIFwibnRoXCIgXSA9IEV4cHIucHNldWRvc1sgXCJlcVwiIF07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8ICggbWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFsgMCBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICggdG9rZW5zID0gW10gKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAoIG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWyAwIF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0gKTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoICggbWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApICkgJiYgKCAhcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdCggbWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkgKSApICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbIGkgXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoIGVsZW1bIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoICggb2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0gKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAoIG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKCBuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1sgaSBdKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWyAwIF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbIGkgXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoXG5cdFx0XHRcdHNlbGVjdG9yIHx8IFwiKlwiLFxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LFxuXHRcdFx0XHRbXVxuXHRcdFx0KSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoIGVsZW0gPSB0ZW1wWyBpIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwWyBpIF0gXSA9ICEoIG1hdGNoZXJJblsgcG9zdE1hcFsgaSBdIF0gPSBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goICggbWF0Y2hlckluWyBpIF0gPSBlbGVtICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKCBtYXRjaGVyT3V0ID0gW10gKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgJiZcblx0XHRcdFx0XHRcdCggdGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbIGkgXSApID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbIHRlbXAgXSA9ICEoIHJlc3VsdHNbIHRlbXAgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDAgXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlWyBcIiBcIiBdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoIGNoZWNrQ29udGV4dCA9IGNvbnRleHQgKS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggbWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaSBdLnR5cGUgXSApICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyICkgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbIGkgXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1sgaSBdLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaiBdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHR0b2tlbnNcblx0XHRcdFx0XHRcdC5zbGljZSggMCwgaSAtIDEgKVxuXHRcdFx0XHRcdFx0LmNvbmNhdCggeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0gKVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKCB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFsgXCJUQUdcIiBdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9ICggZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEgKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblxuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0gKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IHNldE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISggdW5tYXRjaGVkWyBpIF0gfHwgc2V0TWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFsgaSBdID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbIGkgXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZShcblx0XHRcdHNlbGVjdG9yLFxuXHRcdFx0bWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzIClcblx0XHQpO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoIHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IgKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAoIHRva2VuID0gdG9rZW5zWyAwIF0gKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAxIF0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbIFwiSURcIiBdKCB0b2tlbi5tYXRjaGVzWyAwIF1cblx0XHRcdFx0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksIGNvbnRleHQgKSB8fCBbXSApWyAwIF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByWyBcIm5lZWRzQ29udGV4dFwiIF0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbIGkgXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAoIHR5cGUgPSB0b2tlbi50eXBlICkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICggZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdICkgKSB7XG5cblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKCBzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWyAwIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbIDAgXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0XG5cdFx0XHRcdCkgKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdCggXCJcIiApLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oIFwiXCIgKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKSApICYgMTtcbn0gKTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJocmVmXCIgKSA9PT0gXCIjXCI7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIF9uYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0gKTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoIFwiZGlzYWJsZWRcIiApID09IG51bGw7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9ICk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0gKSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG5cdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRpZiAoIGVsZW0uY29udGVudERvY3VtZW50ICE9IG51bGwgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErXG5cdFx0XHQvLyA8b2JqZWN0PiBlbGVtZW50cyB3aXRoIG5vIGBkYXRhYCBhdHRyaWJ1dGUgaGFzIGFuIG9iamVjdFxuXHRcdFx0Ly8gYGNvbnRlbnREb2N1bWVudGAgd2l0aCBhIGBudWxsYCBwcm90b3R5cGUuXG5cdFx0XHRnZXRQcm90byggZWxlbS5jb250ZW50RG9jdW1lbnQgKSApIHtcblxuXHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuXHRcdC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuXHRcdC8vIGRvbid0IHN1cHBvcnQgaXQuXG5cdFx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG5cdFx0XHRlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBfaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIHByaW1hcnkgRGVmZXJyZWRcblx0XHRcdHByaW1hcnkgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0cHJpbWFyeS5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgcHJpbWFyeS5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBwcmltYXJ5LnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIHByaW1hcnkuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHByaW1hcnkudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgcHJpbWFyeS5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcHJpbWFyeS5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIF9rZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIF9hbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cblx0dmFyIGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y29tcG9zZWQgPSB7IGNvbXBvc2VkOiB0cnVlIH07XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4KywgaU9TIDEwLjAgLSAxMC4yIG9ubHlcblx0Ly8gQ2hlY2sgYXR0YWNobWVudCBhY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyaWVzIHdoZW4gcG9zc2libGUgKGdoLTM1MDQpXG5cdC8vIFN1cHBvcnQ6IGlPUyAxMC4wLTEwLjIgb25seVxuXHQvLyBFYXJseSBpT1MgMTAgdmVyc2lvbnMgc3VwcG9ydCBgYXR0YWNoU2hhZG93YCBidXQgbm90IGBnZXRSb290Tm9kZWAsXG5cdC8vIGxlYWRpbmcgdG8gZXJyb3JzLiBXZSBuZWVkIHRvIGNoZWNrIGZvciBgZ2V0Um9vdE5vZGVgLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSApIHtcblx0XHRpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSB8fFxuXHRcdFx0XHRlbGVtLmdldFJvb3ROb2RlKCBjb21wb3NlZCApID09PSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0fTtcblx0fVxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gZWxlbS5ub2RlVHlwZSAmJlxuXHRcdFx0KCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0Ly8gSUUgPD05IHJlcGxhY2VzIDxvcHRpb24+IHRhZ3Mgd2l0aCB0aGVpciBjb250ZW50cyB3aGVuIGluc2VydGVkIG91dHNpZGUgb2Zcblx0Ly8gdGhlIHNlbGVjdCBlbGVtZW50LlxuXHRkaXYuaW5uZXJIVE1MID0gXCI8b3B0aW9uPjwvb3B0aW9uPlwiO1xuXHRzdXBwb3J0Lm9wdGlvbiA9ICEhZGl2Lmxhc3RDaGlsZDtcbn0gKSgpO1xuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbmlmICggIXN1cHBvcnQub3B0aW9uICkge1xuXHR3cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb24gPSBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF07XG59XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgYXR0YWNoZWQsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGF0dGFjaGVkID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBhdHRhY2hlZCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxudmFyIHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuLy8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXMsIGV4Y2VwdCB3aGVuIHRoZXkgYXJlIG5vLW9wLlxuLy8gU28gZXhwZWN0IGZvY3VzIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSBhY3RpdmUsXG4vLyBhbmQgYmx1ciB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIG5vdCBhbHJlYWR5IGFjdGl2ZS5cbi8vIChmb2N1cyBhbmQgYmx1ciBhcmUgYWx3YXlzIHN5bmNocm9ub3VzIGluIG90aGVyIHN1cHBvcnRlZCBicm93c2Vycyxcbi8vIHRoaXMganVzdCBkZWZpbmVzIHdoZW4gd2UgY2FuIGNvdW50IG9uIGl0KS5cbmZ1bmN0aW9uIGV4cGVjdFN5bmMoIGVsZW0sIHR5cGUgKSB7XG5cdHJldHVybiAoIGVsZW0gPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgKSA9PT0gKCB0eXBlID09PSBcImZvY3VzXCIgKTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIEFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiB0aHJvdyB1bmV4cGVjdGVkbHlcbi8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM5M1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBPbmx5IGF0dGFjaCBldmVudHMgdG8gb2JqZWN0cyB0aGF0IGFjY2VwdCBkYXRhXG5cdFx0aWYgKCAhYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IE9iamVjdC5jcmVhdGUoIG51bGwgKTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblxuXHRcdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICksXG5cblx0XHRcdGhhbmRsZXJzID0gKFxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsIClcblx0XHRcdClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZSBldmVudCBpcyBuYW1lc3BhY2VkLCB0aGVuIGVhY2ggaGFuZGxlciBpcyBvbmx5IGludm9rZWQgaWYgaXQgaXNcblx0XHRcdFx0Ly8gc3BlY2lhbGx5IHVuaXZlcnNhbCBvciBpdHMgbmFtZXNwYWNlcyBhcmUgYSBzdXBlcnNldCBvZiB0aGUgZXZlbnQncy5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBoYW5kbGVPYmoubmFtZXNwYWNlID09PSBmYWxzZSB8fFxuXHRcdFx0XHRcdGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IHRvIGVuc3VyZSBjb3JyZWN0IHN0YXRlIGZvciBjaGVja2FibGUgaW5wdXRzXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHQvLyBkYXRhUHJpdi5zZXQoIGVsLCBcImNsaWNrXCIsIC4uLiApXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIsIHJldHVyblRydWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0sXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyaW5nIGEgY2xpY2tcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgc3VwcHJlc3MgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHQvLyBBbHNvIHByZXZlbnQgaXQgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZSBhIGxldmVyYWdlZCBuYXRpdmUtZXZlbnQgc3RhY2tcblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cdFx0XHRcdHJldHVybiByY2hlY2thYmxlVHlwZS50ZXN0KCB0YXJnZXQudHlwZSApICYmXG5cdFx0XHRcdFx0dGFyZ2V0LmNsaWNrICYmIG5vZGVOYW1lKCB0YXJnZXQsIFwiaW5wdXRcIiApICYmXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0YXJnZXQsIFwiY2xpY2tcIiApIHx8XG5cdFx0XHRcdFx0bm9kZU5hbWUoIHRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBFbnN1cmUgdGhlIHByZXNlbmNlIG9mIGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgaGFuZGxlcyBtYW51YWxseS10cmlnZ2VyZWRcbi8vIHN5bnRoZXRpYyBldmVudHMgYnkgaW50ZXJydXB0aW5nIHByb2dyZXNzIHVudGlsIHJlaW52b2tlZCBpbiByZXNwb25zZSB0b1xuLy8gKm5hdGl2ZSogZXZlbnRzIHRoYXQgaXQgZmlyZXMgZGlyZWN0bHksIGVuc3VyaW5nIHRoYXQgc3RhdGUgY2hhbmdlcyBoYXZlXG4vLyBhbHJlYWR5IG9jY3VycmVkIGJlZm9yZSBvdGhlciBsaXN0ZW5lcnMgYXJlIGludm9rZWQuXG5mdW5jdGlvbiBsZXZlcmFnZU5hdGl2ZSggZWwsIHR5cGUsIGV4cGVjdFN5bmMgKSB7XG5cblx0Ly8gTWlzc2luZyBleHBlY3RTeW5jIGluZGljYXRlcyBhIHRyaWdnZXIgY2FsbCwgd2hpY2ggbXVzdCBmb3JjZSBzZXR1cCB0aHJvdWdoIGpRdWVyeS5ldmVudC5hZGRcblx0aWYgKCAhZXhwZWN0U3luYyApIHtcblx0XHRpZiAoIGRhdGFQcml2LmdldCggZWwsIHR5cGUgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHJldHVyblRydWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGNvbnRyb2xsZXIgYXMgYSBzcGVjaWFsIHVuaXZlcnNhbCBoYW5kbGVyIGZvciBhbGwgZXZlbnQgbmFtZXNwYWNlc1xuXHRkYXRhUHJpdi5zZXQoIGVsLCB0eXBlLCBmYWxzZSApO1xuXHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwge1xuXHRcdG5hbWVzcGFjZTogZmFsc2UsXG5cdFx0aGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIG5vdEFzeW5jLCByZXN1bHQsXG5cdFx0XHRcdHNhdmVkID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdGlmICggKCBldmVudC5pc1RyaWdnZXIgJiAxICkgJiYgdGhpc1sgdHlwZSBdICkge1xuXG5cdFx0XHRcdC8vIEludGVycnVwdCBwcm9jZXNzaW5nIG9mIHRoZSBvdXRlciBzeW50aGV0aWMgLnRyaWdnZXIoKWVkIGV2ZW50XG5cdFx0XHRcdC8vIFNhdmVkIGRhdGEgc2hvdWxkIGJlIGZhbHNlIGluIHN1Y2ggY2FzZXMsIGJ1dCBtaWdodCBiZSBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0XG5cdFx0XHRcdC8vIGZyb20gYW4gYXN5bmMgbmF0aXZlIGhhbmRsZXIgKGdoLTQzNTApXG5cdFx0XHRcdGlmICggIXNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGFyZ3VtZW50cyBmb3IgdXNlIHdoZW4gaGFuZGxpbmcgdGhlIGlubmVyIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRcdC8vIFRoZXJlIHdpbGwgYWx3YXlzIGJlIGF0IGxlYXN0IG9uZSBhcmd1bWVudCAoYW4gZXZlbnQgb2JqZWN0KSwgc28gdGhpcyBhcnJheVxuXHRcdFx0XHRcdC8vIHdpbGwgbm90IGJlIGNvbmZ1c2VkIHdpdGggYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdC5cblx0XHRcdFx0XHRzYXZlZCA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgc2F2ZWQgKTtcblxuXHRcdFx0XHRcdC8vIFRyaWdnZXIgdGhlIG5hdGl2ZSBldmVudCBhbmQgY2FwdHVyZSBpdHMgcmVzdWx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0Ly8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXNcblx0XHRcdFx0XHRub3RBc3luYyA9IGV4cGVjdFN5bmMoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHR0aGlzWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgfHwgbm90QXN5bmMgKSB7XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGZhbHNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlc3VsdCA9IHt9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhbmNlbCB0aGUgb3V0ZXIgc3ludGhldGljIGV2ZW50XG5cdFx0XHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA4Nitcblx0XHRcdFx0XHRcdC8vIEluIENocm9tZSwgaWYgYW4gZWxlbWVudCBoYXZpbmcgYSBmb2N1c291dCBoYW5kbGVyIGlzIGJsdXJyZWQgYnlcblx0XHRcdFx0XHRcdC8vIGNsaWNraW5nIG91dHNpZGUgb2YgaXQsIGl0IGludm9rZXMgdGhlIGhhbmRsZXIgc3luY2hyb25vdXNseS4gSWZcblx0XHRcdFx0XHRcdC8vIHRoYXQgaGFuZGxlciBjYWxscyBgLnJlbW92ZSgpYCBvbiB0aGUgZWxlbWVudCwgdGhlIGRhdGEgaXMgY2xlYXJlZCxcblx0XHRcdFx0XHRcdC8vIGxlYXZpbmcgYHJlc3VsdGAgdW5kZWZpbmVkLiBXZSBuZWVkIHRvIGd1YXJkIGFnYWluc3QgdGhpcy5cblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQgJiYgcmVzdWx0LnZhbHVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGlzIGlzIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCBmb3IgYW4gZXZlbnQgd2l0aCBhIGJ1YmJsaW5nIHN1cnJvZ2F0ZVxuXHRcdFx0XHQvLyAoZm9jdXMgb3IgYmx1ciksIGFzc3VtZSB0aGF0IHRoZSBzdXJyb2dhdGUgYWxyZWFkeSBwcm9wYWdhdGVkIGZyb20gdHJpZ2dlcmluZyB0aGVcblx0XHRcdFx0Ly8gbmF0aXZlIGV2ZW50IGFuZCBwcmV2ZW50IHRoYXQgZnJvbSBoYXBwZW5pbmcgYWdhaW4gaGVyZS5cblx0XHRcdFx0Ly8gVGhpcyB0ZWNobmljYWxseSBnZXRzIHRoZSBvcmRlcmluZyB3cm9uZyB3LnIudC4gdG8gYC50cmlnZ2VyKClgIChpbiB3aGljaCB0aGVcblx0XHRcdFx0Ly8gYnViYmxpbmcgc3Vycm9nYXRlIHByb3BhZ2F0ZXMgKmFmdGVyKiB0aGUgbm9uLWJ1YmJsaW5nIGJhc2UpLCBidXQgdGhhdCBzZWVtc1xuXHRcdFx0XHQvLyBsZXNzIGJhZCB0aGFuIGR1cGxpY2F0aW9uLlxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge30gKS5kZWxlZ2F0ZVR5cGUgKSB7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIG5hdGl2ZSBldmVudCB0cmlnZ2VyZWQgYWJvdmUsIGV2ZXJ5dGhpbmcgaXMgbm93IGluIG9yZGVyXG5cdFx0XHQvLyBGaXJlIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCB3aXRoIHRoZSBvcmlnaW5hbCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyAuLi5hbmQgY2FwdHVyZSB0aGUgcmVzdWx0XG5cdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwge1xuXHRcdFx0XHRcdHZhbHVlOiBqUXVlcnkuZXZlbnQudHJpZ2dlcihcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0XHQvLyBFeHRlbmQgd2l0aCB0aGUgcHJvdG90eXBlIHRvIHJlc2V0IHRoZSBhYm92ZSBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggc2F2ZWRbIDAgXSwgalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSApLFxuXHRcdFx0XHRcdFx0c2F2ZWQuc2xpY2UoIDEgKSxcblx0XHRcdFx0XHRcdHRoaXNcblx0XHRcdFx0XHQpXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBBYm9ydCBoYW5kbGluZyBvZiB0aGUgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNvZGU6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXHR3aGljaDogdHJ1ZVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxualF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIHR5cGUsIGRlbGVnYXRlVHlwZSApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSA9IHtcblxuXHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJmb2N1c1wiLCAuLi4gKVxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImJsdXJcIiwgLi4uIClcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlLCBleHBlY3RTeW5jICk7XG5cblx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBTdXBwcmVzcyBuYXRpdmUgZm9jdXMgb3IgYmx1ciBhcyBpdCdzIGFscmVhZHkgYmVpbmcgZmlyZWRcblx0XHQvLyBpbiBsZXZlcmFnZU5hdGl2ZS5cblx0XHRfZGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmdldCggc3JjICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRlc3QsIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBmbGF0KCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICYmICggbm9kZS50eXBlIHx8IFwiXCIgKS50b0xvd2VyQ2FzZSgpICAhPT0gXCJtb2R1bGVcIiApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCAmJiAhbm9kZS5ub01vZHVsZSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRub25jZTogbm9kZS5ub25jZSB8fCBub2RlLmdldEF0dHJpYnV0ZSggXCJub25jZVwiIClcblx0XHRcdFx0XHRcdFx0XHR9LCBkb2MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgbm9kZSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBpc0F0dGFjaGVkKCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbDtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjayApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmNhbGwoIGVsZW0gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxudmFyIHJib3hTdHlsZSA9IG5ldyBSZWdFeHAoIGNzc0V4cGFuZC5qb2luKCBcInxcIiApLCBcImlcIiApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7XCIgK1xuXHRcdFx0XCJtYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIjtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDtcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ3aWR0aDo2MCU7dG9wOjElXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUubWFyZ2luTGVmdCApID09PSAxMjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIFNhZmFyaSA8PTkuMSAtIDEwLjEsIGlPUyA8PTcuMCAtIDkuM1xuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5yaWdodCA9IFwiNjAlXCI7XG5cdFx0cGl4ZWxCb3hTdHlsZXNWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLnJpZ2h0ICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBEZXRlY3QgbWlzcmVwb3J0aW5nIG9mIGNvbnRlbnQgZGltZW5zaW9ucyBmb3IgYm94LXNpemluZzpib3JkZXItYm94IGVsZW1lbnRzXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLndpZHRoICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG92ZXJmbG93OnNjcm9sbCBzY3Jld2luZXNzIChnaC0zNjk5KVxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTY0XG5cdFx0Ly8gRG9uJ3QgZ2V0IHRyaWNrZWQgd2hlbiB6b29tIGFmZmVjdHMgb2Zmc2V0V2lkdGggKGdoLTQwMjkpXG5cdFx0ZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdHNjcm9sbGJveFNpemVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdi5vZmZzZXRXaWR0aCAvIDMgKSA9PT0gMTI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm91bmRQaXhlbE1lYXN1cmVzKCBtZWFzdXJlICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KCBtZWFzdXJlICkgKTtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgc2Nyb2xsYm94U2l6ZVZhbCwgcGl4ZWxCb3hTdHlsZXNWYWwsXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fSxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEJlaGF2aW9yIGluIElFIDkgaXMgbW9yZSBzdWJ0bGUgdGhhbiBpbiBuZXdlciB2ZXJzaW9ucyAmIGl0IHBhc3Nlc1xuXHRcdC8vIHNvbWUgdmVyc2lvbnMgb2YgdGhpcyB0ZXN0OyBtYWtlIHN1cmUgbm90IHRvIG1ha2UgaXQgcGFzcyB0aGVyZSFcblx0XHQvL1xuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNzArXG5cdFx0Ly8gT25seSBGaXJlZm94IGluY2x1ZGVzIGJvcmRlciB3aWR0aHNcblx0XHQvLyBpbiBjb21wdXRlZCBkaW1lbnNpb25zLiAoZ2gtNDUyOSlcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGFibGUsIHRyLCB0ckNoaWxkLCB0clN0eWxlO1xuXHRcdFx0aWYgKCByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidGFibGVcIiApO1xuXHRcdFx0XHR0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidHJcIiApO1xuXHRcdFx0XHR0ckNoaWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdFx0XHRcdHRhYmxlLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7Ym9yZGVyLWNvbGxhcHNlOnNlcGFyYXRlXCI7XG5cdFx0XHRcdHRyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjoxcHggc29saWRcIjtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgODYrXG5cdFx0XHRcdC8vIEhlaWdodCBzZXQgdGhyb3VnaCBjc3NUZXh0IGRvZXMgbm90IGdldCBhcHBsaWVkLlxuXHRcdFx0XHQvLyBDb21wdXRlZCBoZWlnaHQgdGhlbiBjb21lcyBiYWNrIGFzIDAuXG5cdFx0XHRcdHRyLnN0eWxlLmhlaWdodCA9IFwiMXB4XCI7XG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuaGVpZ2h0ID0gXCI5cHhcIjtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDggQ2hyb21lIDg2K1xuXHRcdFx0XHQvLyBJbiBvdXIgYm9keUJhY2tncm91bmQuaHRtbCBpZnJhbWUsXG5cdFx0XHRcdC8vIGRpc3BsYXkgZm9yIGFsbCBkaXYgZWxlbWVudHMgaXMgc2V0IHRvIFwiaW5saW5lXCIsXG5cdFx0XHRcdC8vIHdoaWNoIGNhdXNlcyBhIHByb2JsZW0gb25seSBpbiBBbmRyb2lkIDggQ2hyb21lIDg2LlxuXHRcdFx0XHQvLyBFbnN1cmluZyB0aGUgZGl2IGlzIGRpc3BsYXk6IGJsb2NrXG5cdFx0XHRcdC8vIGdldHMgYXJvdW5kIHRoaXMgaXNzdWUuXG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnRcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRhYmxlIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyQ2hpbGQgKTtcblxuXHRcdFx0XHR0clN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIHRyICk7XG5cdFx0XHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID0gKCBwYXJzZUludCggdHJTdHlsZS5oZWlnaHQsIDEwICkgK1xuXHRcdFx0XHRcdHBhcnNlSW50KCB0clN0eWxlLmJvcmRlclRvcFdpZHRoLCAxMCApICtcblx0XHRcdFx0XHRwYXJzZUludCggdHJTdHlsZS5ib3JkZXJCb3R0b21XaWR0aCwgMTAgKSApID09PSB0ci5vZmZzZXRIZWlnaHQ7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCB0YWJsZSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCAjMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWlzQXR0YWNoZWQoIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxCb3hTdHlsZXMoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcmJveFN0eWxlLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyIGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZSxcblx0dmVuZG9yUHJvcHMgPSB7fTtcblxuLy8gUmV0dXJuIGEgdmVuZG9yLXByZWZpeGVkIHByb3BlcnR5IG9yIHVuZGVmaW5lZFxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHBvdGVudGlhbGx5LW1hcHBlZCBqUXVlcnkuY3NzUHJvcHMgb3IgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgZmluYWwgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSB8fCB2ZW5kb3JQcm9wc1sgbmFtZSBdO1xuXG5cdGlmICggZmluYWwgKSB7XG5cdFx0cmV0dXJuIGZpbmFsO1xuXHR9XG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cdHJldHVybiB2ZW5kb3JQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9O1xuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggX2VsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblxuXHRcdC8vIElmIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyB1bmtub3duLCB0aGVuIHdlIGNhbid0IGRldGVybWluZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyXG5cdFx0Ly8gVXNlIGFuIGV4cGxpY2l0IHplcm8gdG8gYXZvaWQgTmFOIChnaC0zOTY0KVxuXHRcdCkgKSB8fCAwO1xuXHR9XG5cblx0cmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtNDMyMikuXG5cdFx0Ly8gRmFrZSBjb250ZW50LWJveCB1bnRpbCB3ZSBrbm93IGl0J3MgbmVlZGVkIHRvIGtub3cgdGhlIHRydWUgdmFsdWUuXG5cdFx0Ym94U2l6aW5nTmVlZGVkID0gIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCBleHRyYSxcblx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3gsXG5cblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0b2Zmc2V0UHJvcCA9IFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICk7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBVc2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciB3aGVuIGJveCBzaXppbmcgaXMgdW5yZWxpYWJsZS5cblx0Ly8gSW4gdGhvc2UgY2FzZXMsIHRoZSBjb21wdXRlZCB2YWx1ZSBjYW4gYmUgdHJ1c3RlZCB0byBiZSBib3JkZXItYm94LlxuXHRpZiAoICggIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSAmJiBpc0JvcmRlckJveCB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTAgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEludGVyZXN0aW5nbHksIGluIHNvbWUgY2FzZXMgSUUgOSBkb2Vzbid0IHN1ZmZlciBmcm9tIHRoaXMgaXNzdWUuXG5cdFx0IXN1cHBvcnQucmVsaWFibGVUckRpbWVuc2lvbnMoKSAmJiBub2RlTmFtZSggZWxlbSwgXCJ0clwiICkgfHxcblxuXHRcdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHRcdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0XHR2YWwgPT09IFwiYXV0b1wiIHx8XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0XHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIG1pc3JlcG9ydGVkIGlubGluZSBkaW1lbnNpb25zIChnaC0zNjAyKVxuXHRcdCFwYXJzZUZsb2F0KCB2YWwgKSAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImlubGluZVwiICkgJiZcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyB2aXNpYmxlICYgY29ubmVjdGVkXG5cdFx0ZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHRcdC8vIFdoZXJlIGF2YWlsYWJsZSwgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGFwcHJveGltYXRlIGJvcmRlciBib3ggZGltZW5zaW9ucy5cblx0XHQvLyBXaGVyZSBub3QgYXZhaWxhYmxlIChlLmcuLCBTVkcpLCBhc3N1bWUgdW5yZWxpYWJsZSBib3gtc2l6aW5nIGFuZCBpbnRlcnByZXQgdGhlXG5cdFx0Ly8gcmV0cmlldmVkIHZhbHVlIGFzIGEgY29udGVudCBib3ggZGltZW5zaW9uLlxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBvZmZzZXRQcm9wIGluIGVsZW07XG5cdFx0aWYgKCB2YWx1ZUlzQm9yZGVyQm94ICkge1xuXHRcdFx0dmFsID0gZWxlbVsgb2Zmc2V0UHJvcCBdO1xuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiIGFuZCBhdXRvXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gQWRqdXN0IGZvciB0aGUgZWxlbWVudCdzIGJveCBtb2RlbFxuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdGVsZW0sXG5cdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzLFxuXG5cdFx0XHQvLyBQcm92aWRlIHRoZSBjdXJyZW50IGNvbXB1dGVkIHNpemUgdG8gcmVxdWVzdCBzY3JvbGwgZ3V0dGVyIGNhbGN1bGF0aW9uIChnaC0zNTg5KVxuXHRcdFx0dmFsXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJncmlkQXJlYVwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtbkVuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblN0YXJ0XCI6IHRydWUsXG5cdFx0XCJncmlkUm93XCI6IHRydWUsXG5cdFx0XCJncmlkUm93RW5kXCI6IHRydWUsXG5cdFx0XCJncmlkUm93U3RhcnRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdC8vIFRoZSBpc0N1c3RvbVByb3AgY2hlY2sgY2FuIGJlIHJlbW92ZWQgaW4galF1ZXJ5IDQuMCB3aGVuIHdlIG9ubHkgYXV0by1hcHBlbmRcblx0XHRcdC8vIFwicHhcIiB0byBhIGZldyBoYXJkY29kZWQgdmFsdWVzLlxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIF9pLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHRcdFx0Ly8gT25seSByZWFkIHN0eWxlcy5wb3NpdGlvbiBpZiB0aGUgdGVzdCBoYXMgYSBjaGFuY2UgdG8gZmFpbFxuXHRcdFx0XHQvLyB0byBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LlxuXHRcdFx0XHRzY3JvbGxib3hTaXplQnVnZ3kgPSAhc3VwcG9ydC5zY3JvbGxib3hTaXplKCkgJiZcblx0XHRcdFx0XHRzdHlsZXMucG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIixcblxuXHRcdFx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC0zOTkxKVxuXHRcdFx0XHRib3hTaXppbmdOZWVkZWQgPSBzY3JvbGxib3hTaXplQnVnZ3kgfHwgZXh0cmEsXG5cdFx0XHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSA/XG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcdGRpbWVuc2lvbixcblx0XHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdFx0aXNCb3JkZXJCb3gsXG5cdFx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0XHQpIDpcblx0XHRcdFx0XHQwO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB1bnJlbGlhYmxlIGJvcmRlci1ib3ggZGltZW5zaW9ucyBieSBjb21wYXJpbmcgb2Zmc2V0KiB0byBjb21wdXRlZCBhbmRcblx0XHRcdC8vIGZha2luZyBhIGNvbnRlbnQtYm94IHRvIGdldCBib3JkZXIgYW5kIHBhZGRpbmcgKGdoLTM2OTkpXG5cdFx0XHRpZiAoIGlzQm9yZGVyQm94ICYmIHNjcm9sbGJveFNpemVCdWdneSApIHtcblx0XHRcdFx0c3VidHJhY3QgLT0gTWF0aC5jZWlsKFxuXHRcdFx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCggc3R5bGVzWyBkaW1lbnNpb24gXSApIC1cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgXCJib3JkZXJcIiwgZmFsc2UsIHN0eWxlcyApIC1cblx0XHRcdFx0XHQwLjVcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIGRpbWVuc2lvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoIHByZWZpeCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbS5zdHlsZVsgZmluYWxQcm9wTmFtZSggdHdlZW4ucHJvcCApIF0gIT0gbnVsbCApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0gY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCB2YWx1ZUlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fTtcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLCBsYXN0RWxlbWVudCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gbGFzdEVsZW1lbnQgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRsYXN0RWxlbWVudCA9IGN1cjtcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApIClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIEhhbmRsZTogcmVndWxhciBub2RlcyAodmlhIGB0aGlzLm93bmVyRG9jdW1lbnRgKSwgd2luZG93XG5cdFx0XHRcdC8vICh2aWEgYHRoaXMuZG9jdW1lbnRgKSAmIGRvY3VtZW50ICh2aWEgYHRoaXNgKS5cblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IHsgZ3VpZDogRGF0ZS5ub3coKSB9O1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWwsIHBhcnNlckVycm9yRWxlbTtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge31cblxuXHRwYXJzZXJFcnJvckVsZW0gPSB4bWwgJiYgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKVsgMCBdO1xuXHRpZiAoICF4bWwgfHwgcGFyc2VyRXJyb3JFbGVtICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyAoXG5cdFx0XHRwYXJzZXJFcnJvckVsZW0gP1xuXHRcdFx0XHRqUXVlcnkubWFwKCBwYXJzZXJFcnJvckVsZW0uY2hpbGROb2RlcywgZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0XHRcdHJldHVybiBlbC50ZXh0Q29udGVudDtcblx0XHRcdFx0fSApLmpvaW4oIFwiXFxuXCIgKSA6XG5cdFx0XHRcdGRhdGFcblx0XHQpICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKS5tYXAoIGZ1bmN0aW9uKCBfaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxub3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHQoIHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSB8fCBbXSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5jb25jYXQoIG1hdGNoWyAyIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2guam9pbiggXCIsIFwiICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZS5ndWlkKysgKSArXG5cdFx0XHRcdFx0dW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVzZSBhIG5vb3AgY29udmVydGVyIGZvciBtaXNzaW5nIHNjcmlwdCBidXQgbm90IGlmIGpzb25wXG5cdFx0XHRpZiAoICFpc1N1Y2Nlc3MgJiZcblx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIFwic2NyaXB0XCIsIHMuZGF0YVR5cGVzICkgPiAtMSAmJlxuXHRcdFx0XHRqUXVlcnkuaW5BcnJheSggXCJqc29uXCIsIHMuZGF0YVR5cGVzICkgPCAwICkge1xuXHRcdFx0XHRzLmNvbnZlcnRlcnNbIFwidGV4dCBzY3JpcHRcIiBdID0gZnVuY3Rpb24oKSB7fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggX2ksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHR2YXIgaTtcblx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0aWYgKCBpLnRvTG93ZXJDYXNlKCkgPT09IFwiY29udGVudC10eXBlXCIgKSB7XG5cdFx0XHRzLmNvbnRlbnRUeXBlID0gcy5oZWFkZXJzWyBpIF0gfHwgXCJcIjtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsLCBvcHRpb25zLCBkb2MgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucywgZG9jICk7XG5cdFx0fVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIG9yIGZvcmNlZC1ieS1hdHRycyByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gfHwgcy5zY3JpcHRBdHRycyApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIHMuc2NyaXB0QXR0cnMgfHwge30gKVxuXHRcdFx0XHRcdC5wcm9wKCB7IGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCwgc3JjOiBzLnVybCB9IClcblx0XHRcdFx0XHQub24oIFwibG9hZCBlcnJvclwiLCBjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UuZ3VpZCsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0gaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBpc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gb2Zmc2V0KCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgYm9yZGVyIGJveCB0byB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHQvLyBHZXQgZG9jdW1lbnQtcmVsYXRpdmUgcG9zaXRpb24gYnkgYWRkaW5nIHZpZXdwb3J0IHNjcm9sbCB0byB2aWV3cG9ydC1yZWxhdGl2ZSBnQkNSXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0d2luID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0LFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG5cdFx0fTtcblx0fSxcblxuXHQvLyBwb3NpdGlvbigpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIG1hcmdpbiBib3ggdG8gaXRzIG9mZnNldCBwYXJlbnQncyBwYWRkaW5nIGJveFxuXHQvLyBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBiZWhhdmlvciBvZiBDU1MgYWJzb2x1dGUgcG9zaXRpb25pbmdcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gcG9zaXRpb246Zml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHRoZSB2aWV3cG9ydCwgd2hpY2ggaXRzZWxmIGFsd2F5cyBoYXMgemVybyBvZmZzZXRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBwb3NpdGlvbjpmaXhlZCBpbXBsaWVzIGF2YWlsYWJpbGl0eSBvZiBnZXRCb3VuZGluZ0NsaWVudFJlY3Rcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdGhlICpyZWFsKiBvZmZzZXQgcGFyZW50LCB3aGljaCBjYW4gYmUgdGhlIGRvY3VtZW50IG9yIGl0cyByb290IGVsZW1lbnRcblx0XHRcdC8vIHdoZW4gYSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudCBpcyBpZGVudGlmaWVkXG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiZcblx0XHRcdFx0KCBvZmZzZXRQYXJlbnQgPT09IGRvYy5ib2R5IHx8IG9mZnNldFBhcmVudCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCApICYmXG5cdFx0XHRcdGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGVsZW0gJiYgb2Zmc2V0UGFyZW50Lm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIEluY29ycG9yYXRlIGJvcmRlcnMgaW50byBpdHMgb2Zmc2V0LCBzaW5jZSB0aGV5IGFyZSBvdXRzaWRlIGl0cyBjb250ZW50IG9yaWdpblxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBqUXVlcnkoIG9mZnNldFBhcmVudCApLm9mZnNldCgpO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggX2ksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHtcblx0XHRwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLFxuXHRcdGNvbnRlbnQ6IHR5cGUsXG5cdFx0XCJcIjogXCJvdXRlclwiICsgbmFtZVxuXHR9LCBmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBfaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH0sXG5cblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKFxuXHQoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXG5cdFx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0XHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0XHR9O1xuXHR9XG4pO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcbi8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxudmFyIHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG4vLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcbi8vIGFyZ3VtZW50cy5cbi8vIGpRdWVyeS5wcm94eSBpcyBkZXByZWNhdGVkIHRvIHByb21vdGUgc3RhbmRhcmRzIChzcGVjaWZpY2FsbHkgRnVuY3Rpb24jYmluZClcbi8vIEhvd2V2ZXIsIGl0IGlzIG5vdCBzbGF0ZWQgZm9yIHJlbW92YWwgYW55IHRpbWUgc29vblxualF1ZXJ5LnByb3h5ID0gZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0Y29udGV4dCA9IGZuO1xuXHRcdGZuID0gdG1wO1xuXHR9XG5cblx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0aWYgKCAhaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHR9O1xuXG5cdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRyZXR1cm4gcHJveHk7XG59O1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xualF1ZXJ5LmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xualF1ZXJ5LmlzV2luZG93ID0gaXNXaW5kb3c7XG5qUXVlcnkuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xualF1ZXJ5LnR5cGUgPSB0b1R5cGU7XG5cbmpRdWVyeS5ub3cgPSBEYXRlLm5vdztcblxualF1ZXJ5LmlzTnVtZXJpYyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG59O1xuXG5qUXVlcnkudHJpbSA9IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcIlwiIDpcblx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcbn07XG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsIi8qKlxuICogU2ltcGxlQmFyLmpzIC0gdjUuMy41XG4gKiBTY3JvbGxiYXJzLCBzaW1wbGVyLlxuICogaHR0cHM6Ly9ncnNtdG8uZ2l0aHViLmlvL3NpbXBsZWJhci9cbiAqXG4gKiBNYWRlIGJ5IEFkcmllbiBEZW5hdCBmcm9tIGEgZm9yayBieSBKb25hdGhhbiBOaWNvbFxuICogVW5kZXIgTUlUIExpY2Vuc2VcbiAqL1xuXG4hZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKToodD10fHxzZWxmKS5TaW1wbGVCYXI9ZSgpfSh0aGlzLChmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjp7fTtmdW5jdGlvbiBlKHQsZSl7cmV0dXJuIHQoZT17ZXhwb3J0czp7fX0sZS5leHBvcnRzKSxlLmV4cG9ydHN9dmFyIHIsaSxuLG89XCJvYmplY3RcIixzPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Lk1hdGg9PU1hdGgmJnR9LGE9cyh0eXBlb2YgZ2xvYmFsVGhpcz09byYmZ2xvYmFsVGhpcyl8fHModHlwZW9mIHdpbmRvdz09byYmd2luZG93KXx8cyh0eXBlb2Ygc2VsZj09byYmc2VsZil8fHModHlwZW9mIHQ9PW8mJnQpfHxGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCksYz1mdW5jdGlvbih0KXt0cnl7cmV0dXJuISF0KCl9Y2F0Y2godCl7cmV0dXJuITB9fSxsPSFjKChmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sXCJhXCIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KSksdT17fS5wcm9wZXJ0eUlzRW51bWVyYWJsZSxmPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsaD17ZjpmJiYhdS5jYWxsKHsxOjJ9LDEpP2Z1bmN0aW9uKHQpe3ZhciBlPWYodGhpcyx0KTtyZXR1cm4hIWUmJmUuZW51bWVyYWJsZX06dX0sZD1mdW5jdGlvbih0LGUpe3JldHVybntlbnVtZXJhYmxlOiEoMSZ0KSxjb25maWd1cmFibGU6ISgyJnQpLHdyaXRhYmxlOiEoNCZ0KSx2YWx1ZTplfX0scD17fS50b1N0cmluZyx2PWZ1bmN0aW9uKHQpe3JldHVybiBwLmNhbGwodCkuc2xpY2UoOCwtMSl9LGc9XCJcIi5zcGxpdCxiPWMoKGZ1bmN0aW9uKCl7cmV0dXJuIU9iamVjdChcInpcIikucHJvcGVydHlJc0VudW1lcmFibGUoMCl9KSk/ZnVuY3Rpb24odCl7cmV0dXJuXCJTdHJpbmdcIj09dih0KT9nLmNhbGwodCxcIlwiKTpPYmplY3QodCl9Ok9iamVjdCx5PWZ1bmN0aW9uKHQpe2lmKG51bGw9PXQpdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gXCIrdCk7cmV0dXJuIHR9LG09ZnVuY3Rpb24odCl7cmV0dXJuIGIoeSh0KSl9LHg9ZnVuY3Rpb24odCl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIHQ/bnVsbCE9PXQ6XCJmdW5jdGlvblwiPT10eXBlb2YgdH0sRT1mdW5jdGlvbih0LGUpe2lmKCF4KHQpKXJldHVybiB0O3ZhciByLGk7aWYoZSYmXCJmdW5jdGlvblwiPT10eXBlb2Yocj10LnRvU3RyaW5nKSYmIXgoaT1yLmNhbGwodCkpKXJldHVybiBpO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mKHI9dC52YWx1ZU9mKSYmIXgoaT1yLmNhbGwodCkpKXJldHVybiBpO2lmKCFlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZihyPXQudG9TdHJpbmcpJiYheChpPXIuY2FsbCh0KSkpcmV0dXJuIGk7dGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpfSx3PXt9Lmhhc093blByb3BlcnR5LFM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdy5jYWxsKHQsZSl9LE89YS5kb2N1bWVudCxrPXgoTykmJngoTy5jcmVhdGVFbGVtZW50KSxBPWZ1bmN0aW9uKHQpe3JldHVybiBrP08uY3JlYXRlRWxlbWVudCh0KTp7fX0sVD0hbCYmIWMoKGZ1bmN0aW9uKCl7cmV0dXJuIDchPU9iamVjdC5kZWZpbmVQcm9wZXJ0eShBKFwiZGl2XCIpLFwiYVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gN319KS5hfSkpLEw9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcix6PXtmOmw/TDpmdW5jdGlvbih0LGUpe2lmKHQ9bSh0KSxlPUUoZSwhMCksVCl0cnl7cmV0dXJuIEwodCxlKX1jYXRjaCh0KXt9aWYoUyh0LGUpKXJldHVybiBkKCFoLmYuY2FsbCh0LGUpLHRbZV0pfX0sUj1mdW5jdGlvbih0KXtpZigheCh0KSl0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKHQpK1wiIGlzIG5vdCBhbiBvYmplY3RcIik7cmV0dXJuIHR9LF89T2JqZWN0LmRlZmluZVByb3BlcnR5LE09e2Y6bD9fOmZ1bmN0aW9uKHQsZSxyKXtpZihSKHQpLGU9RShlLCEwKSxSKHIpLFQpdHJ5e3JldHVybiBfKHQsZSxyKX1jYXRjaCh0KXt9aWYoXCJnZXRcImluIHJ8fFwic2V0XCJpbiByKXRocm93IFR5cGVFcnJvcihcIkFjY2Vzc29ycyBub3Qgc3VwcG9ydGVkXCIpO3JldHVyblwidmFsdWVcImluIHImJih0W2VdPXIudmFsdWUpLHR9fSxDPWw/ZnVuY3Rpb24odCxlLHIpe3JldHVybiBNLmYodCxlLGQoMSxyKSl9OmZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdFtlXT1yLHR9LGo9ZnVuY3Rpb24odCxlKXt0cnl7QyhhLHQsZSl9Y2F0Y2gocil7YVt0XT1lfXJldHVybiBlfSxXPWUoKGZ1bmN0aW9uKHQpe3ZhciBlPWFbXCJfX2NvcmUtanNfc2hhcmVkX19cIl18fGooXCJfX2NvcmUtanNfc2hhcmVkX19cIix7fSk7KHQuZXhwb3J0cz1mdW5jdGlvbih0LHIpe3JldHVybiBlW3RdfHwoZVt0XT12b2lkIDAhPT1yP3I6e30pfSkoXCJ2ZXJzaW9uc1wiLFtdKS5wdXNoKHt2ZXJzaW9uOlwiMy4yLjFcIixtb2RlOlwiZ2xvYmFsXCIsY29weXJpZ2h0OlwiwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KVwifSl9KSksTj1XKFwibmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZ1wiLEZ1bmN0aW9uLnRvU3RyaW5nKSxJPWEuV2Vha01hcCxCPVwiZnVuY3Rpb25cIj09dHlwZW9mIEkmJi9uYXRpdmUgY29kZS8udGVzdChOLmNhbGwoSSkpLEQ9MCxQPU1hdGgucmFuZG9tKCksRj1mdW5jdGlvbih0KXtyZXR1cm5cIlN5bWJvbChcIitTdHJpbmcodm9pZCAwPT09dD9cIlwiOnQpK1wiKV9cIisoKytEK1ApLnRvU3RyaW5nKDM2KX0sVj1XKFwia2V5c1wiKSxYPWZ1bmN0aW9uKHQpe3JldHVybiBWW3RdfHwoVlt0XT1GKHQpKX0sSD17fSxxPWEuV2Vha01hcDtpZihCKXt2YXIgJD1uZXcgcSxZPSQuZ2V0LEc9JC5oYXMsVT0kLnNldDtyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIFUuY2FsbCgkLHQsZSksZX0saT1mdW5jdGlvbih0KXtyZXR1cm4gWS5jYWxsKCQsdCl8fHt9fSxuPWZ1bmN0aW9uKHQpe3JldHVybiBHLmNhbGwoJCx0KX19ZWxzZXt2YXIgUT1YKFwic3RhdGVcIik7SFtRXT0hMCxyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIEModCxRLGUpLGV9LGk9ZnVuY3Rpb24odCl7cmV0dXJuIFModCxRKT90W1FdOnt9fSxuPWZ1bmN0aW9uKHQpe3JldHVybiBTKHQsUSl9fXZhciBLPXtzZXQ6cixnZXQ6aSxoYXM6bixlbmZvcmNlOmZ1bmN0aW9uKHQpe3JldHVybiBuKHQpP2kodCk6cih0LHt9KX0sZ2V0dGVyRm9yOmZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgcjtpZigheChlKXx8KHI9aShlKSkudHlwZSE9PXQpdGhyb3cgVHlwZUVycm9yKFwiSW5jb21wYXRpYmxlIHJlY2VpdmVyLCBcIit0K1wiIHJlcXVpcmVkXCIpO3JldHVybiByfX19LEo9ZSgoZnVuY3Rpb24odCl7dmFyIGU9Sy5nZXQscj1LLmVuZm9yY2UsaT1TdHJpbmcoTikuc3BsaXQoXCJ0b1N0cmluZ1wiKTtXKFwiaW5zcGVjdFNvdXJjZVwiLChmdW5jdGlvbih0KXtyZXR1cm4gTi5jYWxsKHQpfSkpLCh0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4sbyl7dmFyIHM9ISFvJiYhIW8udW5zYWZlLGM9ISFvJiYhIW8uZW51bWVyYWJsZSxsPSEhbyYmISFvLm5vVGFyZ2V0R2V0O1wiZnVuY3Rpb25cIj09dHlwZW9mIG4mJihcInN0cmluZ1wiIT10eXBlb2YgZXx8UyhuLFwibmFtZVwiKXx8QyhuLFwibmFtZVwiLGUpLHIobikuc291cmNlPWkuam9pbihcInN0cmluZ1wiPT10eXBlb2YgZT9lOlwiXCIpKSx0IT09YT8ocz8hbCYmdFtlXSYmKGM9ITApOmRlbGV0ZSB0W2VdLGM/dFtlXT1uOkModCxlLG4pKTpjP3RbZV09bjpqKGUsbil9KShGdW5jdGlvbi5wcm90b3R5cGUsXCJ0b1N0cmluZ1wiLChmdW5jdGlvbigpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMmJmUodGhpcykuc291cmNlfHxOLmNhbGwodGhpcyl9KSl9KSksWj1hLHR0PWZ1bmN0aW9uKHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dDp2b2lkIDB9LGV0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg8Mj90dChaW3RdKXx8dHQoYVt0XSk6Wlt0XSYmWlt0XVtlXXx8YVt0XSYmYVt0XVtlXX0scnQ9TWF0aC5jZWlsLGl0PU1hdGguZmxvb3IsbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIGlzTmFOKHQ9K3QpPzA6KHQ+MD9pdDpydCkodCl9LG90PU1hdGgubWluLHN0PWZ1bmN0aW9uKHQpe3JldHVybiB0PjA/b3QobnQodCksOTAwNzE5OTI1NDc0MDk5MSk6MH0sYXQ9TWF0aC5tYXgsY3Q9TWF0aC5taW4sbHQ9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUscixpKXt2YXIgbixvPW0oZSkscz1zdChvLmxlbmd0aCksYT1mdW5jdGlvbih0LGUpe3ZhciByPW50KHQpO3JldHVybiByPDA/YXQocitlLDApOmN0KHIsZSl9KGkscyk7aWYodCYmciE9cil7Zm9yKDtzPmE7KWlmKChuPW9bYSsrXSkhPW4pcmV0dXJuITB9ZWxzZSBmb3IoO3M+YTthKyspaWYoKHR8fGEgaW4gbykmJm9bYV09PT1yKXJldHVybiB0fHxhfHwwO3JldHVybiF0JiYtMX19LHV0PXtpbmNsdWRlczpsdCghMCksaW5kZXhPZjpsdCghMSl9LmluZGV4T2YsZnQ9ZnVuY3Rpb24odCxlKXt2YXIgcixpPW0odCksbj0wLG89W107Zm9yKHIgaW4gaSkhUyhILHIpJiZTKGkscikmJm8ucHVzaChyKTtmb3IoO2UubGVuZ3RoPm47KVMoaSxyPWVbbisrXSkmJih+dXQobyxyKXx8by5wdXNoKHIpKTtyZXR1cm4gb30saHQ9W1wiY29uc3RydWN0b3JcIixcImhhc093blByb3BlcnR5XCIsXCJpc1Byb3RvdHlwZU9mXCIsXCJwcm9wZXJ0eUlzRW51bWVyYWJsZVwiLFwidG9Mb2NhbGVTdHJpbmdcIixcInRvU3RyaW5nXCIsXCJ2YWx1ZU9mXCJdLGR0PWh0LmNvbmNhdChcImxlbmd0aFwiLFwicHJvdG90eXBlXCIpLHB0PXtmOk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzfHxmdW5jdGlvbih0KXtyZXR1cm4gZnQodCxkdCl9fSx2dD17ZjpPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzfSxndD1ldChcIlJlZmxlY3RcIixcIm93bktleXNcIil8fGZ1bmN0aW9uKHQpe3ZhciBlPXB0LmYoUih0KSkscj12dC5mO3JldHVybiByP2UuY29uY2F0KHIodCkpOmV9LGJ0PWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciByPWd0KGUpLGk9TS5mLG49ei5mLG89MDtvPHIubGVuZ3RoO28rKyl7dmFyIHM9cltvXTtTKHQscyl8fGkodCxzLG4oZSxzKSl9fSx5dD0vI3xcXC5wcm90b3R5cGVcXC4vLG10PWZ1bmN0aW9uKHQsZSl7dmFyIHI9RXRbeHQodCldO3JldHVybiByPT1TdHx8ciE9d3QmJihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlP2MoZSk6ISFlKX0seHQ9bXQubm9ybWFsaXplPWZ1bmN0aW9uKHQpe3JldHVybiBTdHJpbmcodCkucmVwbGFjZSh5dCxcIi5cIikudG9Mb3dlckNhc2UoKX0sRXQ9bXQuZGF0YT17fSx3dD1tdC5OQVRJVkU9XCJOXCIsU3Q9bXQuUE9MWUZJTEw9XCJQXCIsT3Q9bXQsa3Q9ei5mLEF0PWZ1bmN0aW9uKHQsZSl7dmFyIHIsaSxuLG8scyxjPXQudGFyZ2V0LGw9dC5nbG9iYWwsdT10LnN0YXQ7aWYocj1sP2E6dT9hW2NdfHxqKGMse30pOihhW2NdfHx7fSkucHJvdG90eXBlKWZvcihpIGluIGUpe2lmKG89ZVtpXSxuPXQubm9UYXJnZXRHZXQ/KHM9a3QocixpKSkmJnMudmFsdWU6cltpXSwhT3QobD9pOmMrKHU/XCIuXCI6XCIjXCIpK2ksdC5mb3JjZWQpJiZ2b2lkIDAhPT1uKXtpZih0eXBlb2Ygbz09dHlwZW9mIG4pY29udGludWU7YnQobyxuKX0odC5zaGFtfHxuJiZuLnNoYW0pJiZDKG8sXCJzaGFtXCIsITApLEoocixpLG8sdCl9fSxUdD1mdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IFR5cGVFcnJvcihTdHJpbmcodCkrXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7cmV0dXJuIHR9LEx0PWZ1bmN0aW9uKHQsZSxyKXtpZihUdCh0KSx2b2lkIDA9PT1lKXJldHVybiB0O3N3aXRjaChyKXtjYXNlIDA6cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQuY2FsbChlKX07Y2FzZSAxOnJldHVybiBmdW5jdGlvbihyKXtyZXR1cm4gdC5jYWxsKGUscil9O2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24ocixpKXtyZXR1cm4gdC5jYWxsKGUscixpKX07Y2FzZSAzOnJldHVybiBmdW5jdGlvbihyLGksbil7cmV0dXJuIHQuY2FsbChlLHIsaSxuKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQuYXBwbHkoZSxhcmd1bWVudHMpfX0senQ9ZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdCh5KHQpKX0sUnQ9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24odCl7cmV0dXJuXCJBcnJheVwiPT12KHQpfSxfdD0hIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMmJiFjKChmdW5jdGlvbigpe3JldHVybiFTdHJpbmcoU3ltYm9sKCkpfSkpLE10PWEuU3ltYm9sLEN0PVcoXCJ3a3NcIiksanQ9ZnVuY3Rpb24odCl7cmV0dXJuIEN0W3RdfHwoQ3RbdF09X3QmJk10W3RdfHwoX3Q/TXQ6RikoXCJTeW1ib2wuXCIrdCkpfSxXdD1qdChcInNwZWNpZXNcIiksTnQ9ZnVuY3Rpb24odCxlKXt2YXIgcjtyZXR1cm4gUnQodCkmJihcImZ1bmN0aW9uXCIhPXR5cGVvZihyPXQuY29uc3RydWN0b3IpfHxyIT09QXJyYXkmJiFSdChyLnByb3RvdHlwZSk/eChyKSYmbnVsbD09PShyPXJbV3RdKSYmKHI9dm9pZCAwKTpyPXZvaWQgMCksbmV3KHZvaWQgMD09PXI/QXJyYXk6cikoMD09PWU/MDplKX0sSXQ9W10ucHVzaCxCdD1mdW5jdGlvbih0KXt2YXIgZT0xPT10LHI9Mj09dCxpPTM9PXQsbj00PT10LG89Nj09dCxzPTU9PXR8fG87cmV0dXJuIGZ1bmN0aW9uKGEsYyxsLHUpe2Zvcih2YXIgZixoLGQ9enQoYSkscD1iKGQpLHY9THQoYyxsLDMpLGc9c3QocC5sZW5ndGgpLHk9MCxtPXV8fE50LHg9ZT9tKGEsZyk6cj9tKGEsMCk6dm9pZCAwO2c+eTt5KyspaWYoKHN8fHkgaW4gcCkmJihoPXYoZj1wW3ldLHksZCksdCkpaWYoZSl4W3ldPWg7ZWxzZSBpZihoKXN3aXRjaCh0KXtjYXNlIDM6cmV0dXJuITA7Y2FzZSA1OnJldHVybiBmO2Nhc2UgNjpyZXR1cm4geTtjYXNlIDI6SXQuY2FsbCh4LGYpfWVsc2UgaWYobilyZXR1cm4hMTtyZXR1cm4gbz8tMTppfHxuP246eH19LER0PXtmb3JFYWNoOkJ0KDApLG1hcDpCdCgxKSxmaWx0ZXI6QnQoMiksc29tZTpCdCgzKSxldmVyeTpCdCg0KSxmaW5kOkJ0KDUpLGZpbmRJbmRleDpCdCg2KX0sUHQ9ZnVuY3Rpb24odCxlKXt2YXIgcj1bXVt0XTtyZXR1cm4hcnx8IWMoKGZ1bmN0aW9uKCl7ci5jYWxsKG51bGwsZXx8ZnVuY3Rpb24oKXt0aHJvdyAxfSwxKX0pKX0sRnQ9RHQuZm9yRWFjaCxWdD1QdChcImZvckVhY2hcIik/ZnVuY3Rpb24odCl7cmV0dXJuIEZ0KHRoaXMsdCxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9OltdLmZvckVhY2g7QXQoe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOltdLmZvckVhY2ghPVZ0fSx7Zm9yRWFjaDpWdH0pO3ZhciBYdD17Q1NTUnVsZUxpc3Q6MCxDU1NTdHlsZURlY2xhcmF0aW9uOjAsQ1NTVmFsdWVMaXN0OjAsQ2xpZW50UmVjdExpc3Q6MCxET01SZWN0TGlzdDowLERPTVN0cmluZ0xpc3Q6MCxET01Ub2tlbkxpc3Q6MSxEYXRhVHJhbnNmZXJJdGVtTGlzdDowLEZpbGVMaXN0OjAsSFRNTEFsbENvbGxlY3Rpb246MCxIVE1MQ29sbGVjdGlvbjowLEhUTUxGb3JtRWxlbWVudDowLEhUTUxTZWxlY3RFbGVtZW50OjAsTWVkaWFMaXN0OjAsTWltZVR5cGVBcnJheTowLE5hbWVkTm9kZU1hcDowLE5vZGVMaXN0OjEsUGFpbnRSZXF1ZXN0TGlzdDowLFBsdWdpbjowLFBsdWdpbkFycmF5OjAsU1ZHTGVuZ3RoTGlzdDowLFNWR051bWJlckxpc3Q6MCxTVkdQYXRoU2VnTGlzdDowLFNWR1BvaW50TGlzdDowLFNWR1N0cmluZ0xpc3Q6MCxTVkdUcmFuc2Zvcm1MaXN0OjAsU291cmNlQnVmZmVyTGlzdDowLFN0eWxlU2hlZXRMaXN0OjAsVGV4dFRyYWNrQ3VlTGlzdDowLFRleHRUcmFja0xpc3Q6MCxUb3VjaExpc3Q6MH07Zm9yKHZhciBIdCBpbiBYdCl7dmFyIHF0PWFbSHRdLCR0PXF0JiZxdC5wcm90b3R5cGU7aWYoJHQmJiR0LmZvckVhY2ghPT1WdCl0cnl7QygkdCxcImZvckVhY2hcIixWdCl9Y2F0Y2godCl7JHQuZm9yRWFjaD1WdH19dmFyIFl0PSEoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHdpbmRvd3x8IXdpbmRvdy5kb2N1bWVudHx8IXdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxHdD1qdChcInNwZWNpZXNcIiksVXQ9RHQuZmlsdGVyO0F0KHt0YXJnZXQ6XCJBcnJheVwiLHByb3RvOiEwLGZvcmNlZDohZnVuY3Rpb24odCl7cmV0dXJuIWMoKGZ1bmN0aW9uKCl7dmFyIGU9W107cmV0dXJuKGUuY29uc3RydWN0b3I9e30pW0d0XT1mdW5jdGlvbigpe3JldHVybntmb286MX19LDEhPT1lW3RdKEJvb2xlYW4pLmZvb30pKX0oXCJmaWx0ZXJcIil9LHtmaWx0ZXI6ZnVuY3Rpb24odCl7cmV0dXJuIFV0KHRoaXMsdCxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSk7dmFyIFF0PU9iamVjdC5rZXlzfHxmdW5jdGlvbih0KXtyZXR1cm4gZnQodCxodCl9LEt0PWw/T2JqZWN0LmRlZmluZVByb3BlcnRpZXM6ZnVuY3Rpb24odCxlKXtSKHQpO2Zvcih2YXIgcixpPVF0KGUpLG49aS5sZW5ndGgsbz0wO24+bzspTS5mKHQscj1pW28rK10sZVtyXSk7cmV0dXJuIHR9LEp0PWV0KFwiZG9jdW1lbnRcIixcImRvY3VtZW50RWxlbWVudFwiKSxadD1YKFwiSUVfUFJPVE9cIiksdGU9ZnVuY3Rpb24oKXt9LGVlPWZ1bmN0aW9uKCl7dmFyIHQsZT1BKFwiaWZyYW1lXCIpLHI9aHQubGVuZ3RoO2ZvcihlLnN0eWxlLmRpc3BsYXk9XCJub25lXCIsSnQuYXBwZW5kQ2hpbGQoZSksZS5zcmM9U3RyaW5nKFwiamF2YXNjcmlwdDpcIiksKHQ9ZS5jb250ZW50V2luZG93LmRvY3VtZW50KS5vcGVuKCksdC53cml0ZShcIjxzY3JpcHQ+ZG9jdW1lbnQuRj1PYmplY3Q8XFwvc2NyaXB0PlwiKSx0LmNsb3NlKCksZWU9dC5GO3ItLTspZGVsZXRlIGVlLnByb3RvdHlwZVtodFtyXV07cmV0dXJuIGVlKCl9LHJlPU9iamVjdC5jcmVhdGV8fGZ1bmN0aW9uKHQsZSl7dmFyIHI7cmV0dXJuIG51bGwhPT10Pyh0ZS5wcm90b3R5cGU9Uih0KSxyPW5ldyB0ZSx0ZS5wcm90b3R5cGU9bnVsbCxyW1p0XT10KTpyPWVlKCksdm9pZCAwPT09ZT9yOkt0KHIsZSl9O0hbWnRdPSEwO3ZhciBpZT1qdChcInVuc2NvcGFibGVzXCIpLG5lPUFycmF5LnByb3RvdHlwZTtudWxsPT1uZVtpZV0mJkMobmUsaWUscmUobnVsbCkpO3ZhciBvZSxzZSxhZSxjZT1mdW5jdGlvbih0KXtuZVtpZV1bdF09ITB9LGxlPXt9LHVlPSFjKChmdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt9cmV0dXJuIHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPW51bGwsT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyB0KSE9PXQucHJvdG90eXBlfSkpLGZlPVgoXCJJRV9QUk9UT1wiKSxoZT1PYmplY3QucHJvdG90eXBlLGRlPXVlP09iamVjdC5nZXRQcm90b3R5cGVPZjpmdW5jdGlvbih0KXtyZXR1cm4gdD16dCh0KSxTKHQsZmUpP3RbZmVdOlwiZnVuY3Rpb25cIj09dHlwZW9mIHQuY29uc3RydWN0b3ImJnQgaW5zdGFuY2VvZiB0LmNvbnN0cnVjdG9yP3QuY29uc3RydWN0b3IucHJvdG90eXBlOnQgaW5zdGFuY2VvZiBPYmplY3Q/aGU6bnVsbH0scGU9anQoXCJpdGVyYXRvclwiKSx2ZT0hMTtbXS5rZXlzJiYoXCJuZXh0XCJpbihhZT1bXS5rZXlzKCkpPyhzZT1kZShkZShhZSkpKSE9PU9iamVjdC5wcm90b3R5cGUmJihvZT1zZSk6dmU9ITApLG51bGw9PW9lJiYob2U9e30pLFMob2UscGUpfHxDKG9lLHBlLChmdW5jdGlvbigpe3JldHVybiB0aGlzfSkpO3ZhciBnZT17SXRlcmF0b3JQcm90b3R5cGU6b2UsQlVHR1lfU0FGQVJJX0lURVJBVE9SUzp2ZX0sYmU9TS5mLHllPWp0KFwidG9TdHJpbmdUYWdcIiksbWU9ZnVuY3Rpb24odCxlLHIpe3QmJiFTKHQ9cj90OnQucHJvdG90eXBlLHllKSYmYmUodCx5ZSx7Y29uZmlndXJhYmxlOiEwLHZhbHVlOmV9KX0seGU9Z2UuSXRlcmF0b3JQcm90b3R5cGUsRWU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sd2U9T2JqZWN0LnNldFByb3RvdHlwZU9mfHwoXCJfX3Byb3RvX19cImlue30/ZnVuY3Rpb24oKXt2YXIgdCxlPSExLHI9e307dHJ5eyh0PU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSxcIl9fcHJvdG9fX1wiKS5zZXQpLmNhbGwocixbXSksZT1yIGluc3RhbmNlb2YgQXJyYXl9Y2F0Y2godCl7fXJldHVybiBmdW5jdGlvbihyLGkpe3JldHVybiBSKHIpLGZ1bmN0aW9uKHQpe2lmKCF4KHQpJiZudWxsIT09dCl0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBzZXQgXCIrU3RyaW5nKHQpK1wiIGFzIGEgcHJvdG90eXBlXCIpfShpKSxlP3QuY2FsbChyLGkpOnIuX19wcm90b19fPWkscn19KCk6dm9pZCAwKSxTZT1nZS5JdGVyYXRvclByb3RvdHlwZSxPZT1nZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTLGtlPWp0KFwiaXRlcmF0b3JcIiksQWU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sVGU9ZnVuY3Rpb24odCxlLHIsaSxuLG8scyl7IWZ1bmN0aW9uKHQsZSxyKXt2YXIgaT1lK1wiIEl0ZXJhdG9yXCI7dC5wcm90b3R5cGU9cmUoeGUse25leHQ6ZCgxLHIpfSksbWUodCxpLCExKSxsZVtpXT1FZX0ocixlLGkpO3ZhciBhLGMsbCx1PWZ1bmN0aW9uKHQpe2lmKHQ9PT1uJiZnKXJldHVybiBnO2lmKCFPZSYmdCBpbiBwKXJldHVybiBwW3RdO3N3aXRjaCh0KXtjYXNlXCJrZXlzXCI6Y2FzZVwidmFsdWVzXCI6Y2FzZVwiZW50cmllc1wiOnJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgcih0aGlzLHQpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHIodGhpcyl9fSxmPWUrXCIgSXRlcmF0b3JcIixoPSExLHA9dC5wcm90b3R5cGUsdj1wW2tlXXx8cFtcIkBAaXRlcmF0b3JcIl18fG4mJnBbbl0sZz0hT2UmJnZ8fHUobiksYj1cIkFycmF5XCI9PWUmJnAuZW50cmllc3x8djtpZihiJiYoYT1kZShiLmNhbGwobmV3IHQpKSxTZSE9PU9iamVjdC5wcm90b3R5cGUmJmEubmV4dCYmKGRlKGEpIT09U2UmJih3ZT93ZShhLFNlKTpcImZ1bmN0aW9uXCIhPXR5cGVvZiBhW2tlXSYmQyhhLGtlLEFlKSksbWUoYSxmLCEwKSkpLFwidmFsdWVzXCI9PW4mJnYmJlwidmFsdWVzXCIhPT12Lm5hbWUmJihoPSEwLGc9ZnVuY3Rpb24oKXtyZXR1cm4gdi5jYWxsKHRoaXMpfSkscFtrZV0hPT1nJiZDKHAsa2UsZyksbGVbZV09ZyxuKWlmKGM9e3ZhbHVlczp1KFwidmFsdWVzXCIpLGtleXM6bz9nOnUoXCJrZXlzXCIpLGVudHJpZXM6dShcImVudHJpZXNcIil9LHMpZm9yKGwgaW4gYykhT2UmJiFoJiZsIGluIHB8fEoocCxsLGNbbF0pO2Vsc2UgQXQoe3RhcmdldDplLHByb3RvOiEwLGZvcmNlZDpPZXx8aH0sYyk7cmV0dXJuIGN9LExlPUsuc2V0LHplPUsuZ2V0dGVyRm9yKFwiQXJyYXkgSXRlcmF0b3JcIiksUmU9VGUoQXJyYXksXCJBcnJheVwiLChmdW5jdGlvbih0LGUpe0xlKHRoaXMse3R5cGU6XCJBcnJheSBJdGVyYXRvclwiLHRhcmdldDptKHQpLGluZGV4OjAsa2luZDplfSl9KSwoZnVuY3Rpb24oKXt2YXIgdD16ZSh0aGlzKSxlPXQudGFyZ2V0LHI9dC5raW5kLGk9dC5pbmRleCsrO3JldHVybiFlfHxpPj1lLmxlbmd0aD8odC50YXJnZXQ9dm9pZCAwLHt2YWx1ZTp2b2lkIDAsZG9uZTohMH0pOlwia2V5c1wiPT1yP3t2YWx1ZTppLGRvbmU6ITF9OlwidmFsdWVzXCI9PXI/e3ZhbHVlOmVbaV0sZG9uZTohMX06e3ZhbHVlOltpLGVbaV1dLGRvbmU6ITF9fSksXCJ2YWx1ZXNcIik7bGUuQXJndW1lbnRzPWxlLkFycmF5LGNlKFwia2V5c1wiKSxjZShcInZhbHVlc1wiKSxjZShcImVudHJpZXNcIik7dmFyIF9lPU9iamVjdC5hc3NpZ24sTWU9IV9lfHxjKChmdW5jdGlvbigpe3ZhciB0PXt9LGU9e30scj1TeW1ib2woKTtyZXR1cm4gdFtyXT03LFwiYWJjZGVmZ2hpamtsbW5vcHFyc3RcIi5zcGxpdChcIlwiKS5mb3JFYWNoKChmdW5jdGlvbih0KXtlW3RdPXR9KSksNyE9X2Uoe30sdClbcl18fFwiYWJjZGVmZ2hpamtsbW5vcHFyc3RcIiE9UXQoX2Uoe30sZSkpLmpvaW4oXCJcIil9KSk/ZnVuY3Rpb24odCxlKXtmb3IodmFyIHI9enQodCksaT1hcmd1bWVudHMubGVuZ3RoLG49MSxvPXZ0LmYscz1oLmY7aT5uOylmb3IodmFyIGEsYz1iKGFyZ3VtZW50c1tuKytdKSx1PW8/UXQoYykuY29uY2F0KG8oYykpOlF0KGMpLGY9dS5sZW5ndGgsZD0wO2Y+ZDspYT11W2QrK10sbCYmIXMuY2FsbChjLGEpfHwoclthXT1jW2FdKTtyZXR1cm4gcn06X2U7QXQoe3RhcmdldDpcIk9iamVjdFwiLHN0YXQ6ITAsZm9yY2VkOk9iamVjdC5hc3NpZ24hPT1NZX0se2Fzc2lnbjpNZX0pO3ZhciBDZT1qdChcInRvU3RyaW5nVGFnXCIpLGplPVwiQXJndW1lbnRzXCI9PXYoZnVuY3Rpb24oKXtyZXR1cm4gYXJndW1lbnRzfSgpKSxXZT1mdW5jdGlvbih0KXt2YXIgZSxyLGk7cmV0dXJuIHZvaWQgMD09PXQ/XCJVbmRlZmluZWRcIjpudWxsPT09dD9cIk51bGxcIjpcInN0cmluZ1wiPT10eXBlb2Yocj1mdW5jdGlvbih0LGUpe3RyeXtyZXR1cm4gdFtlXX1jYXRjaCh0KXt9fShlPU9iamVjdCh0KSxDZSkpP3I6amU/dihlKTpcIk9iamVjdFwiPT0oaT12KGUpKSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5jYWxsZWU/XCJBcmd1bWVudHNcIjppfSxOZT17fTtOZVtqdChcInRvU3RyaW5nVGFnXCIpXT1cInpcIjt2YXIgSWU9XCJbb2JqZWN0IHpdXCIhPT1TdHJpbmcoTmUpP2Z1bmN0aW9uKCl7cmV0dXJuXCJbb2JqZWN0IFwiK1dlKHRoaXMpK1wiXVwifTpOZS50b1N0cmluZyxCZT1PYmplY3QucHJvdG90eXBlO0llIT09QmUudG9TdHJpbmcmJkooQmUsXCJ0b1N0cmluZ1wiLEllLHt1bnNhZmU6ITB9KTt2YXIgRGU9XCJcXHRcXG5cXHZcXGZcXHIgwqDhmoDigIDigIHigILigIPigITigIXigIbigIfigIjigInigIrigK/igZ/jgIBcXHUyMDI4XFx1MjAyOVxcdWZlZmZcIixQZT1cIltcIitEZStcIl1cIixGZT1SZWdFeHAoXCJeXCIrUGUrUGUrXCIqXCIpLFZlPVJlZ0V4cChQZStQZStcIiokXCIpLFhlPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgcj1TdHJpbmcoeShlKSk7cmV0dXJuIDEmdCYmKHI9ci5yZXBsYWNlKEZlLFwiXCIpKSwyJnQmJihyPXIucmVwbGFjZShWZSxcIlwiKSkscn19LEhlPXtzdGFydDpYZSgxKSxlbmQ6WGUoMiksdHJpbTpYZSgzKX0udHJpbSxxZT1hLnBhcnNlSW50LCRlPS9eWystXT8wW1h4XS8sWWU9OCE9PXFlKERlK1wiMDhcIil8fDIyIT09cWUoRGUrXCIweDE2XCIpP2Z1bmN0aW9uKHQsZSl7dmFyIHI9SGUoU3RyaW5nKHQpKTtyZXR1cm4gcWUocixlPj4+MHx8KCRlLnRlc3Qocik/MTY6MTApKX06cWU7QXQoe2dsb2JhbDohMCxmb3JjZWQ6cGFyc2VJbnQhPVllfSx7cGFyc2VJbnQ6WWV9KTt2YXIgR2U9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUscil7dmFyIGksbixvPVN0cmluZyh5KGUpKSxzPW50KHIpLGE9by5sZW5ndGg7cmV0dXJuIHM8MHx8cz49YT90P1wiXCI6dm9pZCAwOihpPW8uY2hhckNvZGVBdChzKSk8NTUyOTZ8fGk+NTYzMTl8fHMrMT09PWF8fChuPW8uY2hhckNvZGVBdChzKzEpKTw1NjMyMHx8bj41NzM0Mz90P28uY2hhckF0KHMpOmk6dD9vLnNsaWNlKHMscysyKTpuLTU2MzIwKyhpLTU1Mjk2PDwxMCkrNjU1MzZ9fSxVZT17Y29kZUF0OkdlKCExKSxjaGFyQXQ6R2UoITApfSxRZT1VZS5jaGFyQXQsS2U9Sy5zZXQsSmU9Sy5nZXR0ZXJGb3IoXCJTdHJpbmcgSXRlcmF0b3JcIik7VGUoU3RyaW5nLFwiU3RyaW5nXCIsKGZ1bmN0aW9uKHQpe0tlKHRoaXMse3R5cGU6XCJTdHJpbmcgSXRlcmF0b3JcIixzdHJpbmc6U3RyaW5nKHQpLGluZGV4OjB9KX0pLChmdW5jdGlvbigpe3ZhciB0LGU9SmUodGhpcykscj1lLnN0cmluZyxpPWUuaW5kZXg7cmV0dXJuIGk+PXIubGVuZ3RoP3t2YWx1ZTp2b2lkIDAsZG9uZTohMH06KHQ9UWUocixpKSxlLmluZGV4Kz10Lmxlbmd0aCx7dmFsdWU6dCxkb25lOiExfSl9KSk7dmFyIFplPWZ1bmN0aW9uKHQsZSxyKXtmb3IodmFyIGkgaW4gZSlKKHQsaSxlW2ldLHIpO3JldHVybiB0fSx0cj0hYygoZnVuY3Rpb24oKXtyZXR1cm4gT2JqZWN0LmlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKX0pKSxlcj1lKChmdW5jdGlvbih0KXt2YXIgZT1NLmYscj1GKFwibWV0YVwiKSxpPTAsbj1PYmplY3QuaXNFeHRlbnNpYmxlfHxmdW5jdGlvbigpe3JldHVybiEwfSxvPWZ1bmN0aW9uKHQpe2UodCxyLHt2YWx1ZTp7b2JqZWN0SUQ6XCJPXCIrICsraSx3ZWFrRGF0YTp7fX19KX0scz10LmV4cG9ydHM9e1JFUVVJUkVEOiExLGZhc3RLZXk6ZnVuY3Rpb24odCxlKXtpZigheCh0KSlyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgdD90OihcInN0cmluZ1wiPT10eXBlb2YgdD9cIlNcIjpcIlBcIikrdDtpZighUyh0LHIpKXtpZighbih0KSlyZXR1cm5cIkZcIjtpZighZSlyZXR1cm5cIkVcIjtvKHQpfXJldHVybiB0W3JdLm9iamVjdElEfSxnZXRXZWFrRGF0YTpmdW5jdGlvbih0LGUpe2lmKCFTKHQscikpe2lmKCFuKHQpKXJldHVybiEwO2lmKCFlKXJldHVybiExO28odCl9cmV0dXJuIHRbcl0ud2Vha0RhdGF9LG9uRnJlZXplOmZ1bmN0aW9uKHQpe3JldHVybiB0ciYmcy5SRVFVSVJFRCYmbih0KSYmIVModCxyKSYmbyh0KSx0fX07SFtyXT0hMH0pKSxycj0oZXIuUkVRVUlSRUQsZXIuZmFzdEtleSxlci5nZXRXZWFrRGF0YSxlci5vbkZyZWV6ZSxqdChcIml0ZXJhdG9yXCIpKSxpcj1BcnJheS5wcm90b3R5cGUsbnI9anQoXCJpdGVyYXRvclwiKSxvcj1mdW5jdGlvbih0LGUscixpKXt0cnl7cmV0dXJuIGk/ZShSKHIpWzBdLHJbMV0pOmUocil9Y2F0Y2goZSl7dmFyIG49dC5yZXR1cm47dGhyb3cgdm9pZCAwIT09biYmUihuLmNhbGwodCkpLGV9fSxzcj1lKChmdW5jdGlvbih0KXt2YXIgZT1mdW5jdGlvbih0LGUpe3RoaXMuc3RvcHBlZD10LHRoaXMucmVzdWx0PWV9Oyh0LmV4cG9ydHM9ZnVuY3Rpb24odCxyLGksbixvKXt2YXIgcyxhLGMsbCx1LGYsaCxkPUx0KHIsaSxuPzI6MSk7aWYobylzPXQ7ZWxzZXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZihhPWZ1bmN0aW9uKHQpe2lmKG51bGwhPXQpcmV0dXJuIHRbbnJdfHx0W1wiQEBpdGVyYXRvclwiXXx8bGVbV2UodCldfSh0KSkpdGhyb3cgVHlwZUVycm9yKFwiVGFyZ2V0IGlzIG5vdCBpdGVyYWJsZVwiKTtpZih2b2lkIDAhPT0oaD1hKSYmKGxlLkFycmF5PT09aHx8aXJbcnJdPT09aCkpe2ZvcihjPTAsbD1zdCh0Lmxlbmd0aCk7bD5jO2MrKylpZigodT1uP2QoUihmPXRbY10pWzBdLGZbMV0pOmQodFtjXSkpJiZ1IGluc3RhbmNlb2YgZSlyZXR1cm4gdTtyZXR1cm4gbmV3IGUoITEpfXM9YS5jYWxsKHQpfWZvcig7IShmPXMubmV4dCgpKS5kb25lOylpZigodT1vcihzLGQsZi52YWx1ZSxuKSkmJnUgaW5zdGFuY2VvZiBlKXJldHVybiB1O3JldHVybiBuZXcgZSghMSl9KS5zdG9wPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgZSghMCx0KX19KSksYXI9ZnVuY3Rpb24odCxlLHIpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IFR5cGVFcnJvcihcIkluY29ycmVjdCBcIisocj9yK1wiIFwiOlwiXCIpK1wiaW52b2NhdGlvblwiKTtyZXR1cm4gdH0sY3I9anQoXCJpdGVyYXRvclwiKSxscj0hMTt0cnl7dmFyIHVyPTAsZnI9e25leHQ6ZnVuY3Rpb24oKXtyZXR1cm57ZG9uZTohIXVyKyt9fSxyZXR1cm46ZnVuY3Rpb24oKXtscj0hMH19O2ZyW2NyXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSxBcnJheS5mcm9tKGZyLChmdW5jdGlvbigpe3Rocm93IDJ9KSl9Y2F0Y2godCl7fXZhciBocj1mdW5jdGlvbih0LGUscixpLG4pe3ZhciBvPWFbdF0scz1vJiZvLnByb3RvdHlwZSxsPW8sdT1pP1wic2V0XCI6XCJhZGRcIixmPXt9LGg9ZnVuY3Rpb24odCl7dmFyIGU9c1t0XTtKKHMsdCxcImFkZFwiPT10P2Z1bmN0aW9uKHQpe3JldHVybiBlLmNhbGwodGhpcywwPT09dD8wOnQpLHRoaXN9OlwiZGVsZXRlXCI9PXQ/ZnVuY3Rpb24odCl7cmV0dXJuIShuJiYheCh0KSkmJmUuY2FsbCh0aGlzLDA9PT10PzA6dCl9OlwiZ2V0XCI9PXQ/ZnVuY3Rpb24odCl7cmV0dXJuIG4mJiF4KHQpP3ZvaWQgMDplLmNhbGwodGhpcywwPT09dD8wOnQpfTpcImhhc1wiPT10P2Z1bmN0aW9uKHQpe3JldHVybiEobiYmIXgodCkpJiZlLmNhbGwodGhpcywwPT09dD8wOnQpfTpmdW5jdGlvbih0LHIpe3JldHVybiBlLmNhbGwodGhpcywwPT09dD8wOnQsciksdGhpc30pfTtpZihPdCh0LFwiZnVuY3Rpb25cIiE9dHlwZW9mIG98fCEobnx8cy5mb3JFYWNoJiYhYygoZnVuY3Rpb24oKXsobmV3IG8pLmVudHJpZXMoKS5uZXh0KCl9KSkpKSlsPXIuZ2V0Q29uc3RydWN0b3IoZSx0LGksdSksZXIuUkVRVUlSRUQ9ITA7ZWxzZSBpZihPdCh0LCEwKSl7dmFyIGQ9bmV3IGwscD1kW3VdKG4/e306LTAsMSkhPWQsdj1jKChmdW5jdGlvbigpe2QuaGFzKDEpfSkpLGc9ZnVuY3Rpb24odCxlKXtpZighZSYmIWxyKXJldHVybiExO3ZhciByPSExO3RyeXt2YXIgaT17fTtpW2NyXT1mdW5jdGlvbigpe3JldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJue2RvbmU6cj0hMH19fX0sdChpKX1jYXRjaCh0KXt9cmV0dXJuIHJ9KChmdW5jdGlvbih0KXtuZXcgbyh0KX0pKSxiPSFuJiZjKChmdW5jdGlvbigpe2Zvcih2YXIgdD1uZXcgbyxlPTU7ZS0tOyl0W3VdKGUsZSk7cmV0dXJuIXQuaGFzKC0wKX0pKTtnfHwoKGw9ZSgoZnVuY3Rpb24oZSxyKXthcihlLGwsdCk7dmFyIG49ZnVuY3Rpb24odCxlLHIpe3ZhciBpLG47cmV0dXJuIHdlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZihpPWUuY29uc3RydWN0b3IpJiZpIT09ciYmeChuPWkucHJvdG90eXBlKSYmbiE9PXIucHJvdG90eXBlJiZ3ZSh0LG4pLHR9KG5ldyBvLGUsbCk7cmV0dXJuIG51bGwhPXImJnNyKHIsblt1XSxuLGkpLG59KSkpLnByb3RvdHlwZT1zLHMuY29uc3RydWN0b3I9bCksKHZ8fGIpJiYoaChcImRlbGV0ZVwiKSxoKFwiaGFzXCIpLGkmJmgoXCJnZXRcIikpLChifHxwKSYmaCh1KSxuJiZzLmNsZWFyJiZkZWxldGUgcy5jbGVhcn1yZXR1cm4gZlt0XT1sLEF0KHtnbG9iYWw6ITAsZm9yY2VkOmwhPW99LGYpLG1lKGwsdCksbnx8ci5zZXRTdHJvbmcobCx0LGkpLGx9LGRyPWVyLmdldFdlYWtEYXRhLHByPUsuc2V0LHZyPUsuZ2V0dGVyRm9yLGdyPUR0LmZpbmQsYnI9RHQuZmluZEluZGV4LHlyPTAsbXI9ZnVuY3Rpb24odCl7cmV0dXJuIHQuZnJvemVufHwodC5mcm96ZW49bmV3IHhyKX0seHI9ZnVuY3Rpb24oKXt0aGlzLmVudHJpZXM9W119LEVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGdyKHQuZW50cmllcywoZnVuY3Rpb24odCl7cmV0dXJuIHRbMF09PT1lfSkpfTt4ci5wcm90b3R5cGU9e2dldDpmdW5jdGlvbih0KXt2YXIgZT1Fcih0aGlzLHQpO2lmKGUpcmV0dXJuIGVbMV19LGhhczpmdW5jdGlvbih0KXtyZXR1cm4hIUVyKHRoaXMsdCl9LHNldDpmdW5jdGlvbih0LGUpe3ZhciByPUVyKHRoaXMsdCk7cj9yWzFdPWU6dGhpcy5lbnRyaWVzLnB1c2goW3QsZV0pfSxkZWxldGU6ZnVuY3Rpb24odCl7dmFyIGU9YnIodGhpcy5lbnRyaWVzLChmdW5jdGlvbihlKXtyZXR1cm4gZVswXT09PXR9KSk7cmV0dXJufmUmJnRoaXMuZW50cmllcy5zcGxpY2UoZSwxKSwhIX5lfX07dmFyIHdyPXtnZXRDb25zdHJ1Y3RvcjpmdW5jdGlvbih0LGUscixpKXt2YXIgbj10KChmdW5jdGlvbih0LG8pe2FyKHQsbixlKSxwcih0LHt0eXBlOmUsaWQ6eXIrKyxmcm96ZW46dm9pZCAwfSksbnVsbCE9byYmc3Iobyx0W2ldLHQscil9KSksbz12cihlKSxzPWZ1bmN0aW9uKHQsZSxyKXt2YXIgaT1vKHQpLG49ZHIoUihlKSwhMCk7cmV0dXJuITA9PT1uP21yKGkpLnNldChlLHIpOm5baS5pZF09cix0fTtyZXR1cm4gWmUobi5wcm90b3R5cGUse2RlbGV0ZTpmdW5jdGlvbih0KXt2YXIgZT1vKHRoaXMpO2lmKCF4KHQpKXJldHVybiExO3ZhciByPWRyKHQpO3JldHVybiEwPT09cj9tcihlKS5kZWxldGUodCk6ciYmUyhyLGUuaWQpJiZkZWxldGUgcltlLmlkXX0saGFzOmZ1bmN0aW9uKHQpe3ZhciBlPW8odGhpcyk7aWYoIXgodCkpcmV0dXJuITE7dmFyIHI9ZHIodCk7cmV0dXJuITA9PT1yP21yKGUpLmhhcyh0KTpyJiZTKHIsZS5pZCl9fSksWmUobi5wcm90b3R5cGUscj97Z2V0OmZ1bmN0aW9uKHQpe3ZhciBlPW8odGhpcyk7aWYoeCh0KSl7dmFyIHI9ZHIodCk7cmV0dXJuITA9PT1yP21yKGUpLmdldCh0KTpyP3JbZS5pZF06dm9pZCAwfX0sc2V0OmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHModGhpcyx0LGUpfX06e2FkZDpmdW5jdGlvbih0KXtyZXR1cm4gcyh0aGlzLHQsITApfX0pLG59fSxTcj0oZSgoZnVuY3Rpb24odCl7dmFyIGUscj1LLmVuZm9yY2UsaT0hYS5BY3RpdmVYT2JqZWN0JiZcIkFjdGl2ZVhPYmplY3RcImluIGEsbj1PYmplY3QuaXNFeHRlbnNpYmxlLG89ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQodGhpcyxhcmd1bWVudHMubGVuZ3RoP2FyZ3VtZW50c1swXTp2b2lkIDApfX0scz10LmV4cG9ydHM9aHIoXCJXZWFrTWFwXCIsbyx3ciwhMCwhMCk7aWYoQiYmaSl7ZT13ci5nZXRDb25zdHJ1Y3RvcihvLFwiV2Vha01hcFwiLCEwKSxlci5SRVFVSVJFRD0hMDt2YXIgYz1zLnByb3RvdHlwZSxsPWMuZGVsZXRlLHU9Yy5oYXMsZj1jLmdldCxoPWMuc2V0O1plKGMse2RlbGV0ZTpmdW5jdGlvbih0KXtpZih4KHQpJiYhbih0KSl7dmFyIGk9cih0aGlzKTtyZXR1cm4gaS5mcm96ZW58fChpLmZyb3plbj1uZXcgZSksbC5jYWxsKHRoaXMsdCl8fGkuZnJvemVuLmRlbGV0ZSh0KX1yZXR1cm4gbC5jYWxsKHRoaXMsdCl9LGhhczpmdW5jdGlvbih0KXtpZih4KHQpJiYhbih0KSl7dmFyIGk9cih0aGlzKTtyZXR1cm4gaS5mcm96ZW58fChpLmZyb3plbj1uZXcgZSksdS5jYWxsKHRoaXMsdCl8fGkuZnJvemVuLmhhcyh0KX1yZXR1cm4gdS5jYWxsKHRoaXMsdCl9LGdldDpmdW5jdGlvbih0KXtpZih4KHQpJiYhbih0KSl7dmFyIGk9cih0aGlzKTtyZXR1cm4gaS5mcm96ZW58fChpLmZyb3plbj1uZXcgZSksdS5jYWxsKHRoaXMsdCk/Zi5jYWxsKHRoaXMsdCk6aS5mcm96ZW4uZ2V0KHQpfXJldHVybiBmLmNhbGwodGhpcyx0KX0sc2V0OmZ1bmN0aW9uKHQsaSl7aWYoeCh0KSYmIW4odCkpe3ZhciBvPXIodGhpcyk7by5mcm96ZW58fChvLmZyb3plbj1uZXcgZSksdS5jYWxsKHRoaXMsdCk/aC5jYWxsKHRoaXMsdCxpKTpvLmZyb3plbi5zZXQodCxpKX1lbHNlIGguY2FsbCh0aGlzLHQsaSk7cmV0dXJuIHRoaXN9fSl9fSkpLGp0KFwiaXRlcmF0b3JcIikpLE9yPWp0KFwidG9TdHJpbmdUYWdcIiksa3I9UmUudmFsdWVzO2Zvcih2YXIgQXIgaW4gWHQpe3ZhciBUcj1hW0FyXSxMcj1UciYmVHIucHJvdG90eXBlO2lmKExyKXtpZihMcltTcl0hPT1rcil0cnl7QyhMcixTcixrcil9Y2F0Y2godCl7THJbU3JdPWtyfWlmKExyW09yXXx8QyhMcixPcixBciksWHRbQXJdKWZvcih2YXIgenIgaW4gUmUpaWYoTHJbenJdIT09UmVbenJdKXRyeXtDKExyLHpyLFJlW3pyXSl9Y2F0Y2godCl7THJbenJdPVJlW3pyXX19fXZhciBScj1cIkV4cGVjdGVkIGEgZnVuY3Rpb25cIixfcj1OYU4sTXI9XCJbb2JqZWN0IFN5bWJvbF1cIixDcj0vXlxccyt8XFxzKyQvZyxqcj0vXlstK10weFswLTlhLWZdKyQvaSxXcj0vXjBiWzAxXSskL2ksTnI9L14wb1swLTddKyQvaSxJcj1wYXJzZUludCxCcj1cIm9iamVjdFwiPT10eXBlb2YgdCYmdCYmdC5PYmplY3Q9PT1PYmplY3QmJnQsRHI9XCJvYmplY3RcIj09dHlwZW9mIHNlbGYmJnNlbGYmJnNlbGYuT2JqZWN0PT09T2JqZWN0JiZzZWxmLFByPUJyfHxEcnx8RnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpLEZyPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsVnI9TWF0aC5tYXgsWHI9TWF0aC5taW4sSHI9ZnVuY3Rpb24oKXtyZXR1cm4gUHIuRGF0ZS5ub3coKX07ZnVuY3Rpb24gcXIodCxlLHIpe3ZhciBpLG4sbyxzLGEsYyxsPTAsdT0hMSxmPSExLGg9ITA7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKFJyKTtmdW5jdGlvbiBkKGUpe3ZhciByPWksbz1uO3JldHVybiBpPW49dm9pZCAwLGw9ZSxzPXQuYXBwbHkobyxyKX1mdW5jdGlvbiBwKHQpe3ZhciByPXQtYztyZXR1cm4gdm9pZCAwPT09Y3x8cj49ZXx8cjwwfHxmJiZ0LWw+PW99ZnVuY3Rpb24gdigpe3ZhciB0PUhyKCk7aWYocCh0KSlyZXR1cm4gZyh0KTthPXNldFRpbWVvdXQodixmdW5jdGlvbih0KXt2YXIgcj1lLSh0LWMpO3JldHVybiBmP1hyKHIsby0odC1sKSk6cn0odCkpfWZ1bmN0aW9uIGcodCl7cmV0dXJuIGE9dm9pZCAwLGgmJmk/ZCh0KTooaT1uPXZvaWQgMCxzKX1mdW5jdGlvbiBiKCl7dmFyIHQ9SHIoKSxyPXAodCk7aWYoaT1hcmd1bWVudHMsbj10aGlzLGM9dCxyKXtpZih2b2lkIDA9PT1hKXJldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gbD10LGE9c2V0VGltZW91dCh2LGUpLHU/ZCh0KTpzfShjKTtpZihmKXJldHVybiBhPXNldFRpbWVvdXQodixlKSxkKGMpfXJldHVybiB2b2lkIDA9PT1hJiYoYT1zZXRUaW1lb3V0KHYsZSkpLHN9cmV0dXJuIGU9WXIoZSl8fDAsJHIocikmJih1PSEhci5sZWFkaW5nLG89KGY9XCJtYXhXYWl0XCJpbiByKT9WcihZcihyLm1heFdhaXQpfHwwLGUpOm8saD1cInRyYWlsaW5nXCJpbiByPyEhci50cmFpbGluZzpoKSxiLmNhbmNlbD1mdW5jdGlvbigpe3ZvaWQgMCE9PWEmJmNsZWFyVGltZW91dChhKSxsPTAsaT1jPW49YT12b2lkIDB9LGIuZmx1c2g9ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09YT9zOmcoSHIoKSl9LGJ9ZnVuY3Rpb24gJHIodCl7dmFyIGU9dHlwZW9mIHQ7cmV0dXJuISF0JiYoXCJvYmplY3RcIj09ZXx8XCJmdW5jdGlvblwiPT1lKX1mdW5jdGlvbiBZcih0KXtpZihcIm51bWJlclwiPT10eXBlb2YgdClyZXR1cm4gdDtpZihmdW5jdGlvbih0KXtyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgdHx8ZnVuY3Rpb24odCl7cmV0dXJuISF0JiZcIm9iamVjdFwiPT10eXBlb2YgdH0odCkmJkZyLmNhbGwodCk9PU1yfSh0KSlyZXR1cm4gX3I7aWYoJHIodCkpe3ZhciBlPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQudmFsdWVPZj90LnZhbHVlT2YoKTp0O3Q9JHIoZSk/ZStcIlwiOmV9aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHQpcmV0dXJuIDA9PT10P3Q6K3Q7dD10LnJlcGxhY2UoQ3IsXCJcIik7dmFyIHI9V3IudGVzdCh0KTtyZXR1cm4gcnx8TnIudGVzdCh0KT9Jcih0LnNsaWNlKDIpLHI/Mjo4KTpqci50ZXN0KHQpP19yOit0fXZhciBHcj1mdW5jdGlvbih0LGUscil7dmFyIGk9ITAsbj0hMDtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoUnIpO3JldHVybiAkcihyKSYmKGk9XCJsZWFkaW5nXCJpbiByPyEhci5sZWFkaW5nOmksbj1cInRyYWlsaW5nXCJpbiByPyEhci50cmFpbGluZzpuKSxxcih0LGUse2xlYWRpbmc6aSxtYXhXYWl0OmUsdHJhaWxpbmc6bn0pfSxVcj1cIkV4cGVjdGVkIGEgZnVuY3Rpb25cIixRcj1OYU4sS3I9XCJbb2JqZWN0IFN5bWJvbF1cIixKcj0vXlxccyt8XFxzKyQvZyxacj0vXlstK10weFswLTlhLWZdKyQvaSx0aT0vXjBiWzAxXSskL2ksZWk9L14wb1swLTddKyQvaSxyaT1wYXJzZUludCxpaT1cIm9iamVjdFwiPT10eXBlb2YgdCYmdCYmdC5PYmplY3Q9PT1PYmplY3QmJnQsbmk9XCJvYmplY3RcIj09dHlwZW9mIHNlbGYmJnNlbGYmJnNlbGYuT2JqZWN0PT09T2JqZWN0JiZzZWxmLG9pPWlpfHxuaXx8RnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpLHNpPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsYWk9TWF0aC5tYXgsY2k9TWF0aC5taW4sbGk9ZnVuY3Rpb24oKXtyZXR1cm4gb2kuRGF0ZS5ub3coKX07ZnVuY3Rpb24gdWkodCl7dmFyIGU9dHlwZW9mIHQ7cmV0dXJuISF0JiYoXCJvYmplY3RcIj09ZXx8XCJmdW5jdGlvblwiPT1lKX1mdW5jdGlvbiBmaSh0KXtpZihcIm51bWJlclwiPT10eXBlb2YgdClyZXR1cm4gdDtpZihmdW5jdGlvbih0KXtyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgdHx8ZnVuY3Rpb24odCl7cmV0dXJuISF0JiZcIm9iamVjdFwiPT10eXBlb2YgdH0odCkmJnNpLmNhbGwodCk9PUtyfSh0KSlyZXR1cm4gUXI7aWYodWkodCkpe3ZhciBlPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQudmFsdWVPZj90LnZhbHVlT2YoKTp0O3Q9dWkoZSk/ZStcIlwiOmV9aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHQpcmV0dXJuIDA9PT10P3Q6K3Q7dD10LnJlcGxhY2UoSnIsXCJcIik7dmFyIHI9dGkudGVzdCh0KTtyZXR1cm4gcnx8ZWkudGVzdCh0KT9yaSh0LnNsaWNlKDIpLHI/Mjo4KTpaci50ZXN0KHQpP1FyOit0fXZhciBoaT1mdW5jdGlvbih0LGUscil7dmFyIGksbixvLHMsYSxjLGw9MCx1PSExLGY9ITEsaD0hMDtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoVXIpO2Z1bmN0aW9uIGQoZSl7dmFyIHI9aSxvPW47cmV0dXJuIGk9bj12b2lkIDAsbD1lLHM9dC5hcHBseShvLHIpfWZ1bmN0aW9uIHAodCl7dmFyIHI9dC1jO3JldHVybiB2b2lkIDA9PT1jfHxyPj1lfHxyPDB8fGYmJnQtbD49b31mdW5jdGlvbiB2KCl7dmFyIHQ9bGkoKTtpZihwKHQpKXJldHVybiBnKHQpO2E9c2V0VGltZW91dCh2LGZ1bmN0aW9uKHQpe3ZhciByPWUtKHQtYyk7cmV0dXJuIGY/Y2kocixvLSh0LWwpKTpyfSh0KSl9ZnVuY3Rpb24gZyh0KXtyZXR1cm4gYT12b2lkIDAsaCYmaT9kKHQpOihpPW49dm9pZCAwLHMpfWZ1bmN0aW9uIGIoKXt2YXIgdD1saSgpLHI9cCh0KTtpZihpPWFyZ3VtZW50cyxuPXRoaXMsYz10LHIpe2lmKHZvaWQgMD09PWEpcmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBsPXQsYT1zZXRUaW1lb3V0KHYsZSksdT9kKHQpOnN9KGMpO2lmKGYpcmV0dXJuIGE9c2V0VGltZW91dCh2LGUpLGQoYyl9cmV0dXJuIHZvaWQgMD09PWEmJihhPXNldFRpbWVvdXQodixlKSksc31yZXR1cm4gZT1maShlKXx8MCx1aShyKSYmKHU9ISFyLmxlYWRpbmcsbz0oZj1cIm1heFdhaXRcImluIHIpP2FpKGZpKHIubWF4V2FpdCl8fDAsZSk6byxoPVwidHJhaWxpbmdcImluIHI/ISFyLnRyYWlsaW5nOmgpLGIuY2FuY2VsPWZ1bmN0aW9uKCl7dm9pZCAwIT09YSYmY2xlYXJUaW1lb3V0KGEpLGw9MCxpPWM9bj1hPXZvaWQgMH0sYi5mbHVzaD1mdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT1hP3M6ZyhsaSgpKX0sYn0sZGk9XCJFeHBlY3RlZCBhIGZ1bmN0aW9uXCIscGk9XCJfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fXCIsdmk9XCJbb2JqZWN0IEZ1bmN0aW9uXVwiLGdpPVwiW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl1cIixiaT0vXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvLHlpPVwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0JiZ0Lk9iamVjdD09PU9iamVjdCYmdCxtaT1cIm9iamVjdFwiPT10eXBlb2Ygc2VsZiYmc2VsZiYmc2VsZi5PYmplY3Q9PT1PYmplY3QmJnNlbGYseGk9eWl8fG1pfHxGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7dmFyIEVpPUFycmF5LnByb3RvdHlwZSx3aT1GdW5jdGlvbi5wcm90b3R5cGUsU2k9T2JqZWN0LnByb3RvdHlwZSxPaT14aVtcIl9fY29yZS1qc19zaGFyZWRfX1wiXSxraT1mdW5jdGlvbigpe3ZhciB0PS9bXi5dKyQvLmV4ZWMoT2kmJk9pLmtleXMmJk9pLmtleXMuSUVfUFJPVE98fFwiXCIpO3JldHVybiB0P1wiU3ltYm9sKHNyYylfMS5cIit0OlwiXCJ9KCksQWk9d2kudG9TdHJpbmcsVGk9U2kuaGFzT3duUHJvcGVydHksTGk9U2kudG9TdHJpbmcsemk9UmVnRXhwKFwiXlwiK0FpLmNhbGwoVGkpLnJlcGxhY2UoL1tcXFxcXiQuKis/KClbXFxde318XS9nLFwiXFxcXCQmXCIpLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csXCIkMS4qP1wiKStcIiRcIiksUmk9RWkuc3BsaWNlLF9pPURpKHhpLFwiTWFwXCIpLE1pPURpKE9iamVjdCxcImNyZWF0ZVwiKTtmdW5jdGlvbiBDaSh0KXt2YXIgZT0tMSxyPXQ/dC5sZW5ndGg6MDtmb3IodGhpcy5jbGVhcigpOysrZTxyOyl7dmFyIGk9dFtlXTt0aGlzLnNldChpWzBdLGlbMV0pfX1mdW5jdGlvbiBqaSh0KXt2YXIgZT0tMSxyPXQ/dC5sZW5ndGg6MDtmb3IodGhpcy5jbGVhcigpOysrZTxyOyl7dmFyIGk9dFtlXTt0aGlzLnNldChpWzBdLGlbMV0pfX1mdW5jdGlvbiBXaSh0KXt2YXIgZT0tMSxyPXQ/dC5sZW5ndGg6MDtmb3IodGhpcy5jbGVhcigpOysrZTxyOyl7dmFyIGk9dFtlXTt0aGlzLnNldChpWzBdLGlbMV0pfX1mdW5jdGlvbiBOaSh0LGUpe2Zvcih2YXIgcixpLG49dC5sZW5ndGg7bi0tOylpZigocj10W25dWzBdKT09PShpPWUpfHxyIT1yJiZpIT1pKXJldHVybiBuO3JldHVybi0xfWZ1bmN0aW9uIElpKHQpe3JldHVybiEoIUZpKHQpfHwoZT10LGtpJiZraSBpbiBlKSkmJihmdW5jdGlvbih0KXt2YXIgZT1GaSh0KT9MaS5jYWxsKHQpOlwiXCI7cmV0dXJuIGU9PXZpfHxlPT1naX0odCl8fGZ1bmN0aW9uKHQpe3ZhciBlPSExO2lmKG51bGwhPXQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQudG9TdHJpbmcpdHJ5e2U9ISEodCtcIlwiKX1jYXRjaCh0KXt9cmV0dXJuIGV9KHQpP3ppOmJpKS50ZXN0KGZ1bmN0aW9uKHQpe2lmKG51bGwhPXQpe3RyeXtyZXR1cm4gQWkuY2FsbCh0KX1jYXRjaCh0KXt9dHJ5e3JldHVybiB0K1wiXCJ9Y2F0Y2godCl7fX1yZXR1cm5cIlwifSh0KSk7dmFyIGV9ZnVuY3Rpb24gQmkodCxlKXt2YXIgcixpLG49dC5fX2RhdGFfXztyZXR1cm4oXCJzdHJpbmdcIj09KGk9dHlwZW9mKHI9ZSkpfHxcIm51bWJlclwiPT1pfHxcInN5bWJvbFwiPT1pfHxcImJvb2xlYW5cIj09aT9cIl9fcHJvdG9fX1wiIT09cjpudWxsPT09cik/bltcInN0cmluZ1wiPT10eXBlb2YgZT9cInN0cmluZ1wiOlwiaGFzaFwiXTpuLm1hcH1mdW5jdGlvbiBEaSh0LGUpe3ZhciByPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG51bGw9PXQ/dm9pZCAwOnRbZV19KHQsZSk7cmV0dXJuIElpKHIpP3I6dm9pZCAwfWZ1bmN0aW9uIFBpKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdHx8ZSYmXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKGRpKTt2YXIgcj1mdW5jdGlvbigpe3ZhciBpPWFyZ3VtZW50cyxuPWU/ZS5hcHBseSh0aGlzLGkpOmlbMF0sbz1yLmNhY2hlO2lmKG8uaGFzKG4pKXJldHVybiBvLmdldChuKTt2YXIgcz10LmFwcGx5KHRoaXMsaSk7cmV0dXJuIHIuY2FjaGU9by5zZXQobixzKSxzfTtyZXR1cm4gci5jYWNoZT1uZXcoUGkuQ2FjaGV8fFdpKSxyfWZ1bmN0aW9uIEZpKHQpe3ZhciBlPXR5cGVvZiB0O3JldHVybiEhdCYmKFwib2JqZWN0XCI9PWV8fFwiZnVuY3Rpb25cIj09ZSl9Q2kucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5fX2RhdGFfXz1NaT9NaShudWxsKTp7fX0sQ2kucHJvdG90eXBlLmRlbGV0ZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5oYXModCkmJmRlbGV0ZSB0aGlzLl9fZGF0YV9fW3RdfSxDaS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX19kYXRhX187aWYoTWkpe3ZhciByPWVbdF07cmV0dXJuIHI9PT1waT92b2lkIDA6cn1yZXR1cm4gVGkuY2FsbChlLHQpP2VbdF06dm9pZCAwfSxDaS5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX19kYXRhX187cmV0dXJuIE1pP3ZvaWQgMCE9PWVbdF06VGkuY2FsbChlLHQpfSxDaS5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuX19kYXRhX19bdF09TWkmJnZvaWQgMD09PWU/cGk6ZSx0aGlzfSxqaS5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLl9fZGF0YV9fPVtdfSxqaS5wcm90b3R5cGUuZGVsZXRlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX19kYXRhX18scj1OaShlLHQpO3JldHVybiEocjwwKSYmKHI9PWUubGVuZ3RoLTE/ZS5wb3AoKTpSaS5jYWxsKGUsciwxKSwhMCl9LGppLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fX2RhdGFfXyxyPU5pKGUsdCk7cmV0dXJuIHI8MD92b2lkIDA6ZVtyXVsxXX0samkucHJvdG90eXBlLmhhcz1mdW5jdGlvbih0KXtyZXR1cm4gTmkodGhpcy5fX2RhdGFfXyx0KT4tMX0samkucHJvdG90eXBlLnNldD1mdW5jdGlvbih0LGUpe3ZhciByPXRoaXMuX19kYXRhX18saT1OaShyLHQpO3JldHVybiBpPDA/ci5wdXNoKFt0LGVdKTpyW2ldWzFdPWUsdGhpc30sV2kucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5fX2RhdGFfXz17aGFzaDpuZXcgQ2ksbWFwOm5ldyhfaXx8amkpLHN0cmluZzpuZXcgQ2l9fSxXaS5wcm90b3R5cGUuZGVsZXRlPWZ1bmN0aW9uKHQpe3JldHVybiBCaSh0aGlzLHQpLmRlbGV0ZSh0KX0sV2kucHJvdG90eXBlLmdldD1mdW5jdGlvbih0KXtyZXR1cm4gQmkodGhpcyx0KS5nZXQodCl9LFdpLnByb3RvdHlwZS5oYXM9ZnVuY3Rpb24odCl7cmV0dXJuIEJpKHRoaXMsdCkuaGFzKHQpfSxXaS5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIEJpKHRoaXMsdCkuc2V0KHQsZSksdGhpc30sUGkuQ2FjaGU9V2k7dmFyIFZpLFhpPVBpLEhpPVtdLHFpPVwiUmVzaXplT2JzZXJ2ZXIgbG9vcCBjb21wbGV0ZWQgd2l0aCB1bmRlbGl2ZXJlZCBub3RpZmljYXRpb25zLlwiOyFmdW5jdGlvbih0KXt0LkJPUkRFUl9CT1g9XCJib3JkZXItYm94XCIsdC5DT05URU5UX0JPWD1cImNvbnRlbnQtYm94XCIsdC5ERVZJQ0VfUElYRUxfQ09OVEVOVF9CT1g9XCJkZXZpY2UtcGl4ZWwtY29udGVudC1ib3hcIn0oVml8fChWaT17fSkpO3ZhciAkaSxZaT1mdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0LmZyZWV6ZSh0KX0sR2k9ZnVuY3Rpb24odCxlKXt0aGlzLmlubGluZVNpemU9dCx0aGlzLmJsb2NrU2l6ZT1lLFlpKHRoaXMpfSxVaT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLHIsaSl7cmV0dXJuIHRoaXMueD10LHRoaXMueT1lLHRoaXMud2lkdGg9cix0aGlzLmhlaWdodD1pLHRoaXMudG9wPXRoaXMueSx0aGlzLmxlZnQ9dGhpcy54LHRoaXMuYm90dG9tPXRoaXMudG9wK3RoaXMuaGVpZ2h0LHRoaXMucmlnaHQ9dGhpcy5sZWZ0K3RoaXMud2lkdGgsWWkodGhpcyl9cmV0dXJuIHQucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3ZhciB0PXRoaXM7cmV0dXJue3g6dC54LHk6dC55LHRvcDp0LnRvcCxyaWdodDp0LnJpZ2h0LGJvdHRvbTp0LmJvdHRvbSxsZWZ0OnQubGVmdCx3aWR0aDp0LndpZHRoLGhlaWdodDp0LmhlaWdodH19LHQuZnJvbVJlY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyB0KGUueCxlLnksZS53aWR0aCxlLmhlaWdodCl9LHR9KCksUWk9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBTVkdFbGVtZW50JiZcImdldEJCb3hcImluIHR9LEtpPWZ1bmN0aW9uKHQpe2lmKFFpKHQpKXt2YXIgZT10LmdldEJCb3goKSxyPWUud2lkdGgsaT1lLmhlaWdodDtyZXR1cm4hciYmIWl9dmFyIG49dCxvPW4ub2Zmc2V0V2lkdGgscz1uLm9mZnNldEhlaWdodDtyZXR1cm4hKG98fHN8fHQuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpfSxKaT1mdW5jdGlvbih0KXt2YXIgZSxyO2lmKHQgaW5zdGFuY2VvZiBFbGVtZW50KXJldHVybiEwO3ZhciBpPW51bGw9PT0ocj1udWxsPT09KGU9dCl8fHZvaWQgMD09PWU/dm9pZCAwOmUub3duZXJEb2N1bWVudCl8fHZvaWQgMD09PXI/dm9pZCAwOnIuZGVmYXVsdFZpZXc7cmV0dXJuISEoaSYmdCBpbnN0YW5jZW9mIGkuRWxlbWVudCl9LFppPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Ont9LHRuPW5ldyBXZWFrTWFwLGVuPS9hdXRvfHNjcm9sbC8scm49L150Ynx2ZXJ0aWNhbC8sbm49L21zaWV8dHJpZGVudC9pLnRlc3QoWmkubmF2aWdhdG9yJiZaaS5uYXZpZ2F0b3IudXNlckFnZW50KSxvbj1mdW5jdGlvbih0KXtyZXR1cm4gcGFyc2VGbG9hdCh0fHxcIjBcIil9LHNuPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9MCksdm9pZCAwPT09ZSYmKGU9MCksdm9pZCAwPT09ciYmKHI9ITEpLG5ldyBHaSgocj9lOnQpfHwwLChyP3Q6ZSl8fDApfSxhbj1ZaSh7ZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZTpzbigpLGJvcmRlckJveFNpemU6c24oKSxjb250ZW50Qm94U2l6ZTpzbigpLGNvbnRlbnRSZWN0Om5ldyBVaSgwLDAsMCwwKX0pLGNuPWZ1bmN0aW9uKHQsZSl7aWYodm9pZCAwPT09ZSYmKGU9ITEpLHRuLmhhcyh0KSYmIWUpcmV0dXJuIHRuLmdldCh0KTtpZihLaSh0KSlyZXR1cm4gdG4uc2V0KHQsYW4pLGFuO3ZhciByPWdldENvbXB1dGVkU3R5bGUodCksaT1RaSh0KSYmdC5vd25lclNWR0VsZW1lbnQmJnQuZ2V0QkJveCgpLG49IW5uJiZcImJvcmRlci1ib3hcIj09PXIuYm94U2l6aW5nLG89cm4udGVzdChyLndyaXRpbmdNb2RlfHxcIlwiKSxzPSFpJiZlbi50ZXN0KHIub3ZlcmZsb3dZfHxcIlwiKSxhPSFpJiZlbi50ZXN0KHIub3ZlcmZsb3dYfHxcIlwiKSxjPWk/MDpvbihyLnBhZGRpbmdUb3ApLGw9aT8wOm9uKHIucGFkZGluZ1JpZ2h0KSx1PWk/MDpvbihyLnBhZGRpbmdCb3R0b20pLGY9aT8wOm9uKHIucGFkZGluZ0xlZnQpLGg9aT8wOm9uKHIuYm9yZGVyVG9wV2lkdGgpLGQ9aT8wOm9uKHIuYm9yZGVyUmlnaHRXaWR0aCkscD1pPzA6b24oci5ib3JkZXJCb3R0b21XaWR0aCksdj1mK2wsZz1jK3UsYj0oaT8wOm9uKHIuYm9yZGVyTGVmdFdpZHRoKSkrZCx5PWgrcCxtPWE/dC5vZmZzZXRIZWlnaHQteS10LmNsaWVudEhlaWdodDowLHg9cz90Lm9mZnNldFdpZHRoLWItdC5jbGllbnRXaWR0aDowLEU9bj92K2I6MCx3PW4/Zyt5OjAsUz1pP2kud2lkdGg6b24oci53aWR0aCktRS14LE89aT9pLmhlaWdodDpvbihyLmhlaWdodCktdy1tLGs9Uyt2K3grYixBPU8rZyttK3ksVD1ZaSh7ZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZTpzbihNYXRoLnJvdW5kKFMqZGV2aWNlUGl4ZWxSYXRpbyksTWF0aC5yb3VuZChPKmRldmljZVBpeGVsUmF0aW8pLG8pLGJvcmRlckJveFNpemU6c24oayxBLG8pLGNvbnRlbnRCb3hTaXplOnNuKFMsTyxvKSxjb250ZW50UmVjdDpuZXcgVWkoZixjLFMsTyl9KTtyZXR1cm4gdG4uc2V0KHQsVCksVH0sbG49ZnVuY3Rpb24odCxlLHIpe3ZhciBpPWNuKHQsciksbj1pLmJvcmRlckJveFNpemUsbz1pLmNvbnRlbnRCb3hTaXplLHM9aS5kZXZpY2VQaXhlbENvbnRlbnRCb3hTaXplO3N3aXRjaChlKXtjYXNlIFZpLkRFVklDRV9QSVhFTF9DT05URU5UX0JPWDpyZXR1cm4gcztjYXNlIFZpLkJPUkRFUl9CT1g6cmV0dXJuIG47ZGVmYXVsdDpyZXR1cm4gb319LHVuPWZ1bmN0aW9uKHQpe3ZhciBlPWNuKHQpO3RoaXMudGFyZ2V0PXQsdGhpcy5jb250ZW50UmVjdD1lLmNvbnRlbnRSZWN0LHRoaXMuYm9yZGVyQm94U2l6ZT1ZaShbZS5ib3JkZXJCb3hTaXplXSksdGhpcy5jb250ZW50Qm94U2l6ZT1ZaShbZS5jb250ZW50Qm94U2l6ZV0pLHRoaXMuZGV2aWNlUGl4ZWxDb250ZW50Qm94U2l6ZT1ZaShbZS5kZXZpY2VQaXhlbENvbnRlbnRCb3hTaXplXSl9LGZuPWZ1bmN0aW9uKHQpe2lmKEtpKHQpKXJldHVybiAxLzA7Zm9yKHZhciBlPTAscj10LnBhcmVudE5vZGU7cjspZSs9MSxyPXIucGFyZW50Tm9kZTtyZXR1cm4gZX0saG49ZnVuY3Rpb24oKXt2YXIgdD0xLzAsZT1bXTtIaS5mb3JFYWNoKChmdW5jdGlvbihyKXtpZigwIT09ci5hY3RpdmVUYXJnZXRzLmxlbmd0aCl7dmFyIGk9W107ci5hY3RpdmVUYXJnZXRzLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciByPW5ldyB1bihlLnRhcmdldCksbj1mbihlLnRhcmdldCk7aS5wdXNoKHIpLGUubGFzdFJlcG9ydGVkU2l6ZT1sbihlLnRhcmdldCxlLm9ic2VydmVkQm94KSxuPHQmJih0PW4pfSkpLGUucHVzaCgoZnVuY3Rpb24oKXtyLmNhbGxiYWNrLmNhbGwoci5vYnNlcnZlcixpLHIub2JzZXJ2ZXIpfSkpLHIuYWN0aXZlVGFyZ2V0cy5zcGxpY2UoMCxyLmFjdGl2ZVRhcmdldHMubGVuZ3RoKX19KSk7Zm9yKHZhciByPTAsaT1lO3I8aS5sZW5ndGg7cisrKXsoMCxpW3JdKSgpfXJldHVybiB0fSxkbj1mdW5jdGlvbih0KXtIaS5mb3JFYWNoKChmdW5jdGlvbihlKXtlLmFjdGl2ZVRhcmdldHMuc3BsaWNlKDAsZS5hY3RpdmVUYXJnZXRzLmxlbmd0aCksZS5za2lwcGVkVGFyZ2V0cy5zcGxpY2UoMCxlLnNraXBwZWRUYXJnZXRzLmxlbmd0aCksZS5vYnNlcnZhdGlvblRhcmdldHMuZm9yRWFjaCgoZnVuY3Rpb24ocil7ci5pc0FjdGl2ZSgpJiYoZm4oci50YXJnZXQpPnQ/ZS5hY3RpdmVUYXJnZXRzLnB1c2gocik6ZS5za2lwcGVkVGFyZ2V0cy5wdXNoKHIpKX0pKX0pKX0scG49ZnVuY3Rpb24oKXt2YXIgdCxlPTA7Zm9yKGRuKGUpO0hpLnNvbWUoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmFjdGl2ZVRhcmdldHMubGVuZ3RoPjB9KSk7KWU9aG4oKSxkbihlKTtyZXR1cm4gSGkuc29tZSgoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2tpcHBlZFRhcmdldHMubGVuZ3RoPjB9KSkmJihcImZ1bmN0aW9uXCI9PXR5cGVvZiBFcnJvckV2ZW50P3Q9bmV3IEVycm9yRXZlbnQoXCJlcnJvclwiLHttZXNzYWdlOnFpfSk6KCh0PWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIikpLmluaXRFdmVudChcImVycm9yXCIsITEsITEpLHQubWVzc2FnZT1xaSksd2luZG93LmRpc3BhdGNoRXZlbnQodCkpLGU+MH0sdm49W10sZ249ZnVuY3Rpb24odCl7aWYoISRpKXt2YXIgZT0wLHI9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIik7bmV3IE11dGF0aW9uT2JzZXJ2ZXIoKGZ1bmN0aW9uKCl7cmV0dXJuIHZuLnNwbGljZSgwKS5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gdCgpfSkpfSkpLm9ic2VydmUocix7Y2hhcmFjdGVyRGF0YTohMH0pLCRpPWZ1bmN0aW9uKCl7ci50ZXh0Q29udGVudD1cIlwiKyhlP2UtLTplKyspfX12bi5wdXNoKHQpLCRpKCl9LGJuPTAseW49e2F0dHJpYnV0ZXM6ITAsY2hhcmFjdGVyRGF0YTohMCxjaGlsZExpc3Q6ITAsc3VidHJlZTohMH0sbW49W1wicmVzaXplXCIsXCJsb2FkXCIsXCJ0cmFuc2l0aW9uZW5kXCIsXCJhbmltYXRpb25lbmRcIixcImFuaW1hdGlvbnN0YXJ0XCIsXCJhbmltYXRpb25pdGVyYXRpb25cIixcImtleXVwXCIsXCJrZXlkb3duXCIsXCJtb3VzZXVwXCIsXCJtb3VzZWRvd25cIixcIm1vdXNlb3ZlclwiLFwibW91c2VvdXRcIixcImJsdXJcIixcImZvY3VzXCJdLHhuPWZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10JiYodD0wKSxEYXRlLm5vdygpK3R9LEVuPSExLHduPW5ldyhmdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt2YXIgdD10aGlzO3RoaXMuc3RvcHBlZD0hMCx0aGlzLmxpc3RlbmVyPWZ1bmN0aW9uKCl7cmV0dXJuIHQuc2NoZWR1bGUoKX19cmV0dXJuIHQucHJvdG90eXBlLnJ1bj1mdW5jdGlvbih0KXt2YXIgZT10aGlzO2lmKHZvaWQgMD09PXQmJih0PTI1MCksIUVuKXtFbj0hMDt2YXIgcixpPXhuKHQpO3I9ZnVuY3Rpb24oKXt2YXIgcj0hMTt0cnl7cj1wbigpfWZpbmFsbHl7aWYoRW49ITEsdD1pLXhuKCksIWJuKXJldHVybjtyP2UucnVuKDFlMyk6dD4wP2UucnVuKHQpOmUuc3RhcnQoKX19LGduKChmdW5jdGlvbigpe3JlcXVlc3RBbmltYXRpb25GcmFtZShyKX0pKX19LHQucHJvdG90eXBlLnNjaGVkdWxlPWZ1bmN0aW9uKCl7dGhpcy5zdG9wKCksdGhpcy5ydW4oKX0sdC5wcm90b3R5cGUub2JzZXJ2ZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMsZT1mdW5jdGlvbigpe3JldHVybiB0Lm9ic2VydmVyJiZ0Lm9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuYm9keSx5bil9O2RvY3VtZW50LmJvZHk/ZSgpOlppLmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsZSl9LHQucHJvdG90eXBlLnN0YXJ0PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLnN0b3BwZWQmJih0aGlzLnN0b3BwZWQ9ITEsdGhpcy5vYnNlcnZlcj1uZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLmxpc3RlbmVyKSx0aGlzLm9ic2VydmUoKSxtbi5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gWmkuYWRkRXZlbnRMaXN0ZW5lcihlLHQubGlzdGVuZXIsITApfSkpKX0sdC5wcm90b3R5cGUuc3RvcD1mdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5zdG9wcGVkfHwodGhpcy5vYnNlcnZlciYmdGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCksbW4uZm9yRWFjaCgoZnVuY3Rpb24oZSl7cmV0dXJuIFppLnJlbW92ZUV2ZW50TGlzdGVuZXIoZSx0Lmxpc3RlbmVyLCEwKX0pKSx0aGlzLnN0b3BwZWQ9ITApfSx0fSgpKSxTbj1mdW5jdGlvbih0KXshYm4mJnQ+MCYmd24uc3RhcnQoKSwhKGJuKz10KSYmd24uc3RvcCgpfSxPbj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXt0aGlzLnRhcmdldD10LHRoaXMub2JzZXJ2ZWRCb3g9ZXx8VmkuQ09OVEVOVF9CT1gsdGhpcy5sYXN0UmVwb3J0ZWRTaXplPXtpbmxpbmVTaXplOjAsYmxvY2tTaXplOjB9fXJldHVybiB0LnByb3RvdHlwZS5pc0FjdGl2ZT1mdW5jdGlvbigpe3ZhciB0LGU9bG4odGhpcy50YXJnZXQsdGhpcy5vYnNlcnZlZEJveCwhMCk7cmV0dXJuIHQ9dGhpcy50YXJnZXQsUWkodCl8fGZ1bmN0aW9uKHQpe3N3aXRjaCh0LnRhZ05hbWUpe2Nhc2VcIklOUFVUXCI6aWYoXCJpbWFnZVwiIT09dC50eXBlKWJyZWFrO2Nhc2VcIlZJREVPXCI6Y2FzZVwiQVVESU9cIjpjYXNlXCJFTUJFRFwiOmNhc2VcIk9CSkVDVFwiOmNhc2VcIkNBTlZBU1wiOmNhc2VcIklGUkFNRVwiOmNhc2VcIklNR1wiOnJldHVybiEwfXJldHVybiExfSh0KXx8XCJpbmxpbmVcIiE9PWdldENvbXB1dGVkU3R5bGUodCkuZGlzcGxheXx8KHRoaXMubGFzdFJlcG9ydGVkU2l6ZT1lKSx0aGlzLmxhc3RSZXBvcnRlZFNpemUuaW5saW5lU2l6ZSE9PWUuaW5saW5lU2l6ZXx8dGhpcy5sYXN0UmVwb3J0ZWRTaXplLmJsb2NrU2l6ZSE9PWUuYmxvY2tTaXplfSx0fSgpLGtuPWZ1bmN0aW9uKHQsZSl7dGhpcy5hY3RpdmVUYXJnZXRzPVtdLHRoaXMuc2tpcHBlZFRhcmdldHM9W10sdGhpcy5vYnNlcnZhdGlvblRhcmdldHM9W10sdGhpcy5vYnNlcnZlcj10LHRoaXMuY2FsbGJhY2s9ZX0sQW49bmV3IFdlYWtNYXAsVG49ZnVuY3Rpb24odCxlKXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrPTEpaWYodFtyXS50YXJnZXQ9PT1lKXJldHVybiByO3JldHVybi0xfSxMbj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt9cmV0dXJuIHQuY29ubmVjdD1mdW5jdGlvbih0LGUpe3ZhciByPW5ldyBrbih0LGUpO0FuLnNldCh0LHIpfSx0Lm9ic2VydmU9ZnVuY3Rpb24odCxlLHIpe3ZhciBpPUFuLmdldCh0KSxuPTA9PT1pLm9ic2VydmF0aW9uVGFyZ2V0cy5sZW5ndGg7VG4oaS5vYnNlcnZhdGlvblRhcmdldHMsZSk8MCYmKG4mJkhpLnB1c2goaSksaS5vYnNlcnZhdGlvblRhcmdldHMucHVzaChuZXcgT24oZSxyJiZyLmJveCkpLFNuKDEpLHduLnNjaGVkdWxlKCkpfSx0LnVub2JzZXJ2ZT1mdW5jdGlvbih0LGUpe3ZhciByPUFuLmdldCh0KSxpPVRuKHIub2JzZXJ2YXRpb25UYXJnZXRzLGUpLG49MT09PXIub2JzZXJ2YXRpb25UYXJnZXRzLmxlbmd0aDtpPj0wJiYobiYmSGkuc3BsaWNlKEhpLmluZGV4T2YociksMSksci5vYnNlcnZhdGlvblRhcmdldHMuc3BsaWNlKGksMSksU24oLTEpKX0sdC5kaXNjb25uZWN0PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMscj1Bbi5nZXQodCk7ci5vYnNlcnZhdGlvblRhcmdldHMuc2xpY2UoKS5mb3JFYWNoKChmdW5jdGlvbihyKXtyZXR1cm4gZS51bm9ic2VydmUodCxyLnRhcmdldCl9KSksci5hY3RpdmVUYXJnZXRzLnNwbGljZSgwLHIuYWN0aXZlVGFyZ2V0cy5sZW5ndGgpfSx0fSgpLHpuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXtpZigwPT09YXJndW1lbnRzLmxlbmd0aCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnUmVzaXplT2JzZXJ2ZXInOiAxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuXCIpO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1Jlc2l6ZU9ic2VydmVyJzogVGhlIGNhbGxiYWNrIHByb3ZpZGVkIGFzIHBhcmFtZXRlciAxIGlzIG5vdCBhIGZ1bmN0aW9uLlwiKTtMbi5jb25uZWN0KHRoaXMsdCl9cmV0dXJuIHQucHJvdG90eXBlLm9ic2VydmU9ZnVuY3Rpb24odCxlKXtpZigwPT09YXJndW1lbnRzLmxlbmd0aCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGV4ZWN1dGUgJ29ic2VydmUnIG9uICdSZXNpemVPYnNlcnZlcic6IDEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC5cIik7aWYoIUppKHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gZXhlY3V0ZSAnb2JzZXJ2ZScgb24gJ1Jlc2l6ZU9ic2VydmVyJzogcGFyYW1ldGVyIDEgaXMgbm90IG9mIHR5cGUgJ0VsZW1lbnRcIik7TG4ub2JzZXJ2ZSh0aGlzLHQsZSl9LHQucHJvdG90eXBlLnVub2JzZXJ2ZT1mdW5jdGlvbih0KXtpZigwPT09YXJndW1lbnRzLmxlbmd0aCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGV4ZWN1dGUgJ3Vub2JzZXJ2ZScgb24gJ1Jlc2l6ZU9ic2VydmVyJzogMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LlwiKTtpZighSmkodCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICd1bm9ic2VydmUnIG9uICdSZXNpemVPYnNlcnZlcic6IHBhcmFtZXRlciAxIGlzIG5vdCBvZiB0eXBlICdFbGVtZW50XCIpO0xuLnVub2JzZXJ2ZSh0aGlzLHQpfSx0LnByb3RvdHlwZS5kaXNjb25uZWN0PWZ1bmN0aW9uKCl7TG4uZGlzY29ubmVjdCh0aGlzKX0sdC50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiZnVuY3Rpb24gUmVzaXplT2JzZXJ2ZXIgKCkgeyBbcG9seWZpbGwgY29kZV0gfVwifSx0fSgpLFJuPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlLHIsaSxuKXtUdChyKTt2YXIgbz16dChlKSxzPWIobyksYT1zdChvLmxlbmd0aCksYz10P2EtMTowLGw9dD8tMToxO2lmKGk8Milmb3IoOzspe2lmKGMgaW4gcyl7bj1zW2NdLGMrPWw7YnJlYWt9aWYoYys9bCx0P2M8MDphPD1jKXRocm93IFR5cGVFcnJvcihcIlJlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWVcIil9Zm9yKDt0P2M+PTA6YT5jO2MrPWwpYyBpbiBzJiYobj1yKG4sc1tjXSxjLG8pKTtyZXR1cm4gbn19LF9uPXtsZWZ0OlJuKCExKSxyaWdodDpSbighMCl9LmxlZnQ7QXQoe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOlB0KFwicmVkdWNlXCIpfSx7cmVkdWNlOmZ1bmN0aW9uKHQpe3JldHVybiBfbih0aGlzLHQsYXJndW1lbnRzLmxlbmd0aCxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSk7dmFyIE1uPU0uZixDbj1GdW5jdGlvbi5wcm90b3R5cGUsam49Q24udG9TdHJpbmcsV249L15cXHMqZnVuY3Rpb24gKFteIChdKikvOyFsfHxcIm5hbWVcImluIENufHxNbihDbixcIm5hbWVcIix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3RyeXtyZXR1cm4gam4uY2FsbCh0aGlzKS5tYXRjaChXbilbMV19Y2F0Y2godCl7cmV0dXJuXCJcIn19fSk7dmFyIE5uLEluLEJuPWZ1bmN0aW9uKCl7dmFyIHQ9Uih0aGlzKSxlPVwiXCI7cmV0dXJuIHQuZ2xvYmFsJiYoZSs9XCJnXCIpLHQuaWdub3JlQ2FzZSYmKGUrPVwiaVwiKSx0Lm11bHRpbGluZSYmKGUrPVwibVwiKSx0LmRvdEFsbCYmKGUrPVwic1wiKSx0LnVuaWNvZGUmJihlKz1cInVcIiksdC5zdGlja3kmJihlKz1cInlcIiksZX0sRG49UmVnRXhwLnByb3RvdHlwZS5leGVjLFBuPVN0cmluZy5wcm90b3R5cGUucmVwbGFjZSxGbj1EbixWbj0oTm49L2EvLEluPS9iKi9nLERuLmNhbGwoTm4sXCJhXCIpLERuLmNhbGwoSW4sXCJhXCIpLDAhPT1Obi5sYXN0SW5kZXh8fDAhPT1Jbi5sYXN0SW5kZXgpLFhuPXZvaWQgMCE9PS8oKT8/Ly5leGVjKFwiXCIpWzFdOyhWbnx8WG4pJiYoRm49ZnVuY3Rpb24odCl7dmFyIGUscixpLG4sbz10aGlzO3JldHVybiBYbiYmKHI9bmV3IFJlZ0V4cChcIl5cIitvLnNvdXJjZStcIiQoPyFcXFxccylcIixCbi5jYWxsKG8pKSksVm4mJihlPW8ubGFzdEluZGV4KSxpPURuLmNhbGwobyx0KSxWbiYmaSYmKG8ubGFzdEluZGV4PW8uZ2xvYmFsP2kuaW5kZXgraVswXS5sZW5ndGg6ZSksWG4mJmkmJmkubGVuZ3RoPjEmJlBuLmNhbGwoaVswXSxyLChmdW5jdGlvbigpe2ZvcihuPTE7bjxhcmd1bWVudHMubGVuZ3RoLTI7bisrKXZvaWQgMD09PWFyZ3VtZW50c1tuXSYmKGlbbl09dm9pZCAwKX0pKSxpfSk7dmFyIEhuPUZuO0F0KHt0YXJnZXQ6XCJSZWdFeHBcIixwcm90bzohMCxmb3JjZWQ6Ly4vLmV4ZWMhPT1Ibn0se2V4ZWM6SG59KTt2YXIgcW49anQoXCJzcGVjaWVzXCIpLCRuPSFjKChmdW5jdGlvbigpe3ZhciB0PS8uLztyZXR1cm4gdC5leGVjPWZ1bmN0aW9uKCl7dmFyIHQ9W107cmV0dXJuIHQuZ3JvdXBzPXthOlwiN1wifSx0fSxcIjdcIiE9PVwiXCIucmVwbGFjZSh0LFwiJDxhPlwiKX0pKSxZbj0hYygoZnVuY3Rpb24oKXt2YXIgdD0vKD86KS8sZT10LmV4ZWM7dC5leGVjPWZ1bmN0aW9uKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfTt2YXIgcj1cImFiXCIuc3BsaXQodCk7cmV0dXJuIDIhPT1yLmxlbmd0aHx8XCJhXCIhPT1yWzBdfHxcImJcIiE9PXJbMV19KSksR249ZnVuY3Rpb24odCxlLHIsaSl7dmFyIG49anQodCksbz0hYygoZnVuY3Rpb24oKXt2YXIgZT17fTtyZXR1cm4gZVtuXT1mdW5jdGlvbigpe3JldHVybiA3fSw3IT1cIlwiW3RdKGUpfSkpLHM9byYmIWMoKGZ1bmN0aW9uKCl7dmFyIGU9ITEscj0vYS87cmV0dXJuIHIuZXhlYz1mdW5jdGlvbigpe3JldHVybiBlPSEwLG51bGx9LFwic3BsaXRcIj09PXQmJihyLmNvbnN0cnVjdG9yPXt9LHIuY29uc3RydWN0b3JbcW5dPWZ1bmN0aW9uKCl7cmV0dXJuIHJ9KSxyW25dKFwiXCIpLCFlfSkpO2lmKCFvfHwhc3x8XCJyZXBsYWNlXCI9PT10JiYhJG58fFwic3BsaXRcIj09PXQmJiFZbil7dmFyIGE9Ly4vW25dLGw9cihuLFwiXCJbdF0sKGZ1bmN0aW9uKHQsZSxyLGksbil7cmV0dXJuIGUuZXhlYz09PUhuP28mJiFuP3tkb25lOiEwLHZhbHVlOmEuY2FsbChlLHIsaSl9Ontkb25lOiEwLHZhbHVlOnQuY2FsbChyLGUsaSl9Ontkb25lOiExfX0pKSx1PWxbMF0sZj1sWzFdO0ooU3RyaW5nLnByb3RvdHlwZSx0LHUpLEooUmVnRXhwLnByb3RvdHlwZSxuLDI9PWU/ZnVuY3Rpb24odCxlKXtyZXR1cm4gZi5jYWxsKHQsdGhpcyxlKX06ZnVuY3Rpb24odCl7cmV0dXJuIGYuY2FsbCh0LHRoaXMpfSksaSYmQyhSZWdFeHAucHJvdG90eXBlW25dLFwic2hhbVwiLCEwKX19LFVuPVVlLmNoYXJBdCxRbj1mdW5jdGlvbih0LGUscil7cmV0dXJuIGUrKHI/VW4odCxlKS5sZW5ndGg6MSl9LEtuPWZ1bmN0aW9uKHQsZSl7dmFyIHI9dC5leGVjO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHIpe3ZhciBpPXIuY2FsbCh0LGUpO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBpKXRocm93IFR5cGVFcnJvcihcIlJlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbFwiKTtyZXR1cm4gaX1pZihcIlJlZ0V4cFwiIT09dih0KSl0aHJvdyBUeXBlRXJyb3IoXCJSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyXCIpO3JldHVybiBIbi5jYWxsKHQsZSl9O0duKFwibWF0Y2hcIiwxLChmdW5jdGlvbih0LGUscil7cmV0dXJuW2Z1bmN0aW9uKGUpe3ZhciByPXkodGhpcyksaT1udWxsPT1lP3ZvaWQgMDplW3RdO3JldHVybiB2b2lkIDAhPT1pP2kuY2FsbChlLHIpOm5ldyBSZWdFeHAoZSlbdF0oU3RyaW5nKHIpKX0sZnVuY3Rpb24odCl7dmFyIGk9cihlLHQsdGhpcyk7aWYoaS5kb25lKXJldHVybiBpLnZhbHVlO3ZhciBuPVIodCksbz1TdHJpbmcodGhpcyk7aWYoIW4uZ2xvYmFsKXJldHVybiBLbihuLG8pO3ZhciBzPW4udW5pY29kZTtuLmxhc3RJbmRleD0wO2Zvcih2YXIgYSxjPVtdLGw9MDtudWxsIT09KGE9S24obixvKSk7KXt2YXIgdT1TdHJpbmcoYVswXSk7Y1tsXT11LFwiXCI9PT11JiYobi5sYXN0SW5kZXg9UW4obyxzdChuLmxhc3RJbmRleCkscykpLGwrK31yZXR1cm4gMD09PWw/bnVsbDpjfV19KSk7dmFyIEpuPU1hdGgubWF4LFpuPU1hdGgubWluLHRvPU1hdGguZmxvb3IsZW89L1xcJChbJCYnYF18XFxkXFxkP3w8W14+XSo+KS9nLHJvPS9cXCQoWyQmJ2BdfFxcZFxcZD8pL2c7R24oXCJyZXBsYWNlXCIsMiwoZnVuY3Rpb24odCxlLHIpe3JldHVybltmdW5jdGlvbihyLGkpe3ZhciBuPXkodGhpcyksbz1udWxsPT1yP3ZvaWQgMDpyW3RdO3JldHVybiB2b2lkIDAhPT1vP28uY2FsbChyLG4saSk6ZS5jYWxsKFN0cmluZyhuKSxyLGkpfSxmdW5jdGlvbih0LG4pe3ZhciBvPXIoZSx0LHRoaXMsbik7aWYoby5kb25lKXJldHVybiBvLnZhbHVlO3ZhciBzPVIodCksYT1TdHJpbmcodGhpcyksYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBuO2N8fChuPVN0cmluZyhuKSk7dmFyIGw9cy5nbG9iYWw7aWYobCl7dmFyIHU9cy51bmljb2RlO3MubGFzdEluZGV4PTB9Zm9yKHZhciBmPVtdOzspe3ZhciBoPUtuKHMsYSk7aWYobnVsbD09PWgpYnJlYWs7aWYoZi5wdXNoKGgpLCFsKWJyZWFrO1wiXCI9PT1TdHJpbmcoaFswXSkmJihzLmxhc3RJbmRleD1RbihhLHN0KHMubGFzdEluZGV4KSx1KSl9Zm9yKHZhciBkLHA9XCJcIix2PTAsZz0wO2c8Zi5sZW5ndGg7ZysrKXtoPWZbZ107Zm9yKHZhciBiPVN0cmluZyhoWzBdKSx5PUpuKFpuKG50KGguaW5kZXgpLGEubGVuZ3RoKSwwKSxtPVtdLHg9MTt4PGgubGVuZ3RoO3grKyltLnB1c2godm9pZCAwPT09KGQ9aFt4XSk/ZDpTdHJpbmcoZCkpO3ZhciBFPWguZ3JvdXBzO2lmKGMpe3ZhciB3PVtiXS5jb25jYXQobSx5LGEpO3ZvaWQgMCE9PUUmJncucHVzaChFKTt2YXIgUz1TdHJpbmcobi5hcHBseSh2b2lkIDAsdykpfWVsc2UgUz1pKGIsYSx5LG0sRSxuKTt5Pj12JiYocCs9YS5zbGljZSh2LHkpK1Msdj15K2IubGVuZ3RoKX1yZXR1cm4gcCthLnNsaWNlKHYpfV07ZnVuY3Rpb24gaSh0LHIsaSxuLG8scyl7dmFyIGE9aSt0Lmxlbmd0aCxjPW4ubGVuZ3RoLGw9cm87cmV0dXJuIHZvaWQgMCE9PW8mJihvPXp0KG8pLGw9ZW8pLGUuY2FsbChzLGwsKGZ1bmN0aW9uKGUscyl7dmFyIGw7c3dpdGNoKHMuY2hhckF0KDApKXtjYXNlXCIkXCI6cmV0dXJuXCIkXCI7Y2FzZVwiJlwiOnJldHVybiB0O2Nhc2VcImBcIjpyZXR1cm4gci5zbGljZSgwLGkpO2Nhc2VcIidcIjpyZXR1cm4gci5zbGljZShhKTtjYXNlXCI8XCI6bD1vW3Muc2xpY2UoMSwtMSldO2JyZWFrO2RlZmF1bHQ6dmFyIHU9K3M7aWYoMD09PXUpcmV0dXJuIGU7aWYodT5jKXt2YXIgZj10byh1LzEwKTtyZXR1cm4gMD09PWY/ZTpmPD1jP3ZvaWQgMD09PW5bZi0xXT9zLmNoYXJBdCgxKTpuW2YtMV0rcy5jaGFyQXQoMSk6ZX1sPW5bdS0xXX1yZXR1cm4gdm9pZCAwPT09bD9cIlwiOmx9KSl9fSkpO3ZhciBpbz1mdW5jdGlvbih0KXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLnJlZHVjZS5jYWxsKHQsKGZ1bmN0aW9uKHQsZSl7dmFyIHI9ZS5uYW1lLm1hdGNoKC9kYXRhLXNpbXBsZWJhci0oLispLyk7aWYocil7dmFyIGk9clsxXS5yZXBsYWNlKC9cXFcrKC4pL2csKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUudG9VcHBlckNhc2UoKX0pKTtzd2l0Y2goZS52YWx1ZSl7Y2FzZVwidHJ1ZVwiOnRbaV09ITA7YnJlYWs7Y2FzZVwiZmFsc2VcIjp0W2ldPSExO2JyZWFrO2Nhc2Ugdm9pZCAwOnRbaV09ITA7YnJlYWs7ZGVmYXVsdDp0W2ldPWUudmFsdWV9fXJldHVybiB0fSkse30pfTtmdW5jdGlvbiBubyh0KXtyZXR1cm4gdCYmdC5vd25lckRvY3VtZW50JiZ0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc/dC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3OndpbmRvd31mdW5jdGlvbiBvbyh0KXtyZXR1cm4gdCYmdC5vd25lckRvY3VtZW50P3Qub3duZXJEb2N1bWVudDpkb2N1bWVudH12YXIgc289bnVsbCxhbz1udWxsO2Z1bmN0aW9uIGNvKHQpe2lmKG51bGw9PT1zbyl7dmFyIGU9b28odCk7aWYodm9pZCAwPT09ZSlyZXR1cm4gc289MDt2YXIgcj1lLmJvZHksaT1lLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7aS5jbGFzc0xpc3QuYWRkKFwic2ltcGxlYmFyLWhpZGUtc2Nyb2xsYmFyXCIpLHIuYXBwZW5kQ2hpbGQoaSk7dmFyIG49aS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5yaWdodDtyLnJlbW92ZUNoaWxkKGkpLHNvPW59cmV0dXJuIHNvfVl0JiZ3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLChmdW5jdGlvbigpe2FvIT09d2luZG93LmRldmljZVBpeGVsUmF0aW8mJihhbz13aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyxzbz1udWxsKX0pKTt2YXIgbG89ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUscil7dmFyIGk9dGhpczt0aGlzLm9uU2Nyb2xsPWZ1bmN0aW9uKCl7dmFyIHQ9bm8oaS5lbCk7aS5zY3JvbGxYVGlja2luZ3x8KHQucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGkuc2Nyb2xsWCksaS5zY3JvbGxYVGlja2luZz0hMCksaS5zY3JvbGxZVGlja2luZ3x8KHQucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGkuc2Nyb2xsWSksaS5zY3JvbGxZVGlja2luZz0hMCl9LHRoaXMuc2Nyb2xsWD1mdW5jdGlvbigpe2kuYXhpcy54LmlzT3ZlcmZsb3dpbmcmJihpLnNob3dTY3JvbGxiYXIoXCJ4XCIpLGkucG9zaXRpb25TY3JvbGxiYXIoXCJ4XCIpKSxpLnNjcm9sbFhUaWNraW5nPSExfSx0aGlzLnNjcm9sbFk9ZnVuY3Rpb24oKXtpLmF4aXMueS5pc092ZXJmbG93aW5nJiYoaS5zaG93U2Nyb2xsYmFyKFwieVwiKSxpLnBvc2l0aW9uU2Nyb2xsYmFyKFwieVwiKSksaS5zY3JvbGxZVGlja2luZz0hMX0sdGhpcy5vbk1vdXNlRW50ZXI9ZnVuY3Rpb24oKXtpLnNob3dTY3JvbGxiYXIoXCJ4XCIpLGkuc2hvd1Njcm9sbGJhcihcInlcIil9LHRoaXMub25Nb3VzZU1vdmU9ZnVuY3Rpb24odCl7aS5tb3VzZVg9dC5jbGllbnRYLGkubW91c2VZPXQuY2xpZW50WSwoaS5heGlzLnguaXNPdmVyZmxvd2luZ3x8aS5heGlzLnguZm9yY2VWaXNpYmxlKSYmaS5vbk1vdXNlTW92ZUZvckF4aXMoXCJ4XCIpLChpLmF4aXMueS5pc092ZXJmbG93aW5nfHxpLmF4aXMueS5mb3JjZVZpc2libGUpJiZpLm9uTW91c2VNb3ZlRm9yQXhpcyhcInlcIil9LHRoaXMub25Nb3VzZUxlYXZlPWZ1bmN0aW9uKCl7aS5vbk1vdXNlTW92ZS5jYW5jZWwoKSwoaS5heGlzLnguaXNPdmVyZmxvd2luZ3x8aS5heGlzLnguZm9yY2VWaXNpYmxlKSYmaS5vbk1vdXNlTGVhdmVGb3JBeGlzKFwieFwiKSwoaS5heGlzLnkuaXNPdmVyZmxvd2luZ3x8aS5heGlzLnkuZm9yY2VWaXNpYmxlKSYmaS5vbk1vdXNlTGVhdmVGb3JBeGlzKFwieVwiKSxpLm1vdXNlWD0tMSxpLm1vdXNlWT0tMX0sdGhpcy5vbldpbmRvd1Jlc2l6ZT1mdW5jdGlvbigpe2kuc2Nyb2xsYmFyV2lkdGg9aS5nZXRTY3JvbGxiYXJXaWR0aCgpLGkuaGlkZU5hdGl2ZVNjcm9sbGJhcigpfSx0aGlzLmhpZGVTY3JvbGxiYXJzPWZ1bmN0aW9uKCl7aS5heGlzLngudHJhY2sucmVjdD1pLmF4aXMueC50cmFjay5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxpLmF4aXMueS50cmFjay5yZWN0PWkuYXhpcy55LnRyYWNrLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGkuaXNXaXRoaW5Cb3VuZHMoaS5heGlzLnkudHJhY2sucmVjdCl8fChpLmF4aXMueS5zY3JvbGxiYXIuZWwuY2xhc3NMaXN0LnJlbW92ZShpLmNsYXNzTmFtZXMudmlzaWJsZSksaS5heGlzLnkuaXNWaXNpYmxlPSExKSxpLmlzV2l0aGluQm91bmRzKGkuYXhpcy54LnRyYWNrLnJlY3QpfHwoaS5heGlzLnguc2Nyb2xsYmFyLmVsLmNsYXNzTGlzdC5yZW1vdmUoaS5jbGFzc05hbWVzLnZpc2libGUpLGkuYXhpcy54LmlzVmlzaWJsZT0hMSl9LHRoaXMub25Qb2ludGVyRXZlbnQ9ZnVuY3Rpb24odCl7dmFyIGUscjtpLmF4aXMueC50cmFjay5yZWN0PWkuYXhpcy54LnRyYWNrLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGkuYXhpcy55LnRyYWNrLnJlY3Q9aS5heGlzLnkudHJhY2suZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksKGkuYXhpcy54LmlzT3ZlcmZsb3dpbmd8fGkuYXhpcy54LmZvcmNlVmlzaWJsZSkmJihlPWkuaXNXaXRoaW5Cb3VuZHMoaS5heGlzLngudHJhY2sucmVjdCkpLChpLmF4aXMueS5pc092ZXJmbG93aW5nfHxpLmF4aXMueS5mb3JjZVZpc2libGUpJiYocj1pLmlzV2l0aGluQm91bmRzKGkuYXhpcy55LnRyYWNrLnJlY3QpKSwoZXx8cikmJih0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSxcIm1vdXNlZG93blwiPT09dC50eXBlJiYoZSYmKGkuYXhpcy54LnNjcm9sbGJhci5yZWN0PWkuYXhpcy54LnNjcm9sbGJhci5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxpLmlzV2l0aGluQm91bmRzKGkuYXhpcy54LnNjcm9sbGJhci5yZWN0KT9pLm9uRHJhZ1N0YXJ0KHQsXCJ4XCIpOmkub25UcmFja0NsaWNrKHQsXCJ4XCIpKSxyJiYoaS5heGlzLnkuc2Nyb2xsYmFyLnJlY3Q9aS5heGlzLnkuc2Nyb2xsYmFyLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGkuaXNXaXRoaW5Cb3VuZHMoaS5heGlzLnkuc2Nyb2xsYmFyLnJlY3QpP2kub25EcmFnU3RhcnQodCxcInlcIik6aS5vblRyYWNrQ2xpY2sodCxcInlcIikpKSl9LHRoaXMuZHJhZz1mdW5jdGlvbihlKXt2YXIgcj1pLmF4aXNbaS5kcmFnZ2VkQXhpc10udHJhY2ssbj1yLnJlY3RbaS5heGlzW2kuZHJhZ2dlZEF4aXNdLnNpemVBdHRyXSxvPWkuYXhpc1tpLmRyYWdnZWRBeGlzXS5zY3JvbGxiYXIscz1pLmNvbnRlbnRXcmFwcGVyRWxbaS5heGlzW2kuZHJhZ2dlZEF4aXNdLnNjcm9sbFNpemVBdHRyXSxhPXBhcnNlSW50KGkuZWxTdHlsZXNbaS5heGlzW2kuZHJhZ2dlZEF4aXNdLnNpemVBdHRyXSwxMCk7ZS5wcmV2ZW50RGVmYXVsdCgpLGUuc3RvcFByb3BhZ2F0aW9uKCk7dmFyIGM9KChcInlcIj09PWkuZHJhZ2dlZEF4aXM/ZS5wYWdlWTplLnBhZ2VYKS1yLnJlY3RbaS5heGlzW2kuZHJhZ2dlZEF4aXNdLm9mZnNldEF0dHJdLWkuYXhpc1tpLmRyYWdnZWRBeGlzXS5kcmFnT2Zmc2V0KS8obi1vLnNpemUpKihzLWEpO1wieFwiPT09aS5kcmFnZ2VkQXhpcyYmKGM9aS5pc1J0bCYmdC5nZXRSdGxIZWxwZXJzKCkuaXNSdGxTY3JvbGxiYXJJbnZlcnRlZD9jLShuK28uc2l6ZSk6YyxjPWkuaXNSdGwmJnQuZ2V0UnRsSGVscGVycygpLmlzUnRsU2Nyb2xsaW5nSW52ZXJ0ZWQ/LWM6YyksaS5jb250ZW50V3JhcHBlckVsW2kuYXhpc1tpLmRyYWdnZWRBeGlzXS5zY3JvbGxPZmZzZXRBdHRyXT1jfSx0aGlzLm9uRW5kRHJhZz1mdW5jdGlvbih0KXt2YXIgZT1vbyhpLmVsKSxyPW5vKGkuZWwpO3QucHJldmVudERlZmF1bHQoKSx0LnN0b3BQcm9wYWdhdGlvbigpLGkuZWwuY2xhc3NMaXN0LnJlbW92ZShpLmNsYXNzTmFtZXMuZHJhZ2dpbmcpLGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLGkuZHJhZywhMCksZS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLGkub25FbmREcmFnLCEwKSxpLnJlbW92ZVByZXZlbnRDbGlja0lkPXIuc2V0VGltZW91dCgoZnVuY3Rpb24oKXtlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLGkucHJldmVudENsaWNrLCEwKSxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJkYmxjbGlja1wiLGkucHJldmVudENsaWNrLCEwKSxpLnJlbW92ZVByZXZlbnRDbGlja0lkPW51bGx9KSl9LHRoaXMucHJldmVudENsaWNrPWZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKSx0LnN0b3BQcm9wYWdhdGlvbigpfSx0aGlzLmVsPWUsdGhpcy5taW5TY3JvbGxiYXJXaWR0aD0yMCx0aGlzLm9wdGlvbnM9T2JqZWN0LmFzc2lnbih7fSx0LmRlZmF1bHRPcHRpb25zLHt9LHIpLHRoaXMuY2xhc3NOYW1lcz1PYmplY3QuYXNzaWduKHt9LHQuZGVmYXVsdE9wdGlvbnMuY2xhc3NOYW1lcyx7fSx0aGlzLm9wdGlvbnMuY2xhc3NOYW1lcyksdGhpcy5heGlzPXt4OntzY3JvbGxPZmZzZXRBdHRyOlwic2Nyb2xsTGVmdFwiLHNpemVBdHRyOlwid2lkdGhcIixzY3JvbGxTaXplQXR0cjpcInNjcm9sbFdpZHRoXCIsb2Zmc2V0U2l6ZUF0dHI6XCJvZmZzZXRXaWR0aFwiLG9mZnNldEF0dHI6XCJsZWZ0XCIsb3ZlcmZsb3dBdHRyOlwib3ZlcmZsb3dYXCIsZHJhZ09mZnNldDowLGlzT3ZlcmZsb3dpbmc6ITAsaXNWaXNpYmxlOiExLGZvcmNlVmlzaWJsZTohMSx0cmFjazp7fSxzY3JvbGxiYXI6e319LHk6e3Njcm9sbE9mZnNldEF0dHI6XCJzY3JvbGxUb3BcIixzaXplQXR0cjpcImhlaWdodFwiLHNjcm9sbFNpemVBdHRyOlwic2Nyb2xsSGVpZ2h0XCIsb2Zmc2V0U2l6ZUF0dHI6XCJvZmZzZXRIZWlnaHRcIixvZmZzZXRBdHRyOlwidG9wXCIsb3ZlcmZsb3dBdHRyOlwib3ZlcmZsb3dZXCIsZHJhZ09mZnNldDowLGlzT3ZlcmZsb3dpbmc6ITAsaXNWaXNpYmxlOiExLGZvcmNlVmlzaWJsZTohMSx0cmFjazp7fSxzY3JvbGxiYXI6e319fSx0aGlzLnJlbW92ZVByZXZlbnRDbGlja0lkPW51bGwsdC5pbnN0YW5jZXMuaGFzKHRoaXMuZWwpfHwodGhpcy5yZWNhbGN1bGF0ZT1Hcih0aGlzLnJlY2FsY3VsYXRlLmJpbmQodGhpcyksNjQpLHRoaXMub25Nb3VzZU1vdmU9R3IodGhpcy5vbk1vdXNlTW92ZS5iaW5kKHRoaXMpLDY0KSx0aGlzLmhpZGVTY3JvbGxiYXJzPWhpKHRoaXMuaGlkZVNjcm9sbGJhcnMuYmluZCh0aGlzKSx0aGlzLm9wdGlvbnMudGltZW91dCksdGhpcy5vbldpbmRvd1Jlc2l6ZT1oaSh0aGlzLm9uV2luZG93UmVzaXplLmJpbmQodGhpcyksNjQse2xlYWRpbmc6ITB9KSx0LmdldFJ0bEhlbHBlcnM9WGkodC5nZXRSdGxIZWxwZXJzKSx0aGlzLmluaXQoKSl9dC5nZXRSdGxIZWxwZXJzPWZ1bmN0aW9uKCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtlLmlubmVySFRNTD0nPGRpdiBjbGFzcz1cImhzLWR1bW15LXNjcm9sbGJhci1zaXplXCI+PGRpdiBzdHlsZT1cImhlaWdodDogMjAwJTsgd2lkdGg6IDIwMCU7IG1hcmdpbjogMTBweCAwO1wiPjwvZGl2PjwvZGl2Pic7dmFyIHI9ZS5maXJzdEVsZW1lbnRDaGlsZDtkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHIpO3ZhciBpPXIuZmlyc3RFbGVtZW50Q2hpbGQ7ci5zY3JvbGxMZWZ0PTA7dmFyIG49dC5nZXRPZmZzZXQociksbz10LmdldE9mZnNldChpKTtyLnNjcm9sbExlZnQ9OTk5O3ZhciBzPXQuZ2V0T2Zmc2V0KGkpO3JldHVybntpc1J0bFNjcm9sbGluZ0ludmVydGVkOm4ubGVmdCE9PW8ubGVmdCYmby5sZWZ0LXMubGVmdCE9MCxpc1J0bFNjcm9sbGJhckludmVydGVkOm4ubGVmdCE9PW8ubGVmdH19LHQuZ2V0T2Zmc2V0PWZ1bmN0aW9uKHQpe3ZhciBlPXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkscj1vbyh0KSxpPW5vKHQpO3JldHVybnt0b3A6ZS50b3ArKGkucGFnZVlPZmZzZXR8fHIuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCksbGVmdDplLmxlZnQrKGkucGFnZVhPZmZzZXR8fHIuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQpfX07dmFyIGU9dC5wcm90b3R5cGU7cmV0dXJuIGUuaW5pdD1mdW5jdGlvbigpe3QuaW5zdGFuY2VzLnNldCh0aGlzLmVsLHRoaXMpLFl0JiYodGhpcy5pbml0RE9NKCksdGhpcy5zY3JvbGxiYXJXaWR0aD10aGlzLmdldFNjcm9sbGJhcldpZHRoKCksdGhpcy5yZWNhbGN1bGF0ZSgpLHRoaXMuaW5pdExpc3RlbmVycygpKX0sZS5pbml0RE9NPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztpZihBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwodGhpcy5lbC5jaGlsZHJlbiwoZnVuY3Rpb24oZSl7cmV0dXJuIGUuY2xhc3NMaXN0LmNvbnRhaW5zKHQuY2xhc3NOYW1lcy53cmFwcGVyKX0pKS5sZW5ndGgpdGhpcy53cmFwcGVyRWw9dGhpcy5lbC5xdWVyeVNlbGVjdG9yKFwiLlwiK3RoaXMuY2xhc3NOYW1lcy53cmFwcGVyKSx0aGlzLmNvbnRlbnRXcmFwcGVyRWw9dGhpcy5vcHRpb25zLnNjcm9sbGFibGVOb2RlfHx0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoXCIuXCIrdGhpcy5jbGFzc05hbWVzLmNvbnRlbnRXcmFwcGVyKSx0aGlzLmNvbnRlbnRFbD10aGlzLm9wdGlvbnMuY29udGVudE5vZGV8fHRoaXMuZWwucXVlcnlTZWxlY3RvcihcIi5cIit0aGlzLmNsYXNzTmFtZXMuY29udGVudEVsKSx0aGlzLm9mZnNldEVsPXRoaXMuZWwucXVlcnlTZWxlY3RvcihcIi5cIit0aGlzLmNsYXNzTmFtZXMub2Zmc2V0KSx0aGlzLm1hc2tFbD10aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoXCIuXCIrdGhpcy5jbGFzc05hbWVzLm1hc2spLHRoaXMucGxhY2Vob2xkZXJFbD10aGlzLmZpbmRDaGlsZCh0aGlzLndyYXBwZXJFbCxcIi5cIit0aGlzLmNsYXNzTmFtZXMucGxhY2Vob2xkZXIpLHRoaXMuaGVpZ2h0QXV0b09ic2VydmVyV3JhcHBlckVsPXRoaXMuZWwucXVlcnlTZWxlY3RvcihcIi5cIit0aGlzLmNsYXNzTmFtZXMuaGVpZ2h0QXV0b09ic2VydmVyV3JhcHBlckVsKSx0aGlzLmhlaWdodEF1dG9PYnNlcnZlckVsPXRoaXMuZWwucXVlcnlTZWxlY3RvcihcIi5cIit0aGlzLmNsYXNzTmFtZXMuaGVpZ2h0QXV0b09ic2VydmVyRWwpLHRoaXMuYXhpcy54LnRyYWNrLmVsPXRoaXMuZmluZENoaWxkKHRoaXMuZWwsXCIuXCIrdGhpcy5jbGFzc05hbWVzLnRyYWNrK1wiLlwiK3RoaXMuY2xhc3NOYW1lcy5ob3Jpem9udGFsKSx0aGlzLmF4aXMueS50cmFjay5lbD10aGlzLmZpbmRDaGlsZCh0aGlzLmVsLFwiLlwiK3RoaXMuY2xhc3NOYW1lcy50cmFjaytcIi5cIit0aGlzLmNsYXNzTmFtZXMudmVydGljYWwpO2Vsc2V7Zm9yKHRoaXMud3JhcHBlckVsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy5jb250ZW50V3JhcHBlckVsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy5vZmZzZXRFbD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHRoaXMubWFza0VsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy5jb250ZW50RWw9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx0aGlzLnBsYWNlaG9sZGVyRWw9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx0aGlzLmhlaWdodEF1dG9PYnNlcnZlcldyYXBwZXJFbD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHRoaXMuaGVpZ2h0QXV0b09ic2VydmVyRWw9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx0aGlzLndyYXBwZXJFbC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lcy53cmFwcGVyKSx0aGlzLmNvbnRlbnRXcmFwcGVyRWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMuY29udGVudFdyYXBwZXIpLHRoaXMub2Zmc2V0RWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMub2Zmc2V0KSx0aGlzLm1hc2tFbC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lcy5tYXNrKSx0aGlzLmNvbnRlbnRFbC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lcy5jb250ZW50RWwpLHRoaXMucGxhY2Vob2xkZXJFbC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lcy5wbGFjZWhvbGRlciksdGhpcy5oZWlnaHRBdXRvT2JzZXJ2ZXJXcmFwcGVyRWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMuaGVpZ2h0QXV0b09ic2VydmVyV3JhcHBlckVsKSx0aGlzLmhlaWdodEF1dG9PYnNlcnZlckVsLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWVzLmhlaWdodEF1dG9PYnNlcnZlckVsKTt0aGlzLmVsLmZpcnN0Q2hpbGQ7KXRoaXMuY29udGVudEVsLmFwcGVuZENoaWxkKHRoaXMuZWwuZmlyc3RDaGlsZCk7dGhpcy5jb250ZW50V3JhcHBlckVsLmFwcGVuZENoaWxkKHRoaXMuY29udGVudEVsKSx0aGlzLm9mZnNldEVsLmFwcGVuZENoaWxkKHRoaXMuY29udGVudFdyYXBwZXJFbCksdGhpcy5tYXNrRWwuYXBwZW5kQ2hpbGQodGhpcy5vZmZzZXRFbCksdGhpcy5oZWlnaHRBdXRvT2JzZXJ2ZXJXcmFwcGVyRWwuYXBwZW5kQ2hpbGQodGhpcy5oZWlnaHRBdXRvT2JzZXJ2ZXJFbCksdGhpcy53cmFwcGVyRWwuYXBwZW5kQ2hpbGQodGhpcy5oZWlnaHRBdXRvT2JzZXJ2ZXJXcmFwcGVyRWwpLHRoaXMud3JhcHBlckVsLmFwcGVuZENoaWxkKHRoaXMubWFza0VsKSx0aGlzLndyYXBwZXJFbC5hcHBlbmRDaGlsZCh0aGlzLnBsYWNlaG9sZGVyRWwpLHRoaXMuZWwuYXBwZW5kQ2hpbGQodGhpcy53cmFwcGVyRWwpfWlmKCF0aGlzLmF4aXMueC50cmFjay5lbHx8IXRoaXMuYXhpcy55LnRyYWNrLmVsKXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtlLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWVzLnRyYWNrKSxyLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWVzLnNjcm9sbGJhciksZS5hcHBlbmRDaGlsZChyKSx0aGlzLmF4aXMueC50cmFjay5lbD1lLmNsb25lTm9kZSghMCksdGhpcy5heGlzLngudHJhY2suZWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMuaG9yaXpvbnRhbCksdGhpcy5heGlzLnkudHJhY2suZWw9ZS5jbG9uZU5vZGUoITApLHRoaXMuYXhpcy55LnRyYWNrLmVsLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWVzLnZlcnRpY2FsKSx0aGlzLmVsLmFwcGVuZENoaWxkKHRoaXMuYXhpcy54LnRyYWNrLmVsKSx0aGlzLmVsLmFwcGVuZENoaWxkKHRoaXMuYXhpcy55LnRyYWNrLmVsKX10aGlzLmF4aXMueC5zY3JvbGxiYXIuZWw9dGhpcy5heGlzLngudHJhY2suZWwucXVlcnlTZWxlY3RvcihcIi5cIit0aGlzLmNsYXNzTmFtZXMuc2Nyb2xsYmFyKSx0aGlzLmF4aXMueS5zY3JvbGxiYXIuZWw9dGhpcy5heGlzLnkudHJhY2suZWwucXVlcnlTZWxlY3RvcihcIi5cIit0aGlzLmNsYXNzTmFtZXMuc2Nyb2xsYmFyKSx0aGlzLm9wdGlvbnMuYXV0b0hpZGV8fCh0aGlzLmF4aXMueC5zY3JvbGxiYXIuZWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMudmlzaWJsZSksdGhpcy5heGlzLnkuc2Nyb2xsYmFyLmVsLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWVzLnZpc2libGUpKSx0aGlzLmVsLnNldEF0dHJpYnV0ZShcImRhdGEtc2ltcGxlYmFyXCIsXCJpbml0XCIpfSxlLmluaXRMaXN0ZW5lcnM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9bm8odGhpcy5lbCk7dGhpcy5vcHRpb25zLmF1dG9IaWRlJiZ0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsdGhpcy5vbk1vdXNlRW50ZXIpLFtcIm1vdXNlZG93blwiLFwiY2xpY2tcIixcImRibGNsaWNrXCJdLmZvckVhY2goKGZ1bmN0aW9uKGUpe3QuZWwuYWRkRXZlbnRMaXN0ZW5lcihlLHQub25Qb2ludGVyRXZlbnQsITApfSkpLFtcInRvdWNoc3RhcnRcIixcInRvdWNoZW5kXCIsXCJ0b3VjaG1vdmVcIl0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7dC5lbC5hZGRFdmVudExpc3RlbmVyKGUsdC5vblBvaW50ZXJFdmVudCx7Y2FwdHVyZTohMCxwYXNzaXZlOiEwfSl9KSksdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsdGhpcy5vbk1vdXNlTW92ZSksdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLHRoaXMub25Nb3VzZUxlYXZlKSx0aGlzLmNvbnRlbnRXcmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLHRoaXMub25TY3JvbGwpLGUuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHRoaXMub25XaW5kb3dSZXNpemUpO3ZhciByPSExLGk9ZS5SZXNpemVPYnNlcnZlcnx8em47dGhpcy5yZXNpemVPYnNlcnZlcj1uZXcgaSgoZnVuY3Rpb24oKXtyJiZ0LnJlY2FsY3VsYXRlKCl9KSksdGhpcy5yZXNpemVPYnNlcnZlci5vYnNlcnZlKHRoaXMuZWwpLHRoaXMucmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmNvbnRlbnRFbCksZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKGZ1bmN0aW9uKCl7cj0hMH0pKSx0aGlzLm11dGF0aW9uT2JzZXJ2ZXI9bmV3IGUuTXV0YXRpb25PYnNlcnZlcih0aGlzLnJlY2FsY3VsYXRlKSx0aGlzLm11dGF0aW9uT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmNvbnRlbnRFbCx7Y2hpbGRMaXN0OiEwLHN1YnRyZWU6ITAsY2hhcmFjdGVyRGF0YTohMH0pfSxlLnJlY2FsY3VsYXRlPWZ1bmN0aW9uKCl7dmFyIHQ9bm8odGhpcy5lbCk7dGhpcy5lbFN0eWxlcz10LmdldENvbXB1dGVkU3R5bGUodGhpcy5lbCksdGhpcy5pc1J0bD1cInJ0bFwiPT09dGhpcy5lbFN0eWxlcy5kaXJlY3Rpb247dmFyIGU9dGhpcy5oZWlnaHRBdXRvT2JzZXJ2ZXJFbC5vZmZzZXRIZWlnaHQ8PTEscj10aGlzLmhlaWdodEF1dG9PYnNlcnZlckVsLm9mZnNldFdpZHRoPD0xLGk9dGhpcy5jb250ZW50RWwub2Zmc2V0V2lkdGgsbj10aGlzLmNvbnRlbnRXcmFwcGVyRWwub2Zmc2V0V2lkdGgsbz10aGlzLmVsU3R5bGVzLm92ZXJmbG93WCxzPXRoaXMuZWxTdHlsZXMub3ZlcmZsb3dZO3RoaXMuY29udGVudEVsLnN0eWxlLnBhZGRpbmc9dGhpcy5lbFN0eWxlcy5wYWRkaW5nVG9wK1wiIFwiK3RoaXMuZWxTdHlsZXMucGFkZGluZ1JpZ2h0K1wiIFwiK3RoaXMuZWxTdHlsZXMucGFkZGluZ0JvdHRvbStcIiBcIit0aGlzLmVsU3R5bGVzLnBhZGRpbmdMZWZ0LHRoaXMud3JhcHBlckVsLnN0eWxlLm1hcmdpbj1cIi1cIit0aGlzLmVsU3R5bGVzLnBhZGRpbmdUb3ArXCIgLVwiK3RoaXMuZWxTdHlsZXMucGFkZGluZ1JpZ2h0K1wiIC1cIit0aGlzLmVsU3R5bGVzLnBhZGRpbmdCb3R0b20rXCIgLVwiK3RoaXMuZWxTdHlsZXMucGFkZGluZ0xlZnQ7dmFyIGE9dGhpcy5jb250ZW50RWwuc2Nyb2xsSGVpZ2h0LGM9dGhpcy5jb250ZW50RWwuc2Nyb2xsV2lkdGg7dGhpcy5jb250ZW50V3JhcHBlckVsLnN0eWxlLmhlaWdodD1lP1wiYXV0b1wiOlwiMTAwJVwiLHRoaXMucGxhY2Vob2xkZXJFbC5zdHlsZS53aWR0aD1yP2krXCJweFwiOlwiYXV0b1wiLHRoaXMucGxhY2Vob2xkZXJFbC5zdHlsZS5oZWlnaHQ9YStcInB4XCI7dmFyIGw9dGhpcy5jb250ZW50V3JhcHBlckVsLm9mZnNldEhlaWdodDt0aGlzLmF4aXMueC5pc092ZXJmbG93aW5nPWM+aSx0aGlzLmF4aXMueS5pc092ZXJmbG93aW5nPWE+bCx0aGlzLmF4aXMueC5pc092ZXJmbG93aW5nPVwiaGlkZGVuXCIhPT1vJiZ0aGlzLmF4aXMueC5pc092ZXJmbG93aW5nLHRoaXMuYXhpcy55LmlzT3ZlcmZsb3dpbmc9XCJoaWRkZW5cIiE9PXMmJnRoaXMuYXhpcy55LmlzT3ZlcmZsb3dpbmcsdGhpcy5heGlzLnguZm9yY2VWaXNpYmxlPVwieFwiPT09dGhpcy5vcHRpb25zLmZvcmNlVmlzaWJsZXx8ITA9PT10aGlzLm9wdGlvbnMuZm9yY2VWaXNpYmxlLHRoaXMuYXhpcy55LmZvcmNlVmlzaWJsZT1cInlcIj09PXRoaXMub3B0aW9ucy5mb3JjZVZpc2libGV8fCEwPT09dGhpcy5vcHRpb25zLmZvcmNlVmlzaWJsZSx0aGlzLmhpZGVOYXRpdmVTY3JvbGxiYXIoKTt2YXIgdT10aGlzLmF4aXMueC5pc092ZXJmbG93aW5nP3RoaXMuc2Nyb2xsYmFyV2lkdGg6MCxmPXRoaXMuYXhpcy55LmlzT3ZlcmZsb3dpbmc/dGhpcy5zY3JvbGxiYXJXaWR0aDowO3RoaXMuYXhpcy54LmlzT3ZlcmZsb3dpbmc9dGhpcy5heGlzLnguaXNPdmVyZmxvd2luZyYmYz5uLWYsdGhpcy5heGlzLnkuaXNPdmVyZmxvd2luZz10aGlzLmF4aXMueS5pc092ZXJmbG93aW5nJiZhPmwtdSx0aGlzLmF4aXMueC5zY3JvbGxiYXIuc2l6ZT10aGlzLmdldFNjcm9sbGJhclNpemUoXCJ4XCIpLHRoaXMuYXhpcy55LnNjcm9sbGJhci5zaXplPXRoaXMuZ2V0U2Nyb2xsYmFyU2l6ZShcInlcIiksdGhpcy5heGlzLnguc2Nyb2xsYmFyLmVsLnN0eWxlLndpZHRoPXRoaXMuYXhpcy54LnNjcm9sbGJhci5zaXplK1wicHhcIix0aGlzLmF4aXMueS5zY3JvbGxiYXIuZWwuc3R5bGUuaGVpZ2h0PXRoaXMuYXhpcy55LnNjcm9sbGJhci5zaXplK1wicHhcIix0aGlzLnBvc2l0aW9uU2Nyb2xsYmFyKFwieFwiKSx0aGlzLnBvc2l0aW9uU2Nyb2xsYmFyKFwieVwiKSx0aGlzLnRvZ2dsZVRyYWNrVmlzaWJpbGl0eShcInhcIiksdGhpcy50b2dnbGVUcmFja1Zpc2liaWxpdHkoXCJ5XCIpfSxlLmdldFNjcm9sbGJhclNpemU9ZnVuY3Rpb24odCl7aWYodm9pZCAwPT09dCYmKHQ9XCJ5XCIpLCF0aGlzLmF4aXNbdF0uaXNPdmVyZmxvd2luZylyZXR1cm4gMDt2YXIgZSxyPXRoaXMuY29udGVudEVsW3RoaXMuYXhpc1t0XS5zY3JvbGxTaXplQXR0cl0saT10aGlzLmF4aXNbdF0udHJhY2suZWxbdGhpcy5heGlzW3RdLm9mZnNldFNpemVBdHRyXSxuPWkvcjtyZXR1cm4gZT1NYXRoLm1heCh+fihuKmkpLHRoaXMub3B0aW9ucy5zY3JvbGxiYXJNaW5TaXplKSx0aGlzLm9wdGlvbnMuc2Nyb2xsYmFyTWF4U2l6ZSYmKGU9TWF0aC5taW4oZSx0aGlzLm9wdGlvbnMuc2Nyb2xsYmFyTWF4U2l6ZSkpLGV9LGUucG9zaXRpb25TY3JvbGxiYXI9ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZSYmKGU9XCJ5XCIpLHRoaXMuYXhpc1tlXS5pc092ZXJmbG93aW5nKXt2YXIgcj10aGlzLmNvbnRlbnRXcmFwcGVyRWxbdGhpcy5heGlzW2VdLnNjcm9sbFNpemVBdHRyXSxpPXRoaXMuYXhpc1tlXS50cmFjay5lbFt0aGlzLmF4aXNbZV0ub2Zmc2V0U2l6ZUF0dHJdLG49cGFyc2VJbnQodGhpcy5lbFN0eWxlc1t0aGlzLmF4aXNbZV0uc2l6ZUF0dHJdLDEwKSxvPXRoaXMuYXhpc1tlXS5zY3JvbGxiYXIscz10aGlzLmNvbnRlbnRXcmFwcGVyRWxbdGhpcy5heGlzW2VdLnNjcm9sbE9mZnNldEF0dHJdLGE9KHM9XCJ4XCI9PT1lJiZ0aGlzLmlzUnRsJiZ0LmdldFJ0bEhlbHBlcnMoKS5pc1J0bFNjcm9sbGluZ0ludmVydGVkPy1zOnMpLyhyLW4pLGM9fn4oKGktby5zaXplKSphKTtjPVwieFwiPT09ZSYmdGhpcy5pc1J0bCYmdC5nZXRSdGxIZWxwZXJzKCkuaXNSdGxTY3JvbGxiYXJJbnZlcnRlZD9jKyhpLW8uc2l6ZSk6YyxvLmVsLnN0eWxlLnRyYW5zZm9ybT1cInhcIj09PWU/XCJ0cmFuc2xhdGUzZChcIitjK1wicHgsIDAsIDApXCI6XCJ0cmFuc2xhdGUzZCgwLCBcIitjK1wicHgsIDApXCJ9fSxlLnRvZ2dsZVRyYWNrVmlzaWJpbGl0eT1mdW5jdGlvbih0KXt2b2lkIDA9PT10JiYodD1cInlcIik7dmFyIGU9dGhpcy5heGlzW3RdLnRyYWNrLmVsLHI9dGhpcy5heGlzW3RdLnNjcm9sbGJhci5lbDt0aGlzLmF4aXNbdF0uaXNPdmVyZmxvd2luZ3x8dGhpcy5heGlzW3RdLmZvcmNlVmlzaWJsZT8oZS5zdHlsZS52aXNpYmlsaXR5PVwidmlzaWJsZVwiLHRoaXMuY29udGVudFdyYXBwZXJFbC5zdHlsZVt0aGlzLmF4aXNbdF0ub3ZlcmZsb3dBdHRyXT1cInNjcm9sbFwiKTooZS5zdHlsZS52aXNpYmlsaXR5PVwiaGlkZGVuXCIsdGhpcy5jb250ZW50V3JhcHBlckVsLnN0eWxlW3RoaXMuYXhpc1t0XS5vdmVyZmxvd0F0dHJdPVwiaGlkZGVuXCIpLHRoaXMuYXhpc1t0XS5pc092ZXJmbG93aW5nP3Iuc3R5bGUuZGlzcGxheT1cImJsb2NrXCI6ci5zdHlsZS5kaXNwbGF5PVwibm9uZVwifSxlLmhpZGVOYXRpdmVTY3JvbGxiYXI9ZnVuY3Rpb24oKXt0aGlzLm9mZnNldEVsLnN0eWxlW3RoaXMuaXNSdGw/XCJsZWZ0XCI6XCJyaWdodFwiXT10aGlzLmF4aXMueS5pc092ZXJmbG93aW5nfHx0aGlzLmF4aXMueS5mb3JjZVZpc2libGU/XCItXCIrdGhpcy5zY3JvbGxiYXJXaWR0aCtcInB4XCI6MCx0aGlzLm9mZnNldEVsLnN0eWxlLmJvdHRvbT10aGlzLmF4aXMueC5pc092ZXJmbG93aW5nfHx0aGlzLmF4aXMueC5mb3JjZVZpc2libGU/XCItXCIrdGhpcy5zY3JvbGxiYXJXaWR0aCtcInB4XCI6MH0sZS5vbk1vdXNlTW92ZUZvckF4aXM9ZnVuY3Rpb24odCl7dm9pZCAwPT09dCYmKHQ9XCJ5XCIpLHRoaXMuYXhpc1t0XS50cmFjay5yZWN0PXRoaXMuYXhpc1t0XS50cmFjay5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSx0aGlzLmF4aXNbdF0uc2Nyb2xsYmFyLnJlY3Q9dGhpcy5heGlzW3RdLnNjcm9sbGJhci5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSx0aGlzLmlzV2l0aGluQm91bmRzKHRoaXMuYXhpc1t0XS5zY3JvbGxiYXIucmVjdCk/dGhpcy5heGlzW3RdLnNjcm9sbGJhci5lbC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lcy5ob3Zlcik6dGhpcy5heGlzW3RdLnNjcm9sbGJhci5lbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3NOYW1lcy5ob3ZlciksdGhpcy5pc1dpdGhpbkJvdW5kcyh0aGlzLmF4aXNbdF0udHJhY2sucmVjdCk/KHRoaXMuc2hvd1Njcm9sbGJhcih0KSx0aGlzLmF4aXNbdF0udHJhY2suZWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMuaG92ZXIpKTp0aGlzLmF4aXNbdF0udHJhY2suZWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzTmFtZXMuaG92ZXIpfSxlLm9uTW91c2VMZWF2ZUZvckF4aXM9ZnVuY3Rpb24odCl7dm9pZCAwPT09dCYmKHQ9XCJ5XCIpLHRoaXMuYXhpc1t0XS50cmFjay5lbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3NOYW1lcy5ob3ZlciksdGhpcy5heGlzW3RdLnNjcm9sbGJhci5lbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3NOYW1lcy5ob3Zlcil9LGUuc2hvd1Njcm9sbGJhcj1mdW5jdGlvbih0KXt2b2lkIDA9PT10JiYodD1cInlcIik7dmFyIGU9dGhpcy5heGlzW3RdLnNjcm9sbGJhci5lbDt0aGlzLmF4aXNbdF0uaXNWaXNpYmxlfHwoZS5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lcy52aXNpYmxlKSx0aGlzLmF4aXNbdF0uaXNWaXNpYmxlPSEwKSx0aGlzLm9wdGlvbnMuYXV0b0hpZGUmJnRoaXMuaGlkZVNjcm9sbGJhcnMoKX0sZS5vbkRyYWdTdGFydD1mdW5jdGlvbih0LGUpe3ZvaWQgMD09PWUmJihlPVwieVwiKTt2YXIgcj1vbyh0aGlzLmVsKSxpPW5vKHRoaXMuZWwpLG49dGhpcy5heGlzW2VdLnNjcm9sbGJhcixvPVwieVwiPT09ZT90LnBhZ2VZOnQucGFnZVg7dGhpcy5heGlzW2VdLmRyYWdPZmZzZXQ9by1uLnJlY3RbdGhpcy5heGlzW2VdLm9mZnNldEF0dHJdLHRoaXMuZHJhZ2dlZEF4aXM9ZSx0aGlzLmVsLmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWVzLmRyYWdnaW5nKSxyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIix0aGlzLmRyYWcsITApLHIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIix0aGlzLm9uRW5kRHJhZywhMCksbnVsbD09PXRoaXMucmVtb3ZlUHJldmVudENsaWNrSWQ/KHIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdGhpcy5wcmV2ZW50Q2xpY2ssITApLHIuYWRkRXZlbnRMaXN0ZW5lcihcImRibGNsaWNrXCIsdGhpcy5wcmV2ZW50Q2xpY2ssITApKTooaS5jbGVhclRpbWVvdXQodGhpcy5yZW1vdmVQcmV2ZW50Q2xpY2tJZCksdGhpcy5yZW1vdmVQcmV2ZW50Q2xpY2tJZD1udWxsKX0sZS5vblRyYWNrQ2xpY2s9ZnVuY3Rpb24odCxlKXt2YXIgcj10aGlzO2lmKHZvaWQgMD09PWUmJihlPVwieVwiKSx0aGlzLm9wdGlvbnMuY2xpY2tPblRyYWNrKXt2YXIgaT1ubyh0aGlzLmVsKTt0aGlzLmF4aXNbZV0uc2Nyb2xsYmFyLnJlY3Q9dGhpcy5heGlzW2VdLnNjcm9sbGJhci5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTt2YXIgbj10aGlzLmF4aXNbZV0uc2Nyb2xsYmFyLnJlY3RbdGhpcy5heGlzW2VdLm9mZnNldEF0dHJdLG89cGFyc2VJbnQodGhpcy5lbFN0eWxlc1t0aGlzLmF4aXNbZV0uc2l6ZUF0dHJdLDEwKSxzPXRoaXMuY29udGVudFdyYXBwZXJFbFt0aGlzLmF4aXNbZV0uc2Nyb2xsT2Zmc2V0QXR0cl0sYT0oXCJ5XCI9PT1lP3RoaXMubW91c2VZLW46dGhpcy5tb3VzZVgtbik8MD8tMToxLGM9LTE9PT1hP3MtbzpzK287IWZ1bmN0aW9uIHQoKXt2YXIgbixvOy0xPT09YT9zPmMmJihzLT1yLm9wdGlvbnMuY2xpY2tPblRyYWNrU3BlZWQsci5jb250ZW50V3JhcHBlckVsLnNjcm9sbFRvKCgobj17fSlbci5heGlzW2VdLm9mZnNldEF0dHJdPXMsbikpLGkucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHQpKTpzPGMmJihzKz1yLm9wdGlvbnMuY2xpY2tPblRyYWNrU3BlZWQsci5jb250ZW50V3JhcHBlckVsLnNjcm9sbFRvKCgobz17fSlbci5heGlzW2VdLm9mZnNldEF0dHJdPXMsbykpLGkucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHQpKX0oKX19LGUuZ2V0Q29udGVudEVsZW1lbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb250ZW50RWx9LGUuZ2V0U2Nyb2xsRWxlbWVudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnRlbnRXcmFwcGVyRWx9LGUuZ2V0U2Nyb2xsYmFyV2lkdGg9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuXCJub25lXCI9PT1nZXRDb21wdXRlZFN0eWxlKHRoaXMuY29udGVudFdyYXBwZXJFbCxcIjo6LXdlYmtpdC1zY3JvbGxiYXJcIikuZGlzcGxheXx8XCJzY3JvbGxiYXJXaWR0aFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlfHxcIi1tcy1vdmVyZmxvdy1zdHlsZVwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlPzA6Y28odGhpcy5lbCl9Y2F0Y2godCl7cmV0dXJuIGNvKHRoaXMuZWwpfX0sZS5yZW1vdmVMaXN0ZW5lcnM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9bm8odGhpcy5lbCk7dGhpcy5vcHRpb25zLmF1dG9IaWRlJiZ0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsdGhpcy5vbk1vdXNlRW50ZXIpLFtcIm1vdXNlZG93blwiLFwiY2xpY2tcIixcImRibGNsaWNrXCJdLmZvckVhY2goKGZ1bmN0aW9uKGUpe3QuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLHQub25Qb2ludGVyRXZlbnQsITApfSkpLFtcInRvdWNoc3RhcnRcIixcInRvdWNoZW5kXCIsXCJ0b3VjaG1vdmVcIl0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7dC5lbC5yZW1vdmVFdmVudExpc3RlbmVyKGUsdC5vblBvaW50ZXJFdmVudCx7Y2FwdHVyZTohMCxwYXNzaXZlOiEwfSl9KSksdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsdGhpcy5vbk1vdXNlTW92ZSksdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLHRoaXMub25Nb3VzZUxlYXZlKSx0aGlzLmNvbnRlbnRXcmFwcGVyRWwmJnRoaXMuY29udGVudFdyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsdGhpcy5vblNjcm9sbCksZS5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsdGhpcy5vbldpbmRvd1Jlc2l6ZSksdGhpcy5tdXRhdGlvbk9ic2VydmVyJiZ0aGlzLm11dGF0aW9uT2JzZXJ2ZXIuZGlzY29ubmVjdCgpLHRoaXMucmVzaXplT2JzZXJ2ZXImJnRoaXMucmVzaXplT2JzZXJ2ZXIuZGlzY29ubmVjdCgpLHRoaXMucmVjYWxjdWxhdGUuY2FuY2VsKCksdGhpcy5vbk1vdXNlTW92ZS5jYW5jZWwoKSx0aGlzLmhpZGVTY3JvbGxiYXJzLmNhbmNlbCgpLHRoaXMub25XaW5kb3dSZXNpemUuY2FuY2VsKCl9LGUudW5Nb3VudD1mdW5jdGlvbigpe3RoaXMucmVtb3ZlTGlzdGVuZXJzKCksdC5pbnN0YW5jZXMuZGVsZXRlKHRoaXMuZWwpfSxlLmlzV2l0aGluQm91bmRzPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm1vdXNlWD49dC5sZWZ0JiZ0aGlzLm1vdXNlWDw9dC5sZWZ0K3Qud2lkdGgmJnRoaXMubW91c2VZPj10LnRvcCYmdGhpcy5tb3VzZVk8PXQudG9wK3QuaGVpZ2h0fSxlLmZpbmRDaGlsZD1mdW5jdGlvbih0LGUpe3ZhciByPXQubWF0Y2hlc3x8dC53ZWJraXRNYXRjaGVzU2VsZWN0b3J8fHQubW96TWF0Y2hlc1NlbGVjdG9yfHx0Lm1zTWF0Y2hlc1NlbGVjdG9yO3JldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwodC5jaGlsZHJlbiwoZnVuY3Rpb24odCl7cmV0dXJuIHIuY2FsbCh0LGUpfSkpWzBdfSx0fSgpO3JldHVybiBsby5kZWZhdWx0T3B0aW9ucz17YXV0b0hpZGU6ITAsZm9yY2VWaXNpYmxlOiExLGNsaWNrT25UcmFjazohMCxjbGlja09uVHJhY2tTcGVlZDo0MCxjbGFzc05hbWVzOntjb250ZW50RWw6XCJzaW1wbGViYXItY29udGVudFwiLGNvbnRlbnRXcmFwcGVyOlwic2ltcGxlYmFyLWNvbnRlbnQtd3JhcHBlclwiLG9mZnNldDpcInNpbXBsZWJhci1vZmZzZXRcIixtYXNrOlwic2ltcGxlYmFyLW1hc2tcIix3cmFwcGVyOlwic2ltcGxlYmFyLXdyYXBwZXJcIixwbGFjZWhvbGRlcjpcInNpbXBsZWJhci1wbGFjZWhvbGRlclwiLHNjcm9sbGJhcjpcInNpbXBsZWJhci1zY3JvbGxiYXJcIix0cmFjazpcInNpbXBsZWJhci10cmFja1wiLGhlaWdodEF1dG9PYnNlcnZlcldyYXBwZXJFbDpcInNpbXBsZWJhci1oZWlnaHQtYXV0by1vYnNlcnZlci13cmFwcGVyXCIsaGVpZ2h0QXV0b09ic2VydmVyRWw6XCJzaW1wbGViYXItaGVpZ2h0LWF1dG8tb2JzZXJ2ZXJcIix2aXNpYmxlOlwic2ltcGxlYmFyLXZpc2libGVcIixob3Jpem9udGFsOlwic2ltcGxlYmFyLWhvcml6b250YWxcIix2ZXJ0aWNhbDpcInNpbXBsZWJhci12ZXJ0aWNhbFwiLGhvdmVyOlwic2ltcGxlYmFyLWhvdmVyXCIsZHJhZ2dpbmc6XCJzaW1wbGViYXItZHJhZ2dpbmdcIn0sc2Nyb2xsYmFyTWluU2l6ZToyNSxzY3JvbGxiYXJNYXhTaXplOjAsdGltZW91dDoxZTN9LGxvLmluc3RhbmNlcz1uZXcgV2Vha01hcCxsby5pbml0RE9NTG9hZGVkRWxlbWVudHM9ZnVuY3Rpb24oKXtkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLHRoaXMuaW5pdERPTUxvYWRlZEVsZW1lbnRzKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRcIix0aGlzLmluaXRET01Mb2FkZWRFbGVtZW50cyksQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtc2ltcGxlYmFyXVwiKSwoZnVuY3Rpb24odCl7XCJpbml0XCI9PT10LmdldEF0dHJpYnV0ZShcImRhdGEtc2ltcGxlYmFyXCIpfHxsby5pbnN0YW5jZXMuaGFzKHQpfHxuZXcgbG8odCxpbyh0LmF0dHJpYnV0ZXMpKX0pKX0sbG8ucmVtb3ZlT2JzZXJ2ZXI9ZnVuY3Rpb24oKXt0aGlzLmdsb2JhbE9ic2VydmVyLmRpc2Nvbm5lY3QoKX0sbG8uaW5pdEh0bWxBcGk9ZnVuY3Rpb24oKXt0aGlzLmluaXRET01Mb2FkZWRFbGVtZW50cz10aGlzLmluaXRET01Mb2FkZWRFbGVtZW50cy5iaW5kKHRoaXMpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBNdXRhdGlvbk9ic2VydmVyJiYodGhpcy5nbG9iYWxPYnNlcnZlcj1uZXcgTXV0YXRpb25PYnNlcnZlcihsby5oYW5kbGVNdXRhdGlvbnMpLHRoaXMuZ2xvYmFsT2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCx7Y2hpbGRMaXN0OiEwLHN1YnRyZWU6ITB9KSksXCJjb21wbGV0ZVwiPT09ZG9jdW1lbnQucmVhZHlTdGF0ZXx8XCJsb2FkaW5nXCIhPT1kb2N1bWVudC5yZWFkeVN0YXRlJiYhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsP3dpbmRvdy5zZXRUaW1lb3V0KHRoaXMuaW5pdERPTUxvYWRlZEVsZW1lbnRzKTooZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIix0aGlzLmluaXRET01Mb2FkZWRFbGVtZW50cyksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsdGhpcy5pbml0RE9NTG9hZGVkRWxlbWVudHMpKX0sbG8uaGFuZGxlTXV0YXRpb25zPWZ1bmN0aW9uKHQpe3QuZm9yRWFjaCgoZnVuY3Rpb24odCl7QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbCh0LmFkZGVkTm9kZXMsKGZ1bmN0aW9uKHQpezE9PT10Lm5vZGVUeXBlJiYodC5oYXNBdHRyaWJ1dGUoXCJkYXRhLXNpbXBsZWJhclwiKT8hbG8uaW5zdGFuY2VzLmhhcyh0KSYmZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKHQpJiZuZXcgbG8odCxpbyh0LmF0dHJpYnV0ZXMpKTpBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLXNpbXBsZWJhcl1cIiksKGZ1bmN0aW9uKHQpe1wiaW5pdFwiIT09dC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNpbXBsZWJhclwiKSYmIWxvLmluc3RhbmNlcy5oYXModCkmJmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyh0KSYmbmV3IGxvKHQsaW8odC5hdHRyaWJ1dGVzKSl9KSkpfSkpLEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwodC5yZW1vdmVkTm9kZXMsKGZ1bmN0aW9uKHQpezE9PT10Lm5vZGVUeXBlJiYoXCJpbml0XCI9PT10LmdldEF0dHJpYnV0ZShcImRhdGEtc2ltcGxlYmFyXCIpP2xvLmluc3RhbmNlcy5oYXModCkmJiFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnModCkmJmxvLmluc3RhbmNlcy5nZXQodCkudW5Nb3VudCgpOkFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwodC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1zaW1wbGViYXI9XCJpbml0XCJdJyksKGZ1bmN0aW9uKHQpe2xvLmluc3RhbmNlcy5oYXModCkmJiFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnModCkmJmxvLmluc3RhbmNlcy5nZXQodCkudW5Nb3VudCgpfSkpKX0pKX0pKX0sbG8uZ2V0T3B0aW9ucz1pbyxZdCYmbG8uaW5pdEh0bWxBcGkoKSxsb30pKTtcbiJdfQ==\n"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_countup","countIt","el","Num","dataset","to","countup","JSON","parse","CountUp","start","init","startEvent","duration","delay","offset","once","document","querySelectorAll","forEach","getAttribute","addEventListener","detail","Element","target","checked","asTarget","asAnnual","asMonthly","options","startVal","style","width","transitionDelay","transitionDuration","aos","countup.js","2","bootstrap","slice","map","toastEl","Toast","tooltipTriggerEl","Tooltip","popoverTriggerEl","Popover","Collapse","toggle","stopPropagation","parentElement","closest","getInstance","hide","bootstrap/dist/js/bootstrap.bundle","3","ownKeys","object","enumerableOnly","symbols","keys","Object","getOwnPropertySymbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","source","key","obj","value","defineProperty","configurable","writable","getOwnPropertyDescriptors","defineProperties","choices","classNames","containerInner","className","input","inputCloned","listDropdown","itemChoice","activeState","selectedState","choices.js","4","_jquery","__esModule","default","window","jQuery","$","jquery","5","on","attr","preventDefault","this","parent","find","removeClass","addClass","6","toggleClass","hasClass","7","fadeOut","8","forms","Array","prototype","form","event","checkValidity","classList","add","9","./custom/aos","./custom/bootstrap.custom","./custom/choices","./custom/jquery.global","./custom/mode_switcher","./custom/page-sidebar","./custom/preloader","./custom/validation","simplebar","10","global","_typeof","Symbol","iterator","constructor","b","l","Date","now","self","NaN","s","parseInt","d","Function","toString","m","Math","max","min","v","TypeError","y","h","k","x","setTimeout","O","w","g","leading","maxWait","trailing","cancel","clearTimeout","flush","valueOf","replace","test","S","q","j","E","N","z","C","A","L","T","M","D","H","W","P","addedNodes","removedNodes","children","concat","Y","MutationObserver","WebKitMutationObserver","MozMutationObserver","_","observe","documentElement","childList","subtree","B","F","I","assign","hasOwnProperty","K","G","J","Q","R","navigator","userAgent","vendor","opera","V","U","ie11","createEvent","initCustomEvent","CustomEvent","dispatchEvent","X","pageYOffset","position","node","data","animated","animatedClassNames","remove","id","mirror","out","Z","isNaN","offsetLeft","offsetTop","tagName","scrollLeft","scrollTop","offsetParent","top","left","ee","ne","re","all","atob","ce","ie","ae","oe","useClassNames","animatedClassName","split","initClassName","in","innerHeight","Number","offsetHeight","anchorPlacement","throttleDelay","se","de","disable","ue","substr","mobile","phone","easing","disableMutationObserver","debounceDelay","removeAttribute","tablet","console","info","querySelector","setAttribute","indexOf","readyState","refresh","refreshHard","define","amd","AOS","11","_get","property","receiver","Reflect","get","base","_getPrototypeOf","_superPropBase","desc","_defineProperty","_toConsumableArray","arr","isArray","_arrayLikeToArray","_arrayWithoutHoles","iter","from","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","_inherits","subClass","superClass","create","_setPrototypeOf","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","Boolean","_isNativeReflectConstruct","Super","result","NewTarget","ReferenceError","_assertThisInitialized","getPrototypeOf","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","_slicedToArray","_arrayWithHoles","_i","_s","_e","_arr","_n","_d","next","done","err","_iterableToArrayLimit","_nonIterableRest","minLen","name","len","arr2","factory","getSelector","element","selector","hrefAttr","includes","startsWith","trim","getElementFromSelector","triggerTransitionEnd","Event","TRANSITION_END","isElement$1","nodeType","typeCheckConfig","componentName","config","configTypes","expectedTypes","valueType","match","toLowerCase","RegExp","toUpperCase","isVisible","getClientRects","getComputedStyle","getPropertyValue","isDisabled","Node","ELEMENT_NODE","contains","disabled","hasAttribute","findShadowRoot","attachShadow","getRootNode","ShadowRoot","parentNode","root","noop","reflow","getjQuery","body","isRTL","dir","defineJQueryPlugin","plugin","callback","JQUERY_NO_CONFLICT","NAME","fn","jQueryInterface","noConflict","DOMContentLoadedCallbacks","execute","executeAfterTransition","transitionElement","emulatedDuration","called","handler","undefined","_window$getComputedSt","floatTransitionDuration","parseFloat","floatTransitionDelay","getTransitionDurationFromElement","_ref5","removeEventListener","getNextActiveElement","list","activeElement","shouldGetNext","isCycleAllowed","index","listLength","getSelectorFromElement","getElement","namespaceRegex","stripNameRegex","stripUidRegex","eventRegistry","uidEvent","customEvents","mouseenter","mouseleave","customEventsRegex","nativeEvents","Set","getUidEvent","uid","getEvent","findHandler","events","delegationSelector","uidEventList","originalHandler","normalizeParams","originalTypeEvent","delegationFn","delegation","typeEvent","getTypeEvent","has","addHandler","oneOff","handlers","previousFn","wrapFn","relatedTarget","delegateTarget","_normalizeParams2","domElements","EventHandler","off","type","removeHandler","enableDismissTrigger","component","method","clickEvent","EVENT_KEY","getOrCreateInstance","one","_normalizeParams4","inNamespace","isNamespace","elementEvent","namespace","storeElementEvent","handlerKey","keyHandlers","trigger","args","jQueryEvent","isNative","bubbles","nativeDispatch","defaultPrevented","evt","isPropagationStopped","isImmediatePropagationStopped","isDefaultPrevented","initEvent","cancelable","elementMap","Map","Data","set","instanceMap","size","error","BaseComponent","_element","DATA_KEY","_this","getOwnPropertyNames","propertyName","EVENT_KEY$c","EVENT_CLOSE","EVENT_CLOSED","Alert","_super","isAnimated","_this2","_queueCallback","_destroyElement","dispose","each","EVENT_KEY$b","SELECTOR_DATA_TOGGLE$5","EVENT_CLICK_DATA_API$6","Button","_super2","normalizeData","val","normalizeDataKey","chr","button","Manipulator","setDataAttribute","removeDataAttribute","getDataAttributes","attributes","pureKey","charAt","getDataAttribute","rect","getBoundingClientRect","pageXOffset","SelectorEngine","_ref6","findOne","_ref7","child","matches","parents","ancestor","prev","previous","previousElementSibling","nextElementSibling","focusableChildren","focusables","join","NAME$b","EVENT_KEY$a","DATA_API_KEY$6","Default$a","interval","keyboard","slide","pause","wrap","touch","DefaultType$a","ORDER_NEXT","ORDER_PREV","DIRECTION_LEFT","DIRECTION_RIGHT","KEY_TO_DIRECTION","_KEY_TO_DIRECTION","EVENT_SLIDE","EVENT_SLID","EVENT_KEYDOWN","EVENT_MOUSEENTER","EVENT_MOUSELEAVE","EVENT_TOUCHSTART","EVENT_TOUCHMOVE","EVENT_TOUCHEND","EVENT_POINTERDOWN","EVENT_POINTERUP","EVENT_DRAG_START","EVENT_LOAD_DATA_API$2","EVENT_CLICK_DATA_API$5","CLASS_NAME_ACTIVE$2","SELECTOR_ACTIVE_ITEM","SELECTOR_INDICATORS","Carousel","_super3","_this3","_items","_interval","_activeElement","_isPaused","_isSliding","touchTimeout","touchStartX","touchDeltaX","_config","_getConfig","_indicatorsElement","_touchSupported","maxTouchPoints","_pointerEvent","PointerEvent","_addEventListeners","_slide","hidden","cycle","clearInterval","_updateInterval","setInterval","visibilityState","nextWhenVisible","bind","_this4","activeIndex","_getItemIndex","absDeltax","abs","direction","_this5","_keydown","_addTouchEventListeners","hasPointerPenTouch","_this6","pointerType","clientX","touches","end","_handleSwipe","itemImg","order","eventDirectionName","targetIndex","fromIndex","activeIndicator","indicators","elementInterval","defaultInterval","directionOrOrder","triggerSlidEvent","_this7","_directionToOrder","activeElementIndex","nextElement","_getItemByOrder","nextElementIndex","isCycling","isNext","directionalClassName","orderClassName","_orderToDirection","_triggerSlideEvent","_setActiveIndicatorElement","action","ride","carouselInterface","slideIndex","dataApiClickHandler","carousels","NAME$a","DATA_KEY$9","EVENT_KEY$9","Default$9","DefaultType$9","EVENT_SHOW$5","EVENT_SHOWN$5","EVENT_HIDE$5","EVENT_HIDDEN$5","EVENT_CLICK_DATA_API$4","CLASS_NAME_SHOW$7","CLASS_NAME_COLLAPSE","CLASS_NAME_COLLAPSING","CLASS_NAME_COLLAPSED","CLASS_NAME_DEEPER_CHILDREN","SELECTOR_DATA_TOGGLE$4","_super4","_this8","_isTransitioning","_triggerArray","toggleList","elem","filterElement","foundElem","_selector","_initializeChildren","_addAriaAndCollapsedClass","_isShown","show","_this9","actives","dimension","container","activesData","tempActiveData","elemActive","_getDimension","capitalizedDimension","scrollSize","_this10","triggerArrayLength","_this11","selected","triggerArray","isOpen","bottom","right","auto","basePlacements","clippingParents","viewport","popper","reference","variationPlacements","reduce","acc","placement","placements","beforeRead","afterRead","beforeMain","afterMain","beforeWrite","afterWrite","modifierPhases","getNodeName","nodeName","getWindow","ownerDocument","defaultView","isElement","isHTMLElement","HTMLElement","isShadowRoot","applyStyles$1","enabled","phase","_ref","state","elements","styles","effect","_ref2","initialStyles","strategy","margin","arrow","attribute","requires","getBasePlacement","height","getLayoutRect","clientRect","offsetWidth","rootNode","isSameNode","host","getComputedStyle$1","getDocumentElement","getParentNode","assignedSlot","getTrueOffsetParent","getOffsetParent","isFirefox","isIE","currentNode","css","transform","perspective","contain","willChange","getContainingBlock","getMainAxisFromPlacement","round","within","min$1","max$1","getFreshSideObject","mergePaddingObject","paddingObject","expandToHashMap","hashMap","arrow$1","endDiff","arrowElement","popperOffsets","modifiersData","basePlacement","axis","padding","rects","arrowRect","minProp","maxProp","startDiff","clientSize","arrowOffsetParent","clientHeight","clientWidth","center","_state$modifiersData$","centerOffset","_options$element","requiresIfExists","getVariation","unsetSides","mapToStyles","popperRect","variation","offsets","gpuAcceleration","adaptive","roundOffsets","_ref3","dpr","devicePixelRatio","_ref3$x","_ref3$y","hasX","hasY","sideX","sideY","win","heightProp","widthProp","commonStyles","_Object$assign","_Object$assign2","computeStyles$1","_ref4","_options$gpuAccelerat","_options$adaptive","_options$roundOffsets","data-popper-placement","passive","eventListeners","scroll","_options$scroll","resize","_options$resize","scrollParents","scrollParent","update","hash$1","getOppositePlacement","matched","hash","getOppositeVariationPlacement","getWindowScroll","getWindowScrollBarX","isScrollParent","_getComputedStyle","overflow","overflowX","overflowY","listScrollParents","getScrollParent","isBody","_element$ownerDocumen","visualViewport","updatedList","rectToClientRect","getClientRectFromMixedType","clippingParent","html","clientTop","clientLeft","winScroll","scrollWidth","scrollHeight","getClippingRect","boundary","rootBoundary","clipperElement","mainClippingParents","firstClippingParent","clippingRect","accRect","computeOffsets","commonX","commonY","mainAxis","detectOverflow","_options","_options$placement","_options$boundary","_options$rootBoundary","_options$elementConte","elementContext","_options$altBoundary","altBoundary","_options$padding","clippingClientRect","contextElement","referenceClientRect","popperClientRect","elementClientRect","overflowOffsets","offsetData","multiply","flip$1","_skip","_options$mainAxis","checkMainAxis","_options$altAxis","altAxis","checkAltAxis","specifiedFallbackPlacements","fallbackPlacements","_options$flipVariatio","flipVariations","allowedAutoPlacements","preferredPlacement","oppositePlacement","getExpandedFallbackPlacements","_options$allowedAutoP","placements$1","overflows","allowedPlacements","sort","referenceRect","checksMap","makeFallbackChecks","firstFittingPlacement","_basePlacement","isStartVariation","isVertical","mainVariationSide","altVariationSide","checks","every","check","fittingPlacement","_loop","reset","getSideOffsets","preventedOffsets","isAnySideFullyClipped","some","side","hide$1","preventOverflow","referenceOverflow","popperAltOverflow","referenceClippingOffsets","popperEscapeOffsets","isReferenceHidden","hasPopperEscaped","data-popper-reference-hidden","data-popper-escaped","offset$1","_options$offset","invertDistance","skidding","distance","_data$state$placement","popperOffsets$1","preventOverflow$1","_options$tether","tether","_options$tetherOffset","tetherOffset","isBasePlacement","tetherOffsetValue","mainSide","altSide","additive","maxLen","arrowPaddingMin","arrowPaddingObject","arrowPaddingMax","arrowLen","minOffset","maxOffset","clientOffset","offsetModifierValue","tetherMin","tetherMax","preventedOffset","_min","_offset","_max","_preventedOffset","getCompositeRect","elementOrVirtualElement","isFixed","isOffsetParentAnElement","scaleY","modifiers","visited","modifier","dep","depModifier","DEFAULT_OPTIONS","areValidElements","_len","_key","popperGenerator","generatorOptions","_generatorOptions","_generatorOptions$def","defaultModifiers","_generatorOptions$def2","defaultOptions","pending","orderedModifiers","effectCleanupFns","isDestroyed","setOptions","setOptionsAction","cleanupModifierEffects","merged","current","existing","_ref3$options","cleanupFn","forceUpdate","_state$elements","_state$orderedModifie2","_state$orderedModifie","Promise","resolve","then","destroy","onFirstUpdate","createPopper","Popper","freeze","createPopperBase","createPopperLite","read","main","write","applyStyles","computeStyles","flip","NAME$9","EVENT_KEY$8","DATA_API_KEY$4","ESCAPE_KEY$2","ARROW_UP_KEY","ARROW_DOWN_KEY","REGEXP_KEYDOWN","EVENT_HIDE$4","EVENT_HIDDEN$4","EVENT_SHOW$4","EVENT_SHOWN$4","EVENT_CLICK_DATA_API$3","EVENT_KEYDOWN_DATA_API","EVENT_KEYUP_DATA_API","CLASS_NAME_SHOW$6","SELECTOR_DATA_TOGGLE$3","SELECTOR_MENU","PLACEMENT_TOP","PLACEMENT_TOPEND","PLACEMENT_BOTTOM","PLACEMENT_BOTTOMEND","PLACEMENT_RIGHT","PLACEMENT_LEFT","Default$8","display","popperConfig","autoClose","DefaultType$8","Dropdown","_super5","_this12","_popper","_menu","_getMenuElement","_inNavbar","_detectNavbar","_ref8","getParentFromElement","_createPopper","focus","_completeHide","_ref9","Default","DefaultType","referenceElement","_getPopperConfig","isDisplayStatic","parentDropdown","isEnd","_this13","popperData","defaultBsPopperConfig","_getPlacement","_getOffset","_ref10","items","toggles","context","composedPath","isMenuTarget","isActive","getToggleButton","_selectMenuItem","clearMenus","dataApiKeydownHandler","SELECTOR_FIXED_CONTENT","SELECTOR_STICKY_CONTENT","ScrollBarHelper","documentWidth","innerWidth","getWidth","_disableOverFlow","_setElementAttributes","calculatedValue","_saveInitialAttribute","styleProp","_this14","scrollbarWidth","_applyManipulationCallback","_resetElementAttributes","actualValue","removeProperty","callBack","Default$7","rootElement","clickCallback","DefaultType$7","NAME$8","EVENT_MOUSEDOWN","Backdrop","_isAppended","_append","_getElement","_emulateAnimation","_this15","backdrop","createElement","_this16","append","Default$6","trapElement","autofocus","DefaultType$6","EVENT_KEY$7","EVENT_FOCUSIN$1","EVENT_KEYDOWN_TAB","TAB_NAV_BACKWARD","FocusTrap","_isActive","_lastTabNavDirection","_this17","_this$_config","_handleFocusin","_handleKeydown","shiftKey","EVENT_KEY$6","Default$5","DefaultType$5","EVENT_HIDE$3","EVENT_HIDE_PREVENTED","EVENT_HIDDEN$3","EVENT_SHOW$3","EVENT_SHOWN$3","EVENT_RESIZE","EVENT_CLICK_DISMISS","EVENT_KEYDOWN_DISMISS$1","EVENT_MOUSEUP_DISMISS","EVENT_MOUSEDOWN_DISMISS","EVENT_CLICK_DATA_API$2","CLASS_NAME_OPEN","CLASS_NAME_STATIC","SELECTOR_DIALOG","Modal","_super6","_this18","_dialog","_backdrop","_initializeBackDrop","_focustrap","_initializeFocusTrap","_ignoreBackdropClick","_scrollBar","_this19","_isAnimated","_adjustDialog","_setEscapeEvent","_setResizeEvent","_showBackdrop","_showElement","_this20","deactivate","_hideModal","htmlElement","_this21","modalBody","activate","_this22","_triggerBackdropTransition","_this23","_this24","_resetAdjustments","_this25","currentTarget","_this$_element","isModalOverflowing","_this26","isBodyOverflowing","paddingLeft","paddingRight","_this27","showEvent","allReadyOpen","NAME$5","EVENT_KEY$5","DATA_API_KEY$2","EVENT_LOAD_DATA_API$1","Default$4","DefaultType$4","OPEN_SELECTOR","EVENT_SHOW$2","EVENT_SHOWN$2","EVENT_HIDE$2","EVENT_HIDDEN$2","EVENT_CLICK_DATA_API$1","EVENT_KEYDOWN_DISMISS","Offcanvas","_super7","_this28","_this29","visibility","_this30","blur","_this31","_this32","_this33","uriAttributes","SAFE_URL_PATTERN","DATA_URL_PATTERN","DefaultAllowlist","*","area","br","col","div","em","hr","h1","h2","h3","h4","h5","h6","img","li","ol","pre","small","span","sub","sup","strong","ul","sanitizeHtml","unsafeHtml","allowList","sanitizeFn","createdDocument","DOMParser","parseFromString","_ref11","_loop2","elementName","attributeList","_ref12","allowedAttributes","allowedAttributeList","attributeName","nodeValue","regExp","attributeRegex","allowedAttribute","innerHTML","NAME$4","EVENT_KEY$4","DISALLOWED_ATTRIBUTES","DefaultType$3","animation","template","title","customClass","sanitize","AttachmentMap","AUTO","TOP","RIGHT","BOTTOM","LEFT","Default$3","Event$2","HIDE","HIDDEN","SHOW","SHOWN","INSERTED","CLICK","FOCUSIN","FOCUSOUT","MOUSEENTER","MOUSELEAVE","CLASS_NAME_FADE$2","CLASS_NAME_SHOW$2","HOVER_STATE_SHOW","SELECTOR_TOOLTIP_INNER","SELECTOR_MODAL","EVENT_MODAL_HIDE","TRIGGER_HOVER","TRIGGER_FOCUS","_super8","_this34","_isEnabled","_timeout","_hoverState","_activeTrigger","tip","_setListeners","_initializeOnDelegatedTarget","click","_isWithActiveTrigger","_enter","_leave","getTipElement","_hideModalHandler","_disposePopper","_tip$classList","_this35","isWithContent","isInTheDom","shadowRoot","getTitle","tipId","prefix","floor","random","getElementById","getUID","attachment","_getAttachment","_addAttachmentClass","_resolvePossibleFunction","_ref13","prevHoverState","_this36","_ref14","_cleanTipClass","setContent","_sanitizeAndSetContent","content","templateElement","setElementContent","textContent","_getDelegateConfig","_this37","_this38","_handlePopperPlacementChange","_getBasicClassPrefix","updateAttachment","_this39","eventIn","eventOut","_fixTitle","originalTitleType","dataAttributes","dataAttr","basicClassPrefixRegex","tabClass","token","tClass","EVENT_KEY$3","Default$2","DefaultType$2","Event$1","_super9","_getContent","NAME$2","EVENT_KEY$2","Default$1","DefaultType$1","EVENT_ACTIVATE","EVENT_SCROLL","EVENT_LOAD_DATA_API","CLASS_NAME_DROPDOWN_ITEM","CLASS_NAME_ACTIVE$1","SELECTOR_NAV_LINKS","SELECTOR_LIST_ITEMS","SELECTOR_LINK_ITEMS","METHOD_POSITION","ScrollSpy","_super10","_this40","_scrollElement","_offsets","_targets","_activeTarget","_scrollHeight","_process","_this41","autoMethod","offsetMethod","offsetBase","_getScrollTop","_getScrollHeight","targetSelector","targetBCR","item","maxScroll","_getOffsetHeight","_activate","_clear","queries","link","listGroup","navItem","spy","EVENT_KEY$1","EVENT_HIDE$1","EVENT_HIDDEN$1","EVENT_SHOW$1","EVENT_SHOWN$1","EVENT_CLICK_DATA_API","CLASS_NAME_ACTIVE","SELECTOR_ACTIVE","SELECTOR_ACTIVE_UL","Tab","_super11","hideEvent","complete","_this42","listElement","itemSelector","_this43","active","isTransitioning","_transitionComplete","dropdownChild","dropdownElement","dropdown","EVENT_MOUSEOVER","EVENT_MOUSEOUT","EVENT_FOCUSIN","EVENT_FOCUSOUT","EVENT_HIDE","EVENT_HIDDEN","EVENT_SHOW","EVENT_SHOWN","CLASS_NAME_SHOW","CLASS_NAME_SHOWING","autohide","_super12","_this44","_hasMouseInteraction","_hasKeyboardInteraction","_this45","_clearTimeout","_maybeScheduleHide","_this46","_this47","isInteracting","_this48","_onInteraction","globalThis","12","modules","__webpack_require__","isMergeableObject","stringValue","$$typeof","REACT_ELEMENT_TYPE","isReactElement","cloneUnlessOtherwiseSpecified","clone","deepmerge","defaultArrayMerge","getKeys","symbol","propertyIsEnumerable","mergeObject","destination","unused","propertyIsUnsafe","customMerge","arrayMerge","sourceIsArray","array","__webpack_exports__","_ponyfill_js__WEBPACK_IMPORTED_MODULE_0__","toStringTag","limit","_log","_prepareSearchers","tokenSearchers","fullSearcher","_search","weights","results","_computeScore","shouldSort","_sort","_format","tokenize","tokenSeparator","_analyze","record","resultMap","weight","getFn","arrayIndex","search","score","pattern","isMatch","matchAllTokens","output","matchedIndices","nScore","sortFn","verbose","stringify","includeMatches","indices","includeScore","log","location","threshold","maxPatternLength","caseSensitive","findAllMatches","minMatchCharLength","isCaseSensitive","setCollection","patternAlphabet","errors","currentLocation","expectedLocation","lastIndexOf","symbolObservablePonyfill","_Symbol","observable","originalModule","webpackPolyfill","randomString","substring","dist_fuse","fuse_default","cjs","cjs_default","es","ActionTypes","INIT","REPLACE","PROBE_UNKNOWN_ACTION","isPlainObject","proto","createStore","reducer","preloadedState","enhancer","currentReducer","currentState","currentListeners","nextListeners","isDispatching","ensureCanMutateNextListeners","getState","subscribe","listener","isSubscribed","splice","dispatch","listeners","replaceReducer","nextReducer","outerSubscribe","observer","observeState","unsubscribe","defaultState","groups_defaultState","choices_defaultState","generateChars","getType","isType","sanitise","sortByScore","cloneObject","reducers","passedState","appReducer","tmpEl","general_defaultState","loading","reducers_general","isLoading","generateId","strToEl","str","cleanedInput","firldChild","firstChild","removeChild","diff","aKeys","bKeys","reducerKeys","finalReducers","shapeAssertionError","finalReducerKeys","hasChanged","nextState","previousStateForKey","nextStateForKey","errorMessage","actionType","String","combineReducers","choiceId","groupId","label","highlighted","customProperties","placeholder","keyCode","groups","elementId","activateOptions","choice","general","store_Store","Store","_store","__REDUX_DEVTOOLS_EXTENSION__","_proto","onChange","getChoiceById","activeChoices","getGroupById","group","selectableChoices","reverse","hasActiveOptions","dropdown_defineProperties","getChild","DEFAULT_CONFIG","silent","renderChoiceLimit","maxItemCount","addItems","addItemFilter","removeItems","removeItemButton","editItems","duplicateItemsAllowed","delimiter","paste","searchEnabled","searchChoices","searchFloor","searchResultLimit","searchFields","resetScrollPosition","shouldSortItems","sorter","_ref$label","value2","_ref2$label","localeCompare","sensitivity","ignorePunctuation","numeric","placeholderValue","searchPlaceholderValue","prependValue","appendValue","renderSelectedChoices","loadingText","noResultsText","noChoicesText","itemSelectText","uniqueItemText","customAddItemText","addItemText","maxItemText","valueComparer","value1","fuseOptions","callbackOnInit","callbackOnCreateTemplates","containerOuter","listItems","listSingle","itemSelectable","itemDisabled","groupHeading","focusState","openState","disabledState","highlightedState","flippedState","loadingState","noResults","noChoices","EVENTS","ACTION_TYPES","KEY_CODES","TEXT_TYPE","SELECT_ONE_TYPE","SELECT_MULTIPLE_TYPE","container_Container","Container","isFlipped","isFocussed","_onFocus","_onBlur","addEventListeners","removeEventListeners","shouldFlip","dropdownPos","matchMedia","setActiveDescendant","activeDescendantID","removeActiveDescendant","open","close","addFocusState","removeFocusState","enable","wrapper","nextSibling","insertBefore","appendChild","unwrap","addLoadingState","removeLoadingState","input_defineProperties","input_Input","Input","preventPaste","_onPaste","_onInput","clear","setWidth","_this$element","minWidth","list_List","List","scrollPos","hasChildren","hasChildNodes","scrollToTop","scrollToChildElement","listScrollPosition","elementPos","listHeight","elementHeight","requestAnimationFrame","_animateScroll","_scrollDown","strength","_scrollUp","choiceListScrollTop","continueAnimation","wrapped_element_defineProperties","wrapped_element_WrappedElement","WrappedElement","HTMLInputElement","HTMLSelectElement","conceal","tabIndex","origStyle","reveal","triggerEvent","eventType","customArgs","wrapped_input_defineProperties","WrappedInput","_WrappedElement","joinedValues","wrapped_select_defineProperties","choices_activateChoices","items_highlightItem","groups_addGroup","setIsLoading","WrappedSelect","appendDocFragment","fragment","getElementsByTagName","createDocumentFragment","option","TEMPLATES","isSelectElement","isSelectOneElement","passedElementType","_containerOuter","_containerInner","itemList","_placeholder","_item","isPlaceholder","deletable","REMOVE_ITEM_TEXT","removeButton","choiceList","choiceGroup","selectText","isSelected","choiceDisabled","choiceSelectable","_input","inp","autocomplete","autocapitalize","spellcheck","notice","classes","_ref15","opt","Option","choices_defineProperties","IS_IE11","USER_DEFAULTS","choices_Choices","Choices","userConfig","defaults","sourceArray","invalidConfigOptions","warn","passedElement","_isTextElement","_isSelectOneElement","_isSelectMultipleElement","_isSelectElement","_templates","initialised","_initialState","_currentState","_prevState","_currentValue","_canSearch","_isScrollingOnIe","_highlightPosition","_wasTap","_placeholderValue","_generatePlaceholderValue","_baseId","_direction","elementDirection","_idNames","_presetGroups","optionGroups","_presetOptions","_presetChoices","_presetItems","_render","_onKeyUp","_onKeyDown","_onClick","_onTouchMove","_onTouchEnd","_onMouseDown","_onMouseOver","_onFormReset","_onAKey","_onEnterKey","_onEscapeKey","_onDirectionKey","_onDeleteKey","preventExtensions","templates","_createTemplates","_createElements","_createStructure","_removeEventListeners","clearStore","highlightItem","runEvent","_item$groupId","_item$value","_item$label","groupValue","unhighlightItem","_item$groupId2","_item$value2","_item$label2","highlightAll","unhighlightAll","removeActiveItemsByValue","activeItems","_removeItem","removeActiveItems","excludedId","removeHighlightedItems","highlightedActiveItems","_triggerChange","showDropdown","preventInputFocus","distanceFromTopWindow","hideDropdown","preventInputBlur","getValue","valueOnly","values","selectedItems","itemValue","setValue","_setChoiceOrItem","setChoiceByValue","_findAndSelectChoiceByValue","setChoices","choicesArrayOrFetcher","replaceChoices","clearChoices","fetcher","_handleLoadingState","_startLoading","groupOrChoice","_addGroup","valueKey","labelKey","_addChoice","_stopLoading","clearInput","shouldSetInputWidth","_isSearching","stateChanged","shouldRenderChoices","shouldRenderItems","_renderChoices","_renderItems","dropdownItem","_this$_store","activeGroups","choiceListFragment","activePlaceholders","activeChoice","_createChoicesFragment","_createGroupsFragment","childNodes","canAddItem","_canAddItem","response","_highlightChoice","_getTemplate","itemListFragment","_createItemsFragment","groupChoices","dropdownGroup","withinGroup","_this$config","rendererableChoices","_rendererableChoices$","placeholderChoices","normalChoices","choiceLimit","sortedChoices","_this$config2","listItem","_selectPlaceholderChoice","placeholderChoice","_addItem","_handleButtonAction","itemId","itemToRemove","_handleItemAction","hasShiftKey","passedId","_handleChoiceAction","hasActiveDropdown","passedKeyCode","_handleBackspace","lastItem","hasHighlightedItems","setLoading","placeholderItem","_handleSearch","hasUnactiveChoices","resultCount","_this$config3","_searchChoices","isDuplicateValue","newValue","currentValue","haystack","searchableChoices","needle","ctrlKey","metaKey","hasFocusedInput","hasItems","keyString","fromCharCode","BACK_KEY","DELETE_KEY","ENTER_KEY","A_KEY","ESC_KEY","UP_KEY","DOWN_KEY","PAGE_UP_KEY","PAGE_DOWN_KEY","hasCtrlDownKeyPressed","_keyDownActions","keyDownActions","backKey","deleteKey","outerHTML","userHasRemovedValue","canReactivateChoices","canSearch","enterKey","targetWasButton","highlightedChoice","downKey","pageUpKey","pageDownKey","directionInt","selectableChoiceIdentifier","nextEl","currentEl","startEl","prop","sibling","getAdjacentEl","isScrolledIntoView","firstChoice","firstElementChild","isOnScrollbar","offsetX","_focusActions","_blurActions","passedEl","_ref13$label","_ref13$choiceId","_ref13$groupId","_ref13$customProperti","_ref13$placeholder","_ref13$keyCode","passedValue","passedCustomProperties","passedLabel","passedOptionId","_ref14$label","_ref14$isSelected","_ref14$isDisabled","_ref14$groupId","_ref14$customProperti","_ref14$placeholder","_ref14$keyCode","choiceElementId","choiceLabel","_ref15$valueKey","_ref15$labelKey","isOptDisabled","_this$_templates$temp","userTemplates","_addPredefinedGroups","_addPredefinedChoices","_addPredefinedItems","placeholderOption","hasSelectedChoice","firstEnabledChoiceIndex","findIndex","string","foundChoice","text","_this$config4","installedModules","getter","mode","ns","moduleId","13","__assign","determineDirectionAndSmartEasing","finalEndVal","endVal","countDown","smartEasingThreshold","smartEasingAmount","useEasing","paused","rAF","count","printValue","pauseResume","startTime","remaining","frameVal","cancelAnimationFrame","resetDuration","validateValue","formattingFn","ensureNumber","version","decimalPlaces","useGrouping","separator","decimal","suffix","easingFn","toFixed","formatNumber","numerals","easeOutExpo","pow","14","noGlobal","isWindow","getProto","_slice","flat","class2type","hasOwn","fnToString","ObjectFunctionString","support","isFunction","preservedScriptAttributes","src","nonce","noModule","DOMEval","doc","script","head","toType","isArrayLike","toArray","num","pushStack","elems","ret","merge","prevObject","first","eq","last","even","grep","_elem","odd","extend","copy","copyIsArray","deep","expando","isReady","msg","Ctor","isEmptyObject","globalEval","makeArray","inArray","second","invert","callbackExpect","arg","guid","Sizzle","funescape","escape","nonHex","high","unloadHandler","setDocument","Expr","getText","isXML","compile","select","outermostContext","sortInput","hasDuplicate","docElem","documentIsHTML","rbuggyQSA","rbuggyMatches","preferredDoc","dirruns","classCache","createCache","tokenCache","compilerCache","nonnativeSelectorCache","sortOrder","pop","pushNative","booleans","whitespace","identifier","pseudos","rwhitespace","rtrim","rcomma","rcombinators","rdescend","rpseudo","ridentifier","matchExpr","ID","CLASS","TAG","ATTR","PSEUDO","CHILD","bool","needsContext","rhtml","rinputs","rheader","rnative","rquickExpr","rsibling","runescape","rcssescape","fcssescape","ch","asCodePoint","charCodeAt","inDisabledFieldset","addCombinator","els","seed","nid","newSelector","newContext","exec","getElementsByClassName","qsa","testContext","scope","toSelector","qsaError","cache","cacheLength","shift","markFunction","assert","addHandle","attrs","attrHandle","siblingCheck","cur","sourceIndex","createDisabledPseudo","createPositionalPseudo","argument","matchIndexes","namespaceURI","subWindow","attachEvent","createComment","getById","getElementsByName","attrId","getAttributeNode","tag","tmp","matchesSelector","webkitMatchesSelector","mozMatchesSelector","oMatchesSelector","msMatchesSelector","disconnectedMatch","hasCompare","compareDocumentPosition","adown","bup","compare","sortDetached","aup","ap","bp","unshift","expr","specified","sel","uniqueSort","duplicates","detectDuplicates","sortStable","selectors","createPseudo","relative",">"," ","+","~","preFilter","excess","unquoted","nodeNameSelector","operator","what","_argument","simple","forward","ofType","_context","xml","uniqueCache","outerCache","nodeIndex","useCache","lastChild","uniqueID","pseudo","setFilters","idx","not","matcher","unmatched","lang","elemLang","hasFocus","href","selectedIndex","empty","header","_matchIndexes","lt","gt","radio","checkbox","file","password","image","createInputPseudo","submit","createButtonPseudo","tokens","combinator","skip","checkNonElements","doneName","newCache","oldCache","elementMatcher","matchers","condense","newUnmatched","mapped","setMatcher","postFilter","postFinder","postSelector","temp","preMap","postMap","preexisting","contexts","multipleContexts","matcherIn","matcherOut","matcherFromGroupMatchers","elementMatchers","setMatchers","superMatcher","outermost","matchedCount","setMatched","contextBackup","byElement","dirrunsUnique","bySet","filters","parseOnly","soFar","preFilters","cached","matcherFromTokens","checkContext","leadingRelative","implicitRelative","matchContext","matchAnyContext","compiled","_name","defaultValue","unique","isXMLDoc","escapeSelector","_dir","until","truncate","is","_siblings","rneedsContext","rsingleTag","winnow","qualifier","rootjQuery","ready","parseHTML","rparentsprev","guaranteedUnique","contents","targets","prevAll","addBack","parentsUntil","nextAll","nextUntil","prevUntil","siblings","contentDocument","rnothtmlwhite","Identity","Thrower","ex","adoptValue","reject","noValue","promise","fail","Callbacks","flag","fire","_locked","_fired","firing","queue","firingIndex","memory","stopOnFalse","lock","locked","fireWith","fired","Deferred","func","tuples","_state","_promise","always","deferred","catch","pipe","fns","newDefer","tuple","returned","progress","notify","onFulfilled","onRejected","onProgress","maxDepth","depth","special","mightThrow","that","notifyWith","resolveWith","process","exceptionHook","stackTrace","rejectWith","getStackHook","stateString","when","singleValue","updateFunc","resolveContexts","resolveValues","primary","rerrorNames","stack","message","readyException","readyList","completed","readyWait","wait","doScroll","access","chainable","emptyGet","raw","bulk","rmsPrefix","rdashAlpha","fcamelCase","_all","letter","camelCase","acceptData","owner","hasData","dataPriv","dataUser","rbrace","rmultiDash","_data","removeData","_removeData","dequeue","startLength","hooks","_queueHooks","stop","setter","clearQueue","defer","pnum","rcssNum","cssExpand","isAttached","composed","isHiddenWithinTree","adjustCSS","valueParts","tween","adjusted","scale","maxIterations","initial","unit","cssNumber","initialInUnit","defaultDisplayMap","showHide","rcheckableType","rtagName","rscriptType","checkClone","cloneNode","noCloneChecked","wrapMap","thead","tr","td","_default","getAll","setGlobalEval","refElements","tbody","tfoot","colgroup","caption","th","optgroup","buildFragment","scripts","selection","ignored","attached","nodes","htmlPrefilter","createTextNode","rtypenamespace","returnTrue","returnFalse","expectSync","safeActiveElement","_on","types","origFn","leverageNative","notAsync","saved","isTrigger","delegateType","stopImmediatePropagation","handleObjIn","eventHandle","handleObj","namespaces","origType","elemData","handle","triggered","bindType","delegateCount","setup","mappedTypes","origCount","teardown","removeEvent","nativeEvent","handlerQueue","fix","preDispatch","rnamespace","postDispatch","_handlers","matchedHandlers","matchedSelectors","addProp","hook","originalEvent","load","noBubble","beforeunload","returnValue","timeStamp","isSimulated","altKey","changedTouches","eventPhase","pageX","pageY","view","char","charCode","buttons","clientY","offsetY","pointerId","screenX","screenY","targetTouches","toElement","which","pointerenter","pointerleave","orig","related","rnoInnerhtml","rchecked","rcleanScript","manipulationTarget","disableScript","restoreScript","cloneCopyEvent","dest","udataOld","udataCur","domManip","collection","hasScripts","iNoClone","valueIsFunction","_evalUrl","_remove","keepData","cleanData","dataAndEvents","deepDataAndEvents","srcElements","destElements","inPage","detach","prepend","before","after","replaceWith","replaceChild","appendTo","prependTo","insertAfter","replaceAll","original","insert","swap","old","pixelPositionVal","boxSizingReliableVal","scrollboxSizeVal","pixelBoxStylesVal","reliableTrDimensionsVal","reliableMarginLeftVal","rnumnonpx","getStyles","opener","rboxStyle","computeStyleTests","divStyle","cssText","roundPixelMeasures","marginLeft","measure","curCSS","computed","pixelBoxStyles","maxWidth","addGetHookIf","conditionFn","hookFn","backgroundClip","clearCloneStyle","boxSizingReliable","pixelPosition","reliableMarginLeft","scrollboxSize","reliableTrDimensions","table","trStyle","trChild","borderTopWidth","borderBottomWidth","cssPrefixes","emptyStyle","vendorProps","finalPropName","_final","cssProps","capName","vendorPropName","rdisplayswap","rcustomProp","cssShow","cssNormalTransform","letterSpacing","fontWeight","setPositiveNumber","subtract","boxModelAdjustment","box","isBorderBox","computedVal","extra","delta","ceil","getWidthOrHeight","valueIsBorderBox","offsetProp","Tween","cssHooks","opacity","animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","gridArea","gridColumn","gridColumnEnd","gridColumnStart","gridRow","gridRowEnd","gridRowStart","lineHeight","orphans","widows","zIndex","zoom","origName","isCustomProp","setProperty","isFinite","scrollboxSizeBuggy","border","expand","expanded","parts","propHooks","run","percent","eased","pos","step","fx","linear","swing","cos","PI","fxNow","inProgress","rfxtypes","rrun","schedule","tick","createFxNow","genFx","includeWidth","createTween","Animation","tweeners","properties","stopped","prefilters","currentTime","tweens","opts","specialEasing","originalProperties","originalOptions","gotoEnd","propFilter","timer","anim","tweener","oldfire","propTween","restoreDisplay","isBox","dataShow","unqueued","prefilter","speed","speeds","fadeTo","animate","optall","doAnimation","finish","stopQueue","timers","cssFn","slideDown","slideUp","slideToggle","fadeIn","fadeToggle","slow","fast","time","timeout","checkOn","optSelected","radioValue","boolHook","removeAttr","nType","attrHooks","attrNames","lowercaseName","rfocusable","rclickable","stripAndCollapse","getClass","classesToArray","removeProp","propFix","tabindex","for","class","clazz","finalValue","curValue","stateVal","isValidValue","rreturn","valHooks","optionSet","focusin","stopPropagationCallback","rfocusMorph","onlyHandlers","bubbleType","ontype","lastElement","eventPath","parentWindow","simulate","triggerHandler","attaches","rquery","parseXML","parserErrorElem","rbracket","rCRLF","rsubmitterTypes","rsubmittable","param","traditional","valueOrFunction","encodeURIComponent","buildParams","serialize","serializeArray","r20","rhash","rantiCache","rheaders","rnoContent","rprotocol","transports","allTypes","originAnchor","addToPrefiltersOrTransports","structure","dataTypeExpression","dataType","dataTypes","inspectPrefiltersOrTransports","jqXHR","inspected","seekingTransport","inspect","prefilterOrFactory","dataTypeOrTransport","ajaxExtend","flatOptions","ajaxSettings","lastModified","etag","url","isLocal","protocol","processData","async","contentType","accepts","json","responseFields","converters","* text","text html","text json","text xml","ajaxSetup","settings","ajaxPrefilter","ajaxTransport","ajax","transport","cacheURL","responseHeadersString","responseHeaders","timeoutTimer","fireGlobals","uncached","callbackContext","globalEventContext","completeDeferred","_statusCode","statusCode","requestHeaders","requestHeadersNames","strAbort","getResponseHeader","getAllResponseHeaders","setRequestHeader","overrideMimeType","mimeType","status","abort","statusText","finalText","crossDomain","urlAnchor","hasContent","ifModified","headers","beforeSend","success","send","nativeStatusText","responses","isSuccess","ct","finalDataType","firstDataType","ajaxHandleResponses","conv2","conv","dataFilter","ajaxConvert","modified","getJSON","getScript","text script","wrapAll","wrapInner","htmlIsFunction","visible","xhr","XMLHttpRequest","xhrSuccessStatus","0","1223","xhrSupported","cors","_callback","errorCallback","username","xhrFields","onload","onerror","onabort","ontimeout","onreadystatechange","responseType","responseText","binary","_callback2","scriptAttrs","charset","scriptCharset","oldCallbacks","rjsonp","jsonp","jsonpCallback","originalSettings","callbackName","overwritten","responseContainer","jsonProp","createHTMLDocument","implementation","keepScripts","parsed","params","setOffset","curCSSTop","curTop","curOffset","curCSSLeft","curElem","curLeft","curPosition","using","parentOffset","scrollTo","Height","Width","","defaultExtra","funcName","unbind","delegate","undelegate","hover","fnOver","fnOut","proxy","holdReady","hold","parseJSON","isNumeric","_jQuery","_$","15","copyright","WeakMap","tt","nt","it","rt","st","ot","ft","ut","At","stat","noTargetGet","kt","Ot","forced","bt","Tt","Lt","zt","jt","Ct","_t","Mt","Nt","Rt","Wt","enforce","getterFor","unsafe","et","at","ht","dt","pt","vt","yt","mt","Et","xt","St","wt","normalize","NATIVE","POLYFILL","It","Bt","Dt","Pt","Ft","Vt","Ht","Xt","CSSRuleList","CSSStyleDeclaration","CSSValueList","ClientRectList","DOMRectList","DOMStringList","DOMTokenList","DataTransferItemList","FileList","HTMLAllCollection","HTMLCollection","HTMLFormElement","MediaList","MimeTypeArray","NamedNodeMap","NodeList","PaintRequestList","Plugin","PluginArray","SVGLengthList","SVGNumberList","SVGPathSegList","SVGPointList","SVGStringList","SVGTransformList","SourceBufferList","StyleSheetList","TextTrackCueList","TextTrackList","TouchList","qt","$t","Yt","Gt","Ut","foo","te","Qt","Kt","Jt","Zt","_ee","contentWindow","le","fe","he","pe","ve","me","ye","be","Ee","Ae","ge","IteratorPrototype","BUGGY_SAFARI_ITERATORS","xe","we","Se","Oe","ke","Te","entries","Le","ze","Re","kind","Arguments","Me","We","Ce","je","callee","Ne","Ie","Be","De","Pe","Fe","Ve","Xe","He","qe","$e","Ye","Ge","Ue","codeAt","Qe","Ke","Je","Ze","ar","isExtensible","er","objectID","weakData","REQUIRED","fastKey","getWeakData","onFreeze","rr","ir","nr","sr","_e2","or","cr","lr","ur","fr","return","getConstructor","setStrong","mr","frozen","xr","Er","gr","dr","pr","vr","yr","delete","Ar","wr","Sr","ActiveXObject","Or","kr","Tr","Lr","zr","Hr","Pr","Rr","_r","Mr","Cr","jr","Wr","Nr","Ir","Br","Dr","Fr","Vr","Xr","qr","Yr","$r","oi","Gr","Jr","Zr","ti","ei","ri","ii","ni","si","ai","ci","ui","fi","hi","di","pi","vi","gi","bi","yi","mi","xi","Ei","wi","Si","Oi","ki","IE_PROTO","Ai","Ti","Li","zi","Ri","Di","Mi","Ci","ji","Wi","Ni","Bi","__data__","Fi","Pi","Cache","Vi","Xi","Hi","qi","BORDER_BOX","CONTENT_BOX","DEVICE_PIXEL_CONTENT_BOX","Yi","Gi","inlineSize","blockSize","Qi","SVGElement","Ki","getBBox","Ji","sn","cn","tn","an","ownerSVGElement","nn","boxSizing","rn","writingMode","en","paddingTop","paddingBottom","borderRightWidth","borderLeftWidth","devicePixelContentBoxSize","borderBoxSize","contentBoxSize","contentRect","Ui","ln","un","dn","activeTargets","skippedTargets","observationTargets","pn","lastReportedSize","observedBox","hn","ErrorEvent","xn","Sn","bn","wn","kn","Tn","$i","toJSON","fromRect","Zi","vn","yn","characterData","mn","En","disconnect","On","An","Ln","connect","unobserve","zn","Rn","Mn","Cn","jn","Wn","Dn","Pn","Fn","Vn","In","Nn","lastIndex","Xn","Hn","ignoreCase","multiline","dotAll","unicode","sticky","Qn","Un","Kn","qn","$n","Yn","Gn","Jn","Zn","eo","ro","io","no","oo","so","ao","co","lo","onScroll","scrollXTicking","scrollX","scrollYTicking","scrollY","isOverflowing","showScrollbar","positionScrollbar","onMouseEnter","onMouseMove","mouseX","mouseY","forceVisible","onMouseMoveForAxis","onMouseLeave","onMouseLeaveForAxis","onWindowResize","getScrollbarWidth","hideNativeScrollbar","hideScrollbars","track","isWithinBounds","scrollbar","onPointerEvent","onDragStart","onTrackClick","drag","draggedAxis","sizeAttr","contentWrapperEl","scrollSizeAttr","elStyles","offsetAttr","dragOffset","isRtl","getRtlHelpers","isRtlScrollbarInverted","isRtlScrollingInverted","scrollOffsetAttr","onEndDrag","dragging","removePreventClickId","preventClick","minScrollbarWidth","offsetSizeAttr","overflowAttr","instances","recalculate","getOffset","initDOM","initListeners","wrapperEl","scrollableNode","contentWrapper","contentEl","contentNode","offsetEl","maskEl","mask","placeholderEl","findChild","heightAutoObserverWrapperEl","heightAutoObserverEl","horizontal","vertical","autoHide","capture","ResizeObserver","resizeObserver","mutationObserver","getScrollbarSize","toggleTrackVisibility","scrollbarMinSize","scrollbarMaxSize","clickOnTrack","clickOnTrackSpeed","getContentElement","getScrollElement","removeListeners","unMount","initDOMLoadedElements","removeObserver","globalObserver","initHtmlApi","handleMutations","getOptions","SimpleBar"],"mappings":"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"}